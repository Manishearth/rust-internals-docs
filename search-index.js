var searchIndex = {};
searchIndex["rustdoc"] = {"doc":"","items":[[5,"main","rustdoc","",null,{"inputs":[],"output":null}],[5,"opts","","",null,{"inputs":[],"output":{"name":"vec"}}],[5,"usage","","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"main_args","","",null,null],[0,"externalfiles","","",null,null],[3,"ExternalHtml","rustdoc::externalfiles","",null,null],[12,"in_header","","",0,null],[12,"before_content","","",0,null],[12,"after_content","","",0,null],[5,"load_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"load_external_files","","",null,null],[11,"clone","","",0,null],[11,"load","","",0,null],[0,"clean","rustdoc","This module contains the &quot;cleaned&quot; pieces of the AST, and the functions\nthat clean them.",null,null],[3,"Crate","rustdoc::clean","",null,null],[12,"name","","",1,null],[12,"src","","",1,null],[12,"module","","",1,null],[12,"externs","","",1,null],[12,"primitives","","",1,null],[12,"access_levels","","",1,null],[12,"external_traits","","",1,null],[3,"ExternalCrate","","",null,null],[12,"name","","",2,null],[12,"attrs","","",2,null],[12,"primitives","","",2,null],[3,"Item","","Anything with a source location and set of attributes and, optionally, a\nname. That is, anything that can be documented. This doesn&#39;t correspond\ndirectly to the AST&#39;s concept of an item; it&#39;s a strict superset.",null,null],[12,"source","","Stringified span",3,null],[12,"name","","Not everything has a name. E.g., impls",3,null],[12,"attrs","","",3,null],[12,"inner","","",3,null],[12,"visibility","","",3,null],[12,"def_id","","",3,null],[12,"stability","","",3,null],[12,"deprecation","","",3,null],[3,"Module","","",null,null],[12,"items","","",4,null],[12,"is_crate","","",4,null],[3,"TyParam","","",null,null],[12,"name","","",5,null],[12,"did","","",5,null],[12,"bounds","","",5,null],[12,"default","","",5,null],[3,"Lifetime","","",null,null],[3,"Generics","","",null,null],[12,"lifetimes","","",6,null],[12,"type_params","","",6,null],[12,"where_predicates","","",6,null],[3,"Method","","",null,null],[12,"generics","","",7,null],[12,"unsafety","","",7,null],[12,"constness","","",7,null],[12,"decl","","",7,null],[12,"abi","","",7,null],[3,"TyMethod","","",null,null],[12,"unsafety","","",8,null],[12,"decl","","",8,null],[12,"generics","","",8,null],[12,"abi","","",8,null],[3,"Function","","",null,null],[12,"decl","","",9,null],[12,"generics","","",9,null],[12,"unsafety","","",9,null],[12,"constness","","",9,null],[12,"abi","","",9,null],[3,"FnDecl","","",null,null],[12,"inputs","","",10,null],[12,"output","","",10,null],[12,"variadic","","",10,null],[12,"attrs","","",10,null],[3,"Arguments","","",null,null],[12,"values","","",11,null],[3,"Argument","","",null,null],[12,"type_","","",12,null],[12,"name","","",12,null],[12,"id","","",12,null],[3,"Trait","","",null,null],[12,"unsafety","","",13,null],[12,"items","","",13,null],[12,"generics","","",13,null],[12,"bounds","","",13,null],[3,"PolyTrait","","A trait reference, which may have higher ranked lifetimes.",null,null],[12,"trait_","","",14,null],[12,"lifetimes","","",14,null],[3,"Struct","","",null,null],[12,"struct_type","","",15,null],[12,"generics","","",15,null],[12,"fields","","",15,null],[12,"fields_stripped","","",15,null],[3,"VariantStruct","","This is a more limited form of the standard Struct, different in that\nit lacks the things most items have (name, id, parameterization). Found\nonly as a variant in an enum.",null,null],[12,"struct_type","","",16,null],[12,"fields","","",16,null],[12,"fields_stripped","","",16,null],[3,"Enum","","",null,null],[12,"variants","","",17,null],[12,"generics","","",17,null],[12,"variants_stripped","","",17,null],[3,"Variant","","",null,null],[12,"kind","","",18,null],[3,"Span","","",null,null],[12,"filename","","",19,null],[12,"loline","","",19,null],[12,"locol","","",19,null],[12,"hiline","","",19,null],[12,"hicol","","",19,null],[3,"Path","","",null,null],[12,"global","","",20,null],[12,"segments","","",20,null],[3,"PathSegment","","",null,null],[12,"name","","",21,null],[12,"params","","",21,null],[3,"Typedef","","",null,null],[12,"type_","","",22,null],[12,"generics","","",22,null],[3,"BareFunctionDecl","","",null,null],[12,"unsafety","","",23,null],[12,"generics","","",23,null],[12,"decl","","",23,null],[12,"abi","","",23,null],[3,"Static","","",null,null],[12,"type_","","",24,null],[12,"mutability","","",24,null],[12,"expr","","It&#39;s useful to have the value of a static documented, but I have no\ndesire to represent expressions (that&#39;d basically be all of the AST,\nwhich is huge!). So, have a string.",24,null],[3,"Constant","","",null,null],[12,"type_","","",25,null],[12,"expr","","",25,null],[3,"Impl","","",null,null],[12,"unsafety","","",26,null],[12,"generics","","",26,null],[12,"provided_trait_methods","","",26,null],[12,"trait_","","",26,null],[12,"for_","","",26,null],[12,"items","","",26,null],[12,"derived","","",26,null],[12,"polarity","","",26,null],[3,"DefaultImpl","","",null,null],[12,"unsafety","","",27,null],[12,"trait_","","",27,null],[3,"ImportSource","","",null,null],[12,"path","","",28,null],[12,"did","","",28,null],[3,"ViewListIdent","","",null,null],[12,"name","","",29,null],[12,"rename","","",29,null],[12,"source","","",29,null],[3,"Macro","","",null,null],[12,"source","","",30,null],[12,"imported_from","","",30,null],[3,"Stability","","",null,null],[12,"level","","",31,null],[12,"feature","","",31,null],[12,"since","","",31,null],[12,"deprecated_since","","",31,null],[12,"reason","","",31,null],[12,"issue","","",31,null],[3,"Deprecation","","",null,null],[12,"since","","",32,null],[12,"note","","",32,null],[3,"TypeBinding","","An equality constraint on an associated type, e.g. `A=Bar` in `Foo&lt;A=Bar&gt;`",null,null],[12,"name","","",33,null],[12,"ty","","",33,null],[4,"ItemEnum","","",null,null],[13,"ExternCrateItem","","",34,null],[13,"ImportItem","","",34,null],[13,"StructItem","","",34,null],[13,"EnumItem","","",34,null],[13,"FunctionItem","","",34,null],[13,"ModuleItem","","",34,null],[13,"TypedefItem","","",34,null],[13,"StaticItem","","",34,null],[13,"ConstantItem","","",34,null],[13,"TraitItem","","",34,null],[13,"ImplItem","","",34,null],[13,"TyMethodItem","","A method signature only. Used for required methods in traits (ie,\nnon-default-methods).",34,null],[13,"MethodItem","","A method with a body.",34,null],[13,"StructFieldItem","","",34,null],[13,"VariantItem","","",34,null],[13,"ForeignFunctionItem","","`fn`s from an extern block",34,null],[13,"ForeignStaticItem","","`static`s from an extern block",34,null],[13,"MacroItem","","",34,null],[13,"PrimitiveItem","","",34,null],[13,"AssociatedConstItem","","",34,null],[13,"AssociatedTypeItem","","",34,null],[13,"DefaultImplItem","","",34,null],[13,"StrippedItem","","An item that has been stripped by a rustdoc pass",34,null],[4,"Attribute","","",null,null],[13,"Word","","",35,null],[13,"List","","",35,null],[13,"NameValue","","",35,null],[4,"TyParamBound","","",null,null],[13,"RegionBound","","",36,null],[13,"TraitBound","","",36,null],[4,"WherePredicate","","",null,null],[13,"BoundPredicate","","",37,null],[12,"ty","rustdoc::clean::WherePredicate","",37,null],[12,"bounds","","",37,null],[13,"RegionPredicate","rustdoc::clean","",37,null],[12,"lifetime","rustdoc::clean::WherePredicate","",37,null],[12,"bounds","","",37,null],[13,"EqPredicate","rustdoc::clean","",37,null],[12,"lhs","rustdoc::clean::WherePredicate","",37,null],[12,"rhs","","",37,null],[4,"SelfTy","rustdoc::clean","",null,null],[13,"SelfValue","","",38,null],[13,"SelfBorrowed","","",38,null],[13,"SelfExplicit","","",38,null],[4,"FunctionRetTy","","",null,null],[13,"Return","","",39,null],[13,"DefaultReturn","","",39,null],[13,"NoReturn","","",39,null],[4,"Type","","A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\ntype out of the AST/TyCtxt given one of these, if more information is needed. Most importantly\nit does not preserve mutability or boxes.",null,null],[13,"ResolvedPath","","structs/enums/traits (most that&#39;d be an hir::TyPath)",40,null],[12,"path","rustdoc::clean::Type","",40,null],[12,"typarams","","",40,null],[12,"did","","",40,null],[12,"is_generic","","true if is a `T::Name` path for associated types",40,null],[13,"Generic","rustdoc::clean","For parameterized types, so the consumer of the JSON don&#39;t go\nlooking for types which don&#39;t exist anywhere.",40,null],[13,"Primitive","","Primitives are the fixed-size numeric types (plus int/usize/float), char,\narrays, slices, and tuples.",40,null],[13,"BareFunction","","extern &quot;ABI&quot; fn",40,null],[13,"Tuple","","",40,null],[13,"Vector","","",40,null],[13,"FixedVector","","",40,null],[13,"Bottom","","aka TyBot",40,null],[13,"Unique","","",40,null],[13,"RawPointer","","",40,null],[13,"BorrowedRef","","",40,null],[12,"lifetime","rustdoc::clean::Type","",40,null],[12,"mutability","","",40,null],[12,"type_","","",40,null],[13,"QPath","rustdoc::clean","",40,null],[12,"name","rustdoc::clean::Type","",40,null],[12,"self_type","","",40,null],[12,"trait_","","",40,null],[13,"Infer","rustdoc::clean","",40,null],[13,"PolyTraitRef","","",40,null],[4,"PrimitiveType","","",null,null],[13,"Isize","","",41,null],[13,"I8","","",41,null],[13,"I16","","",41,null],[13,"I32","","",41,null],[13,"I64","","",41,null],[13,"Usize","","",41,null],[13,"U8","","",41,null],[13,"U16","","",41,null],[13,"U32","","",41,null],[13,"U64","","",41,null],[13,"F32","","",41,null],[13,"F64","","",41,null],[13,"Char","","",41,null],[13,"Bool","","",41,null],[13,"Str","","",41,null],[13,"Slice","","",41,null],[13,"Array","","",41,null],[13,"PrimitiveTuple","","",41,null],[13,"PrimitiveRawPointer","","",41,null],[4,"TypeKind","","",null,null],[13,"TypeEnum","","",42,null],[13,"TypeFunction","","",42,null],[13,"TypeModule","","",42,null],[13,"TypeConst","","",42,null],[13,"TypeStatic","","",42,null],[13,"TypeStruct","","",42,null],[13,"TypeTrait","","",42,null],[13,"TypeVariant","","",42,null],[13,"TypeTypedef","","",42,null],[4,"Visibility","","",null,null],[13,"Public","","",43,null],[13,"Inherited","","",43,null],[4,"VariantKind","","",null,null],[13,"CLikeVariant","","",44,null],[13,"TupleVariant","","",44,null],[13,"StructVariant","","",44,null],[4,"PathParameters","","",null,null],[13,"AngleBracketed","","",45,null],[12,"lifetimes","rustdoc::clean::PathParameters","",45,null],[12,"types","","",45,null],[12,"bindings","","",45,null],[13,"Parenthesized","rustdoc::clean","",45,null],[12,"inputs","rustdoc::clean::PathParameters","",45,null],[12,"output","","",45,null],[4,"Mutability","rustdoc::clean","",null,null],[13,"Mutable","","",46,null],[13,"Immutable","","",46,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","",47,null],[13,"Negative","","",47,null],[4,"Import","","",null,null],[13,"SimpleImport","","",48,null],[13,"GlobImport","","",48,null],[13,"ImportList","","",48,null],[0,"inline","","Support for inlining external documentation into the current AST.",null,null],[5,"try_inline","rustdoc::clean::inline","Attempt to inline the definition of a local node id into this AST.",null,{"inputs":[{"name":"doccontext"},{"name":"nodeid"},{"name":"option"}],"output":{"name":"option"}}],[5,"load_attrs","","",null,{"inputs":[{"name":"doccontext"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"vec"}}],[5,"record_extern_fqn","","Record an external fully qualified name in the external_paths cache.",null,{"inputs":[{"name":"doccontext"},{"name":"defid"},{"name":"typekind"}],"output":null}],[5,"build_external_trait","","",null,{"inputs":[{"name":"doccontext"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"trait"}}],[5,"build_impls","","",null,{"inputs":[{"name":"doccontext"},{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"vec"}}],[5,"build_impl","","",null,{"inputs":[{"name":"doccontext"},{"name":"tyctxt"},{"name":"defid"},{"name":"vec"}],"output":null}],[8,"Clean","rustdoc::clean","",null,null],[10,"clean","","",49,null],[8,"Attributes","","",null,null],[10,"has_word","","",50,null],[10,"value","","",50,null],[10,"list","","",50,null],[8,"GetDefId","","",null,null],[10,"def_id","","",51,null],[11,"clean","rustc::ty::subst","",52,null],[11,"clean","syntax::ptr","",53,null],[11,"clean","alloc::rc","",54,null],[11,"clean","core::option","",55,null],[11,"clean","rustc::ty::sty","",56,null],[11,"clean","syntax::ptr","",53,null],[11,"fmt","rustdoc::clean","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,null],[11,"clone","","",3,null],[11,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding\nvalue found.",3,null],[11,"is_crate","","",3,null],[11,"is_mod","","",3,null],[11,"is_trait","","",3,null],[11,"is_struct","","",3,null],[11,"is_enum","","",3,null],[11,"is_fn","","",3,null],[11,"is_associated_type","","",3,null],[11,"is_associated_const","","",3,null],[11,"is_method","","",3,null],[11,"is_ty_method","","",3,null],[11,"is_stripped","","",3,null],[11,"has_stripped_fields","","",3,null],[11,"stability_class","","",3,null],[11,"stable_since","","",3,null],[11,"fmt","","",34,null],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,null],[11,"clone","","",35,null],[11,"clean","","",57,null],[11,"clean","","",58,null],[11,"name","","",35,null],[11,"value_str","","",35,null],[11,"meta_item_list","","",35,null],[11,"span","","",35,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"clone","","",5,null],[11,"clean","rustc::hir","",59,null],[11,"clean","rustc::ty","",60,null],[11,"fmt","rustdoc::clean","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,null],[11,"clone","","",36,null],[11,"clean","rustc::hir","",61,null],[11,"clean","rustc::ty::sty","",62,null],[11,"clean","","",63,null],[11,"clean","","",64,null],[11,"clean","rustc::ty::subst","",65,null],[11,"fmt","rustdoc::clean","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"clone","","",66,null],[11,"get_ref","","",66,null],[11,"statik","","",66,{"inputs":[],"output":{"name":"lifetime"}}],[11,"clean","rustc::hir","",67,null],[11,"clean","","",68,null],[11,"clean","rustc::ty","",69,null],[11,"clean","rustc::ty::sty","",70,null],[11,"fmt","rustdoc::clean","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,null],[11,"clone","","",37,null],[11,"clean","rustc::hir","",71,null],[11,"clean","rustc::ty","",72,null],[11,"clean","","",73,null],[11,"clean","","",74,null],[11,"clean","","",75,null],[11,"clean","","",75,null],[11,"clean","","",76,null],[11,"clean","rustc::ty::sty","",77,null],[11,"fmt","rustdoc::clean","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,null],[11,"clone","","",6,null],[11,"clean","rustc::hir","",78,null],[11,"fmt","rustdoc::clean","",7,null],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,null],[11,"clone","","",7,null],[11,"clean","rustc::hir","",79,null],[11,"fmt","rustdoc::clean","",8,null],[11,"decode","","",8,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,null],[11,"clone","","",8,null],[11,"clean","rustc::hir","",79,null],[11,"fmt","rustdoc::clean","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"clone","","",10,null],[11,"has_self","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,null],[11,"clone","","",11,null],[11,"clean","rustc::hir","",80,null],[11,"clean","rustc::ty::sty","",81,null],[11,"fmt","rustdoc::clean","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,null],[11,"clone","","",38,null],[11,"to_self","","",12,null],[11,"clean","rustc::hir","",82,null],[11,"fmt","rustdoc::clean","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,null],[11,"clone","","",39,null],[11,"clean","rustc::hir","",83,null],[11,"fmt","rustdoc::clean","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"clone","","",13,null],[11,"clean","rustc::hir","",84,null],[11,"clean","","",85,null],[11,"clean","","",86,null],[11,"clean","","",87,null],[11,"clean","rustc::ty","",88,null],[11,"clean","","",89,null],[11,"fmt","rustdoc::clean","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"eq","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"clone","","",42,null],[11,"def_id","core::option","",55,null],[11,"primitive_type","rustdoc::clean","",40,null],[11,"is_generic","","",40,null],[11,"def_id","","",40,null],[11,"to_string","","",41,null],[11,"to_url_str","","",41,null],[11,"to_def_index","","Creates a rustdoc-specific node id for primitive types.",41,null],[11,"clean","rustc::hir","",90,null],[11,"clean","rustdoc::clean","",91,null],[11,"clean","rustc::hir","",92,null],[11,"clean","rustc::ty","",93,null],[11,"fmt","rustdoc::clean","",43,null],[11,"encode","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",43,null],[11,"clone","","",43,null],[11,"clean","rustc::hir","",94,null],[11,"clean","rustc::ty","",95,null],[11,"fmt","rustdoc::clean","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,null],[11,"clone","","",16,null],[11,"clean","rustc::hir","",96,null],[11,"fmt","rustdoc::clean","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,null],[11,"clone","","",17,null],[11,"fmt","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,null],[11,"clone","","",18,null],[11,"clean","rustc::ty","",97,null],[11,"fmt","rustdoc::clean","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,null],[11,"clone","","",19,null],[11,"clean","syntax::codemap","",98,null],[11,"fmt","rustdoc::clean","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,null],[11,"clone","","",20,null],[11,"singleton","","",20,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"last_name","","",20,null],[11,"clean","rustc::hir","",99,null],[11,"fmt","rustdoc::clean","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"clone","","",45,null],[11,"clean","rustc::hir","",100,null],[11,"fmt","rustdoc::clean","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,null],[11,"clone","","",21,null],[11,"clean","rustc::hir","",101,null],[11,"clean","syntax::ast","",102,null],[11,"fmt","rustdoc::clean","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"clone","","",23,null],[11,"clean","rustc::hir","",103,null],[11,"fmt","rustdoc::clean","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,null],[11,"clone","","",25,null],[11,"eq","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"clean","rustc::hir","",104,null],[11,"fmt","rustdoc::clean","",47,null],[11,"eq","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"clone","","",47,null],[11,"clean","rustc::hir","",105,null],[11,"fmt","rustdoc::clean","",26,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",27,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",28,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"clone","","",29,null],[11,"clean","","",106,null],[11,"clean","rustc::hir","",107,null],[11,"clean","","",108,null],[11,"fmt","rustdoc::clean","",30,null],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"clone","","",30,null],[11,"fmt","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",32,null],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,null],[11,"clone","","",32,null],[11,"clean","syntax::attr","",109,null],[11,"clean","","",110,null],[11,"clean","rustc::ty","",111,null],[11,"clean","","",112,null],[11,"fmt","rustdoc::clean","",33,null],[11,"encode","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"clean","rustc::hir","",113,null],[0,"core","rustdoc","",null,null],[11,"filestem","rustc::session::config","",114,null],[11,"graph_id","rustc::cfg::graphviz","",115,null],[11,"node_id","","",115,null],[11,"node_label","","",115,null],[11,"edge_label","","",115,null],[11,"nodes","","",115,null],[11,"edges","","",115,null],[11,"source","","",115,null],[11,"target","","",115,null],[11,"eq","rustc::cfg","",116,null],[11,"ne","","",116,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"id","","",116,null],[11,"fmt","","",117,null],[11,"new","","",118,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",118,null],[11,"decode","rustc::dep_graph::dep_node","",119,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",119,null],[11,"hash","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"from_label_string","","Used in testing",119,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",119,null],[11,"new","rustc::dep_graph::dep_tracking_map","",120,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",120,null],[11,"insert","","",120,null],[11,"contains_key","","",120,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",121,null],[11,"index","rustc::dep_graph::dep_tracking_map","",120,null],[11,"clone","rustc::dep_graph::graph","",122,null],[11,"new","","",122,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",122,null],[11,"query","","",122,null],[11,"in_ignore","","",122,null],[11,"in_task","","",122,null],[11,"with_ignore","","",122,null],[11,"with_task","","",122,null],[11,"read","","",122,null],[11,"write","","",122,null],[11,"new","rustc::dep_graph::query","",123,null],[11,"contains_node","","",123,null],[11,"nodes","","",123,null],[11,"edges","","",123,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",123,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",123,null],[11,"fmt","rustc::hir::def","",124,null],[11,"hash","","",124,null],[11,"decode","","",124,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"clone","","",124,null],[11,"fmt","","",125,null],[11,"clone","","",125,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",125,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",125,null],[11,"new","","",125,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",126,null],[11,"var_id","","",124,null],[11,"def_id","","",124,null],[11,"variant_def_ids","","",124,null],[11,"kind_name","","",124,null],[11,"hash","rustc::hir::def_id","",127,null],[11,"decode","","",127,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",127,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"partial_cmp","","",127,null],[11,"lt","","",127,null],[11,"le","","",127,null],[11,"gt","","",127,null],[11,"ge","","",127,null],[11,"cmp","","",127,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"new","","",127,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",127,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",127,null],[11,"as_u32","","",127,null],[11,"hash","","",128,null],[11,"decode","","",128,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"partial_cmp","","",128,null],[11,"lt","","",128,null],[11,"le","","",128,null],[11,"gt","","",128,null],[11,"ge","","",128,null],[11,"cmp","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"local","","",128,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",128,null],[11,"eq","rustc::hir::intravisit","",129,null],[11,"ne","","",129,null],[11,"clone","","",129,null],[11,"attrs","","",129,null],[11,"fmt","","",130,null],[11,"decode","","",130,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",130,null],[11,"clone","","",130,null],[11,"max","","",130,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",130,null],[11,"add","","",130,null],[11,"new","","",131,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",131,null],[11,"visit_id","","",131,null],[11,"new","","",132,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",132,null],[11,"visit_foreign_item","","",132,null],[11,"visit_item","","",132,null],[11,"visit_local","","",132,null],[11,"visit_block","","",132,null],[11,"visit_stmt","","",132,null],[11,"visit_pat","","",132,null],[11,"visit_expr","","",132,null],[11,"visit_ty","","",132,null],[11,"visit_generics","","",132,null],[11,"visit_fn","","",132,null],[11,"visit_struct_field","","",132,null],[11,"visit_variant_data","","",132,null],[11,"visit_trait_item","","",132,null],[11,"visit_impl_item","","",132,null],[11,"visit_lifetime","","",132,null],[11,"visit_lifetime_def","","",132,null],[11,"visit_trait_ref","","",132,null],[11,"resolve_generated_global_path","rustc::hir::lowering","",133,null],[11,"get_resolution","","",133,null],[11,"record_resolution","","",133,null],[11,"definitions","","",133,null],[11,"testing_context","","",134,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"loweringcontext"}}],[11,"lower_item","","",134,null],[11,"clone","rustc::hir::map::blocks","",135,null],[11,"is_fn_like","rustc::hir","",136,null],[11,"is_fn_like","","",86,null],[11,"is_fn_like","","",137,null],[11,"clone","rustc::hir::map::blocks","",138,null],[11,"id","","",138,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",138,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",135,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",135,null],[11,"body","","",135,null],[11,"decl","","",135,null],[11,"span","","",135,null],[11,"id","","",135,null],[11,"kind","","",135,null],[11,"clone","rustc::hir::map::definitions","",139,null],[11,"decode","","",140,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",140,null],[11,"hash","","",140,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"fmt","","",140,null],[11,"clone","","",140,null],[11,"decode","","",141,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",141,null],[11,"hash","","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"decode","","",143,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",143,null],[11,"hash","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"is_local","","",143,null],[11,"make","","",143,{"inputs":[{"name":"u32"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",144,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",144,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[11,"decode","","",145,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",145,null],[11,"hash","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"new","","",139,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",139,null],[11,"def_key","","",139,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",139,null],[11,"opt_def_index","","",139,null],[11,"opt_local_def_id","","",139,null],[11,"local_def_id","","",139,null],[11,"as_local_node_id","","",139,null],[11,"retrace_path","","",139,null],[11,"create_def_with_parent","","",139,null],[11,"as_interned_str","","",145,null],[11,"to_string","","",145,null],[11,"fmt","rustc::hir::map","",146,null],[11,"clone","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"new","","",148,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",148,null],[11,"clone","","",149,null],[11,"num_local_def_ids","","",149,null],[11,"def_key","","",149,null],[11,"def_path_from_id","","",149,null],[11,"def_path","","",149,null],[11,"retrace_path","","",149,null],[11,"local_def_id","","",149,null],[11,"opt_local_def_id","","",149,null],[11,"as_local_node_id","","",149,null],[11,"krate","","",149,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",149,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",149,null],[11,"get_if_local","","",149,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",149,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",149,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",149,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",149,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",149,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",149,null],[11,"get_parent_did","","",149,null],[11,"get_foreign_abi","","",149,null],[11,"expect_item","","",149,null],[11,"expect_trait_item","","",149,null],[11,"expect_struct","","",149,null],[11,"expect_variant","","",149,null],[11,"expect_foreign_item","","",149,null],[11,"expect_expr","","",149,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",149,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",149,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",149,null],[11,"opt_span","","",149,null],[11,"span","","",149,null],[11,"span_if_local","","",149,null],[11,"def_id_span","","",149,null],[11,"node_to_string","","",149,null],[11,"node_to_user_string","","",149,null],[11,"next","","",150,null],[11,"print_node","rustc::hir::print","",151,null],[11,"clone","","",152,null],[11,"writer","","",151,null],[11,"boxes","","",151,null],[11,"comments","","",151,null],[11,"cur_cmnt_and_lit","","",151,null],[11,"literals","","",151,null],[11,"new_from_input","","",151,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",151,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",151,null],[11,"nbsp","","",151,null],[11,"word_nbsp","","",151,null],[11,"head","","",151,null],[11,"bopen","","",151,null],[11,"bclose_","","",151,null],[11,"bclose_maybe_open","","",151,null],[11,"bclose","","",151,null],[11,"in_cbox","","",151,null],[11,"space_if_not_bol","","",151,null],[11,"break_offset_if_not_bol","","",151,null],[11,"synth_comment","","",151,null],[11,"commasep_cmnt","","",151,null],[11,"commasep_exprs","","",151,null],[11,"print_mod","","",151,null],[11,"print_foreign_mod","","",151,null],[11,"print_opt_lifetime","","",151,null],[11,"print_type","","",151,null],[11,"print_foreign_item","","",151,null],[11,"print_item_id","","",151,null],[11,"print_item","","Pretty-print an item",151,null],[11,"print_enum_def","","",151,null],[11,"print_variants","","",151,null],[11,"print_visibility","","",151,null],[11,"print_struct","","",151,null],[11,"print_variant","","",151,null],[11,"print_method_sig","","",151,null],[11,"print_trait_item","","",151,null],[11,"print_impl_item","","",151,null],[11,"print_stmt","","",151,null],[11,"print_block","","",151,null],[11,"print_block_unclosed","","",151,null],[11,"print_block_unclosed_indent","","",151,null],[11,"print_block_with_attrs","","",151,null],[11,"print_block_maybe_unclosed","","",151,null],[11,"print_if","","",151,null],[11,"print_if_let","","",151,null],[11,"print_expr_maybe_paren","","",151,null],[11,"print_expr","","",151,null],[11,"print_local_decl","","",151,null],[11,"print_decl","","",151,null],[11,"print_usize","","",151,null],[11,"print_name","","",151,null],[11,"print_for_decl","","",151,null],[11,"print_pat","","",151,null],[11,"print_fn","","",151,null],[11,"print_fn_args_and_ret","","",151,null],[11,"print_fn_block_args","","",151,null],[11,"print_capture_clause","","",151,null],[11,"print_bounds","","",151,null],[11,"print_lifetime","","",151,null],[11,"print_lifetime_def","","",151,null],[11,"print_generics","","",151,null],[11,"print_ty_param","","",151,null],[11,"print_where_clause","","",151,null],[11,"print_view_path","","",151,null],[11,"print_mutability","","",151,null],[11,"print_mt","","",151,null],[11,"print_arg","","",151,null],[11,"print_fn_output","","",151,null],[11,"print_ty_fn","","",151,null],[11,"maybe_print_trailing_comment","","",151,null],[11,"print_remaining_comments","","",151,null],[11,"print_opt_abi_and_extern_if_nondefault","","",151,null],[11,"print_extern_opt_abi","","",151,null],[11,"print_fn_header_info","","",151,null],[11,"print_unsafety","","",151,null],[11,"fmt","rustc::hir::svh","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"hash","","",153,null],[11,"clone","","",153,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",153,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",153,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",153,null],[11,"fmt","","",153,null],[11,"hash","rustc::hir","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",99,null],[11,"fmt","","",99,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",99,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"none","","",100,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",100,null],[11,"has_lifetimes","","",100,null],[11,"has_types","","",100,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",100,null],[11,"lifetimes","","",100,null],[11,"bindings","","",100,null],[11,"fmt","","",154,null],[11,"hash","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"hash","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",156,null],[11,"hash","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",156,null],[11,"eq","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"empty","","",78,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",78,null],[11,"is_type_parameterized","","",78,null],[11,"is_parameterized","","",78,null],[11,"fmt","","",157,null],[11,"hash","","",157,null],[11,"decode","","",157,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",158,null],[11,"hash","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"hash","","",159,null],[11,"decode","","",159,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"hash","","",160,null],[11,"decode","","",160,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",161,null],[11,"decode","","",161,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"clone","","",161,null],[11,"item","","",161,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",161,null],[11,"fmt","","",162,null],[11,"hash","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"clone","","",162,null],[11,"fmt","","",163,null],[11,"hash","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"hash","","",164,null],[11,"decode","","",164,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"clone","","",164,null],[11,"fmt","","",164,null],[11,"walk","","",164,null],[11,"fmt","","",165,null],[11,"hash","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"clone","","",165,null],[11,"fmt","","",166,null],[11,"hash","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"clone","","",166,null],[11,"fmt","","",167,null],[11,"hash","","",167,null],[11,"decode","","",167,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"clone","","",167,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",168,null],[11,"hash","","",168,null],[11,"decode","","",168,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",168,null],[11,"eq","","",168,null],[11,"clone","","",168,null],[11,"as_str","","",168,null],[11,"is_lazy","","",168,null],[11,"is_shift","","",168,null],[11,"is_comparison","","",168,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",168,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"decode","","",169,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",169,null],[11,"eq","","",169,null],[11,"clone","","",169,null],[11,"as_str","","",169,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",169,null],[11,"fmt","","",170,null],[11,"hash","","",170,null],[11,"decode","","",170,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",170,null],[11,"eq","","",170,null],[11,"ne","","",170,null],[11,"clone","","",170,null],[11,"attrs","","",170,null],[11,"id","","",170,null],[11,"fmt","","",171,null],[11,"hash","","",171,null],[11,"decode","","",171,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",171,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"clone","","",171,null],[11,"fmt","","",172,null],[11,"hash","","",172,null],[11,"decode","","",172,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",172,null],[11,"eq","","",172,null],[11,"ne","","",172,null],[11,"clone","","",172,null],[11,"attrs","","",172,null],[11,"fmt","","",173,null],[11,"hash","","",173,null],[11,"decode","","",173,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",173,null],[11,"eq","","",173,null],[11,"ne","","",173,null],[11,"clone","","",173,null],[11,"fmt","","",174,null],[11,"hash","","",174,null],[11,"decode","","",174,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[11,"fmt","","",175,null],[11,"hash","","",175,null],[11,"decode","","",175,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"clone","","",175,null],[11,"fmt","","",176,null],[11,"hash","","",176,null],[11,"decode","","",176,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",176,null],[11,"eq","","",176,null],[11,"clone","","",176,null],[11,"hash","","",137,null],[11,"decode","","",137,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"clone","","",137,null],[11,"fmt","","",137,null],[11,"fmt","","",177,null],[11,"hash","","",177,null],[11,"decode","","",177,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",177,null],[11,"eq","","",177,null],[11,"ne","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"hash","","",178,null],[11,"decode","","",178,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",178,null],[11,"eq","","",178,null],[11,"ne","","",178,null],[11,"clone","","",178,null],[11,"fmt","","",179,null],[11,"hash","","",179,null],[11,"decode","","",179,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",179,null],[11,"eq","","",179,null],[11,"ne","","",179,null],[11,"clone","","",179,null],[11,"fmt","","",180,null],[11,"hash","","",180,null],[11,"decode","","",180,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",180,null],[11,"eq","","",180,null],[11,"clone","","",180,null],[11,"fmt","","",181,null],[11,"hash","","",181,null],[11,"decode","","",181,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,null],[11,"eq","","",181,null],[11,"ne","","",181,null],[11,"clone","","",181,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",182,null],[11,"hash","","",182,null],[11,"decode","","",182,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",182,null],[11,"eq","","",182,null],[11,"ne","","",182,null],[11,"clone","","",182,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",183,null],[11,"hash","","",183,null],[11,"decode","","",183,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"fmt","","",113,null],[11,"hash","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"clone","","",113,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",90,null],[11,"fmt","","",184,null],[11,"hash","","",184,null],[11,"decode","","",184,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",185,null],[11,"hash","","",185,null],[11,"decode","","",185,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",185,null],[11,"eq","","",185,null],[11,"ne","","",185,null],[11,"clone","","",185,null],[11,"fmt","","",186,null],[11,"hash","","",186,null],[11,"decode","","",186,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",186,null],[11,"eq","","",186,null],[11,"ne","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",187,null],[11,"hash","","",187,null],[11,"decode","","",187,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",188,null],[11,"hash","","",188,null],[11,"decode","","",188,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"clone","","",188,null],[11,"to_self","","",82,null],[11,"is_self","","",82,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"has_self","","",80,null],[11,"fmt","","",189,null],[11,"hash","","",189,null],[11,"decode","","",189,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",189,null],[11,"eq","","",189,null],[11,"clone","","",189,null],[11,"fmt","","",190,null],[11,"hash","","",190,null],[11,"decode","","",190,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",190,null],[11,"eq","","",190,null],[11,"clone","","",190,null],[11,"fmt","","",191,null],[11,"hash","","",191,null],[11,"decode","","",191,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",191,null],[11,"eq","","",191,null],[11,"clone","","",191,null],[11,"is_final","","",191,null],[11,"is_default","","",191,null],[11,"fmt","","",189,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",105,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"span","","",83,null],[11,"fmt","","",192,null],[11,"hash","","",192,null],[11,"decode","","",192,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",192,null],[11,"eq","","",192,null],[11,"ne","","",192,null],[11,"clone","","",192,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"fmt","","",193,null],[11,"hash","","",193,null],[11,"decode","","",193,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",193,null],[11,"eq","","",193,null],[11,"ne","","",193,null],[11,"clone","","",193,null],[11,"fmt","","",194,null],[11,"hash","","",194,null],[11,"decode","","",194,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",194,null],[11,"eq","","",194,null],[11,"ne","","",194,null],[11,"clone","","",194,null],[11,"fmt","","",195,null],[11,"hash","","",195,null],[11,"decode","","",195,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",195,null],[11,"eq","","",195,null],[11,"ne","","",195,null],[11,"clone","","",195,null],[11,"id","","",195,null],[11,"name","","",195,null],[11,"rename","","",195,null],[11,"fmt","","",196,null],[11,"hash","","",196,null],[11,"decode","","",196,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",196,null],[11,"eq","","",196,null],[11,"ne","","",196,null],[11,"clone","","",196,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"clone","","",92,null],[11,"is_positional","","",92,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"clone","","",96,null],[11,"fields","","",96,null],[11,"id","","",96,null],[11,"is_struct","","",96,null],[11,"is_tuple","","",96,null],[11,"is_unit","","",96,null],[11,"fmt","","",197,null],[11,"hash","","",197,null],[11,"decode","","",197,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",197,null],[11,"eq","","",197,null],[11,"ne","","",197,null],[11,"clone","","",197,null],[11,"fmt","","",136,null],[11,"hash","","",136,null],[11,"decode","","",136,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",136,null],[11,"eq","","",136,null],[11,"ne","","",136,null],[11,"clone","","",136,null],[11,"fmt","","",198,null],[11,"hash","","",198,null],[11,"decode","","",198,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",198,null],[11,"eq","","",198,null],[11,"ne","","",198,null],[11,"clone","","",198,null],[11,"descriptive_variant","","",198,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",199,null],[11,"hash","","",199,null],[11,"decode","","",199,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",199,null],[11,"eq","","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"descriptive_variant","","",199,null],[11,"decode","","",200,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",200,null],[11,"clone","","",200,null],[11,"clone","","",201,null],[11,"new","rustc::infer::bivariate","",202,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",202,null],[11,"tcx","","",202,null],[11,"a_is_expected","","",202,null],[11,"relate_with_variance","","",202,null],[11,"tys","","",202,null],[11,"regions","","",202,null],[11,"binders","","",202,null],[11,"clone","rustc::infer::combine","",203,null],[11,"super_combine_tys","rustc::infer","",204,null],[11,"tcx","rustc::infer::combine","",203,null],[11,"switch_expected","","",203,null],[11,"equate","","",203,null],[11,"bivariate","","",203,null],[11,"sub","","",203,null],[11,"lub","","",203,null],[11,"glb","","",203,null],[11,"instantiate","","",203,null],[11,"compare","core::result","",205,null],[11,"new","rustc::infer::equate","",206,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",206,null],[11,"tag","","",206,null],[11,"tcx","","",206,null],[11,"a_is_expected","","",206,null],[11,"relate_with_variance","","",206,null],[11,"tys","","",206,null],[11,"regions","","",206,null],[11,"binders","","",206,null],[11,"note_and_explain_region","rustc::ty::context","",207,null],[11,"report_region_errors","rustc::infer","",204,null],[11,"report_and_explain_type_error","","",204,null],[11,"resolve","rustc::ty::sty","",64,null],[11,"resolve","","",56,null],[11,"new","rustc::infer::glb","",208,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",208,null],[11,"tag","","",208,null],[11,"tcx","","",208,null],[11,"a_is_expected","","",208,null],[11,"relate_with_variance","","",208,null],[11,"tys","","",208,null],[11,"regions","","",208,null],[11,"binders","","",208,null],[11,"infcx","","",208,null],[11,"relate_bound","","",208,null],[11,"higher_ranked_sub","rustc::infer::combine","",203,null],[11,"higher_ranked_lub","","",203,null],[11,"higher_ranked_glb","","",203,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",204,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",204,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",204,null],[11,"new","rustc::infer::lub","",209,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",209,null],[11,"tag","","",209,null],[11,"tcx","","",209,null],[11,"a_is_expected","","",209,null],[11,"relate_with_variance","","",209,null],[11,"tys","","",209,null],[11,"regions","","",209,null],[11,"binders","","",209,null],[11,"infcx","","",209,null],[11,"relate_bound","","",209,null],[11,"fmt","rustc::infer::region_inference","",210,null],[11,"hash","","",210,null],[11,"eq","","",210,null],[11,"ne","","",210,null],[11,"clone","","",210,null],[11,"eq","","",211,null],[11,"ne","","",211,null],[11,"clone","","",211,null],[11,"fmt","","",212,null],[11,"hash","","",213,null],[11,"eq","","",213,null],[11,"ne","","",213,null],[11,"clone","","",213,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"clone","","",214,null],[11,"eq","","",215,null],[11,"clone","","",215,null],[11,"fmt","","",216,null],[11,"clone","","",216,null],[11,"fmt","","",217,null],[11,"clone","","",217,null],[11,"fmt","","",218,null],[11,"clone","","",218,null],[11,"contains","","",218,null],[11,"push","","",218,null],[11,"new","","",219,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",219,null],[11,"commit","","",219,null],[11,"rollback_to","","",219,null],[11,"num_vars","","",219,null],[11,"new_region_var","","",219,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",219,null],[11,"new_bound","","",219,null],[11,"add_given","","",219,null],[11,"make_eqregion","","",219,null],[11,"make_subregion","","",219,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",219,null],[11,"lub_regions","","",219,null],[11,"glb_regions","","",219,null],[11,"resolve_var","","",219,null],[11,"opportunistic_resolve_var","","",219,null],[11,"combine_vars","","",219,null],[11,"vars_created_since_snapshot","","",219,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",219,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",219,null],[11,"fmt","","",220,null],[11,"clone","","",220,null],[11,"fmt","","",221,null],[11,"fmt","","",222,null],[11,"fmt","","",211,null],[11,"fmt","","",211,null],[11,"to_ty","","",211,null],[11,"must_hold","","",212,null],[11,"cannot_hold","","",212,null],[11,"or","","",212,null],[11,"and","","",212,null],[11,"new","rustc::infer::resolve","",223,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictyperesolver"}}],[11,"tcx","","",223,null],[11,"fold_ty","","",223,null],[11,"new","","",224,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictypeandregionresolver"}}],[11,"tcx","","",224,null],[11,"fold_ty","","",224,null],[11,"fold_region","","",224,null],[11,"new","rustc::infer::freshen","",225,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",225,null],[11,"fold_region","","",225,null],[11,"fold_ty","","",225,null],[11,"new","rustc::infer::sub","",226,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",226,null],[11,"tag","","",226,null],[11,"tcx","","",226,null],[11,"a_is_expected","","",226,null],[11,"with_cause","","",226,null],[11,"relate_with_variance","","",226,null],[11,"tys","","",226,null],[11,"regions","","",226,null],[11,"binders","","",226,null],[11,"hash","rustc::infer::type_variable","",227,null],[11,"eq","","",227,null],[11,"ne","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"fmt","","",228,null],[11,"hash","","",228,null],[11,"eq","","",228,null],[11,"clone","","",228,null],[11,"new","","",229,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",229,null],[11,"var_diverges","","",229,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",229,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",229,null],[11,"new_var","","",229,null],[11,"root_var","","",229,null],[11,"probe","","",229,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",229,null],[11,"replace_if_possible","","",229,null],[11,"snapshot","","",229,null],[11,"rollback_to","","",229,null],[11,"commit","","",229,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",229,null],[11,"unsolved_variables","","",229,null],[11,"index","rustc::ty::sty","",230,null],[11,"from_index","","",230,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",230,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"fmt","rustc::infer::unify_key","",231,null],[11,"clone","","",231,null],[11,"eq","","",231,null],[11,"ne","","",231,null],[11,"combine","","",231,null],[11,"index","rustc::ty::sty","",232,null],[11,"from_index","","",232,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",232,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","rustc::ty","",233,null],[11,"index","rustc::ty::sty","",234,null],[11,"from_index","","",234,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",234,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","syntax::ast","",235,null],[11,"index","rustc::ty::sty","",236,null],[11,"from_index","","",236,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",236,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"clone","rustc::infer","",237,null],[11,"borrow","","",237,null],[11,"borrow_mut","","",237,null],[11,"fmt","","",238,null],[11,"clone","","",238,null],[11,"fmt","","",238,null],[11,"fmt","","",239,null],[11,"clone","","",239,null],[11,"clone","","",240,null],[11,"fmt","","",241,null],[11,"clone","","",241,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"fmt","","",244,null],[11,"clone","","",244,null],[11,"fmt","","",245,null],[11,"clone","","",245,null],[11,"fmt","","",245,null],[11,"infer_ctxt","rustc::ty::context","",207,null],[11,"normalizing_infer_ctxt","","",207,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",207,null],[11,"enter","rustc::infer","",246,null],[11,"trans_normalize","rustc::ty::sty","",247,null],[11,"trans_normalize","","",81,null],[11,"trans_normalize","","",248,null],[11,"trans_normalize","","",56,null],[11,"trans_normalize","rustc::mir::tcx","",249,null],[11,"normalize_associated_type","rustc::ty::context","",207,null],[11,"drain_fulfillment_cx_or_panic","rustc::infer","",204,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",204,null],[11,"projection_mode","","",204,null],[11,"freshen","","",204,null],[11,"type_var_diverges","","",204,null],[11,"freshener","","",204,null],[11,"type_is_unconstrained_numeric","","",204,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",204,null],[11,"unsolved_variables","","",204,null],[11,"equate","","",204,null],[11,"sub","","",204,null],[11,"lub","","",204,null],[11,"glb","","",204,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",204,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",204,null],[11,"in_snapshot","","",204,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",204,null],[11,"probe","","Execute `f` then unroll any bindings it creates",204,null],[11,"add_given","","",204,null],[11,"sub_types","","",204,null],[11,"can_sub_types","","",204,null],[11,"eq_types","","",204,null],[11,"eq_trait_refs","","",204,null],[11,"eq_impl_headers","","",204,null],[11,"sub_poly_trait_refs","","",204,null],[11,"sub_regions","","",204,null],[11,"equality_predicate","","",204,null],[11,"region_outlives_predicate","","",204,null],[11,"next_ty_var_id","","",204,null],[11,"next_ty_var","","",204,null],[11,"next_ty_var_with_default","","",204,null],[11,"next_diverging_ty_var","","",204,null],[11,"next_ty_vars","","",204,null],[11,"next_int_var_id","","",204,null],[11,"next_float_var_id","","",204,null],[11,"next_region_var","","",204,null],[11,"region_vars_for_defs","","",204,null],[11,"type_vars_for_defs","","",204,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",204,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",204,null],[11,"fresh_bound_region","","",204,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",204,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",204,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",204,null],[11,"node_type","","",204,null],[11,"expr_ty","","",204,null],[11,"resolve_regions_and_report_errors","","",204,null],[11,"ty_to_string","","",204,null],[11,"tys_to_string","","",204,null],[11,"trait_ref_to_string","","",204,null],[11,"shallow_resolve","","",204,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",204,null],[11,"resolve_type_and_region_vars_if_possible","","",204,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",204,null],[11,"type_error_message_str","","",204,null],[11,"type_error_struct_str","","",204,null],[11,"type_error_message_str_with_expected","","",204,null],[11,"type_error_struct_str_with_expected","","",204,null],[11,"type_error_message","","",204,null],[11,"type_error_struct","","",204,null],[11,"report_mismatched_types","","",204,null],[11,"report_conflicting_default_types","","",204,null],[11,"replace_late_bound_regions_with_fresh_var","","",204,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",204,null],[11,"can_equate","","",204,null],[11,"node_ty","","",204,null],[11,"expr_ty_adjusted","","",204,null],[11,"type_moves_by_default","","",204,null],[11,"node_method_ty","","",204,null],[11,"node_method_id","","",204,null],[11,"adjustments","","",204,null],[11,"is_method_call","","",204,null],[11,"temporary_scope","","",204,null],[11,"upvar_capture","","",204,null],[11,"param_env","","",204,null],[11,"closure_kind","","",204,null],[11,"closure_type","","",204,null],[11,"span","","",240,null],[11,"types","","",240,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"tys"},{"name":"tys"}],"output":{"name":"typetrace"}}],[11,"dummy","","",240,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",240,null],[11,"span","","",238,null],[11,"span","","",241,null],[11,"span","","",244,null],[11,"fmt","rustc::lint","",250,null],[11,"clone","","",250,null],[11,"name_lower","","Get the lint&#39;s name, with ASCII letters converted to lowercase.",250,null],[11,"fmt","","",251,null],[11,"clone","","",251,null],[11,"eq","","",251,null],[11,"hash","","",251,null],[11,"of","","Get the `LintId` for a `Lint`.",251,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",251,null],[11,"fmt","","",252,null],[11,"cmp","","",252,null],[11,"partial_cmp","","",252,null],[11,"eq","","",252,null],[11,"clone","","",252,null],[11,"as_str","","Convert a level to a lower-case string.",252,null],[11,"from_str","","Convert a lower-case string to a level.",252,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",253,null],[11,"ne","","",253,null],[11,"clone","","",253,null],[11,"clone","rustc::lint::builtin","",254,null],[11,"get_lints","","",254,null],[11,"new","rustc::lint::context","",255,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",255,null],[11,"get_lint_groups","","",255,null],[11,"register_early_pass","","",255,null],[11,"register_late_pass","","",255,null],[11,"register_future_incompatible","","",255,null],[11,"future_incompatible","","",255,null],[11,"register_group","","",255,null],[11,"register_renamed","","",255,null],[11,"register_removed","","",255,null],[11,"process_command_line","","",255,null],[11,"sess","","Get the overall compiler `Session` object.",256,null],[11,"lints","","",256,null],[11,"mut_lints","","",256,null],[11,"level_stack","","",256,null],[11,"enter_attrs","","",256,null],[11,"exit_attrs","","",256,null],[11,"sess","","Get the overall compiler `Session` object.",257,null],[11,"lints","","",257,null],[11,"mut_lints","","",257,null],[11,"level_stack","","",257,null],[11,"enter_attrs","","",257,null],[11,"exit_attrs","","",257,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",256,null],[11,"visit_item","","",256,null],[11,"visit_foreign_item","","",256,null],[11,"visit_pat","","",256,null],[11,"visit_expr","","",256,null],[11,"visit_stmt","","",256,null],[11,"visit_fn","","",256,null],[11,"visit_variant_data","","",256,null],[11,"visit_struct_field","","",256,null],[11,"visit_variant","","",256,null],[11,"visit_ty","","",256,null],[11,"visit_name","","",256,null],[11,"visit_mod","","",256,null],[11,"visit_local","","",256,null],[11,"visit_block","","",256,null],[11,"visit_arm","","",256,null],[11,"visit_decl","","",256,null],[11,"visit_expr_post","","",256,null],[11,"visit_generics","","",256,null],[11,"visit_trait_item","","",256,null],[11,"visit_impl_item","","",256,null],[11,"visit_lifetime","","",256,null],[11,"visit_lifetime_def","","",256,null],[11,"visit_path","","",256,null],[11,"visit_path_list_item","","",256,null],[11,"visit_attribute","","",256,null],[11,"visit_item","","",257,null],[11,"visit_foreign_item","","",257,null],[11,"visit_pat","","",257,null],[11,"visit_expr","","",257,null],[11,"visit_stmt","","",257,null],[11,"visit_fn","","",257,null],[11,"visit_variant_data","","",257,null],[11,"visit_struct_field","","",257,null],[11,"visit_variant","","",257,null],[11,"visit_ty","","",257,null],[11,"visit_ident","","",257,null],[11,"visit_mod","","",257,null],[11,"visit_local","","",257,null],[11,"visit_block","","",257,null],[11,"visit_arm","","",257,null],[11,"visit_decl","","",257,null],[11,"visit_expr_post","","",257,null],[11,"visit_generics","","",257,null],[11,"visit_trait_item","","",257,null],[11,"visit_impl_item","","",257,null],[11,"visit_lifetime","","",257,null],[11,"visit_lifetime_def","","",257,null],[11,"visit_explicit_self","","",257,null],[11,"visit_path","","",257,null],[11,"visit_path_list_item","","",257,null],[11,"visit_attribute","","",257,null],[11,"visit_id","","",256,null],[11,"get_lints","","",258,null],[11,"check_item","","",258,null],[11,"prohibit_type_params","rustc::ty::context","",207,null],[11,"prohibit_projection","","",207,null],[11,"prim_ty_to_ty","","",207,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",207,null],[11,"fmt","rustc::middle::expr_use_visitor","",259,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"clone","","",259,null],[11,"fmt","","",260,null],[11,"eq","","",260,null],[11,"ne","","",260,null],[11,"clone","","",260,null],[11,"fmt","","",261,null],[11,"eq","","",261,null],[11,"clone","","",261,null],[11,"fmt","","",262,null],[11,"eq","","",262,null],[11,"clone","","",262,null],[11,"fmt","","",263,null],[11,"eq","","",263,null],[11,"clone","","",263,null],[11,"new","","",264,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"walk_fn","","",264,null],[11,"consume_expr","","",264,null],[11,"walk_expr","","",264,null],[11,"decode","rustc::middle::const_val","",265,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",265,null],[11,"fmt","","",265,null],[11,"clone","","",265,null],[11,"hash","","",265,null],[11,"eq","","",265,null],[11,"description","","",265,null],[11,"hash","rustc::middle::const_qualif","",266,null],[11,"cmp","","",266,null],[11,"partial_cmp","","",266,null],[11,"lt","","",266,null],[11,"le","","",266,null],[11,"gt","","",266,null],[11,"ge","","",266,null],[11,"clone","","",266,null],[11,"eq","","",266,null],[11,"ne","","",266,null],[11,"decode","","",266,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",266,null],[18,"MUTABLE_MEM","rustdoc","",266,null],[18,"NEEDS_DROP","","",266,null],[18,"PREFER_IN_PLACE","","",266,null],[18,"NON_ZERO_SIZED","","",266,null],[18,"HAS_STATIC_BORROWS","","",266,null],[18,"NOT_CONST","","",266,null],[18,"NON_STATIC_BORROWS","","",266,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",266,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",266,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",266,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",266,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",266,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",266,null],[11,"is_all","","Returns `true` if all flags are currently set.",266,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",266,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",266,null],[11,"insert","","Inserts the specified flags in-place.",266,null],[11,"remove","","Removes the specified flags in-place.",266,null],[11,"toggle","","Toggles the specified flags in-place.",266,null],[11,"bitor","","Returns the union of the two sets of flags.",266,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",266,null],[11,"bitand","","Returns the intersection between the two sets of flags.",266,null],[11,"sub","","Returns the set difference of the two sets of flags.",266,null],[11,"not","","Returns the complement of this set of flags.",266,null],[11,"fmt","rustc::middle::cstore","",267,null],[11,"clone","","",267,null],[11,"fmt","","",268,null],[11,"clone","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"clone","","",269,null],[11,"eq","","",269,null],[11,"fmt","","",269,null],[11,"eq","","",270,null],[11,"clone","","",270,null],[11,"from_u32","","",270,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",271,null],[11,"clone","","",271,null],[11,"fmt","","",272,null],[11,"hash","","",272,null],[11,"decode","","",272,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",272,null],[11,"eq","","",272,null],[11,"ne","","",272,null],[11,"clone","","",272,null],[11,"fmt","","",273,null],[11,"hash","","",273,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"clone","","",273,null],[11,"clone","","",274,null],[11,"fmt","","",275,null],[11,"clone","","",275,null],[11,"visit","","",272,null],[11,"visit_ids","","",272,null],[11,"stability","","",276,null],[11,"deprecation","","",276,null],[11,"visibility","","",276,null],[11,"closure_kind","","",276,null],[11,"closure_ty","","",276,null],[11,"item_variances","","",276,null],[11,"repr_attrs","","",276,null],[11,"item_type","","",276,null],[11,"visible_parent_map","","",276,null],[11,"item_name","","",276,null],[11,"item_predicates","","",276,null],[11,"item_super_predicates","","",276,null],[11,"item_attrs","","",276,null],[11,"item_symbol","","",276,null],[11,"trait_def","","",276,null],[11,"adt_def","","",276,null],[11,"method_arg_names","","",276,null],[11,"inherent_implementations_for_type","","",276,null],[11,"implementations_of_trait","","",276,null],[11,"provided_trait_methods","","",276,null],[11,"trait_item_def_ids","","",276,null],[11,"impl_items","","",276,null],[11,"impl_trait_ref","","",276,null],[11,"impl_polarity","","",276,null],[11,"custom_coerce_unsized_kind","","",276,null],[11,"associated_consts","","",276,null],[11,"impl_parent","","",276,null],[11,"trait_of_item","","",276,null],[11,"impl_or_trait_item","","",276,null],[11,"is_const_fn","","",276,null],[11,"is_defaulted_trait","","",276,null],[11,"is_impl","","",276,null],[11,"is_default_impl","","",276,null],[11,"is_extern_item","","",276,null],[11,"is_static_method","","",276,null],[11,"is_statically_included_foreign_item","","",276,null],[11,"is_typedef","","",276,null],[11,"dylib_dependency_formats","","",276,null],[11,"lang_items","","",276,null],[11,"missing_lang_items","","",276,null],[11,"is_staged_api","","",276,null],[11,"is_explicitly_linked","","",276,null],[11,"is_allocator","","",276,null],[11,"is_panic_runtime","","",276,null],[11,"panic_strategy","","",276,null],[11,"extern_crate","","",276,null],[11,"crate_attrs","","",276,null],[11,"crate_name","","",276,null],[11,"original_crate_name","","",276,null],[11,"crate_hash","","",276,null],[11,"crate_disambiguator","","",276,null],[11,"crate_struct_field_attrs","","",276,null],[11,"plugin_registrar_fn","","",276,null],[11,"native_libraries","","",276,null],[11,"reachable_ids","","",276,null],[11,"def_key","","",276,null],[11,"relative_def_path","","",276,null],[11,"variant_kind","","",276,null],[11,"struct_ctor_def_id","","",276,null],[11,"tuple_struct_definition_if_ctor","","",276,null],[11,"struct_field_names","","",276,null],[11,"item_children","","",276,null],[11,"crate_top_level_items","","",276,null],[11,"maybe_get_item_ast","","",276,null],[11,"maybe_get_item_mir","","",276,null],[11,"is_item_mir_available","","",276,null],[11,"crates","","",276,null],[11,"used_libraries","","",276,null],[11,"used_link_args","","",276,null],[11,"metadata_filename","","",276,null],[11,"metadata_section_name","","",276,null],[11,"encode_type","","",276,null],[11,"used_crates","","",276,null],[11,"used_crate_source","","",276,null],[11,"extern_mod_stmt_cnum","","",276,null],[11,"encode_metadata","","",276,null],[11,"metadata_encoding_version","","",276,null],[11,"fmt","rustc::middle::dataflow","",277,null],[11,"clone","","",277,null],[11,"clone","","",278,null],[11,"pre","","",278,null],[11,"fmt","","",279,null],[11,"eq","","",279,null],[11,"clone","","",279,null],[11,"new","","",278,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",278,null],[11,"add_kill","","Indicates that `id` kills `bit`",278,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",278,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",278,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",278,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",278,null],[11,"propagate","","Performs the data flow analysis.",278,null],[11,"fmt","rustc::middle::dependency_format","",280,null],[11,"eq","","",280,null],[11,"clone","","",280,null],[11,"clone","rustc::middle::free_region","",281,null],[11,"new","","",281,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",281,null],[11,"relate_free_regions_from_predicates","","",281,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",281,null],[11,"lub_free_regions","","",281,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",281,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",281,null],[11,"hash","rustc::middle::lang_items","",282,null],[11,"eq","","",282,null],[11,"clone","","",282,null],[11,"from_u32","","",282,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",283,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",283,null],[11,"item_name","","",283,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",283,null],[11,"require_owned_box","","",283,null],[11,"from_builtin_kind","","",283,null],[11,"to_builtin_kind","","",283,null],[11,"fn_trait_kind","","",283,null],[11,"char_impl","","",283,null],[11,"str_impl","","",283,null],[11,"slice_impl","","",283,null],[11,"const_ptr_impl","","",283,null],[11,"mut_ptr_impl","","",283,null],[11,"i8_impl","","",283,null],[11,"i16_impl","","",283,null],[11,"i32_impl","","",283,null],[11,"i64_impl","","",283,null],[11,"isize_impl","","",283,null],[11,"u8_impl","","",283,null],[11,"u16_impl","","",283,null],[11,"u32_impl","","",283,null],[11,"u64_impl","","",283,null],[11,"usize_impl","","",283,null],[11,"f32_impl","","",283,null],[11,"f64_impl","","",283,null],[11,"send_trait","","",283,null],[11,"sized_trait","","",283,null],[11,"unsize_trait","","",283,null],[11,"copy_trait","","",283,null],[11,"sync_trait","","",283,null],[11,"drop_trait","","",283,null],[11,"coerce_unsized_trait","","",283,null],[11,"add_trait","","",283,null],[11,"sub_trait","","",283,null],[11,"mul_trait","","",283,null],[11,"div_trait","","",283,null],[11,"rem_trait","","",283,null],[11,"neg_trait","","",283,null],[11,"not_trait","","",283,null],[11,"bitxor_trait","","",283,null],[11,"bitand_trait","","",283,null],[11,"bitor_trait","","",283,null],[11,"shl_trait","","",283,null],[11,"shr_trait","","",283,null],[11,"add_assign_trait","","",283,null],[11,"sub_assign_trait","","",283,null],[11,"mul_assign_trait","","",283,null],[11,"div_assign_trait","","",283,null],[11,"rem_assign_trait","","",283,null],[11,"bitxor_assign_trait","","",283,null],[11,"bitand_assign_trait","","",283,null],[11,"bitor_assign_trait","","",283,null],[11,"shl_assign_trait","","",283,null],[11,"shr_assign_trait","","",283,null],[11,"index_trait","","",283,null],[11,"index_mut_trait","","",283,null],[11,"unsafe_cell_type","","",283,null],[11,"deref_trait","","",283,null],[11,"deref_mut_trait","","",283,null],[11,"fn_trait","","",283,null],[11,"fn_mut_trait","","",283,null],[11,"fn_once_trait","","",283,null],[11,"eq_trait","","",283,null],[11,"ord_trait","","",283,null],[11,"str_eq_fn","","",283,null],[11,"panic_fn","","",283,null],[11,"panic_bounds_check_fn","","",283,null],[11,"panic_fmt","","",283,null],[11,"exchange_malloc_fn","","",283,null],[11,"exchange_free_fn","","",283,null],[11,"box_free_fn","","",283,null],[11,"strdup_uniq_fn","","",283,null],[11,"start_fn","","",283,null],[11,"eh_personality","","",283,null],[11,"eh_personality_catch","","",283,null],[11,"eh_unwind_resume","","",283,null],[11,"msvc_try_filter","","",283,null],[11,"owned_box","","",283,null],[11,"phantom_data","","",283,null],[11,"covariant_type","","",283,null],[11,"contravariant_type","","",283,null],[11,"invariant_type","","",283,null],[11,"covariant_lifetime","","",283,null],[11,"contravariant_lifetime","","",283,null],[11,"invariant_lifetime","","",283,null],[11,"no_copy_bound","","",283,null],[11,"non_zero","","",283,null],[11,"debug_trait","","",283,null],[11,"eq","rustc::middle::mem_categorization","",284,null],[11,"ne","","",284,null],[11,"clone","","",284,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"clone","","",285,null],[11,"hash","","",286,null],[11,"eq","","",286,null],[11,"ne","","",286,null],[11,"clone","","",286,null],[11,"hash","","",287,null],[11,"eq","","",287,null],[11,"ne","","",287,null],[11,"clone","","",287,null],[11,"fmt","","",288,null],[11,"hash","","",288,null],[11,"eq","","",288,null],[11,"ne","","",288,null],[11,"clone","","",288,null],[11,"fmt","","",289,null],[11,"hash","","",289,null],[11,"eq","","",289,null],[11,"clone","","",289,null],[11,"fmt","","",290,null],[11,"hash","","",290,null],[11,"eq","","",290,null],[11,"clone","","",290,null],[11,"fmt","","",291,null],[11,"hash","","",291,null],[11,"eq","","",291,null],[11,"clone","","",291,null],[11,"fmt","","",292,null],[11,"eq","","",292,null],[11,"ne","","",292,null],[11,"clone","","",292,null],[11,"eq","","",293,null],[11,"ne","","",293,null],[11,"clone","","",293,null],[11,"clone","","",294,null],[11,"id","rustc::hir","",137,null],[11,"span","","",137,null],[11,"id","","",164,null],[11,"span","","",164,null],[11,"clone","rustc::middle::mem_categorization","",295,null],[11,"from_mutbl","","",291,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",291,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",291,null],[11,"is_mutable","","",291,null],[11,"is_immutable","","",291,null],[11,"to_user_str","","",291,null],[11,"new","","",295,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",295,null],[11,"cat_expr_autoderefd","","",295,null],[11,"cat_expr_unadjusted","","",295,null],[11,"cat_def","","",295,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",295,null],[11,"cat_rvalue_node","","",295,null],[11,"cat_rvalue","","",295,null],[11,"cat_field","","",295,null],[11,"cat_tup_field","","",295,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",295,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",295,null],[11,"cat_imm_interior","","",295,null],[11,"cat_downcast","","",295,null],[11,"cat_pattern","","",295,null],[11,"fmt","","",296,null],[11,"clone","","",296,null],[11,"fmt","","",297,null],[11,"clone","","",297,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",293,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",293,null],[11,"upvar","","",293,null],[11,"descriptive_string","","",293,null],[11,"fmt","","",293,null],[11,"fmt","","",284,null],[11,"fmt","","",286,null],[11,"fmt","","",287,null],[11,"fmt","","",285,null],[11,"fmt","","",285,null],[11,"cmp","rustc::middle::privacy","",298,null],[11,"partial_cmp","","",298,null],[11,"eq","","",298,null],[11,"fmt","","",298,null],[11,"clone","","",298,null],[11,"clone","","",299,null],[11,"is_reachable","","",299,null],[11,"is_exported","","",299,null],[11,"is_public","","",299,null],[11,"default","","",299,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"fmt","","",299,null],[11,"decode","rustc::middle::region","",300,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",300,null],[11,"hash","","",300,null],[11,"cmp","","",300,null],[11,"partial_cmp","","",300,null],[11,"lt","","",300,null],[11,"le","","",300,null],[11,"gt","","",300,null],[11,"ge","","",300,null],[11,"eq","","",300,null],[11,"ne","","",300,null],[11,"clone","","",300,null],[11,"fmt","","",300,null],[11,"fmt","","",301,null],[11,"hash","","",301,null],[11,"cmp","","",301,null],[11,"partial_cmp","","",301,null],[11,"lt","","",301,null],[11,"le","","",301,null],[11,"gt","","",301,null],[11,"ge","","",301,null],[11,"eq","","",301,null],[11,"ne","","",301,null],[11,"clone","","",301,null],[11,"fmt","","",302,null],[11,"decode","","",302,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",302,null],[11,"hash","","",302,null],[11,"cmp","","",302,null],[11,"partial_cmp","","",302,null],[11,"lt","","",302,null],[11,"le","","",302,null],[11,"gt","","",302,null],[11,"ge","","",302,null],[11,"eq","","",302,null],[11,"ne","","",302,null],[11,"clone","","",302,null],[11,"to_code_extent","","",302,null],[11,"fmt","","",303,null],[11,"decode","","",303,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",303,null],[11,"hash","","",303,null],[11,"cmp","","",303,null],[11,"partial_cmp","","",303,null],[11,"lt","","",303,null],[11,"le","","",303,null],[11,"gt","","",303,null],[11,"ge","","",303,null],[11,"eq","","",303,null],[11,"ne","","",303,null],[11,"clone","","",303,null],[11,"node_id","","Returns a node id associated with this scope.",301,null],[11,"node_id","","",300,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",300,null],[11,"clone","","",304,null],[11,"fmt","","",304,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",305,null],[11,"lookup_code_extent","","",305,null],[11,"node_extent","","",305,null],[11,"item_extent","","",305,null],[11,"call_site_extent","","",305,null],[11,"opt_destruction_extent","","",305,null],[11,"intern_code_extent","","",305,null],[11,"intern_node","","",305,null],[11,"code_extent_data","","",305,null],[11,"each_encl_scope","","",305,null],[11,"each_var_scope","","",305,null],[11,"each_rvalue_scope","","",305,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",305,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",305,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",305,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",305,null],[11,"var_region","","Returns the lifetime of the variable `id`.",305,null],[11,"scopes_intersect","","",305,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",305,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",305,null],[11,"fmt","rustc::middle::resolve_lifetime","",306,null],[11,"decode","","",306,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",306,null],[11,"hash","","",306,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"clone","","",306,null],[11,"hash","rustc::middle::stability","",307,null],[11,"fmt","","",307,null],[11,"clone","","",307,null],[11,"partial_cmp","","",307,null],[11,"eq","","",307,null],[11,"decode","","",307,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",307,null],[11,"from_attr_level","","",307,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"build","","Construct the stability index for a crate being compiled.",308,null],[11,"new","","",308,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"lookup_stability","rustc::ty::context","Lookup the stability for a node, loading external crate\nmetadata as necessary.",207,null],[11,"lookup_deprecation","","",207,null],[11,"decode","rustc::mir::repr","",309,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",309,null],[11,"clone","","",309,null],[11,"all_basic_blocks","","",309,null],[11,"basic_block_data","","",309,null],[11,"basic_block_data_mut","","",309,null],[11,"index","","",309,null],[11,"index_mut","","",309,null],[11,"decode","","",310,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",310,null],[11,"eq","","",310,null],[11,"fmt","","",310,null],[11,"clone","","",310,null],[11,"decode","","",311,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",311,null],[11,"eq","","",311,null],[11,"fmt","","",311,null],[11,"clone","","",311,null],[11,"decode","","",312,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",312,null],[11,"fmt","","",312,null],[11,"clone","","",312,null],[11,"decode","","",313,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",313,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"decode","","",314,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",314,null],[11,"fmt","","",314,null],[11,"clone","","",314,null],[11,"decode","","",315,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",315,null],[11,"fmt","","",315,null],[11,"clone","","",315,null],[11,"decode","","",316,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",316,null],[11,"hash","","",316,null],[11,"eq","","",316,null],[11,"ne","","",316,null],[11,"clone","","",316,null],[11,"new","","",316,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",316,null],[11,"fmt","","",316,null],[11,"decode","","",317,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",317,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"decode","","",318,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",318,null],[11,"fmt","","",318,null],[11,"clone","","",318,null],[11,"decode","","",319,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",319,null],[11,"clone","","",319,null],[11,"successors","","",318,null],[11,"successors_mut","","",318,null],[11,"successors","","",319,null],[11,"successors_mut","","",319,null],[11,"new","","",317,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",317,null],[11,"terminator_mut","","",317,null],[11,"fmt","","",319,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",319,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",319,null],[11,"decode","","",320,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",320,null],[11,"clone","","",320,null],[11,"decode","","",321,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",321,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"fmt","","",320,null],[11,"decode","","",322,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",322,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"clone","","",322,null],[11,"decode","","",323,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",323,null],[11,"hash","","",323,null],[11,"eq","","",323,null],[11,"ne","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"decode","","",324,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",324,null],[11,"hash","","",324,null],[11,"eq","","",324,null],[11,"ne","","",324,null],[11,"fmt","","",324,null],[11,"clone","","",324,null],[11,"decode","","",325,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",325,null],[11,"hash","","",325,null],[11,"eq","","",325,null],[11,"ne","","",325,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"new","","",325,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",325,null],[11,"field","","",322,null],[11,"deref","","",322,null],[11,"index","","",322,null],[11,"elem","","",322,null],[11,"fmt","","",322,null],[11,"index","collections::vec","",326,null],[11,"index_mut","","",326,null],[11,"decode","rustc::mir::repr","",327,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",327,null],[11,"eq","","",327,null],[11,"ne","","",327,null],[11,"hash","","",327,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"new","","",327,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",327,null],[11,"decode","","",328,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",328,null],[11,"fmt","","",328,null],[11,"clone","","",328,null],[11,"decode","","",329,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",329,null],[11,"eq","","",329,null],[11,"ne","","",329,null],[11,"clone","","",329,null],[11,"fmt","","",329,null],[11,"decode","","",330,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",330,null],[11,"clone","","",330,null],[11,"decode","","",331,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",331,null],[11,"eq","","",331,null],[11,"fmt","","",331,null],[11,"clone","","",331,null],[11,"decode","","",332,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",332,null],[11,"eq","","",332,null],[11,"ne","","",332,null],[11,"fmt","","",332,null],[11,"clone","","",332,null],[11,"decode","","",333,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",333,null],[11,"eq","","",333,null],[11,"fmt","","",333,null],[11,"clone","","",333,null],[11,"decode","","",334,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",334,null],[11,"eq","","",334,null],[11,"fmt","","",334,null],[11,"clone","","",334,null],[11,"fmt","","",330,null],[11,"decode","","",335,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",335,null],[11,"hash","","",335,null],[11,"eq","","",335,null],[11,"ne","","",335,null],[11,"clone","","",335,null],[11,"decode","","",336,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",336,null],[11,"clone","","",336,null],[11,"fmt","","",336,null],[11,"decode","","",337,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",337,null],[11,"hash","","",337,null],[11,"eq","","",337,null],[11,"ne","","",337,null],[11,"clone","","",337,null],[11,"fmt","","",335,null],[11,"fmt","","",337,null],[11,"fmt","rustc::mir::tcx","",249,null],[11,"clone","","",249,null],[11,"from_ty","","",249,{"inputs":[{"name":"tys"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",249,null],[11,"projection_ty","","",249,null],[11,"super_fold_with","","",249,null],[11,"super_visit_with","","",249,null],[11,"operand_ty","rustc::mir::repr","",309,null],[11,"binop_ty","","",309,null],[11,"lvalue_ty","","",309,null],[11,"rvalue_ty","","",309,null],[11,"to_mutbl_lossy","","",311,null],[11,"to_hir_binop","","",333,null],[11,"fmt","rustc::mir::visit","",338,null],[11,"clone","","",338,null],[11,"clone","rustc::mir::transform","",339,null],[11,"from_node","","",339,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"mirsource"}}],[11,"item_id","","",339,null],[11,"new","","",340,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",340,null],[11,"push_pass","","Pushes a built-in pass.",340,null],[11,"extend","","",340,null],[11,"eq","rustc::session::config","",341,null],[11,"clone","","",341,null],[11,"eq","","",342,null],[11,"clone","","",342,null],[11,"hash","","",343,null],[11,"eq","","",343,null],[11,"clone","","",343,null],[11,"eq","","",344,null],[11,"ne","","",344,null],[11,"fmt","","",344,null],[11,"clone","","",344,null],[11,"default","","",344,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",345,null],[11,"eq","","",346,null],[11,"clone","","",346,null],[11,"clone","","",347,null],[11,"path","","",347,null],[11,"temp_path","","",347,null],[11,"with_extension","","",347,null],[11,"filestem","","",347,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",345,null],[11,"eq","","",348,null],[11,"clone","","",348,null],[11,"fmt","","",349,null],[11,"hash","","",349,null],[11,"cmp","","",349,null],[11,"clone","","",349,null],[11,"partial_cmp","","",349,null],[11,"eq","","",349,null],[11,"clone","","",350,null],[11,"is_empty","","",350,null],[11,"eq","","",351,null],[11,"clone","","",351,null],[11,"desc","","",351,null],[11,"clone","","",352,null],[11,"clone","","",353,null],[11,"fmt","","",354,null],[11,"eq","","",354,null],[11,"clone","","",354,null],[11,"eq","","",355,null],[11,"ne","","",355,null],[11,"clone","","",355,null],[11,"is_stable","","",355,null],[11,"stable","","",355,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",355,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",349,null],[11,"clone","rustc::session::filesearch","",356,null],[11,"for_each_lib_search_path","","",357,null],[11,"get_lib_path","","",357,null],[11,"search","","",357,null],[11,"new","","",357,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",357,null],[11,"get_tools_search_paths","","",357,null],[11,"fmt","rustc::session::search_paths","",358,null],[11,"clone","","",358,null],[11,"fmt","","",359,null],[11,"clone","","",359,null],[11,"eq","","",359,null],[11,"new","","",358,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",358,null],[11,"iter","","",358,null],[11,"next","","",360,null],[11,"struct_span_warn","rustc::session","",361,null],[11,"struct_span_warn_with_code","","",361,null],[11,"struct_warn","","",361,null],[11,"struct_span_err","","",361,null],[11,"struct_span_err_with_code","","",361,null],[11,"struct_err","","",361,null],[11,"struct_span_fatal","","",361,null],[11,"struct_span_fatal_with_code","","",361,null],[11,"struct_fatal","","",361,null],[11,"span_fatal","","",361,null],[11,"span_fatal_with_code","","",361,null],[11,"fatal","","",361,null],[11,"span_err_or_warn","","",361,null],[11,"span_err","","",361,null],[11,"span_err_with_code","","",361,null],[11,"err","","",361,null],[11,"err_count","","",361,null],[11,"has_errors","","",361,null],[11,"abort_if_errors","","",361,null],[11,"track_errors","","",361,null],[11,"span_warn","","",361,null],[11,"span_warn_with_code","","",361,null],[11,"warn","","",361,null],[11,"opt_span_warn","","",361,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",361,null],[11,"note_without_error","","",361,null],[11,"span_note_without_error","","",361,null],[11,"span_unimpl","","",361,null],[11,"unimpl","","",361,null],[11,"add_lint","","",361,null],[11,"reserve_node_ids","","",361,null],[11,"diagnostic","","",361,null],[11,"codemap","","",361,null],[11,"verbose","","",361,null],[11,"time_passes","","",361,null],[11,"count_llvm_insns","","",361,null],[11,"count_type_sizes","","",361,null],[11,"time_llvm_passes","","",361,null],[11,"trans_stats","","",361,null],[11,"meta_stats","","",361,null],[11,"asm_comments","","",361,null],[11,"no_verify","","",361,null],[11,"borrowck_stats","","",361,null],[11,"print_llvm_passes","","",361,null],[11,"lto","","",361,null],[11,"no_landing_pads","","",361,null],[11,"unstable_options","","",361,null],[11,"print_enum_sizes","","",361,null],[11,"nonzeroing_move_hints","","",361,null],[11,"sysroot","","",361,null],[11,"target_filesearch","","",361,null],[11,"host_filesearch","","",361,null],[11,"next_node_id","","",361,null],[11,"peek_node_id","","",361,null],[11,"diagnostic","","",361,null],[11,"hash","rustc::traits::error_reporting","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"fmt","","",362,null],[11,"report_fulfillment_errors","rustc::infer","",204,null],[11,"report_fulfillment_errors_as_warnings","","",204,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",204,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",204,null],[11,"report_selection_error","","",204,null],[11,"recursive_type_with_infinite_size_error","rustc::ty::context","",207,null],[11,"report_object_safety_error","","",207,null],[11,"clone","rustc::traits::fulfill","",363,null],[11,"new","","Creates a new fulfillment context.",364,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",364,null],[11,"register_builtin_bound","","",364,null],[11,"register_region_obligation","","",364,null],[11,"register_predicate_obligation","","",364,null],[11,"register_rfc1592_obligation","","",364,null],[11,"region_obligations","","",364,null],[11,"select_rfc1592_obligations","","",364,null],[11,"select_all_or_error","","",364,null],[11,"select_where_possible","","",364,null],[11,"pending_obligations","","",364,null],[11,"new","","",365,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",365,null],[11,"check_duplicate_trait","","",365,null],[11,"eq","rustc::traits::project","",366,null],[11,"clone","","",366,null],[11,"fmt","","",366,null],[11,"is_topmost","","",366,null],[11,"is_any_final","","",366,null],[11,"is_any","","",366,null],[11,"clone","","",367,null],[11,"clone","","",368,null],[11,"with","","",368,null],[11,"hash","rustc::traits::object_safety","",369,null],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"fmt","","",369,null],[11,"clone","","",369,null],[11,"hash","","",370,null],[11,"eq","","",370,null],[11,"fmt","","",370,null],[11,"clone","","",370,null],[11,"is_object_safe","rustc::ty::context","",207,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",207,null],[11,"object_safety_violations","","",207,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",207,null],[11,"clone","rustc::traits::select","",371,null],[11,"fmt","","",372,null],[11,"clone","","",372,null],[11,"clone","","",373,null],[11,"new","","",374,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",374,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",374,null],[11,"tcx","","",374,null],[11,"param_env","","",374,null],[11,"closure_typer","","",374,null],[11,"projection_mode","","",374,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",374,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",374,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",374,null],[11,"new","","",371,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",373,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",375,null],[11,"new","rustc::traits::specialize::specialization_graph","",376,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",376,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",376,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",376,null],[11,"clone","","",377,null],[11,"fmt","","",377,null],[11,"is_from_trait","","",377,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",377,null],[11,"def_id","","",377,null],[11,"next","","",378,null],[11,"next","","",379,null],[11,"map","","",380,null],[11,"next","","",381,null],[11,"next","","",382,null],[11,"next","","",383,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",379,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",379,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",379,null],[11,"new","rustc::traits::specialize","",384,{"inputs":[],"output":{"name":"specializescache"}}],[11,"check","","",384,null],[11,"insert","","",384,null],[11,"fmt","rustc::traits::project","",368,null],[11,"fmt","rustc::traits::fulfill","",363,null],[11,"fmt","rustc::traits","",385,null],[11,"fmt","","",386,null],[11,"fmt","","",387,null],[11,"fmt","","",388,null],[11,"fmt","","",389,null],[11,"fmt","","",390,null],[11,"fmt","","",391,null],[11,"fmt","","",392,null],[11,"fmt","","",393,null],[11,"fmt","","",394,null],[11,"fmt","rustc::traits::project","",367,null],[11,"lift_to_tcx","rustc::traits","",395,null],[11,"lift_to_tcx","","",386,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",387,null],[11,"super_visit_with","","",387,null],[11,"super_fold_with","","",388,null],[11,"super_visit_with","","",388,null],[11,"super_fold_with","","",390,null],[11,"super_visit_with","","",390,null],[11,"super_fold_with","","",389,null],[11,"super_visit_with","","",389,null],[11,"super_fold_with","","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","","",392,null],[11,"super_visit_with","","",392,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","rustc::traits::project","",368,null],[11,"super_visit_with","","",368,null],[11,"next","rustc::traits::util","",396,null],[11,"trait_ref_for_builtin_bound","rustc::ty::context","",207,null],[11,"predicate_for_trait_def","","",207,null],[11,"predicate_for_builtin_bound","","",207,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",207,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",207,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",207,null],[11,"closure_trait_ref_and_return_type","","",207,null],[11,"eq","rustc::traits","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"eq","","",397,null],[11,"ne","","",397,null],[11,"fmt","","",397,null],[11,"clone","","",397,null],[11,"eq","","",398,null],[11,"ne","","",398,null],[11,"fmt","","",398,null],[11,"clone","","",398,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"fmt","","",399,null],[11,"clone","","",399,null],[11,"fmt","","",395,null],[11,"clone","","",395,null],[11,"clone","","",394,null],[11,"clone","","",386,null],[11,"eq","","",387,null],[11,"ne","","",387,null],[11,"clone","","",387,null],[11,"eq","","",388,null],[11,"ne","","",388,null],[11,"clone","","",388,null],[11,"clone","","",390,null],[11,"clone","","",389,null],[11,"clone","","",391,null],[11,"eq","","",391,null],[11,"ne","","",391,null],[11,"eq","","",392,null],[11,"ne","","",392,null],[11,"clone","","",392,null],[11,"new","","",385,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",385,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",385,null],[11,"new","","",397,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",397,{"inputs":[{"name":"span"},{"name":"u32"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",397,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",386,null],[11,"map","","",386,null],[11,"clone","rustc::ty::adjustment","",400,null],[11,"clone","","",401,null],[11,"is_identity","","",400,null],[11,"is_identity","","",401,null],[11,"fmt","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"clone","","",402,null],[11,"fmt","","",403,null],[11,"decode","","",403,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",403,null],[11,"clone","","",403,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",404,null],[11,"adjust_for_autoderef","","",404,null],[11,"adjust_for_autoref","","",404,null],[11,"eq","rustc::ty::cast","",405,null],[11,"ne","","",405,null],[11,"fmt","","",405,null],[11,"clone","","",405,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"fmt","","",406,null],[11,"clone","","",406,null],[11,"decode","","",407,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",407,null],[11,"fmt","","",407,null],[11,"clone","","",407,null],[11,"from_ty","","",406,{"inputs":[{"name":"tys"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::error","",408,null],[11,"clone","","",408,null],[11,"fmt","","",409,null],[11,"clone","","",409,null],[11,"fmt","","",410,null],[11,"hash","","",410,null],[11,"eq","","",410,null],[11,"decode","","",410,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",410,null],[11,"clone","","",410,null],[11,"fmt","","",409,null],[11,"note_and_explain_type_err","rustc::ty::context","",207,null],[11,"hash","rustc::ty::fast_reject","",411,null],[11,"eq","","",411,null],[11,"ne","","",411,null],[11,"fmt","","",411,null],[11,"clone","","",411,null],[11,"tcx","rustc::ty::fold","",412,null],[11,"fold_ty","","",412,null],[11,"collect_regions","rustc::ty::context","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",207,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",207,null],[11,"new","rustc::ty::fold","",413,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",413,null],[11,"fold_binder","","",413,null],[11,"fold_region","","",413,null],[11,"replace_late_bound_regions","rustc::ty::context","",207,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",207,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",207,null],[11,"no_late_bound_regions","","",207,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",207,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",207,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",207,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",207,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",207,null],[11,"item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",207,null],[11,"node_path_str","","Returns a string identifying this local node-id.",207,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",207,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",207,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",207,null],[11,"push_item_path","","",207,null],[11,"fmt","rustc::ty::item_path","",414,null],[11,"default","rustc::ty::layout","",415,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",415,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",415,null],[11,"ptr_sized_integer","","",415,null],[11,"clone","","",416,null],[11,"fmt","","",417,null],[11,"hash","","",417,null],[11,"cmp","","",417,null],[11,"partial_cmp","","",417,null],[11,"lt","","",417,null],[11,"le","","",417,null],[11,"gt","","",417,null],[11,"ge","","",417,null],[11,"eq","","",417,null],[11,"ne","","",417,null],[11,"clone","","",417,null],[11,"from_bits","","",417,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",417,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",417,null],[11,"bits","","",417,null],[11,"abi_align","","",417,null],[11,"checked_add","","",417,null],[11,"checked_mul","","",417,null],[11,"fmt","","",418,null],[11,"hash","","",418,null],[11,"eq","","",418,null],[11,"ne","","",418,null],[11,"clone","","",418,null],[11,"from_bits","","",418,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",418,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",418,null],[11,"pref","","",418,null],[11,"min","","",418,null],[11,"max","","",418,null],[11,"fmt","","",419,null],[11,"hash","","",419,null],[11,"cmp","","",419,null],[11,"partial_cmp","","",419,null],[11,"eq","","",419,null],[11,"clone","","",419,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",419,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",419,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",419,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",419,null],[11,"fmt","","",420,null],[11,"hash","","",420,null],[11,"eq","","",420,null],[11,"ne","","",420,null],[11,"clone","","",420,null],[11,"size","","",420,null],[11,"align","","",420,null],[11,"fmt","","",421,null],[11,"hash","","",421,null],[11,"eq","","",421,null],[11,"ne","","",421,null],[11,"new","","",421,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",421,null],[11,"min_size","","Get the size without trailing alignment padding.",421,null],[11,"stride","","Get the size with trailing aligment padding.",421,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",421,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",421,{"inputs":[{"name":"inferctxt"},{"name":"tys"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",421,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",422,null],[11,"eq","","",422,null],[11,"ne","","",422,null],[11,"fmt","","",422,null],[11,"fmt","","",423,null],[11,"clone","","",423,null],[11,"fmt","","",423,null],[11,"compute_uncached","","",422,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",422,null],[11,"size","","",422,null],[11,"align","","",422,null],[11,"fmt","","",424,null],[11,"clone","","",424,null],[11,"compute","","",424,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",424,null],[11,"new","rustc::ty::_match","",425,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",425,null],[11,"tcx","","",425,null],[11,"a_is_expected","","",425,null],[11,"relate_with_variance","","",425,null],[11,"regions","","",425,null],[11,"tys","","",425,null],[11,"binders","","",425,null],[11,"to_dep_node","rustc::ty::maps","",426,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",427,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",428,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",429,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",430,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",431,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",432,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",433,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",434,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",435,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",436,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",437,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",438,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",439,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"fmt","rustc::ty::outlives","",440,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",204,null],[11,"fmt","rustc::ty::relate","",441,null],[11,"clone","","",441,null],[11,"relate","rustc::ty::sty","",442,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"result"}}],[11,"relate","","",247,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"result"}}],[11,"relate","rustc::hir","",189,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"relate","syntax::abi","",443,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",77,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",76,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"result"}}],[11,"relate","collections::vec","",326,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",62,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"result"}}],[11,"relate","","",444,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"result"}}],[11,"relate","","",64,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"relate","","",248,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"result"}}],[11,"relate","","",70,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"result"}}],[11,"relate","","",56,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"result"}}],[11,"relate","alloc::rc","",54,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"relate","alloc::boxed","",445,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"result"}}],[11,"hash","rustc::ty::subst","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"new","","",65,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",65,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",65,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"tys"}],"output":{"name":"substs"}}],[11,"empty","","",65,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",65,null],[11,"type_for_def","","",65,null],[11,"self_ty","","",65,null],[11,"with_self_ty","","",65,null],[11,"erase_regions","","",65,null],[11,"with_method","","",65,null],[11,"with_method_from","","",65,null],[11,"with_method_from_subst","","",65,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",65,null],[11,"encode","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",446,null],[11,"decode","","",446,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",446,null],[11,"hash","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"cmp","","",446,null],[11,"partial_cmp","","",446,null],[11,"all","","",446,null],[11,"to_uint","","",446,null],[11,"from_uint","","",446,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",52,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"hash","","",52,null],[11,"clone","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"fmt","","",52,null],[11,"empty","","",52,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",52,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",52,null],[11,"extend","","Appends `values` to the vector associated with `space`.",52,null],[11,"pop","","",52,null],[11,"truncate","","",52,null],[11,"replace","","",52,null],[11,"get_self","","",52,null],[11,"len","","",52,null],[11,"is_empty_in","","",52,null],[11,"get_slice","","",52,null],[11,"get_mut_slice","","",52,null],[11,"opt_get","","",52,null],[11,"get","","",52,null],[11,"iter","","",52,null],[11,"into_iter","","",52,null],[11,"iter_enumerated","","",52,null],[11,"as_slice","","",52,null],[11,"into_vec","","",52,null],[11,"all_vecs","","",52,null],[11,"all","","",52,null],[11,"any","","",52,null],[11,"is_empty","","",52,null],[11,"map","","",52,null],[11,"map_enumerated","","",52,null],[11,"split","","",52,null],[11,"with_slice","","",52,null],[11,"clone","","",447,null],[11,"next","","",447,null],[11,"size_hint","","",447,null],[11,"into_iter","","",52,null],[11,"new","rustc::ty::trait_def","",448,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",448,null],[11,"object_safety","","",448,null],[11,"set_object_safety","","",448,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",448,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",448,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",448,null],[11,"ancestors","","",448,null],[11,"for_each_impl","","",448,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",448,null],[11,"hash","","",449,null],[11,"cmp","","",449,null],[11,"partial_cmp","","",449,null],[11,"lt","","",449,null],[11,"le","","",449,null],[11,"gt","","",449,null],[11,"ge","","",449,null],[11,"clone","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[18,"NO_TRAIT_FLAGS","rustdoc","",449,null],[18,"HAS_DEFAULT_IMPL","","",449,null],[18,"IS_OBJECT_SAFE","","",449,null],[18,"OBJECT_SAFETY_VALID","","",449,null],[18,"IMPLS_VALID","","",449,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",449,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",449,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",449,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",449,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",449,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",449,null],[11,"is_all","","Returns `true` if all flags are currently set.",449,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",449,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",449,null],[11,"insert","","Inserts the specified flags in-place.",449,null],[11,"remove","","Removes the specified flags in-place.",449,null],[11,"toggle","","Toggles the specified flags in-place.",449,null],[11,"bitor","","Returns the union of the two sets of flags.",449,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",449,null],[11,"bitand","","Returns the intersection between the two sets of flags.",449,null],[11,"sub","","Returns the set difference of the two sets of flags.",449,null],[11,"not","","Returns the complement of this set of flags.",449,null],[11,"new","rustc::ty::walk","",450,{"inputs":[{"name":"tys"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",450,null],[11,"next","","",450,null],[11,"fmt","rustc::ty::wf","",451,null],[11,"to_ty","syntax::attr","",452,null],[11,"initial_discriminant","","",452,null],[11,"assert_ty_matches","","",452,null],[11,"disr_incr","","",452,null],[11,"clone","rustc::ty::util","",453,null],[11,"fmt","","",454,null],[11,"eq","","",454,null],[11,"cmp","","",454,null],[11,"partial_cmp","","",454,null],[11,"clone","","",454,null],[11,"can_type_implement_copy","rustc::ty","",455,null],[11,"pat_contains_ref_binding","rustc::ty::context","",207,null],[11,"arm_contains_ref_binding","","",207,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",207,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",207,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",207,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",207,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",207,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",207,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",207,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",207,null],[11,"moves_by_default","rustc::ty","",404,null],[11,"is_sized","","",404,null],[11,"layout","","",404,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",404,null],[11,"clone","rustc::ty::contents","",456,null],[11,"when","","",456,null],[11,"intersects","","",456,null],[11,"owns_owned","","",456,null],[11,"interior_param","","",456,null],[11,"interior_unsafe","","",456,null],[11,"needs_drop","","",456,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",456,null],[11,"union","","",456,null],[11,"has_dtor","","",456,null],[11,"bitor","","",456,null],[11,"bitand","","",456,null],[11,"sub","","",456,null],[11,"fmt","","",456,null],[11,"type_contents","rustc::ty","",404,null],[11,"new","rustc::ty::context","",457,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",458,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",207,null],[11,"deref","","",207,null],[11,"crate_name","","",207,null],[11,"crate_disambiguator","","",207,null],[11,"type_parameter_def","","",207,null],[11,"node_types","","",207,null],[11,"node_type_insert","","",207,null],[11,"intern_trait_def","","",207,null],[11,"alloc_trait_def","","",207,null],[11,"intern_adt_def","","",207,null],[11,"intern_stability","","",207,null],[11,"intern_layout","","",207,null],[11,"store_free_region_map","","",207,null],[11,"free_region_map","","",207,null],[11,"lift","","",207,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",207,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",207,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"hashmap"},{"name":"map"},{"name":"hashmap"},{"name":"hashset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",207,null],[11,"mk_type_list","","",207,null],[11,"mk_substs","","",207,null],[11,"mk_bare_fn","","",207,null],[11,"mk_region","","",207,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",207,null],[11,"mk_ty","","",207,null],[11,"mk_mach_int","","",207,null],[11,"mk_mach_uint","","",207,null],[11,"mk_mach_float","","",207,null],[11,"mk_str","","",207,null],[11,"mk_static_str","","",207,null],[11,"mk_enum","","",207,null],[11,"mk_box","","",207,null],[11,"mk_ptr","","",207,null],[11,"mk_ref","","",207,null],[11,"mk_mut_ref","","",207,null],[11,"mk_imm_ref","","",207,null],[11,"mk_mut_ptr","","",207,null],[11,"mk_imm_ptr","","",207,null],[11,"mk_nil_ptr","","",207,null],[11,"mk_array","","",207,null],[11,"mk_slice","","",207,null],[11,"mk_tup","","",207,null],[11,"mk_nil","","",207,null],[11,"mk_bool","","",207,null],[11,"mk_fn_def","","",207,null],[11,"mk_fn_ptr","","",207,null],[11,"mk_trait","","",207,null],[11,"mk_projection","","",207,null],[11,"mk_struct","","",207,null],[11,"mk_closure","","",207,null],[11,"mk_closure_from_closure_substs","","",207,null],[11,"mk_var","","",207,null],[11,"mk_int_var","","",207,null],[11,"mk_float_var","","",207,null],[11,"mk_infer","","",207,null],[11,"mk_param","","",207,null],[11,"mk_self_type","","",207,null],[11,"mk_param_from_def","","",207,null],[11,"trait_items","","",207,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",207,null],[11,"lift_to_tcx","core::option","",55,null],[11,"lift_to_tcx","core::result","",205,null],[11,"lift_to_tcx","collections::vec","",326,null],[11,"lift_to_tcx","rustc::ty::sty","",70,null],[11,"lift_to_tcx","","",64,null],[11,"lift_to_tcx","rustc::ty","",73,null],[11,"lift_to_tcx","","",74,null],[11,"lift_to_tcx","","",75,null],[11,"lift_to_tcx","","",76,null],[11,"lift_to_tcx","","",72,null],[11,"lift_to_tcx","rustc::ty::sty","",56,null],[11,"lift_to_tcx","","",248,null],[11,"lift_to_tcx","rustc::ty","",459,null],[11,"lift_to_tcx","rustc::ty::adjustment","",402,null],[11,"lift_to_tcx","rustc::ty::sty","",81,null],[11,"lift_to_tcx","","",247,null],[11,"lift_to_tcx","","",460,null],[11,"lift_to_tcx","rustc::ty::error","",408,null],[11,"lift_to_tcx","rustc::infer::type_variable","",227,null],[11,"lift_to_tcx","rustc::ty::error","",409,null],[11,"super_fold_with","rustc::hir","",189,null],[11,"super_visit_with","","",189,null],[11,"super_fold_with","syntax::abi","",443,null],[11,"super_visit_with","","",443,null],[11,"super_fold_with","core::option","",55,null],[11,"super_visit_with","","",55,null],[11,"super_fold_with","alloc::rc","",54,null],[11,"super_visit_with","","",54,null],[11,"super_fold_with","alloc::boxed","",445,null],[11,"super_visit_with","","",445,null],[11,"super_fold_with","collections::vec","",326,null],[11,"super_visit_with","","",326,null],[11,"super_fold_with","rustc::ty::sty","",56,null],[11,"fold_with","","",56,null],[11,"super_visit_with","","",56,null],[11,"visit_with","","",56,null],[11,"super_fold_with","syntax::ptr","",53,null],[11,"super_visit_with","","",53,null],[11,"super_fold_with","rustc::ty::subst","",52,null],[11,"super_visit_with","","",52,null],[11,"super_fold_with","rustc::ty::sty","",461,null],[11,"super_visit_with","","",461,null],[11,"super_fold_with","","",460,null],[11,"fold_with","","",460,null],[11,"super_visit_with","","",460,null],[11,"super_fold_with","","",442,null],[11,"fold_with","","",442,null],[11,"super_visit_with","","",442,null],[11,"super_fold_with","","",81,null],[11,"fold_with","","",81,null],[11,"super_visit_with","","",81,null],[11,"super_fold_with","","",247,null],[11,"fold_with","","",247,null],[11,"super_visit_with","","",247,null],[11,"super_fold_with","","",64,null],[11,"fold_with","","",64,null],[11,"super_visit_with","","",64,null],[11,"super_fold_with","rustc::ty","",462,null],[11,"fold_with","","",462,null],[11,"super_visit_with","","",462,null],[11,"super_fold_with","rustc::ty::sty","",70,null],[11,"fold_with","","",70,null],[11,"super_visit_with","","",70,null],[11,"visit_with","","",70,null],[11,"super_fold_with","","",248,null],[11,"super_visit_with","","",248,null],[11,"super_fold_with","rustc::ty","",459,null],[11,"super_visit_with","","",459,null],[11,"super_fold_with","rustc::ty::adjustment","",402,null],[11,"fold_with","","",402,null],[11,"super_visit_with","","",402,null],[11,"super_fold_with","rustc::ty::sty","",444,null],[11,"super_visit_with","","",444,null],[11,"super_fold_with","","",62,null],[11,"fold_with","","",62,null],[11,"super_visit_with","","",62,null],[11,"super_fold_with","rustc::ty","",60,null],[11,"super_visit_with","","",60,null],[11,"super_fold_with","","",463,null],[11,"super_visit_with","","",463,null],[11,"super_fold_with","","",69,null],[11,"super_visit_with","","",69,null],[11,"super_fold_with","","",464,null],[11,"super_visit_with","","",464,null],[11,"super_fold_with","","",465,null],[11,"super_visit_with","","",465,null],[11,"super_fold_with","","",72,null],[11,"super_visit_with","","",72,null],[11,"super_fold_with","","",76,null],[11,"super_visit_with","","",76,null],[11,"super_fold_with","rustc::ty::sty","",77,null],[11,"super_visit_with","","",77,null],[11,"super_fold_with","rustc::ty","",466,null],[11,"super_visit_with","","",466,null],[11,"super_fold_with","","",74,null],[11,"super_visit_with","","",74,null],[11,"super_fold_with","","",73,null],[11,"super_visit_with","","",73,null],[11,"super_fold_with","","",75,null],[11,"super_visit_with","","",75,null],[11,"super_fold_with","","",467,null],[11,"super_visit_with","","",467,null],[11,"super_fold_with","","",455,null],[11,"super_visit_with","","",455,null],[11,"super_fold_with","","",468,null],[11,"super_visit_with","","",468,null],[11,"fmt","rustc::ty::sty","",442,null],[11,"hash","","",442,null],[11,"eq","","",442,null],[11,"ne","","",442,null],[11,"clone","","",442,null],[11,"decode","","",469,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",469,null],[11,"hash","","",469,null],[11,"cmp","","",469,null],[11,"partial_cmp","","",469,null],[11,"lt","","",469,null],[11,"le","","",469,null],[11,"gt","","",469,null],[11,"ge","","",469,null],[11,"eq","","",469,null],[11,"ne","","",469,null],[11,"clone","","",469,null],[11,"decode","","",470,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",470,null],[11,"hash","","",470,null],[11,"cmp","","",470,null],[11,"partial_cmp","","",470,null],[11,"lt","","",470,null],[11,"le","","",470,null],[11,"gt","","",470,null],[11,"ge","","",470,null],[11,"eq","","",470,null],[11,"ne","","",470,null],[11,"clone","","",470,null],[11,"fmt","","",471,null],[11,"hash","","",471,null],[11,"eq","","",471,null],[11,"ne","","",471,null],[11,"clone","","",471,null],[11,"fmt","","",248,null],[11,"hash","","",248,null],[11,"eq","","",248,null],[11,"ne","","",248,null],[11,"clone","","",248,null],[11,"encode","","",248,null],[11,"decode","","",248,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",461,null],[11,"eq","","",461,null],[11,"ne","","",461,null],[11,"clone","","",461,null],[11,"principal_def_id","","",461,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",461,null],[11,"projection_bounds_with_self_ty","","",461,null],[11,"hash","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"self_ty","","",56,null],[11,"def_id","","",56,null],[11,"substs","","",56,null],[11,"input_types","","",56,null],[11,"to_poly_trait_predicate","","",56,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",56,null],[11,"as_ref","","",56,null],[11,"map_bound_ref","","",56,null],[11,"map_bound","","",56,null],[11,"fmt","rustc::ty","",472,null],[11,"fmt","rustc::ty::sty","",77,null],[11,"hash","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"sort_key","","",77,null],[11,"fmt","","",473,null],[11,"hash","","",473,null],[11,"eq","","",473,null],[11,"ne","","",473,null],[11,"clone","","",473,null],[11,"hash","","",460,null],[11,"eq","","",460,null],[11,"ne","","",460,null],[11,"clone","","",460,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"diverges","","",81,null],[11,"unwrap","","",81,null],[11,"unwrap_or","","",81,null],[11,"diverges","","",56,null],[11,"hash","","",247,null],[11,"eq","","",247,null],[11,"ne","","",247,null],[11,"clone","","",247,null],[11,"inputs","","",56,null],[11,"input","","",56,null],[11,"output","","",56,null],[11,"variadic","","",56,null],[11,"hash","","",474,null],[11,"eq","","",474,null],[11,"ne","","",474,null],[11,"clone","","",474,null],[11,"new","","",474,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",474,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",474,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",474,null],[11,"is_self","","",474,null],[11,"fmt","","",475,null],[11,"decode","","",475,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",475,null],[11,"hash","","",475,null],[11,"eq","","",475,null],[11,"ne","","",475,null],[11,"clone","","",475,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"hash","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",476,null],[11,"decode","","",476,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",476,null],[11,"hash","","",476,null],[11,"eq","","",476,null],[11,"ne","","",476,null],[11,"clone","","",476,null],[11,"hash","","",236,null],[11,"eq","","",236,null],[11,"ne","","",236,null],[11,"clone","","",236,null],[11,"hash","","",230,null],[11,"eq","","",230,null],[11,"ne","","",230,null],[11,"clone","","",230,null],[11,"hash","","",234,null],[11,"eq","","",234,null],[11,"ne","","",234,null],[11,"clone","","",234,null],[11,"hash","","",232,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"eq","","",232,null],[11,"ne","","",232,null],[11,"clone","","",232,null],[11,"decode","","",477,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",477,null],[11,"hash","","",477,null],[11,"eq","","",477,null],[11,"ne","","",477,null],[11,"clone","","",477,null],[11,"hash","","",478,null],[11,"eq","","",478,null],[11,"ne","","",478,null],[11,"clone","","",478,null],[11,"clone","","",62,null],[11,"hash","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"new","","",62,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"existentialbounds"}}],[11,"fmt","","",444,null],[11,"hash","","",444,null],[11,"eq","","",444,null],[11,"ne","","",444,null],[11,"clone","","",444,null],[11,"empty","","",444,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",444,null],[11,"to_predicates","","",444,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",479,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",479,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",479,null],[11,"clear","","",479,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",479,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",479,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",479,null],[11,"union","","Returns the union of both `EnumSets`.",479,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",479,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",479,null],[11,"remove","","Removes an enum from the EnumSet",479,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",479,null],[11,"iter","","Returns an iterator over an `EnumSet`.",479,null],[11,"clone","collections::binary_heap","",480,null],[11,"clone_from","","",480,null],[11,"default","","",480,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",480,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",480,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",480,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",480,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",480,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",480,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",480,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",480,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",480,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",480,null],[11,"push","","Pushes an item onto the binary heap.",480,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",480,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",480,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",480,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",480,null],[11,"len","","Returns the length of the binary heap.",480,null],[11,"is_empty","","Checks if the binary heap is empty.",480,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",480,null],[11,"clear","","Drops all items from the binary heap.",480,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",480,null],[11,"clone","","",481,null],[11,"next","","",481,null],[11,"size_hint","","",481,null],[11,"next_back","","",481,null],[11,"clone","","",482,null],[11,"next","","",482,null],[11,"size_hint","","",482,null],[11,"next_back","","",482,null],[11,"next","","",483,null],[11,"size_hint","","",483,null],[11,"next_back","","",483,null],[11,"from","","",480,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",326,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",480,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",480,null],[11,"extend","","",480,null],[11,"extend","","",480,null],[11,"drop","collections::btree::map","",484,null],[11,"clone","","",484,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",484,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",484,null],[11,"get","","Returns a reference to the value corresponding to the key.",484,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",484,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",484,null],[11,"insert","","Inserts a key-value pair into the map.",484,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",484,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",484,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",484,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",484,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",484,null],[11,"next","","",485,null],[11,"size_hint","","",485,null],[11,"next_back","","",485,null],[11,"len","","",485,null],[11,"clone","","",485,null],[11,"next","","",486,null],[11,"size_hint","","",486,null],[11,"next_back","","",486,null],[11,"len","","",486,null],[11,"into_iter","","",484,null],[11,"drop","","",487,null],[11,"next","","",487,null],[11,"size_hint","","",487,null],[11,"next_back","","",487,null],[11,"len","","",487,null],[11,"next","","",488,null],[11,"size_hint","","",488,null],[11,"next_back","","",488,null],[11,"len","","",488,null],[11,"clone","","",488,null],[11,"next","","",489,null],[11,"size_hint","","",489,null],[11,"next_back","","",489,null],[11,"len","","",489,null],[11,"clone","","",489,null],[11,"next","","",490,null],[11,"next","","",491,null],[11,"size_hint","","",491,null],[11,"next_back","","",491,null],[11,"len","","",491,null],[11,"next_back","","",490,null],[11,"clone","","",490,null],[11,"next","","",492,null],[11,"next_back","","",492,null],[11,"from_iter","","",484,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",484,null],[11,"extend","","",484,null],[11,"hash","","",484,null],[11,"default","","",484,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",484,null],[11,"partial_cmp","","",484,null],[11,"cmp","","",484,null],[11,"fmt","","",484,null],[11,"index","","",484,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",484,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",484,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",484,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",484,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",484,null],[11,"len","","Returns the number of elements in the map.",484,null],[11,"is_empty","","Returns true if the map contains no elements.",484,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",493,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",493,null],[11,"key","","Returns a reference to this entry&#39;s key.",493,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",494,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",494,null],[11,"key","","Gets a reference to the key in the entry.",495,null],[11,"get","","Gets a reference to the value in the entry.",495,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",495,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",495,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",495,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",495,null],[11,"partial_cmp","collections::btree::set","",496,null],[11,"lt","","",496,null],[11,"le","","",496,null],[11,"gt","","",496,null],[11,"ge","","",496,null],[11,"cmp","","",496,null],[11,"eq","","",496,null],[11,"ne","","",496,null],[11,"hash","","",496,null],[11,"clone","","",496,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",496,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",496,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",496,null],[11,"difference","","Visits the values representing the difference, in ascending order.",496,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",496,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",496,null],[11,"union","","Visits the values representing the union, in ascending order.",496,null],[11,"len","","Returns the number of elements in the set.",496,null],[11,"is_empty","","Returns true if the set contains no elements.",496,null],[11,"clear","","Clears the set, removing all values.",496,null],[11,"contains","","Returns `true` if the set contains a value.",496,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",496,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",496,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",496,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",496,null],[11,"insert","","Adds a value to the set.",496,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",496,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",496,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",496,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",496,null],[11,"from_iter","","",496,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",496,null],[11,"extend","","",496,null],[11,"extend","","",496,null],[11,"default","","",496,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",496,null],[11,"clone","","",497,null],[11,"next","","",497,null],[11,"size_hint","","",497,null],[11,"next_back","","",497,null],[11,"len","","",497,null],[11,"next","","",498,null],[11,"size_hint","","",498,null],[11,"next_back","","",498,null],[11,"len","","",498,null],[11,"clone","","",499,null],[11,"next","","",499,null],[11,"next_back","","",499,null],[11,"clone","","",500,null],[11,"next","","",500,null],[11,"size_hint","","",500,null],[11,"clone","","",501,null],[11,"next","","",501,null],[11,"size_hint","","",501,null],[11,"clone","","",502,null],[11,"next","","",502,null],[11,"size_hint","","",502,null],[11,"clone","","",503,null],[11,"next","","",503,null],[11,"size_hint","","",503,null],[11,"borrow","collections::borrow","",504,null],[11,"clone","","",504,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",504,null],[11,"into_owned","","Extracts the owned data.",504,null],[11,"deref","","",504,null],[11,"cmp","","",504,null],[11,"eq","","",504,null],[11,"partial_cmp","","",504,null],[11,"fmt","","",504,null],[11,"fmt","","",504,null],[11,"hash","","",504,null],[11,"as_ref","","",504,null],[11,"hash","collections::enum_set","",479,null],[11,"cmp","","",479,null],[11,"partial_cmp","","",479,null],[11,"lt","","",479,null],[11,"le","","",479,null],[11,"gt","","",479,null],[11,"ge","","",479,null],[11,"eq","","",479,null],[11,"ne","","",479,null],[11,"clone","","",479,null],[11,"fmt","","",479,null],[11,"sub","","",479,null],[11,"bitor","","",479,null],[11,"bitand","","",479,null],[11,"bitxor","","",479,null],[11,"clone","","",505,null],[11,"next","","",505,null],[11,"size_hint","","",505,null],[11,"from_iter","","",479,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",479,null],[11,"extend","","",479,null],[11,"clone","collections::linked_list","",506,null],[11,"clone","","",507,null],[11,"default","","",508,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",508,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",508,null],[11,"iter","","Provides a forward iterator.",508,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",508,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",508,null],[11,"len","","Returns the length of the `LinkedList`.",508,null],[11,"clear","","Removes all elements from the `LinkedList`.",508,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",508,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",508,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",508,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",508,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",508,null],[11,"push_front","","Adds an element first in the list.",508,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",508,null],[11,"push_back","","Appends an element to the back of a list",508,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",508,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",508,null],[11,"front_place","","Returns a place for insertion at the front of the list.",508,null],[11,"back_place","","Returns a place for insertion at the back of the list.",508,null],[11,"drop","","",508,null],[11,"next","","",506,null],[11,"size_hint","","",506,null],[11,"next_back","","",506,null],[11,"next","","",509,null],[11,"size_hint","","",509,null],[11,"next_back","","",509,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",509,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",509,null],[11,"next","","",507,null],[11,"size_hint","","",507,null],[11,"next_back","","",507,null],[11,"from_iter","","",508,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",508,null],[11,"extend","","",508,null],[11,"extend","","",508,null],[11,"eq","","",508,null],[11,"ne","","",508,null],[11,"partial_cmp","","",508,null],[11,"cmp","","",508,null],[11,"clone","","",508,null],[11,"fmt","","",508,null],[11,"hash","","",508,null],[11,"make_place","","",510,null],[11,"pointer","","",510,null],[11,"finalize","","",510,null],[11,"make_place","","",511,null],[11,"pointer","","",511,null],[11,"finalize","","",511,null],[11,"start","core::ops","",512,null],[11,"end","","",513,null],[11,"start","","",514,null],[11,"end","","",514,null],[11,"borrow","collections::vec","",326,null],[11,"borrow_mut","","",326,null],[11,"clone","collections::str","",515,null],[11,"next","","",515,null],[11,"size_hint","","",515,null],[11,"borrow","collections::string","",516,null],[11,"fmt","core::str::pattern","",517,null],[11,"eq","","",517,null],[11,"ne","","",517,null],[11,"clone","","",517,null],[11,"fmt","","",518,null],[11,"clone","","",518,null],[11,"haystack","","",518,null],[11,"next","","",518,null],[11,"next_match","","",518,null],[11,"next_reject","","",518,null],[11,"next_back","","",518,null],[11,"next_match_back","","",518,null],[11,"next_reject_back","","",518,null],[11,"fmt","","",519,null],[11,"clone","","",519,null],[11,"haystack","","",519,null],[11,"next","","",519,null],[11,"next_match","","",519,null],[11,"next_reject","","",519,null],[11,"next_back","","",519,null],[11,"next_match_back","","",519,null],[11,"next_reject_back","","",519,null],[11,"clone","","",520,null],[11,"fmt","","",520,null],[11,"haystack","","",520,null],[11,"next","","",520,null],[11,"next_match","","",520,null],[11,"next_reject","","",520,null],[11,"next_back","","",520,null],[11,"next_match_back","","",520,null],[11,"next_reject_back","","",520,null],[11,"fmt","","",521,null],[11,"clone","","",521,null],[11,"haystack","","",521,null],[11,"next","","",521,null],[11,"next_match","","",521,null],[11,"next_back","","",521,null],[11,"next_match_back","","",521,null],[11,"cmp","collections::string","",516,null],[11,"partial_cmp","","",516,null],[11,"lt","","",516,null],[11,"le","","",516,null],[11,"gt","","",516,null],[11,"ge","","",516,null],[11,"fmt","","",522,null],[11,"fmt","","",523,null],[11,"new","","Creates a new empty `String`.",516,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",516,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",516,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",516,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",516,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",516,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",516,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",516,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",516,null],[11,"as_str","","Extracts a string slice containing the entire string.",516,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",516,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",516,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",516,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",516,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",516,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",516,null],[11,"push","","Appends the given `char` to the end of this `String`.",516,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",516,null],[11,"truncate","","Shortens this `String` to the specified length.",516,null],[11,"pop","","Removes the last character from the string buffer and returns it.",516,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",516,null],[11,"insert","","Inserts a character into this `String` at a byte position.",516,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",516,null],[11,"len","","Returns the length of this `String`, in bytes.",516,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",516,null],[11,"clear","","Truncates this `String`, removing all contents.",516,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",516,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",516,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",522,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",522,null],[11,"fmt","","",522,null],[11,"fmt","","",523,null],[11,"clone","","",516,null],[11,"clone_from","","",516,null],[11,"from_iter","","",516,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",516,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",516,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",516,null],[11,"extend","","",516,null],[11,"extend","","",516,null],[11,"extend","","",516,null],[11,"eq","","",516,null],[11,"ne","","",516,null],[11,"eq","","",516,null],[11,"ne","","",516,null],[11,"eq","","",516,null],[11,"ne","","",516,null],[11,"eq","collections::borrow","",504,null],[11,"ne","","",504,null],[11,"eq","","",504,null],[11,"ne","","",504,null],[11,"eq","","",504,null],[11,"ne","","",504,null],[11,"eq","collections::string","",516,null],[11,"ne","","",516,null],[11,"default","","",516,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",516,null],[11,"fmt","","",516,null],[11,"hash","","",516,null],[11,"add","","",516,null],[11,"index","","",516,null],[11,"index","","",516,null],[11,"index","","",516,null],[11,"index","","",516,null],[11,"index","","",516,null],[11,"index","","",516,null],[11,"index_mut","","",516,null],[11,"index_mut","","",516,null],[11,"index_mut","","",516,null],[11,"index_mut","","",516,null],[11,"index_mut","","",516,null],[11,"index_mut","","",516,null],[11,"deref","","",516,null],[11,"deref_mut","","",516,null],[11,"from_str","","",516,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",524,null],[11,"fmt","","",524,null],[11,"fmt","","",524,null],[11,"eq","","",524,null],[11,"as_ref","","",516,null],[11,"as_ref","","",516,null],[11,"from","","",516,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",504,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",504,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",516,null],[11,"write_str","","",516,null],[11,"write_char","","",516,null],[11,"drop","","",525,null],[11,"next","","",525,null],[11,"size_hint","","",525,null],[11,"next_back","","",525,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",326,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",326,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",326,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",326,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",326,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",326,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",326,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",326,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",326,null],[11,"as_slice","","Extracts a slice containing the entire vector.",326,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",326,null],[11,"set_len","","Sets the length of a vector.",326,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",326,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",326,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",326,null],[11,"retain","","Retains only the elements specified by the predicate.",326,null],[11,"push","","Appends an element to the back of a collection.",326,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",326,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",326,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",326,null],[11,"clear","","Clears the vector, removing all values.",326,null],[11,"len","","Returns the number of elements in the vector.",326,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",326,null],[11,"split_off","","Splits the collection into two at the given index.",326,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",326,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",326,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",326,null],[11,"clone","","",326,null],[11,"clone_from","","",326,null],[11,"hash","","",326,null],[11,"index","","",326,null],[11,"index_mut","","",326,null],[11,"index","","",326,null],[11,"index","","",326,null],[11,"index","","",326,null],[11,"index","","",326,null],[11,"index","","",326,null],[11,"index","","",326,null],[11,"index_mut","","",326,null],[11,"index_mut","","",326,null],[11,"index_mut","","",326,null],[11,"index_mut","","",326,null],[11,"index_mut","","",326,null],[11,"index_mut","","",326,null],[11,"deref","","",326,null],[11,"deref_mut","","",326,null],[11,"from_iter","","",326,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",326,null],[11,"extend","","",326,null],[11,"extend","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","collections::borrow","",504,null],[11,"ne","","",504,null],[11,"eq","","",504,null],[11,"ne","","",504,null],[11,"eq","","",504,null],[11,"ne","","",504,null],[11,"eq","collections::vec","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"eq","","",326,null],[11,"ne","","",326,null],[11,"partial_cmp","","",326,null],[11,"cmp","","",326,null],[11,"drop","","",326,null],[11,"default","","",326,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",326,null],[11,"as_ref","","",326,null],[11,"as_mut","","",326,null],[11,"as_ref","","",326,null],[11,"as_mut","","",326,null],[11,"from","","",326,null],[11,"from","","",326,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",504,null],[11,"from","","",504,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",504,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",526,null],[11,"size_hint","","",526,null],[11,"count","","",526,null],[11,"next_back","","",526,null],[11,"clone","","",526,null],[11,"drop","","",526,null],[11,"next","","",527,null],[11,"size_hint","","",527,null],[11,"next_back","","",527,null],[11,"drop","","",527,null],[11,"clone","collections::vec_deque","",528,null],[11,"drop","","",528,null],[11,"default","","",528,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",528,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",528,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",528,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",528,null],[11,"swap","","Swaps elements at indices `i` and `j`.",528,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",528,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",528,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",528,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",528,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",528,null],[11,"iter","","Returns a front-to-back iterator.",528,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",528,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",528,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",528,null],[11,"len","","Returns the number of elements in the `VecDeque`.",528,null],[11,"is_empty","","Returns true if the buffer contains no elements",528,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",528,null],[11,"clear","","Clears the buffer, removing all values.",528,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",528,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",528,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",528,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",528,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",528,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",528,null],[11,"push_front","","Inserts an element first in the sequence.",528,null],[11,"push_back","","Appends an element to the back of a buffer",528,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",528,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",528,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",528,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",528,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",528,null],[11,"split_off","","Splits the collection into two at the given index.",528,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",528,null],[11,"retain","","Retains only the elements specified by the predicate.",528,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",528,null],[11,"clone","","",529,null],[11,"next","","",529,null],[11,"size_hint","","",529,null],[11,"next_back","","",529,null],[11,"next","","",530,null],[11,"size_hint","","",530,null],[11,"next_back","","",530,null],[11,"clone","","",531,null],[11,"next","","",531,null],[11,"size_hint","","",531,null],[11,"next_back","","",531,null],[11,"drop","","",532,null],[11,"next","","",532,null],[11,"size_hint","","",532,null],[11,"next_back","","",532,null],[11,"eq","","",528,null],[11,"partial_cmp","","",528,null],[11,"cmp","","",528,null],[11,"hash","","",528,null],[11,"index","","",528,null],[11,"index_mut","","",528,null],[11,"from_iter","","",528,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",528,null],[11,"extend","","",528,null],[11,"extend","","",528,null],[11,"fmt","","",528,null],[11,"from","","",528,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",326,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",533,null],[11,"ne","","",533,null],[11,"hash","","",533,null],[11,"fmt","","",533,null],[11,"clone","","",533,null],[11,"clone","alloc::boxed","",534,null],[11,"pointer","","",535,null],[11,"make_place","","",535,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",535,null],[11,"finalize","","",445,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",534,null],[11,"drop","","",535,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",445,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",445,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",445,null],[11,"default","","",445,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",445,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",445,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",445,null],[11,"clone","","",445,null],[11,"eq","","",445,null],[11,"ne","","",445,null],[11,"partial_cmp","","",445,null],[11,"lt","","",445,null],[11,"le","","",445,null],[11,"ge","","",445,null],[11,"gt","","",445,null],[11,"cmp","","",445,null],[11,"hash","","",445,null],[11,"from","","",445,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",445,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",445,null],[11,"fmt","","",445,null],[11,"fmt","","",445,null],[11,"fmt","","",445,null],[11,"deref","","",445,null],[11,"deref_mut","","",445,null],[11,"next","","",445,null],[11,"size_hint","","",445,null],[11,"next_back","","",445,null],[11,"call_once","","",445,null],[11,"call_once","","",445,null],[11,"clone","","",445,null],[11,"borrow","","",445,null],[11,"borrow_mut","","",445,null],[11,"as_ref","","",445,null],[11,"as_mut","","",445,null],[11,"deref","rustc::ty::sty","",444,null],[11,"deref_mut","","",444,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",63,null],[11,"encode","","",63,null],[11,"clone","","",63,null],[11,"to_usize","","",63,null],[11,"from_usize","","",63,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","rustc::ty::context","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",207,null],[11,"new","rustc::ty::sty","",475,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",475,null],[11,"is_bound","","",70,null],[11,"needs_infer","","",70,null],[11,"escapes_depth","","",70,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",70,null],[11,"as_opt_param_ty","rustc::ty","",404,null],[11,"is_nil","","",404,null],[11,"is_empty","","",404,null],[11,"is_primitive","","",404,null],[11,"is_ty_var","","",404,null],[11,"is_phantom_data","","",404,null],[11,"is_bool","","",404,null],[11,"is_param","","",404,null],[11,"is_self","","",404,null],[11,"is_slice","","",404,null],[11,"is_structural","","",404,null],[11,"is_simd","","",404,null],[11,"sequence_element_type","","",404,null],[11,"simd_type","","",404,null],[11,"simd_size","","",404,null],[11,"is_region_ptr","","",404,null],[11,"is_unsafe_ptr","","",404,null],[11,"is_unique","","",404,null],[11,"is_scalar","","",404,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",404,null],[11,"is_trait","","",404,null],[11,"is_integral","","",404,null],[11,"is_fresh","","",404,null],[11,"is_uint","","",404,null],[11,"is_char","","",404,null],[11,"is_fp","","",404,null],[11,"is_numeric","","",404,null],[11,"is_signed","","",404,null],[11,"is_machine","","",404,null],[11,"has_concrete_skeleton","","",404,null],[11,"builtin_deref","","",404,null],[11,"builtin_index","","",404,null],[11,"fn_sig","","",404,null],[11,"fn_abi","","Returns the ABI of the given function.",404,null],[11,"fn_args","","",404,null],[11,"fn_ret","","",404,null],[11,"is_fn","","",404,null],[11,"ty_to_def_id","","",404,null],[11,"ty_adt_def","","",404,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",404,null],[11,"clone","","",536,null],[11,"clone","","",537,null],[11,"is_present","","",537,null],[11,"has_drop_flag","","",537,null],[11,"fmt","","",538,null],[11,"eq","","",538,null],[11,"ne","","",538,null],[11,"clone","","",538,null],[11,"id","","",538,null],[11,"fmt","","",462,null],[11,"hash","","",462,null],[11,"eq","","",462,null],[11,"ne","","",462,null],[11,"clone","","",462,null],[11,"with_fresh_ty_vars","","",462,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",89,null],[11,"def","","",89,null],[11,"def_id","","",89,null],[11,"name","","",89,null],[11,"vis","","",89,null],[11,"container","","",89,null],[11,"as_opt_method","","",89,null],[11,"fmt","","",539,null],[11,"clone","","",539,null],[11,"def_id","","",539,null],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"is_descendant_of","rustc::hir::map","",149,null],[11,"from_hir","rustc::ty","",95,{"inputs":[{"name":"visibility"},{"name":"u32"},{"name":"tyctxt"}],"output":{"name":"visibility"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",95,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",95,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"new","","",88,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",88,null],[11,"eq","","",88,null],[11,"hash","","",88,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"encode","","",540,null],[11,"decode","","",540,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",540,null],[11,"ne","","",540,null],[11,"clone","","",540,null],[11,"encode","","",541,null],[11,"decode","","",541,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",541,null],[11,"clone","","",541,null],[11,"fmt","","",542,null],[11,"clone","","",542,null],[11,"fmt","","",543,null],[11,"hash","","",543,null],[11,"eq","","",543,null],[11,"ne","","",543,null],[11,"clone","","",543,null],[11,"expr","","",543,{"inputs":[{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",543,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",544,null],[11,"eq","","",544,null],[11,"ne","","",544,null],[11,"clone","","",544,null],[11,"fmt","","",545,null],[11,"clone","","",545,null],[11,"hash","","",472,null],[11,"cmp","","",472,null],[11,"partial_cmp","","",472,null],[11,"lt","","",472,null],[11,"le","","",472,null],[11,"gt","","",472,null],[11,"ge","","",472,null],[11,"clone","","",472,null],[11,"eq","","",472,null],[11,"ne","","",472,null],[18,"HAS_PARAMS","rustdoc","",472,null],[18,"HAS_SELF","","",472,null],[18,"HAS_TY_INFER","","",472,null],[18,"HAS_RE_INFER","","",472,null],[18,"HAS_RE_EARLY_BOUND","","",472,null],[18,"HAS_FREE_REGIONS","","",472,null],[18,"HAS_TY_ERR","","",472,null],[18,"HAS_PROJECTION","","",472,null],[18,"HAS_TY_CLOSURE","","",472,null],[18,"HAS_LOCAL_NAMES","","",472,null],[18,"KEEP_IN_LOCAL_TCX","","",472,null],[18,"NEEDS_SUBST","","",472,null],[18,"NOMINAL_FLAGS","","",472,null],[18,"SIZEDNESS_CACHED","","",472,null],[18,"IS_SIZED","","",472,null],[18,"MOVENESS_CACHED","","",472,null],[18,"MOVES_BY_DEFAULT","","",472,null],[11,"empty","rustc::ty","Returns an empty set of flags.",472,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",472,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",472,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",472,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",472,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",472,null],[11,"is_all","","Returns `true` if all flags are currently set.",472,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",472,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",472,null],[11,"insert","","Inserts the specified flags in-place.",472,null],[11,"remove","","Removes the specified flags in-place.",472,null],[11,"toggle","","Toggles the specified flags in-place.",472,null],[11,"bitor","","Returns the union of the two sets of flags.",472,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",472,null],[11,"bitand","","Returns the intersection between the two sets of flags.",472,null],[11,"sub","","Returns the set difference of the two sets of flags.",472,null],[11,"not","","Returns the complement of this set of flags.",472,null],[11,"eq","","",404,null],[11,"hash","","",404,null],[11,"hash","","",546,null],[11,"eq","","",546,null],[11,"ne","","",546,null],[11,"clone","","",546,null],[11,"decode","","",547,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",547,null],[11,"fmt","","",547,null],[11,"hash","","",547,null],[11,"eq","","",547,null],[11,"clone","","",547,null],[11,"fmt","","",548,null],[11,"clone","","",548,null],[11,"eq","","",548,null],[11,"ne","","",548,null],[11,"clone","","",549,null],[11,"eq","","",549,null],[11,"ne","","",549,null],[11,"clone","","",467,null],[11,"eq","","",233,null],[11,"ne","","",233,null],[11,"clone","","",233,null],[11,"clone","","",463,null],[11,"clone","","",60,null],[11,"clone","","",69,null],[11,"to_early_bound_region","","",69,null],[11,"to_bound_region","","",69,null],[11,"fmt","","",464,null],[11,"clone","","",464,null],[11,"empty","","",464,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",464,null],[11,"has_type_params","","",464,null],[11,"has_region_params","","",464,null],[11,"clone","","",465,null],[11,"empty","","",465,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",465,null],[11,"instantiate_supertrait","","",465,null],[11,"hash","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",72,null],[11,"hash","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"def_id","","",73,null],[11,"input_types","","",73,null],[11,"self_ty","","",73,null],[11,"def_id","rustc::ty::sty","",56,null],[11,"dep_node","","",56,null],[11,"fmt","rustc::ty","",74,null],[11,"hash","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"hash","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"item_name","rustc::ty::sty","",56,null],[11,"sort_key","","",56,null],[11,"to_poly_trait_ref","","",64,null],[11,"to_poly_trait_ref","","",56,null],[11,"to_poly_trait_ref","","",56,null],[11,"to_predicate","","",64,null],[11,"to_predicate","","",56,null],[11,"to_predicate","","",56,null],[11,"to_predicate","","",56,null],[11,"to_predicate","","",56,null],[11,"to_predicate","","",56,null],[11,"walk_tys","rustc::ty","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",72,null],[11,"to_opt_poly_trait_ref","","",72,null],[11,"clone","","",466,null],[11,"empty","","",466,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",466,null],[11,"new","rustc::ty::sty","",64,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",64,null],[11,"input_types","","",64,null],[11,"clone","rustc::ty","",455,null],[11,"with_caller_bounds","","",455,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",455,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",468,null],[11,"clone","","",468,null],[11,"hash","","",550,null],[11,"cmp","","",550,null],[11,"partial_cmp","","",550,null],[11,"lt","","",550,null],[11,"le","","",550,null],[11,"gt","","",550,null],[11,"ge","","",550,null],[11,"clone","","",550,null],[11,"eq","","",550,null],[11,"ne","","",550,null],[18,"NO_ADT_FLAGS","rustdoc","",550,null],[18,"IS_ENUM","","",550,null],[18,"IS_DTORCK","","",550,null],[18,"IS_DTORCK_VALID","","",550,null],[18,"IS_PHANTOM_DATA","","",550,null],[18,"IS_SIMD","","",550,null],[18,"IS_FUNDAMENTAL","","",550,null],[18,"IS_NO_DROP_FLAG","","",550,null],[11,"empty","rustc::ty","Returns an empty set of flags.",550,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",550,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",550,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",550,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",550,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",550,null],[11,"is_all","","Returns `true` if all flags are currently set.",550,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",550,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",550,null],[11,"insert","","Inserts the specified flags in-place.",550,null],[11,"remove","","Removes the specified flags in-place.",550,null],[11,"toggle","","Toggles the specified flags in-place.",550,null],[11,"bitor","","Returns the union of the two sets of flags.",550,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",550,null],[11,"bitand","","Returns the intersection between the two sets of flags.",550,null],[11,"sub","","Returns the set difference of the two sets of flags.",550,null],[11,"not","","Returns the complement of this set of flags.",550,null],[11,"eq","","",551,null],[11,"hash","","",551,null],[11,"eq","","",552,null],[11,"fmt","","",552,null],[11,"clone","","",552,null],[11,"decode","","",553,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",553,null],[11,"fmt","","",553,null],[11,"hash","","",553,null],[11,"eq","","",553,null],[11,"clone","","",553,null],[11,"from_variant_data","","",553,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantkind"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",551,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",551,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",551,null],[11,"is_simd","","",551,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",551,null],[11,"has_dtor","","Returns whether this type has a destructor.",551,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",551,null],[11,"type_scheme","","",551,null],[11,"predicates","","",551,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",551,null],[11,"is_empty","","",551,null],[11,"is_univariant","","",551,null],[11,"is_payloadfree","","",551,null],[11,"variant_with_id","","",551,null],[11,"variant_index_with_id","","",551,null],[11,"variant_of_def","","",551,null],[11,"destructor","","",551,null],[11,"set_destructor","","",551,null],[11,"dtor_kind","","",551,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",551,null],[11,"kind","","",97,null],[11,"is_tuple_struct","","",97,null],[11,"find_field_named","","",97,null],[11,"index_of_field_named","","",97,null],[11,"field_named","","",97,null],[11,"new","","",93,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"fielddefdata"}}],[11,"ty","","",93,null],[11,"unsubst_ty","","",93,null],[11,"fulfill_ty","","",93,null],[11,"clone","","",459,null],[11,"decode","","",554,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",554,null],[11,"fmt","","",554,null],[11,"hash","","",554,null],[11,"eq","","",554,null],[11,"cmp","","",554,null],[11,"partial_cmp","","",554,null],[11,"clone","","",554,null],[11,"trait_did","","",554,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",554,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",404,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",404,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",404,null],[11,"is_noop","","",459,null],[11,"eq","","",555,null],[11,"fmt","","",555,null],[11,"clone","","",555,null],[11,"from_mutbl","","",555,{"inputs":[{"name":"mutability"}],"output":{"name":"lvaluepreference"}}],[11,"from_mutbl","","",547,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",547,null],[11,"to_user_str","","",547,null],[11,"node_id_to_type","rustc::ty::context","",207,null],[11,"node_id_to_type_opt","","",207,null],[11,"node_id_item_substs","","",207,null],[11,"pat_ty","","",207,null],[11,"pat_ty_opt","","",207,null],[11,"expr_ty","","",207,null],[11,"expr_ty_opt","","",207,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",207,null],[11,"expr_ty_adjusted_opt","","",207,null],[11,"expr_span","","",207,null],[11,"local_var_name_str","","",207,null],[11,"resolve_expr","","",207,null],[11,"expr_is_lval","","",207,null],[11,"provided_trait_methods","","",207,null],[11,"associated_consts","","",207,null],[11,"trait_impl_polarity","","",207,null],[11,"custom_coerce_unsized_kind","","",207,null],[11,"impl_or_trait_item","","",207,null],[11,"trait_item_def_ids","","",207,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",207,null],[11,"is_impl","","Returns whether this DefId refers to an impl",207,null],[11,"trait_ref_to_def_id","","",207,null],[11,"def_key","","",207,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",207,null],[11,"item_name","","",207,null],[11,"register_item_type","","",207,null],[11,"lookup_item_type","","",207,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",207,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",207,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",207,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",207,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",207,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",207,null],[11,"get_attrs","","Get the attributes of a definition.",207,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",207,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",207,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",207,null],[11,"item_variances","","",207,null],[11,"trait_has_default_impl","","",207,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",207,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",207,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",207,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",207,null],[11,"closure_kind","","",207,null],[11,"closure_type","","",207,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",207,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",207,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",207,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",207,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",207,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",207,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",207,null],[11,"is_method_call","","",207,null],[11,"is_overloaded_autoderef","","",207,null],[11,"upvar_capture","","",207,null],[11,"visit_all_items_in_krate","","",207,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",207,null],[11,"fmt","rustc::ty","",556,null],[11,"eq","","",556,null],[11,"ne","","",556,null],[11,"clone","","",556,null],[11,"with_freevars","rustc::ty::context","",207,null],[11,"fmt","rustc::util::common","",557,null],[11,"clone","","",557,null],[11,"drop","","",558,null],[11,"memoize","core::cell","",121,null],[11,"eq","rustc::util::ppaux","",559,null],[11,"clone","","",559,null],[11,"fmt","rustc::ty::sty","",461,null],[11,"fmt","rustc::ty","",60,null],[11,"fmt","","",69,null],[11,"fmt","","",404,null],[11,"fmt","rustc::ty::sty","",442,null],[11,"fmt","rustc::ty::subst","",65,null],[11,"fmt","rustc::ty","",459,null],[11,"fmt","rustc::ty::sty","",64,null],[11,"fmt","rustc::ty::trait_def","",448,null],[11,"fmt","rustc::ty","",551,null],[11,"fmt","rustc::ty::adjustment","",400,null],[11,"fmt","","",401,null],[11,"fmt","rustc::ty::sty","",461,null],[11,"fmt","rustc::ty","",72,null],[11,"fmt","rustc::ty::sty","",470,null],[11,"fmt","","",470,null],[11,"fmt","","",70,null],[11,"fmt","","",460,null],[11,"fmt","rustc::ty","",467,null],[11,"fmt","","",455,null],[11,"fmt","","",463,null],[11,"fmt","rustc::ty::sty","",70,null],[11,"fmt","","",469,null],[11,"fmt","rustc::ty","",541,null],[11,"fmt","","",540,null],[11,"fmt","","",465,null],[11,"fmt","","",466,null],[11,"fmt","","",89,null],[11,"fmt","rustc::ty::sty","",247,null],[11,"fmt","","",62,null],[11,"fmt","","",444,null],[11,"fmt","","",236,null],[11,"fmt","","",230,null],[11,"fmt","","",234,null],[11,"fmt","","",232,null],[11,"fmt","","",247,null],[11,"fmt","","",478,null],[11,"fmt","rustc::ty","",233,null],[11,"fmt","rustc::ty::sty","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",64,null],[11,"fmt","","",471,null],[11,"fmt","rustc::ty","",404,null],[11,"fmt","","",546,null],[11,"fmt","","",549,null],[11,"fmt","rustc::ty::sty","",478,null],[11,"fmt","rustc::ty","",556,null],[11,"fmt","rustc::ty::sty","",474,null],[11,"fmt","","",474,null],[11,"fmt","rustc::ty","",75,null],[11,"fmt","","",74,null],[11,"fmt","","",73,null],[11,"fmt","","",73,null],[11,"fmt","","",76,null],[11,"fmt","","",76,null],[11,"fmt","rustc::ty::sty","",77,null],[11,"fmt","rustc::ty","",554,null],[11,"fmt","","",72,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",560,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",560,null],[11,"result","","",560,null],[11,"reset","","",560,null],[11,"output_bits","","",560,null],[4,"Input","rustdoc::core","",null,null],[13,"File","","Load source from file",114,null],[13,"Str","","",114,null],[12,"name","rustdoc::core::Input","",114,null],[12,"input","","",114,null],[3,"SearchPaths","rustdoc::core","",null,null],[3,"DocContext","","",null,null],[12,"map","","",561,null],[12,"maybe_typed","","",561,null],[12,"input","","",561,null],[12,"populated_crate_impls","","",561,null],[12,"deref_trait_did","","",561,null],[12,"access_levels","","Later on moved into `clean::Crate`",561,null],[12,"renderinfo","","Later on moved into `html::render::CACHE_KEY`",561,null],[12,"external_traits","","Later on moved through `clean::Crate` into `html::render::CACHE_KEY`",561,null],[4,"MaybeTyped","","Are we generating documentation (`Typed`) or tests (`NotTyped`)?",null,null],[13,"Typed","","",562,null],[13,"NotTyped","","",562,null],[5,"run_core","","",null,null],[6,"Externs","","",null,null],[6,"ExternalPaths","","",null,null],[8,"DocAccessLevels","","",null,null],[10,"is_doc_reachable","","",563,null],[11,"sess","","",561,null],[11,"tcx_opt","","",561,null],[11,"tcx","","",561,null],[11,"is_doc_reachable","rustc::middle::privacy","",299,null],[0,"doctree","rustdoc","This module is used to store stuff from Rust&#39;s AST in a more convenient\nmanner (and with prettier names) before cleaning.",null,null],[3,"Module","rustdoc::doctree","",null,null],[12,"name","","",564,null],[12,"attrs","","",564,null],[12,"where_outer","","",564,null],[12,"where_inner","","",564,null],[12,"extern_crates","","",564,null],[12,"imports","","",564,null],[12,"structs","","",564,null],[12,"enums","","",564,null],[12,"fns","","",564,null],[12,"mods","","",564,null],[12,"id","","",564,null],[12,"typedefs","","",564,null],[12,"statics","","",564,null],[12,"constants","","",564,null],[12,"traits","","",564,null],[12,"vis","","",564,null],[12,"stab","","",564,null],[12,"depr","","",564,null],[12,"impls","","",564,null],[12,"def_traits","","",564,null],[12,"foreigns","","",564,null],[12,"macros","","",564,null],[12,"is_crate","","",564,null],[3,"Struct","","",null,null],[12,"vis","","",565,null],[12,"stab","","",565,null],[12,"depr","","",565,null],[12,"id","","",565,null],[12,"struct_type","","",565,null],[12,"name","","",565,null],[12,"generics","","",565,null],[12,"attrs","","",565,null],[12,"fields","","",565,null],[12,"whence","","",565,null],[3,"Enum","","",null,null],[12,"vis","","",566,null],[12,"stab","","",566,null],[12,"depr","","",566,null],[12,"variants","","",566,null],[12,"generics","","",566,null],[12,"attrs","","",566,null],[12,"id","","",566,null],[12,"whence","","",566,null],[12,"name","","",566,null],[3,"Variant","","",null,null],[12,"name","","",567,null],[12,"attrs","","",567,null],[12,"def","","",567,null],[12,"stab","","",567,null],[12,"depr","","",567,null],[12,"whence","","",567,null],[3,"Function","","",null,null],[12,"decl","","",568,null],[12,"attrs","","",568,null],[12,"id","","",568,null],[12,"name","","",568,null],[12,"vis","","",568,null],[12,"stab","","",568,null],[12,"depr","","",568,null],[12,"unsafety","","",568,null],[12,"constness","","",568,null],[12,"whence","","",568,null],[12,"generics","","",568,null],[12,"abi","","",568,null],[3,"Typedef","","",null,null],[12,"ty","","",569,null],[12,"gen","","",569,null],[12,"name","","",569,null],[12,"id","","",569,null],[12,"attrs","","",569,null],[12,"whence","","",569,null],[12,"vis","","",569,null],[12,"stab","","",569,null],[12,"depr","","",569,null],[3,"Static","","",null,null],[12,"type_","","",570,null],[12,"mutability","","",570,null],[12,"expr","","",570,null],[12,"name","","",570,null],[12,"attrs","","",570,null],[12,"vis","","",570,null],[12,"stab","","",570,null],[12,"depr","","",570,null],[12,"id","","",570,null],[12,"whence","","",570,null],[3,"Constant","","",null,null],[12,"type_","","",571,null],[12,"expr","","",571,null],[12,"name","","",571,null],[12,"attrs","","",571,null],[12,"vis","","",571,null],[12,"stab","","",571,null],[12,"depr","","",571,null],[12,"id","","",571,null],[12,"whence","","",571,null],[3,"Trait","","",null,null],[12,"unsafety","","",572,null],[12,"name","","",572,null],[12,"items","","",572,null],[12,"generics","","",572,null],[12,"bounds","","",572,null],[12,"attrs","","",572,null],[12,"id","","",572,null],[12,"whence","","",572,null],[12,"vis","","",572,null],[12,"stab","","",572,null],[12,"depr","","",572,null],[3,"Impl","","",null,null],[12,"unsafety","","",573,null],[12,"polarity","","",573,null],[12,"generics","","",573,null],[12,"trait_","","",573,null],[12,"for_","","",573,null],[12,"items","","",573,null],[12,"attrs","","",573,null],[12,"whence","","",573,null],[12,"vis","","",573,null],[12,"stab","","",573,null],[12,"depr","","",573,null],[12,"id","","",573,null],[3,"DefaultImpl","","",null,null],[12,"unsafety","","",574,null],[12,"trait_","","",574,null],[12,"id","","",574,null],[12,"attrs","","",574,null],[12,"whence","","",574,null],[3,"Macro","","",null,null],[12,"name","","",575,null],[12,"id","","",575,null],[12,"attrs","","",575,null],[12,"whence","","",575,null],[12,"matchers","","",575,null],[12,"stab","","",575,null],[12,"depr","","",575,null],[12,"imported_from","","",575,null],[3,"ExternCrate","","",null,null],[12,"name","","",576,null],[12,"cnum","","",576,null],[12,"path","","",576,null],[12,"vis","","",576,null],[12,"attrs","","",576,null],[12,"whence","","",576,null],[3,"Import","","",null,null],[12,"id","","",577,null],[12,"vis","","",577,null],[12,"attrs","","",577,null],[12,"node","","",577,null],[12,"whence","","",577,null],[4,"StructType","","",null,null],[13,"Plain","","A normal struct",578,null],[13,"Tuple","","A tuple struct",578,null],[13,"Newtype","","A newtype struct (tuple struct with one element)",578,null],[13,"Unit","","A unit struct",578,null],[4,"TypeBound","","",null,null],[13,"RegionBound","","",579,null],[13,"TraitBound","","",579,null],[5,"struct_type_from_def","","",null,{"inputs":[{"name":"variantdata"}],"output":{"name":"structtype"}}],[11,"new","","",564,{"inputs":[{"name":"option"}],"output":{"name":"module"}}],[11,"decode","","",578,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",578,null],[11,"clone","","",578,null],[11,"fmt","","",578,null],[11,"fmt","","",570,null],[0,"fold","rustdoc","",null,null],[4,"FoldItem","rustdoc::fold","",null,null],[13,"Retain","","",580,null],[13,"Strip","","",580,null],[13,"Erase","","",580,null],[8,"DocFolder","","",null,null],[11,"fold_item","","",581,null],[11,"fold_inner_recur","","don&#39;t override!",581,null],[11,"fold_item_recur","","don&#39;t override!",581,null],[11,"fold_mod","","",581,null],[11,"fold_crate","","",581,null],[11,"fold","","",580,null],[0,"html","rustdoc","",null,null],[0,"highlight","rustdoc::html","Basic syntax highlighting functionality.",null,null],[3,"Classifier","rustdoc::html::highlight","Processes a program (nested in the internal `lexer`), classifying strings of\ntext by highlighting category (`Class`). Calls out to a `Writer` to write\neach span of text in sequence.",null,null],[4,"Class","","How a span of text is classified. Mostly corresponds to token kinds.",null,null],[13,"None","","",582,null],[13,"Comment","","",582,null],[13,"DocComment","","",582,null],[13,"Attribute","","",582,null],[13,"KeyWord","","",582,null],[13,"RefKeyWord","","",582,null],[13,"Self_","","",582,null],[13,"Op","","",582,null],[13,"Macro","","",582,null],[13,"MacroNonTerminal","","",582,null],[13,"String","","",582,null],[13,"Number","","",582,null],[13,"Bool","","",582,null],[13,"Ident","","",582,null],[13,"Lifetime","","",582,null],[13,"PreludeTy","","",582,null],[13,"PreludeVal","","",582,null],[5,"render_with_highlighting","","Highlights `src`, returning the HTML output.",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"option"}],"output":{"name":"string"}}],[5,"render_inner_with_highlighting","","Highlights `src`, returning the HTML output. Returns only the inner html to\nbe inserted into an element. C.f., `render_with_highlighting` which includes\nan enclosing `&lt;pre&gt;` block.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Writer","","Trait that controls writing the output of syntax highlighting. Users should\nimplement this trait to customise writing output.",null,null],[10,"enter_span","","Called when we start processing a span of text that should be highlighted.\nThe `Class` argument specifies how it should be highlighted.",583,null],[10,"exit_span","","Called at the end of a span of highlighted text.",583,null],[10,"string","","Called for a span of text, usually, but not always, a single token. If\nthe string of text (`T`) does correspond to a token, then the token will\nalso be passed. If the text should be highlighted differently from the\nsurrounding text, then the `Class` argument will be a value other than\n`None`.\nThe following sequences of callbacks are equivalent:\n```plain\n    enter_span(Foo), string(&quot;text&quot;, None), exit_span()\n    string(&quot;text&quot;, Foo)\n```\nThe latter can be thought of as a shorthand for the former, which is\nmore flexible.",583,null],[11,"eq","","",582,null],[11,"fmt","","",582,null],[11,"clone","","",582,null],[11,"new","","",584,{"inputs":[{"name":"stringreader"},{"name":"codemap"}],"output":{"name":"classifier"}}],[11,"write_source","","Exhausts the `lexer` writing the output into `out`.",584,null],[11,"rustdoc_class","","Returns the css class expected by rustdoc for each `Class`.",582,null],[0,"escape","rustdoc::html","HTML Escaping",null,null],[3,"Escape","rustdoc::html::escape","Wrapper struct which will emit the HTML-escaped version of the contained\nstring when passed to a format string.",null,null],[12,"0","","",585,null],[11,"fmt","","",585,null],[0,"item_type","rustdoc::html","Item types.",null,null],[4,"ItemType","rustdoc::html::item_type","Item type. Corresponds to `clean::ItemEnum` variants.",null,null],[13,"Module","","",586,null],[13,"ExternCrate","","",586,null],[13,"Import","","",586,null],[13,"Struct","","",586,null],[13,"Enum","","",586,null],[13,"Function","","",586,null],[13,"Typedef","","",586,null],[13,"Static","","",586,null],[13,"Trait","","",586,null],[13,"Impl","","",586,null],[13,"TyMethod","","",586,null],[13,"Method","","",586,null],[13,"StructField","","",586,null],[13,"Variant","","",586,null],[13,"Macro","","",586,null],[13,"Primitive","","",586,null],[13,"AssociatedType","","",586,null],[13,"Constant","","",586,null],[13,"AssociatedConst","","",586,null],[11,"clone","","",586,null],[11,"eq","","",586,null],[11,"from_item","","",586,{"inputs":[{"name":"item"}],"output":{"name":"itemtype"}}],[11,"from_type_kind","","",586,{"inputs":[{"name":"typekind"}],"output":{"name":"itemtype"}}],[11,"to_static_str","","",586,null],[11,"fmt","","",586,null],[0,"format","rustdoc::html","HTML formatting module",null,null],[3,"VisSpace","rustdoc::html::format","Helper to render an optional visibility with a space after it (if the\nvisibility is preset)",null,null],[12,"0","","",587,null],[3,"UnsafetySpace","","Similarly to VisSpace, this structure is used to render a function style with a\nspace after it.",null,null],[12,"0","","",588,null],[3,"ConstnessSpace","","Similarly to VisSpace, this structure is used to render a function constness\nwith a space after it.",null,null],[12,"0","","",589,null],[3,"Method","","Wrapper struct for properly emitting a method declaration.",null,null],[12,"0","","",590,null],[3,"MutableSpace","","Similar to VisSpace, but used for mutability",null,null],[12,"0","","",591,null],[3,"RawMutableSpace","","Similar to VisSpace, but used for mutability",null,null],[12,"0","","",592,null],[3,"WhereClause","","Wrapper struct for emitting a where clause from Generics.",null,null],[12,"0","","",593,null],[3,"TyParamBounds","","Wrapper struct for emitting type parameter bounds.",null,null],[12,"0","","",594,null],[3,"CommaSep","","Wrapper struct for emitting a comma-separated list of items",null,null],[12,"0","","",595,null],[3,"AbiSpace","","",null,null],[12,"0","","",596,null],[3,"HRef","","",null,null],[12,"did","","",597,null],[12,"text","","",597,null],[5,"href","","",null,{"inputs":[{"name":"defid"}],"output":{"name":"option"}}],[5,"fmt_impl_for_trait_page","","",null,{"inputs":[{"name":"impl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",587,null],[11,"clone","","",588,null],[11,"clone","","",589,null],[11,"clone","","",591,null],[11,"clone","","",592,null],[11,"get","","",587,null],[11,"get","","",588,null],[11,"get","","",589,null],[11,"fmt","","",595,null],[11,"fmt","","",594,null],[11,"fmt","rustdoc::clean","",6,null],[11,"fmt","rustdoc::html::format","",593,null],[11,"fmt","rustdoc::clean","",66,null],[11,"fmt","","",14,null],[11,"fmt","","",36,null],[11,"fmt","","",45,null],[11,"fmt","","",21,null],[11,"fmt","","",20,null],[11,"new","rustdoc::html::format","",597,{"inputs":[{"name":"defid"},{"name":"str"}],"output":{"name":"href"}}],[11,"fmt","","",597,null],[11,"fmt","rustdoc::clean","",40,null],[11,"fmt","","",26,null],[11,"fmt","","",11,null],[11,"fmt","","",39,null],[11,"fmt","","",10,null],[11,"fmt","rustdoc::html::format","",590,null],[11,"fmt","","",587,null],[11,"fmt","","",588,null],[11,"fmt","","",589,null],[11,"fmt","rustdoc::clean","",48,null],[11,"fmt","","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",33,null],[11,"fmt","rustdoc::html::format","",591,null],[11,"fmt","","",592,null],[11,"fmt","","",596,null],[0,"layout","rustdoc::html","",null,null],[3,"Layout","rustdoc::html::layout","",null,null],[12,"logo","","",598,null],[12,"favicon","","",598,null],[12,"external_html","","",598,null],[12,"krate","","",598,null],[12,"playground_url","","",598,null],[3,"Page","","",null,null],[12,"title","","",599,null],[12,"ty","","",599,null],[12,"root_path","","",599,null],[12,"description","","",599,null],[12,"keywords","","",599,null],[5,"render","","",null,{"inputs":[{"name":"write"},{"name":"layout"},{"name":"page"},{"name":"s"},{"name":"t"},{"name":"bool"}],"output":{"name":"result"}}],[5,"redirect","","",null,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",598,null],[0,"markdown","rustdoc::html","Markdown formatting for rustdoc",null,null],[3,"Markdown","rustdoc::html::markdown","A unit struct which has the `fmt::Display` trait implemented. When\nformatted, this struct will emit the HTML corresponding to the rendered\nversion of the contained markdown string.",null,null],[12,"0","","",600,null],[3,"MarkdownWithToc","","A unit struct like `Markdown`, that renders the markdown with a\ntable of contents.",null,null],[12,"0","","",601,null],[5,"render","","",null,{"inputs":[{"name":"formatter"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[5,"find_testable_code","","",null,{"inputs":[{"name":"str"},{"name":"collector"}],"output":null}],[5,"plain_summary_line","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[7,"PLAYGROUND_KRATE","","",null,null],[11,"fmt","","",600,null],[11,"fmt","","",601,null],[0,"render","rustdoc::html","Rustdoc&#39;s HTML Rendering module",null,null],[3,"Context","rustdoc::html::render","Major driving force in all rustdoc rendering. This contains information\nabout where in the tree-like hierarchy rendering is occurring and controls\nhow the current page is being rendered.",null,null],[12,"current","","Current hierarchy of components leading down to what&#39;s currently being\nrendered",602,null],[12,"root_path","","String representation of how to get back to the root path of the &#39;doc/&#39;\nfolder in terms of a relative URL.",602,null],[12,"dst","","The current destination folder of where HTML artifacts should be placed.\nThis changes as the context descends into the module hierarchy.",602,null],[12,"render_redirect_pages","","A flag, which when `true`, will render pages which redirect to the\nreal location of an item. This is used to allow external links to\npublicly reused items to redirect to the right location.",602,null],[12,"shared","","",602,null],[3,"SharedContext","","",null,null],[12,"src_root","","The path to the crate root source minus the file name.\nUsed for simplifying paths to the highlighted source code files.",603,null],[12,"layout","","This describes the layout of each page, and is not modified after\ncreation of the context (contains info like the favicon and added html).",603,null],[12,"include_sources","","This flag indicates whether [src] links should be generated or not. If\nthe source files are present in the html rendering, then this will be\n`true`.",603,null],[12,"local_sources","","The local file sources we&#39;ve emitted and their respective url-paths.",603,null],[12,"passes","","All the passes that were run on this crate.",603,null],[12,"issue_tracker_base_url","","The base-URL of the issue tracker for when an item has been tagged with\nan issue number.",603,null],[12,"css_file_extension","","The given user css file which allow to customize the generated\ndocumentation theme.",603,null],[3,"Implementor","","Metadata about an implementor of a trait.",null,null],[12,"def_id","","",604,null],[12,"stability","","",604,null],[12,"impl_","","",604,null],[3,"Impl","","Metadata about implementations for a type.",null,null],[12,"impl_item","","",605,null],[3,"Error","","",null,null],[3,"Cache","","This cache is used to store information about the `clean::Crate` being\nrendered in order to provide more useful documentation. This contains\ninformation like all implementors of a trait, all traits a type implements,\ndocumentation for all known traits, etc.",null,null],[12,"typarams","","Mapping of typaram ids to the name of the type parameter. This is used\nwhen pretty-printing a type (so pretty printing doesn&#39;t have to\npainfully maintain a context like this)",606,null],[12,"impls","","Maps a type id to all known implementations for that type. This is only\nrecognized for intra-crate `ResolvedPath` types, and is used to print\nout extra documentation on the page of an enum/struct.",606,null],[12,"paths","","Maintains a mapping of local crate node ids to the fully qualified name\nand &quot;short type description&quot; of that node. This is used when generating\nURLs when a type is being linked to. External paths are not located in\nthis map because the `External` type itself has all the information\nnecessary.",606,null],[12,"external_paths","","Similar to `paths`, but only holds external paths. This is only used for\ngenerating explicit hyperlinks to other crates.",606,null],[12,"traits","","This map contains information about all known traits of this crate.\nImplementations of a crate should inherit the documentation of the\nparent trait if no extra documentation is specified, and default methods\nshould show up in documentation about trait implementations.",606,null],[12,"implementors","","When rendering traits, it&#39;s often useful to be able to list all\nimplementors of the trait, and this mapping is exactly, that: a mapping\nof trait ids to the list of known implementors of the trait",606,null],[12,"extern_locations","","Cache of where external crate documentation can be found.",606,null],[12,"primitive_locations","","Cache of where documentation for primitives can be found.",606,null],[12,"inlined","","Set of definitions which have been inlined from external crates.",606,null],[12,"access_levels","","",606,null],[3,"RenderInfo","","Temporary storage for data obtained during `RustdocVisitor::clean()`.\nLater on moved into `CACHE_KEY`.",null,null],[12,"inlined","","",607,null],[12,"external_paths","","",607,null],[12,"external_typarams","","",607,null],[12,"deref_trait_did","","",607,null],[4,"ExternalLocation","","Indicates where an external crate can be found.",null,null],[13,"Remote","","Remote URL root of the external crate",608,null],[13,"Local","","This external crate can be found in the local doc/ folder",608,null],[13,"Unknown","","The external crate could not be found.",608,null],[5,"reset_ids","","This method resets the local table of used ID attributes. This is typically\nused at the beginning of rendering an entire HTML page to reset from the\nprevious state (if any).",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"derive_id","","",null,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[5,"run","","Generates the documentation for `crate` into the directory `dst`",null,{"inputs":[{"name":"crate"},{"name":"externalhtml"},{"name":"pathbuf"},{"name":"hashset"},{"name":"option"},{"name":"renderinfo"}],"output":{"name":"result"}}],[5,"cache","","",null,{"inputs":[],"output":{"name":"arc"}}],[6,"NameDoc","","A pair of name and its optional document.",null,null],[7,"CURRENT_LOCATION_KEY","","",null,null],[11,"clone","","",602,null],[11,"clone","","",605,null],[11,"fmt","","",609,null],[11,"description","","",609,null],[11,"fmt","","",609,null],[11,"new","","",609,{"inputs":[{"name":"error"},{"name":"path"}],"output":{"name":"error"}}],[11,"default","","",606,{"inputs":[],"output":{"name":"cache"}}],[11,"default","","",607,{"inputs":[],"output":{"name":"renderinfo"}}],[11,"fold_item","","",606,null],[0,"toc","rustdoc::html","Table-of-contents creation.",null,null],[3,"Toc","rustdoc::html::toc","A (recursive) table of contents",null,null],[3,"TocEntry","","",null,null],[3,"TocBuilder","","Progressive construction of a table of contents.",null,null],[11,"eq","","",610,null],[11,"ne","","",610,null],[11,"eq","","",611,null],[11,"ne","","",611,null],[11,"eq","","",612,null],[11,"ne","","",612,null],[11,"new","","",612,{"inputs":[],"output":{"name":"tocbuilder"}}],[11,"into_toc","","Convert into a true `Toc` struct.",612,null],[11,"push","","Push a level `level` heading into the appropriate place in the\nhierarchy, returning a string containing the section number in\n`&lt;num&gt;.&lt;num&gt;.&lt;num&gt;` format.",612,null],[11,"fmt","","",610,null],[11,"fmt","","",610,null],[0,"markdown","rustdoc","",null,null],[5,"render","rustdoc::markdown","Render `input` (e.g. &quot;foo.md&quot;) into an HTML file in `output`\n(e.g. output = &quot;bar&quot; =&gt; &quot;bar/foo.html&quot;).",null,{"inputs":[{"name":"str"},{"name":"pathbuf"},{"name":"matches"},{"name":"externalhtml"},{"name":"bool"}],"output":{"name":"isize"}}],[5,"test","","Run any tests/code examples in the markdown file `input`.",null,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"searchpaths"},{"name":"externs"},{"name":"vec"}],"output":{"name":"isize"}}],[0,"passes","rustdoc","",null,null],[5,"strip_hidden","rustdoc::passes","Strip items marked `#[doc(hidden)]`",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"strip_private","","Strip private items from the point of view of a crate or externally from a\ncrate, specified by the `xcrate` flag.",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"strip_priv_imports","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"unindent_comments","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"collapse_docs","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"pluginresult"}}],[5,"unindent","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"plugins","rustdoc","",null,null],[3,"PluginManager","rustdoc::plugins","Manages loading and running of plugins",null,null],[12,"prefix","","The directory plugins will be loaded from",613,null],[6,"PluginResult","","",null,null],[6,"PluginCallback","","",null,null],[11,"new","","Create a new plugin manager",613,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pluginmanager"}}],[11,"load_plugin","","Load a plugin with the given name.",613,null],[11,"add_plugin","","Load a normal Rust function as a plugin.",613,null],[11,"run_plugins","","Run all the loaded plugins over the crate, returning their results",613,null],[0,"visit_ast","rustdoc","Rust AST Visitor. Extracts useful information and massages it into a form\nusable for clean",null,null],[3,"RustdocVisitor","rustdoc::visit_ast","",null,null],[12,"module","","",614,null],[12,"attrs","","",614,null],[12,"cx","","",614,null],[11,"new","","",614,{"inputs":[{"name":"doccontext"}],"output":{"name":"rustdocvisitor"}}],[11,"visit","","",614,null],[11,"visit_variant_data","","",614,null],[11,"visit_enum_def","","",614,null],[11,"visit_fn","","",614,null],[11,"visit_mod_contents","","",614,null],[11,"visit_item","","",614,null],[0,"visit_lib","rustdoc","",null,null],[3,"LibEmbargoVisitor","rustdoc::visit_lib","Similar to `librustc_privacy::EmbargoVisitor`, but also takes\nspecific rustdoc annotations into account (i.e. `doc(hidden)`)",null,null],[11,"new","","",615,{"inputs":[{"name":"doccontext"}],"output":{"name":"libembargovisitor"}}],[11,"visit_lib","","",615,null],[11,"visit_mod","","",615,null],[0,"test","rustdoc","",null,null],[3,"TestOptions","rustdoc::test","",null,null],[12,"no_crate_inject","","",616,null],[12,"attrs","","",616,null],[3,"Collector","","",null,null],[12,"tests","","",617,null],[5,"run","","",null,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"searchpaths"},{"name":"externs"},{"name":"vec"},{"name":"option"}],"output":{"name":"isize"}}],[5,"maketest","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"bool"},{"name":"testoptions"}],"output":{"name":"string"}}],[11,"default","","",616,{"inputs":[],"output":{"name":"testoptions"}}],[11,"clone","","",616,null],[11,"new","","",617,{"inputs":[{"name":"string"},{"name":"vec"},{"name":"searchpaths"},{"name":"externs"},{"name":"bool"},{"name":"testoptions"}],"output":{"name":"collector"}}],[11,"add_test","","",617,null],[11,"register_header","","",617,null],[11,"fold_item","","",617,null],[11,"clean","rustdoc::visit_ast","",614,null],[11,"clean","rustdoc::doctree","",564,null],[11,"clean","","",568,null],[11,"clean","","",572,null],[11,"clean","","",565,null],[11,"clean","","",566,null],[11,"clean","","",567,null],[11,"clean","","",569,null],[11,"clean","","",570,null],[11,"clean","","",571,null],[11,"clean","","",573,null],[11,"clean","","",574,null],[11,"clean","","",576,null],[11,"clean","","",577,null],[11,"clean","","",575,null]],"paths":[[3,"ExternalHtml"],[3,"Crate"],[3,"ExternalCrate"],[3,"Item"],[3,"Module"],[3,"TyParam"],[3,"Generics"],[3,"Method"],[3,"TyMethod"],[3,"Function"],[3,"FnDecl"],[3,"Arguments"],[3,"Argument"],[3,"Trait"],[3,"PolyTrait"],[3,"Struct"],[3,"VariantStruct"],[3,"Enum"],[3,"Variant"],[3,"Span"],[3,"Path"],[3,"PathSegment"],[3,"Typedef"],[3,"BareFunctionDecl"],[3,"Static"],[3,"Constant"],[3,"Impl"],[3,"DefaultImpl"],[3,"ImportSource"],[3,"ViewListIdent"],[3,"Macro"],[3,"Stability"],[3,"Deprecation"],[3,"TypeBinding"],[4,"ItemEnum"],[4,"Attribute"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"SelfTy"],[4,"FunctionRetTy"],[4,"Type"],[4,"PrimitiveType"],[4,"TypeKind"],[4,"Visibility"],[4,"VariantKind"],[4,"PathParameters"],[4,"Mutability"],[4,"ImplPolarity"],[4,"Import"],[8,"Clean"],[8,"Attributes"],[8,"GetDefId"],[3,"VecPerParamSpace"],[3,"P"],[3,"Rc"],[4,"Option"],[3,"Binder"],[6,"MetaItem"],[6,"Attribute"],[3,"TyParam"],[3,"TypeParameterDef"],[4,"TyParamBound"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TraitRef"],[3,"Substs"],[3,"Lifetime"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"RegionParameterDef"],[4,"Region"],[4,"WherePredicate"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionPredicate"],[3,"ProjectionTy"],[3,"Generics"],[3,"MethodSig"],[3,"FnDecl"],[4,"FnOutput"],[3,"Arg"],[4,"FunctionRetTy"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"TraitItem"],[3,"ImplItem"],[3,"Method"],[4,"ImplOrTraitItem"],[3,"Ty"],[6,"Ty"],[3,"StructField"],[3,"FieldDefData"],[4,"Visibility"],[4,"Visibility"],[4,"VariantData"],[3,"VariantDefData"],[3,"Span"],[3,"Path"],[4,"PathParameters"],[3,"PathSegment"],[3,"Name"],[3,"BareFnTy"],[4,"Mutability"],[4,"ImplPolarity"],[6,"PathListItem"],[3,"ForeignMod"],[3,"ForeignItem"],[3,"Stability"],[3,"Deprecation"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"TypeBinding"],[4,"Input"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFGEdgeData"],[3,"CFG"],[4,"DepNode"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[3,"DepGraphQuery"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefIndex"],[3,"DefId"],[4,"FnKind"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[3,"IdVisitor"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"FnLikeNode"],[3,"Item"],[3,"Expr"],[4,"Code"],[3,"Definitions"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[4,"Node"],[4,"MapEntry"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"State"],[3,"NoAnn"],[3,"Svh"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TraitBoundModifier"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"MutTy"],[4,"TraitItem_"],[4,"ImplItemKind"],[4,"PrimTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[3,"Mod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[3,"ItemId"],[4,"Item_"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Bivariate"],[3,"CombineFields"],[3,"InferCtxt"],[4,"Result"],[3,"Equate"],[3,"TyCtxt"],[3,"Glb"],[3,"Lub"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[3,"SameRegions"],[3,"RegionVarBindings"],[4,"VarValue"],[4,"Verify"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"IntVid"],[3,"RegionVidKey"],[3,"RegionVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[3,"TyVid"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"InferCtxtBuilder"],[3,"FnSig"],[3,"ClosureSubsts"],[4,"LvalueTy"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LateContext"],[3,"EarlyContext"],[3,"GatherNodeLevels"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[3,"ChildItem"],[3,"ExternCrate"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[3,"DataFlowContext"],[4,"KillFrom"],[4,"Linkage"],[3,"FreeRegionMap"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[4,"deref_kind"],[3,"MemCategorizationContext"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[3,"CodeExtent"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[4,"Mutability"],[4,"BorrowKind"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[4,"TerminatorKind"],[3,"Statement"],[4,"StatementKind"],[4,"Lvalue"],[3,"Projection"],[4,"ProjectionElem"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[3,"ScopeData"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[3,"Constant"],[3,"TypedConstVal"],[4,"Literal"],[4,"LvalueContext"],[4,"MirSource"],[3,"Passes"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"TraitErrorKey"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[4,"ProjectionMode"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[3,"SelectionCache"],[4,"MethodMatchedData"],[3,"EvaluationCache"],[3,"SelectionContext"],[4,"MethodMatchResult"],[3,"Graph"],[4,"Node"],[4,"NodeItems"],[3,"Ancestors"],[3,"NodeItem"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"SpecializesCache"],[3,"Obligation"],[4,"Vtable"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[4,"SelectionError"],[3,"SupertraitDefIds"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[4,"AutoAdjustment"],[3,"AutoDerefRef"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[3,"TyS"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[3,"RegionFolder"],[4,"RootMode"],[3,"TargetDataLayout"],[4,"Endian"],[3,"Size"],[3,"Align"],[4,"Integer"],[4,"Primitive"],[3,"Struct"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[3,"TypeAndMut"],[4,"Abi"],[3,"BuiltinBounds"],[3,"Box"],[4,"ParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"IntType"],[4,"CopyImplementationError"],[4,"Representability"],[3,"ParameterEnvironment"],[3,"TypeContents"],[3,"CtxtArenas"],[3,"Tables"],[3,"ItemSubsts"],[3,"ClosureTy"],[3,"TraitTy"],[3,"ImplHeader"],[4,"ObjectLifetimeDefault"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ClosureUpvar"],[3,"TypeScheme"],[3,"FreeRegion"],[4,"BoundRegion"],[4,"TypeVariants"],[3,"TypeFlags"],[3,"BareFnTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"EarlyBoundRegion"],[3,"SkolemizedRegionVid"],[4,"InferTy"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"CrateAnalysis"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItemId"],[3,"ItemVariances"],[4,"Variance"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[4,"FragmentInfo"],[3,"UpvarId"],[4,"BorrowKind"],[4,"UpvarCapture"],[3,"UpvarBorrow"],[3,"AdtFlags"],[3,"AdtDefData"],[4,"AdtKind"],[4,"VariantKind"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"Sha256"],[3,"DocContext"],[4,"MaybeTyped"],[8,"DocAccessLevels"],[3,"Module"],[3,"Struct"],[3,"Enum"],[3,"Variant"],[3,"Function"],[3,"Typedef"],[3,"Static"],[3,"Constant"],[3,"Trait"],[3,"Impl"],[3,"DefaultImpl"],[3,"Macro"],[3,"ExternCrate"],[3,"Import"],[4,"StructType"],[4,"TypeBound"],[4,"FoldItem"],[8,"DocFolder"],[4,"Class"],[8,"Writer"],[3,"Classifier"],[3,"Escape"],[4,"ItemType"],[3,"VisSpace"],[3,"UnsafetySpace"],[3,"ConstnessSpace"],[3,"Method"],[3,"MutableSpace"],[3,"RawMutableSpace"],[3,"WhereClause"],[3,"TyParamBounds"],[3,"CommaSep"],[3,"AbiSpace"],[3,"HRef"],[3,"Layout"],[3,"Page"],[3,"Markdown"],[3,"MarkdownWithToc"],[3,"Context"],[3,"SharedContext"],[3,"Implementor"],[3,"Impl"],[3,"Cache"],[3,"RenderInfo"],[4,"ExternalLocation"],[3,"Error"],[3,"Toc"],[3,"TocEntry"],[3,"TocBuilder"],[3,"PluginManager"],[3,"RustdocVisitor"],[3,"LibEmbargoVisitor"],[3,"TestOptions"],[3,"Collector"]]};
searchIndex["rustc_driver"] = {"doc":"The Rust compiler.","items":[[3,"RustcDefaultCalls","rustc_driver","",null,null],[4,"Compilation","","",null,null],[13,"Stop","","",0,null],[13,"Continue","","",0,null],[5,"abort_on_err","","",null,{"inputs":[{"name":"result"},{"name":"session"}],"output":{"name":"t"}}],[5,"run","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"isize"}}],[5,"run_compiler","","",null,null],[5,"run_compiler_with_file_loader","","",null,null],[5,"release_str","","Returns a version string such as &quot;0.12.0-dev&quot;.",null,{"inputs":[],"output":{"name":"option"}}],[5,"commit_hash_str","","Returns the full SHA1 hash of HEAD of the Git repo from which rustc was built.",null,{"inputs":[],"output":{"name":"option"}}],[5,"commit_date_str","","Returns the &quot;commit date&quot; of HEAD of the Git repo from which rustc was built as a static string.",null,{"inputs":[],"output":{"name":"option"}}],[5,"version","","Prints version information",null,{"inputs":[{"name":"str"},{"name":"matches"}],"output":null}],[5,"handle_options","","Process command line options. Emits messages as appropriate. If compilation\nshould continue, returns a getopts::Matches object parsed from args,\notherwise returns None.",null,null],[5,"monitor","","Run a procedure which will detect panics in the compiler and print nicer\nerror messages rather than just failing the test.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"diagnostics_registry","","",null,{"inputs":[],"output":{"name":"registry"}}],[5,"main","","",null,{"inputs":[],"output":null}],[0,"driver","","",null,null],[3,"Resolutions","rustc_driver::driver","",null,null],[12,"def_map","","",1,null],[12,"freevars","","",1,null],[12,"trait_map","","",1,null],[12,"maybe_unused_trait_imports","","",1,null],[3,"CompileController","","CompileController is used to customise compilation, it allows compilation to\nbe stopped and/or to call arbitrary code at various points in compilation.\nIt also allows for various flags to be set to influence what information gets\ncollected during compilation.",null,null],[12,"after_parse","","",2,null],[12,"after_expand","","",2,null],[12,"after_write_deps","","",2,null],[12,"after_hir_lowering","","",2,null],[12,"after_analysis","","",2,null],[12,"after_llvm","","",2,null],[12,"make_glob_map","","",2,null],[3,"PhaseController","","",null,null],[12,"stop","","",3,null],[12,"run_callback_on_error","","",3,null],[12,"callback","","",3,null],[3,"CompileState","","State that is passed to a callback. What state is available depends on when\nduring compilation the callback is made. See the various constructor methods\n(`state_*`) in the impl to see which data is provided for any given entry point.",null,null],[12,"input","","",4,null],[12,"session","","",4,null],[12,"krate","","",4,null],[12,"cstore","","",4,null],[12,"crate_name","","",4,null],[12,"output_filenames","","",4,null],[12,"out_dir","","",4,null],[12,"out_file","","",4,null],[12,"arenas","","",4,null],[12,"expanded_crate","","",4,null],[12,"hir_crate","","",4,null],[12,"ast_map","","",4,null],[12,"resolutions","","",4,null],[12,"mir_map","","",4,null],[12,"analysis","","",4,null],[12,"tcx","","",4,null],[12,"trans","","",4,null],[5,"compile_input","","",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crateconfig"},{"name":"input"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"compilecontroller"}],"output":{"name":"compileresult"}}],[5,"anon_src","","The name used for source code that doesn&#39;t originate in a file\n(e.g. source from stdin or a string)",null,{"inputs":[],"output":{"name":"string"}}],[5,"source_name","","",null,{"inputs":[{"name":"input"}],"output":{"name":"string"}}],[5,"phase_1_parse_input","","",null,{"inputs":[{"name":"session"},{"name":"crateconfig"},{"name":"input"}],"output":{"name":"presult"}}],[5,"phase_2_configure_and_expand","","Run the &quot;early phases&quot; of the compiler: initial `cfg` processing,\nloading compiler plugins (including those from `addl_plugins`),\nsyntax expansion, secondary `cfg` expansion, synthesis of a test\nharness if one is to be provided and injection of a dependency on the\nstandard library and prelude.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"str"},{"name":"option"}],"output":{"name":"result"}}],[5,"assign_node_ids","","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":{"name":"crate"}}],[5,"lower_and_resolve","","",null,null],[5,"phase_3_run_analysis_passes","","Run the resolution, typechecking, region checking and other\nmiscellaneous analysis passes on the crate. Return various\nstructures carrying the results of the analysis.",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"ctxtarenas"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[5,"phase_4_translate_to_llvm","","Run the translation phase to LLVM, after which the AST and analysis can",null,{"inputs":[{"name":"tyctxt"},{"name":"mirmap"},{"name":"crateanalysis"}],"output":{"name":"cratetranslation"}}],[5,"phase_5_run_llvm_passes","","Run LLVM itself, producing a bitcode file, assembly file or object file\nas a side effect.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"}],"output":{"name":"compileresult"}}],[5,"phase_6_link_output","","Run the linker on any artifacts that resulted from the LLVM run.\nThis should produce either a finished executable or library.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"}],"output":null}],[5,"collect_crate_types","","",null,null],[5,"compute_crate_disambiguator","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"build_output_filenames","","",null,null],[11,"clone","","",1,null],[11,"basic","","",2,{"inputs":[],"output":{"name":"compilecontroller"}}],[11,"basic","","",3,{"inputs":[],"output":{"name":"phasecontroller"}}],[0,"pretty","rustc_driver","The various pretty print routines.",null,null],[4,"PpSourceMode","rustc_driver::pretty","",null,null],[13,"PpmNormal","","",5,null],[13,"PpmEveryBodyLoops","","",5,null],[13,"PpmExpanded","","",5,null],[13,"PpmIdentified","","",5,null],[13,"PpmExpandedIdentified","","",5,null],[13,"PpmExpandedHygiene","","",5,null],[13,"PpmTyped","","",5,null],[4,"PpFlowGraphMode","","",null,null],[13,"Default","","",6,null],[13,"UnlabelledEdges","","Drops the labels from the edges in the flowgraph output. This\nis mostly for use in the --unpretty flowgraph run-make tests,\nsince the labels are largely uninteresting in those cases and\nhave become a pain to maintain.",6,null],[4,"PpMode","","",null,null],[13,"PpmSource","","",7,null],[13,"PpmHir","","",7,null],[13,"PpmFlowGraph","","",7,null],[13,"PpmMir","","",7,null],[13,"PpmMirCFG","","",7,null],[4,"UserIdentifiedItem","","",null,null],[13,"ItemViaNode","","",8,null],[13,"ItemViaPath","","",8,null],[5,"parse_pretty","","",null,null],[5,"fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"ppmode"}],"output":{"name":"crate"}}],[5,"print_after_parsing","","",null,{"inputs":[{"name":"session"},{"name":"input"},{"name":"crate"},{"name":"ppmode"},{"name":"option"}],"output":null}],[5,"print_after_hir_lowering","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"crateanalysis"},{"name":"resolutions"},{"name":"input"},{"name":"crate"},{"name":"str"},{"name":"ppmode"},{"name":"ctxtarenas"},{"name":"option"},{"name":"option"}],"output":null}],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"needs_ast_map","","",7,null],[11,"needs_analysis","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"target_features","rustc_driver","",null,null],[5,"add_configuration","rustc_driver::target_features","Add `target_feature = &quot;...&quot;` cfgs for a variety of platform\nspecific features (SSE, NEON etc.).",null,{"inputs":[{"name":"crateconfig"},{"name":"session"}],"output":null}],[8,"CompilerCalls","rustc_driver","",null,null],[11,"early_callback","","",9,null],[11,"late_callback","","",9,null],[11,"some_input","","",9,null],[11,"no_input","","",9,null],[10,"build_controller","","",9,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"and_then","","",0,null],[11,"clone","","",10,null],[11,"early_callback","","",10,null],[11,"no_input","","",10,null],[11,"late_callback","","",10,null],[11,"build_controller","","",10,null],[11,"list_metadata","","",10,{"inputs":[{"name":"session"},{"name":"matches"},{"name":"input"}],"output":{"name":"compilation"}}]],"paths":[[4,"Compilation"],[3,"Resolutions"],[3,"CompileController"],[3,"PhaseController"],[3,"CompileState"],[4,"PpSourceMode"],[4,"PpFlowGraphMode"],[4,"PpMode"],[4,"UserIdentifiedItem"],[8,"CompilerCalls"],[3,"RustcDefaultCalls"]]};
searchIndex["rustc_plugin"] = {"doc":"Infrastructure for compiler plugins.","items":[[0,"diagnostics","rustc_plugin","",null,null],[0,"registry","","Used by plugin crates to tell `rustc` about the plugins they provide.",null,null],[3,"Registry","rustc_plugin::registry","Structure used to register plugins.",null,null],[12,"sess","","Compiler session. Useful if you want to emit diagnostic messages\nfrom the plugin registrar.",0,null],[11,"args","","Get the plugin&#39;s arguments, if any.",0,null],[11,"register_syntax_extension","","Register a syntax extension of any kind.",0,null],[11,"register_macro","","Register a macro of the usual kind.",0,null],[11,"register_early_lint_pass","","Register a compiler lint pass.",0,null],[11,"register_late_lint_pass","","Register a compiler lint pass.",0,null],[11,"register_lint_group","","Register a lint group.",0,null],[11,"register_mir_pass","","Register a MIR pass",0,null],[11,"register_llvm_pass","","Register an LLVM pass.",0,null],[11,"register_attribute","","Register an attribute with an attribute type.",0,null],[0,"load","rustc_plugin","Used by `rustc` when loading a plugin.",null,null],[3,"PluginRegistrar","rustc_plugin::load","",null,null],[12,"fun","","",1,null],[12,"args","","",1,null],[5,"load_plugins","","Read plugin metadata and dynamically load registrar functions.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"str"},{"name":"option"}],"output":{"name":"vec"}}],[6,"PluginRegistrarFun","","Pointer to a registrar function.",null,null],[0,"build","rustc_plugin","Used by `rustc` when compiling a plugin crate.",null,null],[5,"find_plugin_registrar","rustc_plugin::build","Find the function marked with `#[plugin_registrar]`, if any.",null,{"inputs":[{"name":"handler"},{"name":"map"}],"output":{"name":"option"}}]],"paths":[[3,"Registry"],[3,"PluginRegistrar"]]};
searchIndex["rustc_trans"] = {"doc":"The Rust compiler.","items":[[0,"session","rustc_trans","",null,null],[0,"config","rustc_trans::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options.",null,null],[11,"graph_id","rustc::cfg::graphviz","",0,null],[11,"node_id","","",0,null],[11,"node_label","","",0,null],[11,"edge_label","","",0,null],[11,"nodes","","",0,null],[11,"edges","","",0,null],[11,"source","","",0,null],[11,"target","","",0,null],[11,"eq","rustc::cfg","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"id","","",1,null],[11,"fmt","","",2,null],[11,"new","","",3,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",3,null],[11,"decode","rustc::dep_graph::dep_node","",4,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",4,null],[11,"hash","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"from_label_string","","Used in testing",4,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",4,null],[11,"new","rustc::dep_graph::dep_tracking_map","",5,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",5,null],[11,"insert","","",5,null],[11,"contains_key","","",5,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",6,null],[11,"index","rustc::dep_graph::dep_tracking_map","",5,null],[11,"clone","rustc::dep_graph::graph","",7,null],[11,"new","","",7,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",7,null],[11,"query","","",7,null],[11,"in_ignore","","",7,null],[11,"in_task","","",7,null],[11,"with_ignore","","",7,null],[11,"with_task","","",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"new","rustc::dep_graph::query","",8,null],[11,"contains_node","","",8,null],[11,"nodes","","",8,null],[11,"edges","","",8,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",8,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",8,null],[11,"fmt","rustc::hir::def","",9,null],[11,"hash","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",10,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",10,null],[11,"new","","",10,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",11,null],[11,"var_id","","",9,null],[11,"def_id","","",9,null],[11,"variant_def_ids","","",9,null],[11,"kind_name","","",9,null],[11,"hash","rustc::hir::def_id","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"new","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",12,null],[11,"as_u32","","",12,null],[11,"hash","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"cmp","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"local","","",13,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",13,null],[11,"eq","rustc::hir::intravisit","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"attrs","","",14,null],[11,"fmt","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"clone","","",15,null],[11,"max","","",15,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",15,null],[11,"add","","",15,null],[11,"new","","",16,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",16,null],[11,"visit_id","","",16,null],[11,"new","","",17,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",17,null],[11,"visit_foreign_item","","",17,null],[11,"visit_item","","",17,null],[11,"visit_local","","",17,null],[11,"visit_block","","",17,null],[11,"visit_stmt","","",17,null],[11,"visit_pat","","",17,null],[11,"visit_expr","","",17,null],[11,"visit_ty","","",17,null],[11,"visit_generics","","",17,null],[11,"visit_fn","","",17,null],[11,"visit_struct_field","","",17,null],[11,"visit_variant_data","","",17,null],[11,"visit_trait_item","","",17,null],[11,"visit_impl_item","","",17,null],[11,"visit_lifetime","","",17,null],[11,"visit_lifetime_def","","",17,null],[11,"visit_trait_ref","","",17,null],[11,"resolve_generated_global_path","rustc::hir::lowering","",18,null],[11,"get_resolution","","",18,null],[11,"record_resolution","","",18,null],[11,"definitions","","",18,null],[11,"testing_context","","",19,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"loweringcontext"}}],[11,"lower_item","","",19,null],[11,"clone","rustc::hir::map::blocks","",20,null],[11,"is_fn_like","rustc::hir","",21,null],[11,"is_fn_like","","",22,null],[11,"is_fn_like","","",23,null],[11,"clone","rustc::hir::map::blocks","",24,null],[11,"id","","",24,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",24,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",20,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",20,null],[11,"body","","",20,null],[11,"decl","","",20,null],[11,"span","","",20,null],[11,"id","","",20,null],[11,"kind","","",20,null],[11,"clone","rustc::hir::map::definitions","",25,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"hash","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"hash","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"hash","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"is_local","","",29,null],[11,"make","","",29,{"inputs":[{"name":"u32"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"hash","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"new","","",25,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",25,null],[11,"def_key","","",25,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",25,null],[11,"opt_def_index","","",25,null],[11,"opt_local_def_id","","",25,null],[11,"local_def_id","","",25,null],[11,"as_local_node_id","","",25,null],[11,"retrace_path","","",25,null],[11,"create_def_with_parent","","",25,null],[11,"as_interned_str","","",31,null],[11,"to_string","","",31,null],[11,"fmt","rustc::hir::map","",32,null],[11,"clone","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"new","","",34,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",34,null],[11,"clone","","",35,null],[11,"num_local_def_ids","","",35,null],[11,"def_key","","",35,null],[11,"def_path_from_id","","",35,null],[11,"def_path","","",35,null],[11,"retrace_path","","",35,null],[11,"local_def_id","","",35,null],[11,"opt_local_def_id","","",35,null],[11,"as_local_node_id","","",35,null],[11,"krate","","",35,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",35,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",35,null],[11,"get_if_local","","",35,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",35,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",35,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",35,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",35,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",35,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",35,null],[11,"get_parent_did","","",35,null],[11,"get_foreign_abi","","",35,null],[11,"expect_item","","",35,null],[11,"expect_trait_item","","",35,null],[11,"expect_struct","","",35,null],[11,"expect_variant","","",35,null],[11,"expect_foreign_item","","",35,null],[11,"expect_expr","","",35,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",35,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",35,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",35,null],[11,"opt_span","","",35,null],[11,"span","","",35,null],[11,"span_if_local","","",35,null],[11,"def_id_span","","",35,null],[11,"node_to_string","","",35,null],[11,"node_to_user_string","","",35,null],[11,"next","","",36,null],[11,"print_node","rustc::hir::print","",37,null],[11,"clone","","",38,null],[11,"writer","","",37,null],[11,"boxes","","",37,null],[11,"comments","","",37,null],[11,"cur_cmnt_and_lit","","",37,null],[11,"literals","","",37,null],[11,"new_from_input","","",37,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",37,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",37,null],[11,"nbsp","","",37,null],[11,"word_nbsp","","",37,null],[11,"head","","",37,null],[11,"bopen","","",37,null],[11,"bclose_","","",37,null],[11,"bclose_maybe_open","","",37,null],[11,"bclose","","",37,null],[11,"in_cbox","","",37,null],[11,"space_if_not_bol","","",37,null],[11,"break_offset_if_not_bol","","",37,null],[11,"synth_comment","","",37,null],[11,"commasep_cmnt","","",37,null],[11,"commasep_exprs","","",37,null],[11,"print_mod","","",37,null],[11,"print_foreign_mod","","",37,null],[11,"print_opt_lifetime","","",37,null],[11,"print_type","","",37,null],[11,"print_foreign_item","","",37,null],[11,"print_item_id","","",37,null],[11,"print_item","","Pretty-print an item",37,null],[11,"print_enum_def","","",37,null],[11,"print_variants","","",37,null],[11,"print_visibility","","",37,null],[11,"print_struct","","",37,null],[11,"print_variant","","",37,null],[11,"print_method_sig","","",37,null],[11,"print_trait_item","","",37,null],[11,"print_impl_item","","",37,null],[11,"print_stmt","","",37,null],[11,"print_block","","",37,null],[11,"print_block_unclosed","","",37,null],[11,"print_block_unclosed_indent","","",37,null],[11,"print_block_with_attrs","","",37,null],[11,"print_block_maybe_unclosed","","",37,null],[11,"print_if","","",37,null],[11,"print_if_let","","",37,null],[11,"print_expr_maybe_paren","","",37,null],[11,"print_expr","","",37,null],[11,"print_local_decl","","",37,null],[11,"print_decl","","",37,null],[11,"print_usize","","",37,null],[11,"print_name","","",37,null],[11,"print_for_decl","","",37,null],[11,"print_pat","","",37,null],[11,"print_fn","","",37,null],[11,"print_fn_args_and_ret","","",37,null],[11,"print_fn_block_args","","",37,null],[11,"print_capture_clause","","",37,null],[11,"print_bounds","","",37,null],[11,"print_lifetime","","",37,null],[11,"print_lifetime_def","","",37,null],[11,"print_generics","","",37,null],[11,"print_ty_param","","",37,null],[11,"print_where_clause","","",37,null],[11,"print_view_path","","",37,null],[11,"print_mutability","","",37,null],[11,"print_mt","","",37,null],[11,"print_arg","","",37,null],[11,"print_fn_output","","",37,null],[11,"print_ty_fn","","",37,null],[11,"maybe_print_trailing_comment","","",37,null],[11,"print_remaining_comments","","",37,null],[11,"print_opt_abi_and_extern_if_nondefault","","",37,null],[11,"print_extern_opt_abi","","",37,null],[11,"print_fn_header_info","","",37,null],[11,"print_unsafety","","",37,null],[11,"fmt","rustc::hir::svh","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"hash","","",39,null],[11,"clone","","",39,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",39,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",39,null],[11,"fmt","","",39,null],[11,"hash","rustc::hir","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",42,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",42,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"none","","",44,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",44,null],[11,"has_lifetimes","","",44,null],[11,"has_types","","",44,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",44,null],[11,"lifetimes","","",44,null],[11,"bindings","","",44,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"empty","","",50,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",50,null],[11,"is_type_parameterized","","",50,null],[11,"is_parameterized","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"item","","",56,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"walk","","",59,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"clone","","",64,null],[11,"as_str","","",64,null],[11,"is_lazy","","",64,null],[11,"is_shift","","",64,null],[11,"is_comparison","","",64,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",64,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"as_str","","",65,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",65,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"attrs","","",66,null],[11,"id","","",66,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"attrs","","",68,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",22,null],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",83,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"to_self","","",89,null],[11,"is_self","","",89,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"has_self","","",91,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"clone","","",92,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"is_final","","",94,null],[11,"is_default","","",94,null],[11,"fmt","","",92,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",95,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"clone","","",96,null],[11,"span","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"id","","",101,null],[11,"name","","",101,null],[11,"rename","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"is_positional","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"fields","","",107,null],[11,"id","","",107,null],[11,"is_struct","","",107,null],[11,"is_tuple","","",107,null],[11,"is_unit","","",107,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",21,null],[11,"hash","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",109,null],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"descriptive_variant","","",109,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",111,null],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"clone","","",111,null],[11,"descriptive_variant","","",111,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"clone","","",112,null],[11,"clone","","",113,null],[11,"new","rustc::infer::bivariate","",114,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",114,null],[11,"tcx","","",114,null],[11,"a_is_expected","","",114,null],[11,"relate_with_variance","","",114,null],[11,"tys","","",114,null],[11,"regions","","",114,null],[11,"binders","","",114,null],[11,"clone","rustc::infer::combine","",115,null],[11,"super_combine_tys","rustc::infer","",116,null],[11,"tcx","rustc::infer::combine","",115,null],[11,"switch_expected","","",115,null],[11,"equate","","",115,null],[11,"bivariate","","",115,null],[11,"sub","","",115,null],[11,"lub","","",115,null],[11,"glb","","",115,null],[11,"instantiate","","",115,null],[11,"compare","core::result","",117,null],[11,"new","rustc::infer::equate","",118,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",118,null],[11,"tag","","",118,null],[11,"tcx","","",118,null],[11,"a_is_expected","","",118,null],[11,"relate_with_variance","","",118,null],[11,"tys","","",118,null],[11,"regions","","",118,null],[11,"binders","","",118,null],[11,"note_and_explain_region","rustc::ty::context","",119,null],[11,"report_region_errors","rustc::infer","",116,null],[11,"report_and_explain_type_error","","",116,null],[11,"resolve","rustc::ty::sty","",120,null],[11,"resolve","","",121,null],[11,"new","rustc::infer::glb","",122,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",122,null],[11,"tag","","",122,null],[11,"tcx","","",122,null],[11,"a_is_expected","","",122,null],[11,"relate_with_variance","","",122,null],[11,"tys","","",122,null],[11,"regions","","",122,null],[11,"binders","","",122,null],[11,"infcx","","",122,null],[11,"relate_bound","","",122,null],[11,"higher_ranked_sub","rustc::infer::combine","",115,null],[11,"higher_ranked_lub","","",115,null],[11,"higher_ranked_glb","","",115,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",116,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",116,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",116,null],[11,"new","rustc::infer::lub","",123,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",123,null],[11,"tag","","",123,null],[11,"tcx","","",123,null],[11,"a_is_expected","","",123,null],[11,"relate_with_variance","","",123,null],[11,"tys","","",123,null],[11,"regions","","",123,null],[11,"binders","","",123,null],[11,"infcx","","",123,null],[11,"relate_bound","","",123,null],[11,"fmt","rustc::infer::region_inference","",124,null],[11,"hash","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"clone","","",124,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",126,null],[11,"hash","","",127,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"eq","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"contains","","",132,null],[11,"push","","",132,null],[11,"new","","",133,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",133,null],[11,"commit","","",133,null],[11,"rollback_to","","",133,null],[11,"num_vars","","",133,null],[11,"new_region_var","","",133,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",133,null],[11,"new_bound","","",133,null],[11,"add_given","","",133,null],[11,"make_eqregion","","",133,null],[11,"make_subregion","","",133,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",133,null],[11,"lub_regions","","",133,null],[11,"glb_regions","","",133,null],[11,"resolve_var","","",133,null],[11,"opportunistic_resolve_var","","",133,null],[11,"combine_vars","","",133,null],[11,"vars_created_since_snapshot","","",133,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",133,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"to_ty","","",125,null],[11,"must_hold","","",126,null],[11,"cannot_hold","","",126,null],[11,"or","","",126,null],[11,"and","","",126,null],[11,"new","rustc::infer::resolve","",137,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictyperesolver"}}],[11,"tcx","","",137,null],[11,"fold_ty","","",137,null],[11,"new","","",138,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictypeandregionresolver"}}],[11,"tcx","","",138,null],[11,"fold_ty","","",138,null],[11,"fold_region","","",138,null],[11,"new","rustc::infer::freshen","",139,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",139,null],[11,"fold_region","","",139,null],[11,"fold_ty","","",139,null],[11,"new","rustc::infer::sub","",140,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",140,null],[11,"tag","","",140,null],[11,"tcx","","",140,null],[11,"a_is_expected","","",140,null],[11,"with_cause","","",140,null],[11,"relate_with_variance","","",140,null],[11,"tys","","",140,null],[11,"regions","","",140,null],[11,"binders","","",140,null],[11,"hash","rustc::infer::type_variable","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"hash","","",142,null],[11,"eq","","",142,null],[11,"clone","","",142,null],[11,"new","","",143,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",143,null],[11,"var_diverges","","",143,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",143,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",143,null],[11,"new_var","","",143,null],[11,"root_var","","",143,null],[11,"probe","","",143,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",143,null],[11,"replace_if_possible","","",143,null],[11,"snapshot","","",143,null],[11,"rollback_to","","",143,null],[11,"commit","","",143,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",143,null],[11,"unsolved_variables","","",143,null],[11,"index","rustc::ty::sty","",144,null],[11,"from_index","","",144,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",144,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"fmt","rustc::infer::unify_key","",145,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"combine","","",145,null],[11,"index","rustc::ty::sty","",146,null],[11,"from_index","","",146,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",146,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","rustc::ty","",147,null],[11,"index","rustc::ty::sty","",148,null],[11,"from_index","","",148,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",148,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","syntax::ast","",149,null],[11,"index","rustc::ty::sty","",150,null],[11,"from_index","","",150,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",150,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"clone","rustc::infer","",151,null],[11,"borrow","","",151,null],[11,"borrow_mut","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",152,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[11,"infer_ctxt","rustc::ty::context","",119,null],[11,"normalizing_infer_ctxt","","",119,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",119,null],[11,"enter","rustc::infer","",160,null],[11,"trans_normalize","rustc::ty::sty","",161,null],[11,"trans_normalize","","",162,null],[11,"trans_normalize","","",163,null],[11,"trans_normalize","","",121,null],[11,"trans_normalize","rustc::mir::tcx","",164,null],[11,"normalize_associated_type","rustc::ty::context","",119,null],[11,"drain_fulfillment_cx_or_panic","rustc::infer","",116,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",116,null],[11,"projection_mode","","",116,null],[11,"freshen","","",116,null],[11,"type_var_diverges","","",116,null],[11,"freshener","","",116,null],[11,"type_is_unconstrained_numeric","","",116,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",116,null],[11,"unsolved_variables","","",116,null],[11,"equate","","",116,null],[11,"sub","","",116,null],[11,"lub","","",116,null],[11,"glb","","",116,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",116,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",116,null],[11,"in_snapshot","","",116,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",116,null],[11,"probe","","Execute `f` then unroll any bindings it creates",116,null],[11,"add_given","","",116,null],[11,"sub_types","","",116,null],[11,"can_sub_types","","",116,null],[11,"eq_types","","",116,null],[11,"eq_trait_refs","","",116,null],[11,"eq_impl_headers","","",116,null],[11,"sub_poly_trait_refs","","",116,null],[11,"sub_regions","","",116,null],[11,"equality_predicate","","",116,null],[11,"region_outlives_predicate","","",116,null],[11,"next_ty_var_id","","",116,null],[11,"next_ty_var","","",116,null],[11,"next_ty_var_with_default","","",116,null],[11,"next_diverging_ty_var","","",116,null],[11,"next_ty_vars","","",116,null],[11,"next_int_var_id","","",116,null],[11,"next_float_var_id","","",116,null],[11,"next_region_var","","",116,null],[11,"region_vars_for_defs","","",116,null],[11,"type_vars_for_defs","","",116,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",116,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",116,null],[11,"fresh_bound_region","","",116,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",116,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",116,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",116,null],[11,"node_type","","",116,null],[11,"expr_ty","","",116,null],[11,"resolve_regions_and_report_errors","","",116,null],[11,"ty_to_string","","",116,null],[11,"tys_to_string","","",116,null],[11,"trait_ref_to_string","","",116,null],[11,"shallow_resolve","","",116,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",116,null],[11,"resolve_type_and_region_vars_if_possible","","",116,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",116,null],[11,"type_error_message_str","","",116,null],[11,"type_error_struct_str","","",116,null],[11,"type_error_message_str_with_expected","","",116,null],[11,"type_error_struct_str_with_expected","","",116,null],[11,"type_error_message","","",116,null],[11,"type_error_struct","","",116,null],[11,"report_mismatched_types","","",116,null],[11,"report_conflicting_default_types","","",116,null],[11,"replace_late_bound_regions_with_fresh_var","","",116,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",116,null],[11,"can_equate","","",116,null],[11,"node_ty","","",116,null],[11,"expr_ty_adjusted","","",116,null],[11,"type_moves_by_default","","",116,null],[11,"node_method_ty","","",116,null],[11,"node_method_id","","",116,null],[11,"adjustments","","",116,null],[11,"is_method_call","","",116,null],[11,"temporary_scope","","",116,null],[11,"upvar_capture","","",116,null],[11,"param_env","","",116,null],[11,"closure_kind","","",116,null],[11,"closure_type","","",116,null],[11,"span","","",154,null],[11,"types","","",154,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"tys"},{"name":"tys"}],"output":{"name":"typetrace"}}],[11,"dummy","","",154,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",154,null],[11,"span","","",152,null],[11,"span","","",155,null],[11,"span","","",158,null],[11,"fmt","rustc::lint","",165,null],[11,"clone","","",165,null],[11,"name_lower","","Get the lint&#39;s name, with ASCII letters converted to lowercase.",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"hash","","",166,null],[11,"of","","Get the `LintId` for a `Lint`.",166,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",166,null],[11,"fmt","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"eq","","",167,null],[11,"clone","","",167,null],[11,"as_str","","Convert a level to a lower-case string.",167,null],[11,"from_str","","Convert a lower-case string to a level.",167,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",168,null],[11,"ne","","",168,null],[11,"clone","","",168,null],[11,"clone","rustc::lint::builtin","",169,null],[11,"get_lints","","",169,null],[11,"new","rustc::lint::context","",170,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",170,null],[11,"get_lint_groups","","",170,null],[11,"register_early_pass","","",170,null],[11,"register_late_pass","","",170,null],[11,"register_future_incompatible","","",170,null],[11,"future_incompatible","","",170,null],[11,"register_group","","",170,null],[11,"register_renamed","","",170,null],[11,"register_removed","","",170,null],[11,"process_command_line","","",170,null],[11,"sess","","Get the overall compiler `Session` object.",171,null],[11,"lints","","",171,null],[11,"mut_lints","","",171,null],[11,"level_stack","","",171,null],[11,"enter_attrs","","",171,null],[11,"exit_attrs","","",171,null],[11,"sess","","Get the overall compiler `Session` object.",172,null],[11,"lints","","",172,null],[11,"mut_lints","","",172,null],[11,"level_stack","","",172,null],[11,"enter_attrs","","",172,null],[11,"exit_attrs","","",172,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",171,null],[11,"visit_item","","",171,null],[11,"visit_foreign_item","","",171,null],[11,"visit_pat","","",171,null],[11,"visit_expr","","",171,null],[11,"visit_stmt","","",171,null],[11,"visit_fn","","",171,null],[11,"visit_variant_data","","",171,null],[11,"visit_struct_field","","",171,null],[11,"visit_variant","","",171,null],[11,"visit_ty","","",171,null],[11,"visit_name","","",171,null],[11,"visit_mod","","",171,null],[11,"visit_local","","",171,null],[11,"visit_block","","",171,null],[11,"visit_arm","","",171,null],[11,"visit_decl","","",171,null],[11,"visit_expr_post","","",171,null],[11,"visit_generics","","",171,null],[11,"visit_trait_item","","",171,null],[11,"visit_impl_item","","",171,null],[11,"visit_lifetime","","",171,null],[11,"visit_lifetime_def","","",171,null],[11,"visit_path","","",171,null],[11,"visit_path_list_item","","",171,null],[11,"visit_attribute","","",171,null],[11,"visit_item","","",172,null],[11,"visit_foreign_item","","",172,null],[11,"visit_pat","","",172,null],[11,"visit_expr","","",172,null],[11,"visit_stmt","","",172,null],[11,"visit_fn","","",172,null],[11,"visit_variant_data","","",172,null],[11,"visit_struct_field","","",172,null],[11,"visit_variant","","",172,null],[11,"visit_ty","","",172,null],[11,"visit_ident","","",172,null],[11,"visit_mod","","",172,null],[11,"visit_local","","",172,null],[11,"visit_block","","",172,null],[11,"visit_arm","","",172,null],[11,"visit_decl","","",172,null],[11,"visit_expr_post","","",172,null],[11,"visit_generics","","",172,null],[11,"visit_trait_item","","",172,null],[11,"visit_impl_item","","",172,null],[11,"visit_lifetime","","",172,null],[11,"visit_lifetime_def","","",172,null],[11,"visit_explicit_self","","",172,null],[11,"visit_path","","",172,null],[11,"visit_path_list_item","","",172,null],[11,"visit_attribute","","",172,null],[11,"visit_id","","",171,null],[11,"get_lints","","",173,null],[11,"check_item","","",173,null],[11,"prohibit_type_params","rustc::ty::context","",119,null],[11,"prohibit_projection","","",119,null],[11,"prim_ty_to_ty","","",119,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",119,null],[11,"fmt","rustc::middle::expr_use_visitor","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[11,"fmt","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"clone","","",175,null],[11,"fmt","","",176,null],[11,"eq","","",176,null],[11,"clone","","",176,null],[11,"fmt","","",177,null],[11,"eq","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"eq","","",178,null],[11,"clone","","",178,null],[11,"new","","",179,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"walk_fn","","",179,null],[11,"consume_expr","","",179,null],[11,"walk_expr","","",179,null],[11,"decode","rustc::middle::const_val","",180,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",180,null],[11,"fmt","","",180,null],[11,"clone","","",180,null],[11,"hash","","",180,null],[11,"eq","","",180,null],[11,"description","","",180,null],[11,"hash","rustc::middle::const_qualif","",181,null],[11,"cmp","","",181,null],[11,"partial_cmp","","",181,null],[11,"lt","","",181,null],[11,"le","","",181,null],[11,"gt","","",181,null],[11,"ge","","",181,null],[11,"clone","","",181,null],[11,"eq","","",181,null],[11,"ne","","",181,null],[11,"decode","","",181,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,null],[18,"MUTABLE_MEM","rustc_trans::session","",181,null],[18,"NEEDS_DROP","","",181,null],[18,"PREFER_IN_PLACE","","",181,null],[18,"NON_ZERO_SIZED","","",181,null],[18,"HAS_STATIC_BORROWS","","",181,null],[18,"NOT_CONST","","",181,null],[18,"NON_STATIC_BORROWS","","",181,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",181,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",181,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",181,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",181,null],[11,"is_all","","Returns `true` if all flags are currently set.",181,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",181,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",181,null],[11,"insert","","Inserts the specified flags in-place.",181,null],[11,"remove","","Removes the specified flags in-place.",181,null],[11,"toggle","","Toggles the specified flags in-place.",181,null],[11,"bitor","","Returns the union of the two sets of flags.",181,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",181,null],[11,"bitand","","Returns the intersection between the two sets of flags.",181,null],[11,"sub","","Returns the set difference of the two sets of flags.",181,null],[11,"not","","Returns the complement of this set of flags.",181,null],[11,"fmt","rustc::middle::cstore","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",184,null],[11,"eq","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",185,null],[11,"clone","","",185,null],[11,"from_u32","","",185,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",187,null],[11,"hash","","",187,null],[11,"decode","","",187,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",188,null],[11,"hash","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"clone","","",188,null],[11,"clone","","",189,null],[11,"fmt","","",190,null],[11,"clone","","",190,null],[11,"visit","","",187,null],[11,"visit_ids","","",187,null],[11,"stability","","",191,null],[11,"deprecation","","",191,null],[11,"visibility","","",191,null],[11,"closure_kind","","",191,null],[11,"closure_ty","","",191,null],[11,"item_variances","","",191,null],[11,"repr_attrs","","",191,null],[11,"item_type","","",191,null],[11,"visible_parent_map","","",191,null],[11,"item_name","","",191,null],[11,"item_predicates","","",191,null],[11,"item_super_predicates","","",191,null],[11,"item_attrs","","",191,null],[11,"item_symbol","","",191,null],[11,"trait_def","","",191,null],[11,"adt_def","","",191,null],[11,"method_arg_names","","",191,null],[11,"inherent_implementations_for_type","","",191,null],[11,"implementations_of_trait","","",191,null],[11,"provided_trait_methods","","",191,null],[11,"trait_item_def_ids","","",191,null],[11,"impl_items","","",191,null],[11,"impl_trait_ref","","",191,null],[11,"impl_polarity","","",191,null],[11,"custom_coerce_unsized_kind","","",191,null],[11,"associated_consts","","",191,null],[11,"impl_parent","","",191,null],[11,"trait_of_item","","",191,null],[11,"impl_or_trait_item","","",191,null],[11,"is_const_fn","","",191,null],[11,"is_defaulted_trait","","",191,null],[11,"is_impl","","",191,null],[11,"is_default_impl","","",191,null],[11,"is_extern_item","","",191,null],[11,"is_static_method","","",191,null],[11,"is_statically_included_foreign_item","","",191,null],[11,"is_typedef","","",191,null],[11,"dylib_dependency_formats","","",191,null],[11,"lang_items","","",191,null],[11,"missing_lang_items","","",191,null],[11,"is_staged_api","","",191,null],[11,"is_explicitly_linked","","",191,null],[11,"is_allocator","","",191,null],[11,"is_panic_runtime","","",191,null],[11,"panic_strategy","","",191,null],[11,"extern_crate","","",191,null],[11,"crate_attrs","","",191,null],[11,"crate_name","","",191,null],[11,"original_crate_name","","",191,null],[11,"crate_hash","","",191,null],[11,"crate_disambiguator","","",191,null],[11,"crate_struct_field_attrs","","",191,null],[11,"plugin_registrar_fn","","",191,null],[11,"native_libraries","","",191,null],[11,"reachable_ids","","",191,null],[11,"def_key","","",191,null],[11,"relative_def_path","","",191,null],[11,"variant_kind","","",191,null],[11,"struct_ctor_def_id","","",191,null],[11,"tuple_struct_definition_if_ctor","","",191,null],[11,"struct_field_names","","",191,null],[11,"item_children","","",191,null],[11,"crate_top_level_items","","",191,null],[11,"maybe_get_item_ast","","",191,null],[11,"maybe_get_item_mir","","",191,null],[11,"is_item_mir_available","","",191,null],[11,"crates","","",191,null],[11,"used_libraries","","",191,null],[11,"used_link_args","","",191,null],[11,"metadata_filename","","",191,null],[11,"metadata_section_name","","",191,null],[11,"encode_type","","",191,null],[11,"used_crates","","",191,null],[11,"used_crate_source","","",191,null],[11,"extern_mod_stmt_cnum","","",191,null],[11,"encode_metadata","","",191,null],[11,"metadata_encoding_version","","",191,null],[11,"fmt","rustc::middle::dataflow","",192,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"pre","","",193,null],[11,"fmt","","",194,null],[11,"eq","","",194,null],[11,"clone","","",194,null],[11,"new","","",193,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",193,null],[11,"add_kill","","Indicates that `id` kills `bit`",193,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",193,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",193,null],[11,"propagate","","Performs the data flow analysis.",193,null],[11,"fmt","rustc::middle::dependency_format","",195,null],[11,"eq","","",195,null],[11,"clone","","",195,null],[11,"clone","rustc::middle::free_region","",196,null],[11,"new","","",196,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",196,null],[11,"relate_free_regions_from_predicates","","",196,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",196,null],[11,"lub_free_regions","","",196,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",196,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",196,null],[11,"hash","rustc::middle::lang_items","",197,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"from_u32","","",197,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",198,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",198,null],[11,"item_name","","",198,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",198,null],[11,"require_owned_box","","",198,null],[11,"from_builtin_kind","","",198,null],[11,"to_builtin_kind","","",198,null],[11,"fn_trait_kind","","",198,null],[11,"char_impl","","",198,null],[11,"str_impl","","",198,null],[11,"slice_impl","","",198,null],[11,"const_ptr_impl","","",198,null],[11,"mut_ptr_impl","","",198,null],[11,"i8_impl","","",198,null],[11,"i16_impl","","",198,null],[11,"i32_impl","","",198,null],[11,"i64_impl","","",198,null],[11,"isize_impl","","",198,null],[11,"u8_impl","","",198,null],[11,"u16_impl","","",198,null],[11,"u32_impl","","",198,null],[11,"u64_impl","","",198,null],[11,"usize_impl","","",198,null],[11,"f32_impl","","",198,null],[11,"f64_impl","","",198,null],[11,"send_trait","","",198,null],[11,"sized_trait","","",198,null],[11,"unsize_trait","","",198,null],[11,"copy_trait","","",198,null],[11,"sync_trait","","",198,null],[11,"drop_trait","","",198,null],[11,"coerce_unsized_trait","","",198,null],[11,"add_trait","","",198,null],[11,"sub_trait","","",198,null],[11,"mul_trait","","",198,null],[11,"div_trait","","",198,null],[11,"rem_trait","","",198,null],[11,"neg_trait","","",198,null],[11,"not_trait","","",198,null],[11,"bitxor_trait","","",198,null],[11,"bitand_trait","","",198,null],[11,"bitor_trait","","",198,null],[11,"shl_trait","","",198,null],[11,"shr_trait","","",198,null],[11,"add_assign_trait","","",198,null],[11,"sub_assign_trait","","",198,null],[11,"mul_assign_trait","","",198,null],[11,"div_assign_trait","","",198,null],[11,"rem_assign_trait","","",198,null],[11,"bitxor_assign_trait","","",198,null],[11,"bitand_assign_trait","","",198,null],[11,"bitor_assign_trait","","",198,null],[11,"shl_assign_trait","","",198,null],[11,"shr_assign_trait","","",198,null],[11,"index_trait","","",198,null],[11,"index_mut_trait","","",198,null],[11,"unsafe_cell_type","","",198,null],[11,"deref_trait","","",198,null],[11,"deref_mut_trait","","",198,null],[11,"fn_trait","","",198,null],[11,"fn_mut_trait","","",198,null],[11,"fn_once_trait","","",198,null],[11,"eq_trait","","",198,null],[11,"ord_trait","","",198,null],[11,"str_eq_fn","","",198,null],[11,"panic_fn","","",198,null],[11,"panic_bounds_check_fn","","",198,null],[11,"panic_fmt","","",198,null],[11,"exchange_malloc_fn","","",198,null],[11,"exchange_free_fn","","",198,null],[11,"box_free_fn","","",198,null],[11,"strdup_uniq_fn","","",198,null],[11,"start_fn","","",198,null],[11,"eh_personality","","",198,null],[11,"eh_personality_catch","","",198,null],[11,"eh_unwind_resume","","",198,null],[11,"msvc_try_filter","","",198,null],[11,"owned_box","","",198,null],[11,"phantom_data","","",198,null],[11,"covariant_type","","",198,null],[11,"contravariant_type","","",198,null],[11,"invariant_type","","",198,null],[11,"covariant_lifetime","","",198,null],[11,"contravariant_lifetime","","",198,null],[11,"invariant_lifetime","","",198,null],[11,"no_copy_bound","","",198,null],[11,"non_zero","","",198,null],[11,"debug_trait","","",198,null],[11,"eq","rustc::middle::mem_categorization","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"clone","","",200,null],[11,"hash","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"hash","","",202,null],[11,"eq","","",202,null],[11,"ne","","",202,null],[11,"clone","","",202,null],[11,"fmt","","",203,null],[11,"hash","","",203,null],[11,"eq","","",203,null],[11,"ne","","",203,null],[11,"clone","","",203,null],[11,"fmt","","",204,null],[11,"hash","","",204,null],[11,"eq","","",204,null],[11,"clone","","",204,null],[11,"fmt","","",205,null],[11,"hash","","",205,null],[11,"eq","","",205,null],[11,"clone","","",205,null],[11,"fmt","","",206,null],[11,"hash","","",206,null],[11,"eq","","",206,null],[11,"clone","","",206,null],[11,"fmt","","",207,null],[11,"eq","","",207,null],[11,"ne","","",207,null],[11,"clone","","",207,null],[11,"eq","","",208,null],[11,"ne","","",208,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"id","rustc::hir","",23,null],[11,"span","","",23,null],[11,"id","","",59,null],[11,"span","","",59,null],[11,"clone","rustc::middle::mem_categorization","",210,null],[11,"from_mutbl","","",206,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",206,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",206,null],[11,"is_mutable","","",206,null],[11,"is_immutable","","",206,null],[11,"to_user_str","","",206,null],[11,"new","","",210,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",210,null],[11,"cat_expr_autoderefd","","",210,null],[11,"cat_expr_unadjusted","","",210,null],[11,"cat_def","","",210,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",210,null],[11,"cat_rvalue_node","","",210,null],[11,"cat_rvalue","","",210,null],[11,"cat_field","","",210,null],[11,"cat_tup_field","","",210,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",210,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",210,null],[11,"cat_imm_interior","","",210,null],[11,"cat_downcast","","",210,null],[11,"cat_pattern","","",210,null],[11,"fmt","","",211,null],[11,"clone","","",211,null],[11,"fmt","","",212,null],[11,"clone","","",212,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",208,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",208,null],[11,"upvar","","",208,null],[11,"descriptive_string","","",208,null],[11,"fmt","","",208,null],[11,"fmt","","",199,null],[11,"fmt","","",201,null],[11,"fmt","","",202,null],[11,"fmt","","",200,null],[11,"fmt","","",200,null],[11,"cmp","rustc::middle::privacy","",213,null],[11,"partial_cmp","","",213,null],[11,"eq","","",213,null],[11,"fmt","","",213,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"is_reachable","","",214,null],[11,"is_exported","","",214,null],[11,"is_public","","",214,null],[11,"default","","",214,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"fmt","","",214,null],[11,"decode","rustc::middle::region","",215,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",215,null],[11,"hash","","",215,null],[11,"cmp","","",215,null],[11,"partial_cmp","","",215,null],[11,"lt","","",215,null],[11,"le","","",215,null],[11,"gt","","",215,null],[11,"ge","","",215,null],[11,"eq","","",215,null],[11,"ne","","",215,null],[11,"clone","","",215,null],[11,"fmt","","",215,null],[11,"fmt","","",216,null],[11,"hash","","",216,null],[11,"cmp","","",216,null],[11,"partial_cmp","","",216,null],[11,"lt","","",216,null],[11,"le","","",216,null],[11,"gt","","",216,null],[11,"ge","","",216,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"clone","","",216,null],[11,"fmt","","",217,null],[11,"decode","","",217,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",217,null],[11,"hash","","",217,null],[11,"cmp","","",217,null],[11,"partial_cmp","","",217,null],[11,"lt","","",217,null],[11,"le","","",217,null],[11,"gt","","",217,null],[11,"ge","","",217,null],[11,"eq","","",217,null],[11,"ne","","",217,null],[11,"clone","","",217,null],[11,"to_code_extent","","",217,null],[11,"fmt","","",218,null],[11,"decode","","",218,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",218,null],[11,"hash","","",218,null],[11,"cmp","","",218,null],[11,"partial_cmp","","",218,null],[11,"lt","","",218,null],[11,"le","","",218,null],[11,"gt","","",218,null],[11,"ge","","",218,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"clone","","",218,null],[11,"node_id","","Returns a node id associated with this scope.",216,null],[11,"node_id","","",215,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",215,null],[11,"clone","","",219,null],[11,"fmt","","",219,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",220,null],[11,"lookup_code_extent","","",220,null],[11,"node_extent","","",220,null],[11,"item_extent","","",220,null],[11,"call_site_extent","","",220,null],[11,"opt_destruction_extent","","",220,null],[11,"intern_code_extent","","",220,null],[11,"intern_node","","",220,null],[11,"code_extent_data","","",220,null],[11,"each_encl_scope","","",220,null],[11,"each_var_scope","","",220,null],[11,"each_rvalue_scope","","",220,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",220,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",220,null],[11,"var_region","","Returns the lifetime of the variable `id`.",220,null],[11,"scopes_intersect","","",220,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",220,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",220,null],[11,"fmt","rustc::middle::resolve_lifetime","",221,null],[11,"decode","","",221,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",221,null],[11,"hash","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"hash","rustc::middle::stability","",222,null],[11,"fmt","","",222,null],[11,"clone","","",222,null],[11,"partial_cmp","","",222,null],[11,"eq","","",222,null],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",222,null],[11,"from_attr_level","","",222,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"build","","Construct the stability index for a crate being compiled.",223,null],[11,"new","","",223,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"lookup_stability","rustc::ty::context","Lookup the stability for a node, loading external crate\nmetadata as necessary.",119,null],[11,"lookup_deprecation","","",119,null],[11,"decode","rustc::mir::repr","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",224,null],[11,"clone","","",224,null],[11,"all_basic_blocks","","",224,null],[11,"basic_block_data","","",224,null],[11,"basic_block_data_mut","","",224,null],[11,"index","","",224,null],[11,"index_mut","","",224,null],[11,"decode","","",225,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",225,null],[11,"eq","","",225,null],[11,"fmt","","",225,null],[11,"clone","","",225,null],[11,"decode","","",226,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",226,null],[11,"eq","","",226,null],[11,"fmt","","",226,null],[11,"clone","","",226,null],[11,"decode","","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"decode","","",228,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",228,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"decode","","",229,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"decode","","",230,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",230,null],[11,"fmt","","",230,null],[11,"clone","","",230,null],[11,"decode","","",231,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",231,null],[11,"hash","","",231,null],[11,"eq","","",231,null],[11,"ne","","",231,null],[11,"clone","","",231,null],[11,"new","","",231,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",231,null],[11,"fmt","","",231,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"fmt","","",232,null],[11,"clone","","",232,null],[11,"decode","","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",233,null],[11,"fmt","","",233,null],[11,"clone","","",233,null],[11,"decode","","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",234,null],[11,"clone","","",234,null],[11,"successors","","",233,null],[11,"successors_mut","","",233,null],[11,"successors","","",234,null],[11,"successors_mut","","",234,null],[11,"new","","",232,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",232,null],[11,"terminator_mut","","",232,null],[11,"fmt","","",234,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",234,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",234,null],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",235,null],[11,"clone","","",235,null],[11,"decode","","",236,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",236,null],[11,"fmt","","",236,null],[11,"clone","","",236,null],[11,"fmt","","",235,null],[11,"decode","","",237,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"clone","","",237,null],[11,"decode","","",238,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",238,null],[11,"hash","","",238,null],[11,"eq","","",238,null],[11,"ne","","",238,null],[11,"fmt","","",238,null],[11,"clone","","",238,null],[11,"decode","","",239,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",239,null],[11,"hash","","",239,null],[11,"eq","","",239,null],[11,"ne","","",239,null],[11,"fmt","","",239,null],[11,"clone","","",239,null],[11,"decode","","",240,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",240,null],[11,"hash","","",240,null],[11,"eq","","",240,null],[11,"ne","","",240,null],[11,"fmt","","",240,null],[11,"clone","","",240,null],[11,"new","","",240,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",240,null],[11,"field","","",237,null],[11,"deref","","",237,null],[11,"index","","",237,null],[11,"elem","","",237,null],[11,"fmt","","",237,null],[11,"index","collections::vec","",241,null],[11,"index_mut","","",241,null],[11,"decode","rustc::mir::repr","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",242,null],[11,"eq","","",242,null],[11,"ne","","",242,null],[11,"hash","","",242,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"new","","",242,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",242,null],[11,"decode","","",243,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",243,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"decode","","",244,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",244,null],[11,"eq","","",244,null],[11,"ne","","",244,null],[11,"clone","","",244,null],[11,"fmt","","",244,null],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",245,null],[11,"clone","","",245,null],[11,"decode","","",246,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",246,null],[11,"eq","","",246,null],[11,"fmt","","",246,null],[11,"clone","","",246,null],[11,"decode","","",247,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",247,null],[11,"eq","","",247,null],[11,"ne","","",247,null],[11,"fmt","","",247,null],[11,"clone","","",247,null],[11,"decode","","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",248,null],[11,"eq","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"decode","","",249,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",249,null],[11,"eq","","",249,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"fmt","","",245,null],[11,"decode","","",250,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",250,null],[11,"hash","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"clone","","",251,null],[11,"fmt","","",251,null],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",252,null],[11,"hash","","",252,null],[11,"eq","","",252,null],[11,"ne","","",252,null],[11,"clone","","",252,null],[11,"fmt","","",250,null],[11,"fmt","","",252,null],[11,"fmt","rustc::mir::tcx","",164,null],[11,"clone","","",164,null],[11,"from_ty","","",164,{"inputs":[{"name":"tys"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",164,null],[11,"projection_ty","","",164,null],[11,"super_fold_with","","",164,null],[11,"super_visit_with","","",164,null],[11,"operand_ty","rustc::mir::repr","",224,null],[11,"binop_ty","","",224,null],[11,"lvalue_ty","","",224,null],[11,"rvalue_ty","","",224,null],[11,"to_mutbl_lossy","","",226,null],[11,"to_hir_binop","","",248,null],[11,"fmt","rustc::mir::visit","",253,null],[11,"clone","","",253,null],[11,"clone","rustc::mir::transform","",254,null],[11,"from_node","","",254,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"mirsource"}}],[11,"item_id","","",254,null],[11,"new","","",255,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",255,null],[11,"push_pass","","Pushes a built-in pass.",255,null],[11,"extend","","",255,null],[11,"eq","rustc::session::config","",256,null],[11,"clone","","",256,null],[11,"eq","","",257,null],[11,"clone","","",257,null],[11,"hash","","",258,null],[11,"eq","","",258,null],[11,"clone","","",258,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"fmt","","",259,null],[11,"clone","","",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",260,null],[11,"eq","","",261,null],[11,"clone","","",261,null],[11,"filestem","","",262,null],[11,"clone","","",263,null],[11,"path","","",263,null],[11,"temp_path","","",263,null],[11,"with_extension","","",263,null],[11,"filestem","","",263,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",260,null],[11,"eq","","",264,null],[11,"clone","","",264,null],[11,"fmt","","",265,null],[11,"hash","","",265,null],[11,"cmp","","",265,null],[11,"clone","","",265,null],[11,"partial_cmp","","",265,null],[11,"eq","","",265,null],[11,"clone","","",266,null],[11,"is_empty","","",266,null],[11,"eq","","",267,null],[11,"clone","","",267,null],[11,"desc","","",267,null],[11,"clone","","",268,null],[11,"clone","","",269,null],[11,"fmt","","",270,null],[11,"eq","","",270,null],[11,"clone","","",270,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"clone","","",271,null],[11,"is_stable","","",271,null],[11,"stable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",265,null],[11,"clone","rustc::session::filesearch","",272,null],[11,"for_each_lib_search_path","","",273,null],[11,"get_lib_path","","",273,null],[11,"search","","",273,null],[11,"new","","",273,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",273,null],[11,"get_tools_search_paths","","",273,null],[11,"fmt","rustc::session::search_paths","",274,null],[11,"clone","","",274,null],[11,"fmt","","",275,null],[11,"clone","","",275,null],[11,"eq","","",275,null],[11,"new","","",274,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",274,null],[11,"iter","","",274,null],[11,"next","","",276,null],[11,"struct_span_warn","rustc::session","",277,null],[11,"struct_span_warn_with_code","","",277,null],[11,"struct_warn","","",277,null],[11,"struct_span_err","","",277,null],[11,"struct_span_err_with_code","","",277,null],[11,"struct_err","","",277,null],[11,"struct_span_fatal","","",277,null],[11,"struct_span_fatal_with_code","","",277,null],[11,"struct_fatal","","",277,null],[11,"span_fatal","","",277,null],[11,"span_fatal_with_code","","",277,null],[11,"fatal","","",277,null],[11,"span_err_or_warn","","",277,null],[11,"span_err","","",277,null],[11,"span_err_with_code","","",277,null],[11,"err","","",277,null],[11,"err_count","","",277,null],[11,"has_errors","","",277,null],[11,"abort_if_errors","","",277,null],[11,"track_errors","","",277,null],[11,"span_warn","","",277,null],[11,"span_warn_with_code","","",277,null],[11,"warn","","",277,null],[11,"opt_span_warn","","",277,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",277,null],[11,"note_without_error","","",277,null],[11,"span_note_without_error","","",277,null],[11,"span_unimpl","","",277,null],[11,"unimpl","","",277,null],[11,"add_lint","","",277,null],[11,"reserve_node_ids","","",277,null],[11,"diagnostic","","",277,null],[11,"codemap","","",277,null],[11,"verbose","","",277,null],[11,"time_passes","","",277,null],[11,"count_llvm_insns","","",277,null],[11,"count_type_sizes","","",277,null],[11,"time_llvm_passes","","",277,null],[11,"trans_stats","","",277,null],[11,"meta_stats","","",277,null],[11,"asm_comments","","",277,null],[11,"no_verify","","",277,null],[11,"borrowck_stats","","",277,null],[11,"print_llvm_passes","","",277,null],[11,"lto","","",277,null],[11,"no_landing_pads","","",277,null],[11,"unstable_options","","",277,null],[11,"print_enum_sizes","","",277,null],[11,"nonzeroing_move_hints","","",277,null],[11,"sysroot","","",277,null],[11,"target_filesearch","","",277,null],[11,"host_filesearch","","",277,null],[11,"next_node_id","","",277,null],[11,"peek_node_id","","",277,null],[11,"diagnostic","","",277,null],[11,"hash","rustc::traits::error_reporting","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"fmt","","",278,null],[11,"report_fulfillment_errors","rustc::infer","",116,null],[11,"report_fulfillment_errors_as_warnings","","",116,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",116,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",116,null],[11,"report_selection_error","","",116,null],[11,"recursive_type_with_infinite_size_error","rustc::ty::context","",119,null],[11,"report_object_safety_error","","",119,null],[11,"clone","rustc::traits::fulfill","",279,null],[11,"new","","Creates a new fulfillment context.",280,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",280,null],[11,"register_builtin_bound","","",280,null],[11,"register_region_obligation","","",280,null],[11,"register_predicate_obligation","","",280,null],[11,"register_rfc1592_obligation","","",280,null],[11,"region_obligations","","",280,null],[11,"select_rfc1592_obligations","","",280,null],[11,"select_all_or_error","","",280,null],[11,"select_where_possible","","",280,null],[11,"pending_obligations","","",280,null],[11,"new","","",281,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",281,null],[11,"check_duplicate_trait","","",281,null],[11,"eq","rustc::traits::project","",282,null],[11,"clone","","",282,null],[11,"fmt","","",282,null],[11,"is_topmost","","",282,null],[11,"is_any_final","","",282,null],[11,"is_any","","",282,null],[11,"clone","","",283,null],[11,"clone","","",284,null],[11,"with","","",284,null],[11,"hash","rustc::traits::object_safety","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"fmt","","",285,null],[11,"clone","","",285,null],[11,"hash","","",286,null],[11,"eq","","",286,null],[11,"fmt","","",286,null],[11,"clone","","",286,null],[11,"is_object_safe","rustc::ty::context","",119,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",119,null],[11,"object_safety_violations","","",119,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",119,null],[11,"clone","rustc::traits::select","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"clone","","",289,null],[11,"new","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",290,null],[11,"tcx","","",290,null],[11,"param_env","","",290,null],[11,"closure_typer","","",290,null],[11,"projection_mode","","",290,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",290,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",290,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",290,null],[11,"new","","",287,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",289,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",291,null],[11,"new","rustc::traits::specialize::specialization_graph","",292,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",292,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",292,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",292,null],[11,"clone","","",293,null],[11,"fmt","","",293,null],[11,"is_from_trait","","",293,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",293,null],[11,"def_id","","",293,null],[11,"next","","",294,null],[11,"next","","",295,null],[11,"map","","",296,null],[11,"next","","",297,null],[11,"next","","",298,null],[11,"next","","",299,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",295,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",295,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",295,null],[11,"new","rustc::traits::specialize","",300,{"inputs":[],"output":{"name":"specializescache"}}],[11,"check","","",300,null],[11,"insert","","",300,null],[11,"fmt","rustc::traits::project","",284,null],[11,"fmt","rustc::traits::fulfill","",279,null],[11,"fmt","rustc::traits","",301,null],[11,"fmt","","",302,null],[11,"fmt","","",303,null],[11,"fmt","","",304,null],[11,"fmt","","",305,null],[11,"fmt","","",306,null],[11,"fmt","","",307,null],[11,"fmt","","",308,null],[11,"fmt","","",309,null],[11,"fmt","","",310,null],[11,"fmt","rustc::traits::project","",283,null],[11,"lift_to_tcx","rustc::traits","",311,null],[11,"lift_to_tcx","","",302,null],[11,"super_fold_with","","",301,null],[11,"super_visit_with","","",301,null],[11,"super_fold_with","","",303,null],[11,"super_visit_with","","",303,null],[11,"super_fold_with","","",304,null],[11,"super_visit_with","","",304,null],[11,"super_fold_with","","",306,null],[11,"super_visit_with","","",306,null],[11,"super_fold_with","","",305,null],[11,"super_visit_with","","",305,null],[11,"super_fold_with","","",307,null],[11,"super_visit_with","","",307,null],[11,"super_fold_with","","",308,null],[11,"super_visit_with","","",308,null],[11,"super_fold_with","","",302,null],[11,"super_visit_with","","",302,null],[11,"super_fold_with","rustc::traits::project","",284,null],[11,"super_visit_with","","",284,null],[11,"next","rustc::traits::util","",312,null],[11,"trait_ref_for_builtin_bound","rustc::ty::context","",119,null],[11,"predicate_for_trait_def","","",119,null],[11,"predicate_for_builtin_bound","","",119,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",119,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",119,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",119,null],[11,"closure_trait_ref_and_return_type","","",119,null],[11,"eq","rustc::traits","",301,null],[11,"ne","","",301,null],[11,"clone","","",301,null],[11,"eq","","",313,null],[11,"ne","","",313,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"eq","","",314,null],[11,"ne","","",314,null],[11,"fmt","","",314,null],[11,"clone","","",314,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"fmt","","",315,null],[11,"clone","","",315,null],[11,"fmt","","",311,null],[11,"clone","","",311,null],[11,"clone","","",310,null],[11,"clone","","",302,null],[11,"eq","","",303,null],[11,"ne","","",303,null],[11,"clone","","",303,null],[11,"eq","","",304,null],[11,"ne","","",304,null],[11,"clone","","",304,null],[11,"clone","","",306,null],[11,"clone","","",305,null],[11,"clone","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"ne","","",308,null],[11,"clone","","",308,null],[11,"new","","",301,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",301,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",301,null],[11,"new","","",313,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",313,{"inputs":[{"name":"span"},{"name":"u32"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",313,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",302,null],[11,"map","","",302,null],[11,"clone","rustc::ty::adjustment","",316,null],[11,"clone","","",317,null],[11,"is_identity","","",316,null],[11,"is_identity","","",317,null],[11,"fmt","","",318,null],[11,"eq","","",318,null],[11,"ne","","",318,null],[11,"clone","","",318,null],[11,"fmt","","",319,null],[11,"decode","","",319,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",319,null],[11,"clone","","",319,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",320,null],[11,"adjust_for_autoderef","","",320,null],[11,"adjust_for_autoref","","",320,null],[11,"eq","rustc::ty::cast","",321,null],[11,"ne","","",321,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"fmt","","",322,null],[11,"clone","","",322,null],[11,"decode","","",323,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"from_ty","","",322,{"inputs":[{"name":"tys"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::error","",324,null],[11,"clone","","",324,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"fmt","","",326,null],[11,"hash","","",326,null],[11,"eq","","",326,null],[11,"decode","","",326,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",326,null],[11,"clone","","",326,null],[11,"fmt","","",325,null],[11,"note_and_explain_type_err","rustc::ty::context","",119,null],[11,"hash","rustc::ty::fast_reject","",327,null],[11,"eq","","",327,null],[11,"ne","","",327,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"tcx","rustc::ty::fold","",328,null],[11,"fold_ty","","",328,null],[11,"collect_regions","rustc::ty::context","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",119,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",119,null],[11,"new","rustc::ty::fold","",329,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",329,null],[11,"fold_binder","","",329,null],[11,"fold_region","","",329,null],[11,"replace_late_bound_regions","rustc::ty::context","",119,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",119,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",119,null],[11,"no_late_bound_regions","","",119,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",119,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",119,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",119,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",119,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",119,null],[11,"item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",119,null],[11,"node_path_str","","Returns a string identifying this local node-id.",119,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",119,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",119,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",119,null],[11,"push_item_path","","",119,null],[11,"fmt","rustc::ty::item_path","",330,null],[11,"default","rustc::ty::layout","",331,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",331,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",331,null],[11,"ptr_sized_integer","","",331,null],[11,"clone","","",332,null],[11,"fmt","","",333,null],[11,"hash","","",333,null],[11,"cmp","","",333,null],[11,"partial_cmp","","",333,null],[11,"lt","","",333,null],[11,"le","","",333,null],[11,"gt","","",333,null],[11,"ge","","",333,null],[11,"eq","","",333,null],[11,"ne","","",333,null],[11,"clone","","",333,null],[11,"from_bits","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",333,null],[11,"bits","","",333,null],[11,"abi_align","","",333,null],[11,"checked_add","","",333,null],[11,"checked_mul","","",333,null],[11,"fmt","","",334,null],[11,"hash","","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"clone","","",334,null],[11,"from_bits","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",334,null],[11,"pref","","",334,null],[11,"min","","",334,null],[11,"max","","",334,null],[11,"fmt","","",335,null],[11,"hash","","",335,null],[11,"cmp","","",335,null],[11,"partial_cmp","","",335,null],[11,"eq","","",335,null],[11,"clone","","",335,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",335,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",335,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",335,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",335,null],[11,"fmt","","",336,null],[11,"hash","","",336,null],[11,"eq","","",336,null],[11,"ne","","",336,null],[11,"clone","","",336,null],[11,"size","","",336,null],[11,"align","","",336,null],[11,"fmt","","",337,null],[11,"hash","","",337,null],[11,"eq","","",337,null],[11,"ne","","",337,null],[11,"new","","",337,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",337,null],[11,"min_size","","Get the size without trailing alignment padding.",337,null],[11,"stride","","Get the size with trailing aligment padding.",337,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",337,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"tys"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",338,null],[11,"eq","","",338,null],[11,"ne","","",338,null],[11,"fmt","","",338,null],[11,"fmt","","",339,null],[11,"clone","","",339,null],[11,"fmt","","",339,null],[11,"compute_uncached","","",338,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",338,null],[11,"size","","",338,null],[11,"align","","",338,null],[11,"fmt","","",340,null],[11,"clone","","",340,null],[11,"compute","","",340,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",340,null],[11,"new","rustc::ty::_match","",341,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",341,null],[11,"tcx","","",341,null],[11,"a_is_expected","","",341,null],[11,"relate_with_variance","","",341,null],[11,"regions","","",341,null],[11,"tys","","",341,null],[11,"binders","","",341,null],[11,"to_dep_node","rustc::ty::maps","",342,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",343,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",344,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",345,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",346,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",347,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",348,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",349,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",350,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",351,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",352,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",353,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",354,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",355,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"fmt","rustc::ty::outlives","",356,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",116,null],[11,"fmt","rustc::ty::relate","",357,null],[11,"clone","","",357,null],[11,"relate","rustc::ty::sty","",358,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"result"}}],[11,"relate","","",161,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"result"}}],[11,"relate","rustc::hir","",92,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"relate","syntax::abi","",359,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",360,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",361,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"result"}}],[11,"relate","collections::vec","",241,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",362,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"result"}}],[11,"relate","","",363,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"result"}}],[11,"relate","","",120,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"relate","","",163,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"result"}}],[11,"relate","","",364,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"result"}}],[11,"relate","","",121,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"result"}}],[11,"relate","alloc::rc","",365,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"relate","alloc::boxed","",366,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"result"}}],[11,"hash","rustc::ty::subst","",367,null],[11,"eq","","",367,null],[11,"ne","","",367,null],[11,"clone","","",367,null],[11,"new","","",367,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",367,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",367,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"tys"}],"output":{"name":"substs"}}],[11,"empty","","",367,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",367,null],[11,"type_for_def","","",367,null],[11,"self_ty","","",367,null],[11,"with_self_ty","","",367,null],[11,"erase_regions","","",367,null],[11,"with_method","","",367,null],[11,"with_method_from","","",367,null],[11,"with_method_from_subst","","",367,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",367,null],[11,"encode","","",367,null],[11,"decode","","",367,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",368,null],[11,"decode","","",368,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",368,null],[11,"hash","","",368,null],[11,"clone","","",368,null],[11,"eq","","",368,null],[11,"cmp","","",368,null],[11,"partial_cmp","","",368,null],[11,"all","","",368,null],[11,"to_uint","","",368,null],[11,"from_uint","","",368,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",369,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",369,null],[11,"hash","","",369,null],[11,"clone","","",369,null],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"fmt","","",369,null],[11,"empty","","",369,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",369,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",369,null],[11,"extend","","Appends `values` to the vector associated with `space`.",369,null],[11,"pop","","",369,null],[11,"truncate","","",369,null],[11,"replace","","",369,null],[11,"get_self","","",369,null],[11,"len","","",369,null],[11,"is_empty_in","","",369,null],[11,"get_slice","","",369,null],[11,"get_mut_slice","","",369,null],[11,"opt_get","","",369,null],[11,"get","","",369,null],[11,"iter","","",369,null],[11,"into_iter","","",369,null],[11,"iter_enumerated","","",369,null],[11,"as_slice","","",369,null],[11,"into_vec","","",369,null],[11,"all_vecs","","",369,null],[11,"all","","",369,null],[11,"any","","",369,null],[11,"is_empty","","",369,null],[11,"map","","",369,null],[11,"map_enumerated","","",369,null],[11,"split","","",369,null],[11,"with_slice","","",369,null],[11,"clone","","",370,null],[11,"next","","",370,null],[11,"size_hint","","",370,null],[11,"into_iter","","",369,null],[11,"new","rustc::ty::trait_def","",371,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",371,null],[11,"object_safety","","",371,null],[11,"set_object_safety","","",371,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",371,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",371,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",371,null],[11,"ancestors","","",371,null],[11,"for_each_impl","","",371,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",371,null],[11,"hash","","",372,null],[11,"cmp","","",372,null],[11,"partial_cmp","","",372,null],[11,"lt","","",372,null],[11,"le","","",372,null],[11,"gt","","",372,null],[11,"ge","","",372,null],[11,"clone","","",372,null],[11,"eq","","",372,null],[11,"ne","","",372,null],[18,"NO_TRAIT_FLAGS","rustc_trans::session","",372,null],[18,"HAS_DEFAULT_IMPL","","",372,null],[18,"IS_OBJECT_SAFE","","",372,null],[18,"OBJECT_SAFETY_VALID","","",372,null],[18,"IMPLS_VALID","","",372,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",372,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",372,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",372,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",372,null],[11,"is_all","","Returns `true` if all flags are currently set.",372,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",372,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",372,null],[11,"insert","","Inserts the specified flags in-place.",372,null],[11,"remove","","Removes the specified flags in-place.",372,null],[11,"toggle","","Toggles the specified flags in-place.",372,null],[11,"bitor","","Returns the union of the two sets of flags.",372,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",372,null],[11,"bitand","","Returns the intersection between the two sets of flags.",372,null],[11,"sub","","Returns the set difference of the two sets of flags.",372,null],[11,"not","","Returns the complement of this set of flags.",372,null],[11,"new","rustc::ty::walk","",373,{"inputs":[{"name":"tys"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",373,null],[11,"next","","",373,null],[11,"fmt","rustc::ty::wf","",374,null],[11,"to_ty","syntax::attr","",375,null],[11,"initial_discriminant","","",375,null],[11,"assert_ty_matches","","",375,null],[11,"disr_incr","","",375,null],[11,"clone","rustc::ty::util","",376,null],[11,"fmt","","",377,null],[11,"eq","","",377,null],[11,"cmp","","",377,null],[11,"partial_cmp","","",377,null],[11,"clone","","",377,null],[11,"can_type_implement_copy","rustc::ty","",378,null],[11,"pat_contains_ref_binding","rustc::ty::context","",119,null],[11,"arm_contains_ref_binding","","",119,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",119,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",119,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",119,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",119,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",119,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",119,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",119,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",119,null],[11,"moves_by_default","rustc::ty","",320,null],[11,"is_sized","","",320,null],[11,"layout","","",320,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",320,null],[11,"clone","rustc::ty::contents","",379,null],[11,"when","","",379,null],[11,"intersects","","",379,null],[11,"owns_owned","","",379,null],[11,"interior_param","","",379,null],[11,"interior_unsafe","","",379,null],[11,"needs_drop","","",379,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",379,null],[11,"union","","",379,null],[11,"has_dtor","","",379,null],[11,"bitor","","",379,null],[11,"bitand","","",379,null],[11,"sub","","",379,null],[11,"fmt","","",379,null],[11,"type_contents","rustc::ty","",320,null],[11,"new","rustc::ty::context","",380,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",381,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",119,null],[11,"deref","","",119,null],[11,"crate_name","","",119,null],[11,"crate_disambiguator","","",119,null],[11,"type_parameter_def","","",119,null],[11,"node_types","","",119,null],[11,"node_type_insert","","",119,null],[11,"intern_trait_def","","",119,null],[11,"alloc_trait_def","","",119,null],[11,"intern_adt_def","","",119,null],[11,"intern_stability","","",119,null],[11,"intern_layout","","",119,null],[11,"store_free_region_map","","",119,null],[11,"free_region_map","","",119,null],[11,"lift","","",119,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",119,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",119,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"hashmap"},{"name":"map"},{"name":"hashmap"},{"name":"hashset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",119,null],[11,"mk_type_list","","",119,null],[11,"mk_substs","","",119,null],[11,"mk_bare_fn","","",119,null],[11,"mk_region","","",119,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",119,null],[11,"mk_ty","","",119,null],[11,"mk_mach_int","","",119,null],[11,"mk_mach_uint","","",119,null],[11,"mk_mach_float","","",119,null],[11,"mk_str","","",119,null],[11,"mk_static_str","","",119,null],[11,"mk_enum","","",119,null],[11,"mk_box","","",119,null],[11,"mk_ptr","","",119,null],[11,"mk_ref","","",119,null],[11,"mk_mut_ref","","",119,null],[11,"mk_imm_ref","","",119,null],[11,"mk_mut_ptr","","",119,null],[11,"mk_imm_ptr","","",119,null],[11,"mk_nil_ptr","","",119,null],[11,"mk_array","","",119,null],[11,"mk_slice","","",119,null],[11,"mk_tup","","",119,null],[11,"mk_nil","","",119,null],[11,"mk_bool","","",119,null],[11,"mk_fn_def","","",119,null],[11,"mk_fn_ptr","","",119,null],[11,"mk_trait","","",119,null],[11,"mk_projection","","",119,null],[11,"mk_struct","","",119,null],[11,"mk_closure","","",119,null],[11,"mk_closure_from_closure_substs","","",119,null],[11,"mk_var","","",119,null],[11,"mk_int_var","","",119,null],[11,"mk_float_var","","",119,null],[11,"mk_infer","","",119,null],[11,"mk_param","","",119,null],[11,"mk_self_type","","",119,null],[11,"mk_param_from_def","","",119,null],[11,"trait_items","","",119,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",119,null],[11,"lift_to_tcx","core::option","",382,null],[11,"lift_to_tcx","core::result","",117,null],[11,"lift_to_tcx","collections::vec","",241,null],[11,"lift_to_tcx","rustc::ty::sty","",364,null],[11,"lift_to_tcx","","",120,null],[11,"lift_to_tcx","rustc::ty","",383,null],[11,"lift_to_tcx","","",384,null],[11,"lift_to_tcx","","",385,null],[11,"lift_to_tcx","","",361,null],[11,"lift_to_tcx","","",386,null],[11,"lift_to_tcx","rustc::ty::sty","",121,null],[11,"lift_to_tcx","","",163,null],[11,"lift_to_tcx","rustc::ty","",387,null],[11,"lift_to_tcx","rustc::ty::adjustment","",318,null],[11,"lift_to_tcx","rustc::ty::sty","",162,null],[11,"lift_to_tcx","","",161,null],[11,"lift_to_tcx","","",388,null],[11,"lift_to_tcx","rustc::ty::error","",324,null],[11,"lift_to_tcx","rustc::infer::type_variable","",141,null],[11,"lift_to_tcx","rustc::ty::error","",325,null],[11,"super_fold_with","rustc::hir","",92,null],[11,"super_visit_with","","",92,null],[11,"super_fold_with","syntax::abi","",359,null],[11,"super_visit_with","","",359,null],[11,"super_fold_with","core::option","",382,null],[11,"super_visit_with","","",382,null],[11,"super_fold_with","alloc::rc","",365,null],[11,"super_visit_with","","",365,null],[11,"super_fold_with","alloc::boxed","",366,null],[11,"super_visit_with","","",366,null],[11,"super_fold_with","collections::vec","",241,null],[11,"super_visit_with","","",241,null],[11,"super_fold_with","rustc::ty::sty","",121,null],[11,"fold_with","","",121,null],[11,"super_visit_with","","",121,null],[11,"visit_with","","",121,null],[11,"super_fold_with","syntax::ptr","",389,null],[11,"super_visit_with","","",389,null],[11,"super_fold_with","rustc::ty::subst","",369,null],[11,"super_visit_with","","",369,null],[11,"super_fold_with","rustc::ty::sty","",390,null],[11,"super_visit_with","","",390,null],[11,"super_fold_with","","",388,null],[11,"fold_with","","",388,null],[11,"super_visit_with","","",388,null],[11,"super_fold_with","","",358,null],[11,"fold_with","","",358,null],[11,"super_visit_with","","",358,null],[11,"super_fold_with","","",162,null],[11,"fold_with","","",162,null],[11,"super_visit_with","","",162,null],[11,"super_fold_with","","",161,null],[11,"fold_with","","",161,null],[11,"super_visit_with","","",161,null],[11,"super_fold_with","","",120,null],[11,"fold_with","","",120,null],[11,"super_visit_with","","",120,null],[11,"super_fold_with","rustc::ty","",391,null],[11,"fold_with","","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","rustc::ty::sty","",364,null],[11,"fold_with","","",364,null],[11,"super_visit_with","","",364,null],[11,"visit_with","","",364,null],[11,"super_fold_with","","",163,null],[11,"super_visit_with","","",163,null],[11,"super_fold_with","rustc::ty","",387,null],[11,"super_visit_with","","",387,null],[11,"super_fold_with","rustc::ty::adjustment","",318,null],[11,"fold_with","","",318,null],[11,"super_visit_with","","",318,null],[11,"super_fold_with","rustc::ty::sty","",363,null],[11,"super_visit_with","","",363,null],[11,"super_fold_with","","",362,null],[11,"fold_with","","",362,null],[11,"super_visit_with","","",362,null],[11,"super_fold_with","rustc::ty","",392,null],[11,"super_visit_with","","",392,null],[11,"super_fold_with","","",393,null],[11,"super_visit_with","","",393,null],[11,"super_fold_with","","",394,null],[11,"super_visit_with","","",394,null],[11,"super_fold_with","","",395,null],[11,"super_visit_with","","",395,null],[11,"super_fold_with","","",396,null],[11,"super_visit_with","","",396,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","","",361,null],[11,"super_visit_with","","",361,null],[11,"super_fold_with","rustc::ty::sty","",360,null],[11,"super_visit_with","","",360,null],[11,"super_fold_with","rustc::ty","",397,null],[11,"super_visit_with","","",397,null],[11,"super_fold_with","","",384,null],[11,"super_visit_with","","",384,null],[11,"super_fold_with","","",383,null],[11,"super_visit_with","","",383,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",398,null],[11,"super_visit_with","","",398,null],[11,"super_fold_with","","",378,null],[11,"super_visit_with","","",378,null],[11,"super_fold_with","","",399,null],[11,"super_visit_with","","",399,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"hash","","",358,null],[11,"eq","","",358,null],[11,"ne","","",358,null],[11,"clone","","",358,null],[11,"decode","","",400,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",400,null],[11,"hash","","",400,null],[11,"cmp","","",400,null],[11,"partial_cmp","","",400,null],[11,"lt","","",400,null],[11,"le","","",400,null],[11,"gt","","",400,null],[11,"ge","","",400,null],[11,"eq","","",400,null],[11,"ne","","",400,null],[11,"clone","","",400,null],[11,"decode","","",401,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",401,null],[11,"hash","","",401,null],[11,"cmp","","",401,null],[11,"partial_cmp","","",401,null],[11,"lt","","",401,null],[11,"le","","",401,null],[11,"gt","","",401,null],[11,"ge","","",401,null],[11,"eq","","",401,null],[11,"ne","","",401,null],[11,"clone","","",401,null],[11,"fmt","","",402,null],[11,"hash","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"clone","","",402,null],[11,"fmt","","",163,null],[11,"hash","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"encode","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",390,null],[11,"eq","","",390,null],[11,"ne","","",390,null],[11,"clone","","",390,null],[11,"principal_def_id","","",390,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",390,null],[11,"projection_bounds_with_self_ty","","",390,null],[11,"hash","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"clone","","",120,null],[11,"self_ty","","",121,null],[11,"def_id","","",121,null],[11,"substs","","",121,null],[11,"input_types","","",121,null],[11,"to_poly_trait_predicate","","",121,null],[11,"fmt","","",121,null],[11,"hash","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",121,null],[11,"as_ref","","",121,null],[11,"map_bound_ref","","",121,null],[11,"map_bound","","",121,null],[11,"fmt","rustc::ty","",403,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"hash","","",360,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"clone","","",360,null],[11,"sort_key","","",360,null],[11,"fmt","","",404,null],[11,"hash","","",404,null],[11,"eq","","",404,null],[11,"ne","","",404,null],[11,"clone","","",404,null],[11,"hash","","",388,null],[11,"eq","","",388,null],[11,"ne","","",388,null],[11,"clone","","",388,null],[11,"decode","","",162,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,null],[11,"fmt","","",162,null],[11,"hash","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"clone","","",162,null],[11,"diverges","","",162,null],[11,"unwrap","","",162,null],[11,"unwrap_or","","",162,null],[11,"diverges","","",121,null],[11,"hash","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"clone","","",161,null],[11,"inputs","","",121,null],[11,"input","","",121,null],[11,"output","","",121,null],[11,"variadic","","",121,null],[11,"hash","","",405,null],[11,"eq","","",405,null],[11,"ne","","",405,null],[11,"clone","","",405,null],[11,"new","","",405,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",405,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",405,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",405,null],[11,"is_self","","",405,null],[11,"fmt","","",406,null],[11,"decode","","",406,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",406,null],[11,"hash","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",406,null],[11,"decode","","",364,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",364,null],[11,"hash","","",364,null],[11,"eq","","",364,null],[11,"ne","","",364,null],[11,"clone","","",364,null],[11,"fmt","","",407,null],[11,"decode","","",407,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",407,null],[11,"hash","","",407,null],[11,"eq","","",407,null],[11,"ne","","",407,null],[11,"clone","","",407,null],[11,"hash","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"hash","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"hash","","",146,null],[11,"decode","","",146,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"decode","","",408,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",408,null],[11,"hash","","",408,null],[11,"eq","","",408,null],[11,"ne","","",408,null],[11,"clone","","",408,null],[11,"hash","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"clone","","",409,null],[11,"clone","","",362,null],[11,"hash","","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"new","","",362,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"existentialbounds"}}],[11,"fmt","","",363,null],[11,"hash","","",363,null],[11,"eq","","",363,null],[11,"ne","","",363,null],[11,"clone","","",363,null],[11,"empty","","",363,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",363,null],[11,"to_predicates","","",363,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",410,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",410,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",410,null],[11,"clear","","",410,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",410,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",410,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",410,null],[11,"union","","Returns the union of both `EnumSets`.",410,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",410,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",410,null],[11,"remove","","Removes an enum from the EnumSet",410,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",410,null],[11,"iter","","Returns an iterator over an `EnumSet`.",410,null],[11,"clone","collections::binary_heap","",411,null],[11,"clone_from","","",411,null],[11,"default","","",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",411,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",411,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",411,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",411,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",411,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",411,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",411,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",411,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",411,null],[11,"push","","Pushes an item onto the binary heap.",411,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",411,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",411,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",411,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",411,null],[11,"len","","Returns the length of the binary heap.",411,null],[11,"is_empty","","Checks if the binary heap is empty.",411,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",411,null],[11,"clear","","Drops all items from the binary heap.",411,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",411,null],[11,"clone","","",412,null],[11,"next","","",412,null],[11,"size_hint","","",412,null],[11,"next_back","","",412,null],[11,"clone","","",413,null],[11,"next","","",413,null],[11,"size_hint","","",413,null],[11,"next_back","","",413,null],[11,"next","","",414,null],[11,"size_hint","","",414,null],[11,"next_back","","",414,null],[11,"from","","",411,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",411,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",411,null],[11,"extend","","",411,null],[11,"extend","","",411,null],[11,"drop","collections::btree::map","",415,null],[11,"clone","","",415,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",415,null],[11,"get","","Returns a reference to the value corresponding to the key.",415,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",415,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",415,null],[11,"insert","","Inserts a key-value pair into the map.",415,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",415,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",415,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",415,null],[11,"next","","",416,null],[11,"size_hint","","",416,null],[11,"next_back","","",416,null],[11,"len","","",416,null],[11,"clone","","",416,null],[11,"next","","",417,null],[11,"size_hint","","",417,null],[11,"next_back","","",417,null],[11,"len","","",417,null],[11,"into_iter","","",415,null],[11,"drop","","",418,null],[11,"next","","",418,null],[11,"size_hint","","",418,null],[11,"next_back","","",418,null],[11,"len","","",418,null],[11,"next","","",419,null],[11,"size_hint","","",419,null],[11,"next_back","","",419,null],[11,"len","","",419,null],[11,"clone","","",419,null],[11,"next","","",420,null],[11,"size_hint","","",420,null],[11,"next_back","","",420,null],[11,"len","","",420,null],[11,"clone","","",420,null],[11,"next","","",421,null],[11,"next","","",422,null],[11,"size_hint","","",422,null],[11,"next_back","","",422,null],[11,"len","","",422,null],[11,"next_back","","",421,null],[11,"clone","","",421,null],[11,"next","","",423,null],[11,"next_back","","",423,null],[11,"from_iter","","",415,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",415,null],[11,"extend","","",415,null],[11,"hash","","",415,null],[11,"default","","",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",415,null],[11,"partial_cmp","","",415,null],[11,"cmp","","",415,null],[11,"fmt","","",415,null],[11,"index","","",415,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",415,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",415,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",415,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",415,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",415,null],[11,"len","","Returns the number of elements in the map.",415,null],[11,"is_empty","","Returns true if the map contains no elements.",415,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",424,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",424,null],[11,"key","","Returns a reference to this entry&#39;s key.",424,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",425,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",425,null],[11,"key","","Gets a reference to the key in the entry.",426,null],[11,"get","","Gets a reference to the value in the entry.",426,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",426,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",426,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",426,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",426,null],[11,"partial_cmp","collections::btree::set","",427,null],[11,"lt","","",427,null],[11,"le","","",427,null],[11,"gt","","",427,null],[11,"ge","","",427,null],[11,"cmp","","",427,null],[11,"eq","","",427,null],[11,"ne","","",427,null],[11,"hash","","",427,null],[11,"clone","","",427,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",427,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",427,null],[11,"difference","","Visits the values representing the difference, in ascending order.",427,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",427,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",427,null],[11,"union","","Visits the values representing the union, in ascending order.",427,null],[11,"len","","Returns the number of elements in the set.",427,null],[11,"is_empty","","Returns true if the set contains no elements.",427,null],[11,"clear","","Clears the set, removing all values.",427,null],[11,"contains","","Returns `true` if the set contains a value.",427,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",427,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",427,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",427,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",427,null],[11,"insert","","Adds a value to the set.",427,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",427,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",427,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",427,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",427,null],[11,"from_iter","","",427,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",427,null],[11,"extend","","",427,null],[11,"extend","","",427,null],[11,"default","","",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",427,null],[11,"clone","","",428,null],[11,"next","","",428,null],[11,"size_hint","","",428,null],[11,"next_back","","",428,null],[11,"len","","",428,null],[11,"next","","",429,null],[11,"size_hint","","",429,null],[11,"next_back","","",429,null],[11,"len","","",429,null],[11,"clone","","",430,null],[11,"next","","",430,null],[11,"next_back","","",430,null],[11,"clone","","",431,null],[11,"next","","",431,null],[11,"size_hint","","",431,null],[11,"clone","","",432,null],[11,"next","","",432,null],[11,"size_hint","","",432,null],[11,"clone","","",433,null],[11,"next","","",433,null],[11,"size_hint","","",433,null],[11,"clone","","",434,null],[11,"next","","",434,null],[11,"size_hint","","",434,null],[11,"borrow","collections::borrow","",435,null],[11,"clone","","",435,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",435,null],[11,"into_owned","","Extracts the owned data.",435,null],[11,"deref","","",435,null],[11,"cmp","","",435,null],[11,"eq","","",435,null],[11,"partial_cmp","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"hash","","",435,null],[11,"as_ref","","",435,null],[11,"hash","collections::enum_set","",410,null],[11,"cmp","","",410,null],[11,"partial_cmp","","",410,null],[11,"lt","","",410,null],[11,"le","","",410,null],[11,"gt","","",410,null],[11,"ge","","",410,null],[11,"eq","","",410,null],[11,"ne","","",410,null],[11,"clone","","",410,null],[11,"fmt","","",410,null],[11,"sub","","",410,null],[11,"bitor","","",410,null],[11,"bitand","","",410,null],[11,"bitxor","","",410,null],[11,"clone","","",436,null],[11,"next","","",436,null],[11,"size_hint","","",436,null],[11,"from_iter","","",410,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",410,null],[11,"extend","","",410,null],[11,"clone","collections::linked_list","",437,null],[11,"clone","","",438,null],[11,"default","","",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",439,null],[11,"iter","","Provides a forward iterator.",439,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",439,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",439,null],[11,"len","","Returns the length of the `LinkedList`.",439,null],[11,"clear","","Removes all elements from the `LinkedList`.",439,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",439,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",439,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",439,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",439,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",439,null],[11,"push_front","","Adds an element first in the list.",439,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",439,null],[11,"push_back","","Appends an element to the back of a list",439,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",439,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",439,null],[11,"front_place","","Returns a place for insertion at the front of the list.",439,null],[11,"back_place","","Returns a place for insertion at the back of the list.",439,null],[11,"drop","","",439,null],[11,"next","","",437,null],[11,"size_hint","","",437,null],[11,"next_back","","",437,null],[11,"next","","",440,null],[11,"size_hint","","",440,null],[11,"next_back","","",440,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",440,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",440,null],[11,"next","","",438,null],[11,"size_hint","","",438,null],[11,"next_back","","",438,null],[11,"from_iter","","",439,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",439,null],[11,"extend","","",439,null],[11,"extend","","",439,null],[11,"eq","","",439,null],[11,"ne","","",439,null],[11,"partial_cmp","","",439,null],[11,"cmp","","",439,null],[11,"clone","","",439,null],[11,"fmt","","",439,null],[11,"hash","","",439,null],[11,"make_place","","",441,null],[11,"pointer","","",441,null],[11,"finalize","","",441,null],[11,"make_place","","",442,null],[11,"pointer","","",442,null],[11,"finalize","","",442,null],[11,"start","core::ops","",443,null],[11,"end","","",444,null],[11,"start","","",445,null],[11,"end","","",445,null],[11,"borrow","collections::vec","",241,null],[11,"borrow_mut","","",241,null],[11,"clone","collections::str","",446,null],[11,"next","","",446,null],[11,"size_hint","","",446,null],[11,"borrow","collections::string","",447,null],[11,"fmt","core::str::pattern","",448,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"clone","","",448,null],[11,"fmt","","",449,null],[11,"clone","","",449,null],[11,"haystack","","",449,null],[11,"next","","",449,null],[11,"next_match","","",449,null],[11,"next_reject","","",449,null],[11,"next_back","","",449,null],[11,"next_match_back","","",449,null],[11,"next_reject_back","","",449,null],[11,"fmt","","",450,null],[11,"clone","","",450,null],[11,"haystack","","",450,null],[11,"next","","",450,null],[11,"next_match","","",450,null],[11,"next_reject","","",450,null],[11,"next_back","","",450,null],[11,"next_match_back","","",450,null],[11,"next_reject_back","","",450,null],[11,"clone","","",451,null],[11,"fmt","","",451,null],[11,"haystack","","",451,null],[11,"next","","",451,null],[11,"next_match","","",451,null],[11,"next_reject","","",451,null],[11,"next_back","","",451,null],[11,"next_match_back","","",451,null],[11,"next_reject_back","","",451,null],[11,"fmt","","",452,null],[11,"clone","","",452,null],[11,"haystack","","",452,null],[11,"next","","",452,null],[11,"next_match","","",452,null],[11,"next_back","","",452,null],[11,"next_match_back","","",452,null],[11,"cmp","collections::string","",447,null],[11,"partial_cmp","","",447,null],[11,"lt","","",447,null],[11,"le","","",447,null],[11,"gt","","",447,null],[11,"ge","","",447,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"new","","Creates a new empty `String`.",447,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",447,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",447,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",447,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",447,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",447,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",447,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",447,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",447,null],[11,"as_str","","Extracts a string slice containing the entire string.",447,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",447,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",447,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",447,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",447,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",447,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",447,null],[11,"push","","Appends the given `char` to the end of this `String`.",447,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",447,null],[11,"truncate","","Shortens this `String` to the specified length.",447,null],[11,"pop","","Removes the last character from the string buffer and returns it.",447,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",447,null],[11,"insert","","Inserts a character into this `String` at a byte position.",447,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",447,null],[11,"len","","Returns the length of this `String`, in bytes.",447,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",447,null],[11,"clear","","Truncates this `String`, removing all contents.",447,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",447,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",447,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",453,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",453,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"clone","","",447,null],[11,"clone_from","","",447,null],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::string","",447,null],[11,"ne","","",447,null],[11,"default","","",447,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",447,null],[11,"fmt","","",447,null],[11,"hash","","",447,null],[11,"add","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"deref","","",447,null],[11,"deref_mut","","",447,null],[11,"from_str","","",447,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",455,null],[11,"fmt","","",455,null],[11,"fmt","","",455,null],[11,"eq","","",455,null],[11,"as_ref","","",447,null],[11,"as_ref","","",447,null],[11,"from","","",447,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",435,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",435,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",447,null],[11,"write_str","","",447,null],[11,"write_char","","",447,null],[11,"drop","","",456,null],[11,"next","","",456,null],[11,"size_hint","","",456,null],[11,"next_back","","",456,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",241,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",241,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",241,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",241,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",241,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",241,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",241,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",241,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",241,null],[11,"as_slice","","Extracts a slice containing the entire vector.",241,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",241,null],[11,"set_len","","Sets the length of a vector.",241,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",241,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",241,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",241,null],[11,"retain","","Retains only the elements specified by the predicate.",241,null],[11,"push","","Appends an element to the back of a collection.",241,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",241,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",241,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",241,null],[11,"clear","","Clears the vector, removing all values.",241,null],[11,"len","","Returns the number of elements in the vector.",241,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",241,null],[11,"split_off","","Splits the collection into two at the given index.",241,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",241,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",241,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",241,null],[11,"clone","","",241,null],[11,"clone_from","","",241,null],[11,"hash","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"deref","","",241,null],[11,"deref_mut","","",241,null],[11,"from_iter","","",241,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",241,null],[11,"extend","","",241,null],[11,"extend","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::vec","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"partial_cmp","","",241,null],[11,"cmp","","",241,null],[11,"drop","","",241,null],[11,"default","","",241,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"from","","",241,null],[11,"from","","",241,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",435,null],[11,"from","","",435,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",435,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",457,null],[11,"size_hint","","",457,null],[11,"count","","",457,null],[11,"next_back","","",457,null],[11,"clone","","",457,null],[11,"drop","","",457,null],[11,"next","","",458,null],[11,"size_hint","","",458,null],[11,"next_back","","",458,null],[11,"drop","","",458,null],[11,"clone","collections::vec_deque","",459,null],[11,"drop","","",459,null],[11,"default","","",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",459,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",459,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",459,null],[11,"swap","","Swaps elements at indices `i` and `j`.",459,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",459,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",459,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",459,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",459,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",459,null],[11,"iter","","Returns a front-to-back iterator.",459,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",459,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"len","","Returns the number of elements in the `VecDeque`.",459,null],[11,"is_empty","","Returns true if the buffer contains no elements",459,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",459,null],[11,"clear","","Clears the buffer, removing all values.",459,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",459,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",459,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",459,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",459,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",459,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",459,null],[11,"push_front","","Inserts an element first in the sequence.",459,null],[11,"push_back","","Appends an element to the back of a buffer",459,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",459,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",459,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",459,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",459,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",459,null],[11,"split_off","","Splits the collection into two at the given index.",459,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",459,null],[11,"retain","","Retains only the elements specified by the predicate.",459,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",459,null],[11,"clone","","",460,null],[11,"next","","",460,null],[11,"size_hint","","",460,null],[11,"next_back","","",460,null],[11,"next","","",461,null],[11,"size_hint","","",461,null],[11,"next_back","","",461,null],[11,"clone","","",462,null],[11,"next","","",462,null],[11,"size_hint","","",462,null],[11,"next_back","","",462,null],[11,"drop","","",463,null],[11,"next","","",463,null],[11,"size_hint","","",463,null],[11,"next_back","","",463,null],[11,"eq","","",459,null],[11,"partial_cmp","","",459,null],[11,"cmp","","",459,null],[11,"hash","","",459,null],[11,"index","","",459,null],[11,"index_mut","","",459,null],[11,"from_iter","","",459,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",459,null],[11,"extend","","",459,null],[11,"extend","","",459,null],[11,"fmt","","",459,null],[11,"from","","",459,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",464,null],[11,"ne","","",464,null],[11,"hash","","",464,null],[11,"fmt","","",464,null],[11,"clone","","",464,null],[11,"clone","alloc::boxed","",465,null],[11,"pointer","","",466,null],[11,"make_place","","",466,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",466,null],[11,"finalize","","",366,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",465,null],[11,"drop","","",466,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",366,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",366,null],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",366,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",366,null],[11,"clone","","",366,null],[11,"eq","","",366,null],[11,"ne","","",366,null],[11,"partial_cmp","","",366,null],[11,"lt","","",366,null],[11,"le","","",366,null],[11,"ge","","",366,null],[11,"gt","","",366,null],[11,"cmp","","",366,null],[11,"hash","","",366,null],[11,"from","","",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"deref","","",366,null],[11,"deref_mut","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"call_once","","",366,null],[11,"call_once","","",366,null],[11,"clone","","",366,null],[11,"borrow","","",366,null],[11,"borrow_mut","","",366,null],[11,"as_ref","","",366,null],[11,"as_mut","","",366,null],[11,"deref","rustc::ty::sty","",363,null],[11,"deref_mut","","",363,null],[11,"fmt","","",467,null],[11,"hash","","",467,null],[11,"decode","","",467,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",467,null],[11,"encode","","",467,null],[11,"clone","","",467,null],[11,"to_usize","","",467,null],[11,"from_usize","","",467,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","rustc::ty::context","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",119,null],[11,"new","rustc::ty::sty","",406,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",406,null],[11,"is_bound","","",364,null],[11,"needs_infer","","",364,null],[11,"escapes_depth","","",364,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",364,null],[11,"as_opt_param_ty","rustc::ty","",320,null],[11,"is_nil","","",320,null],[11,"is_empty","","",320,null],[11,"is_primitive","","",320,null],[11,"is_ty_var","","",320,null],[11,"is_phantom_data","","",320,null],[11,"is_bool","","",320,null],[11,"is_param","","",320,null],[11,"is_self","","",320,null],[11,"is_slice","","",320,null],[11,"is_structural","","",320,null],[11,"is_simd","","",320,null],[11,"sequence_element_type","","",320,null],[11,"simd_type","","",320,null],[11,"simd_size","","",320,null],[11,"is_region_ptr","","",320,null],[11,"is_unsafe_ptr","","",320,null],[11,"is_unique","","",320,null],[11,"is_scalar","","",320,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",320,null],[11,"is_trait","","",320,null],[11,"is_integral","","",320,null],[11,"is_fresh","","",320,null],[11,"is_uint","","",320,null],[11,"is_char","","",320,null],[11,"is_fp","","",320,null],[11,"is_numeric","","",320,null],[11,"is_signed","","",320,null],[11,"is_machine","","",320,null],[11,"has_concrete_skeleton","","",320,null],[11,"builtin_deref","","",320,null],[11,"builtin_index","","",320,null],[11,"fn_sig","","",320,null],[11,"fn_abi","","Returns the ABI of the given function.",320,null],[11,"fn_args","","",320,null],[11,"fn_ret","","",320,null],[11,"is_fn","","",320,null],[11,"ty_to_def_id","","",320,null],[11,"ty_adt_def","","",320,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",320,null],[11,"clone","","",468,null],[11,"clone","","",469,null],[11,"is_present","","",469,null],[11,"has_drop_flag","","",469,null],[11,"fmt","","",470,null],[11,"eq","","",470,null],[11,"ne","","",470,null],[11,"clone","","",470,null],[11,"id","","",470,null],[11,"fmt","","",391,null],[11,"hash","","",391,null],[11,"eq","","",391,null],[11,"ne","","",391,null],[11,"clone","","",391,null],[11,"with_fresh_ty_vars","","",391,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",471,null],[11,"def","","",471,null],[11,"def_id","","",471,null],[11,"name","","",471,null],[11,"vis","","",471,null],[11,"container","","",471,null],[11,"as_opt_method","","",471,null],[11,"fmt","","",472,null],[11,"clone","","",472,null],[11,"def_id","","",472,null],[11,"eq","","",473,null],[11,"ne","","",473,null],[11,"fmt","","",473,null],[11,"clone","","",473,null],[11,"is_descendant_of","rustc::hir::map","",35,null],[11,"from_hir","rustc::ty","",473,{"inputs":[{"name":"visibility"},{"name":"u32"},{"name":"tyctxt"}],"output":{"name":"visibility"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",473,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",473,null],[11,"fmt","","",474,null],[11,"clone","","",474,null],[11,"new","","",474,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",474,null],[11,"eq","","",474,null],[11,"hash","","",474,null],[11,"fmt","","",475,null],[11,"clone","","",475,null],[11,"fmt","","",476,null],[11,"clone","","",476,null],[11,"encode","","",477,null],[11,"decode","","",477,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",477,null],[11,"ne","","",477,null],[11,"clone","","",477,null],[11,"encode","","",478,null],[11,"decode","","",478,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",478,null],[11,"clone","","",478,null],[11,"fmt","","",479,null],[11,"clone","","",479,null],[11,"fmt","","",480,null],[11,"hash","","",480,null],[11,"eq","","",480,null],[11,"ne","","",480,null],[11,"clone","","",480,null],[11,"expr","","",480,{"inputs":[{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",480,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",481,null],[11,"eq","","",481,null],[11,"ne","","",481,null],[11,"clone","","",481,null],[11,"fmt","","",482,null],[11,"clone","","",482,null],[11,"hash","","",403,null],[11,"cmp","","",403,null],[11,"partial_cmp","","",403,null],[11,"lt","","",403,null],[11,"le","","",403,null],[11,"gt","","",403,null],[11,"ge","","",403,null],[11,"clone","","",403,null],[11,"eq","","",403,null],[11,"ne","","",403,null],[18,"HAS_PARAMS","rustc_trans::session","",403,null],[18,"HAS_SELF","","",403,null],[18,"HAS_TY_INFER","","",403,null],[18,"HAS_RE_INFER","","",403,null],[18,"HAS_RE_EARLY_BOUND","","",403,null],[18,"HAS_FREE_REGIONS","","",403,null],[18,"HAS_TY_ERR","","",403,null],[18,"HAS_PROJECTION","","",403,null],[18,"HAS_TY_CLOSURE","","",403,null],[18,"HAS_LOCAL_NAMES","","",403,null],[18,"KEEP_IN_LOCAL_TCX","","",403,null],[18,"NEEDS_SUBST","","",403,null],[18,"NOMINAL_FLAGS","","",403,null],[18,"SIZEDNESS_CACHED","","",403,null],[18,"IS_SIZED","","",403,null],[18,"MOVENESS_CACHED","","",403,null],[18,"MOVES_BY_DEFAULT","","",403,null],[11,"empty","rustc::ty","Returns an empty set of flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",403,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",403,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",403,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",403,null],[11,"is_all","","Returns `true` if all flags are currently set.",403,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",403,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",403,null],[11,"insert","","Inserts the specified flags in-place.",403,null],[11,"remove","","Removes the specified flags in-place.",403,null],[11,"toggle","","Toggles the specified flags in-place.",403,null],[11,"bitor","","Returns the union of the two sets of flags.",403,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",403,null],[11,"bitand","","Returns the intersection between the two sets of flags.",403,null],[11,"sub","","Returns the set difference of the two sets of flags.",403,null],[11,"not","","Returns the complement of this set of flags.",403,null],[11,"eq","","",320,null],[11,"hash","","",320,null],[11,"hash","","",483,null],[11,"eq","","",483,null],[11,"ne","","",483,null],[11,"clone","","",483,null],[11,"decode","","",484,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",484,null],[11,"fmt","","",484,null],[11,"hash","","",484,null],[11,"eq","","",484,null],[11,"clone","","",484,null],[11,"fmt","","",485,null],[11,"clone","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[11,"clone","","",486,null],[11,"eq","","",486,null],[11,"ne","","",486,null],[11,"clone","","",398,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"clone","","",147,null],[11,"clone","","",393,null],[11,"clone","","",392,null],[11,"clone","","",394,null],[11,"to_early_bound_region","","",394,null],[11,"to_bound_region","","",394,null],[11,"fmt","","",395,null],[11,"clone","","",395,null],[11,"empty","","",395,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",395,null],[11,"has_type_params","","",395,null],[11,"has_region_params","","",395,null],[11,"clone","","",396,null],[11,"empty","","",396,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",396,null],[11,"instantiate_supertrait","","",396,null],[11,"hash","","",386,null],[11,"eq","","",386,null],[11,"ne","","",386,null],[11,"clone","","",386,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",386,null],[11,"hash","","",383,null],[11,"eq","","",383,null],[11,"ne","","",383,null],[11,"clone","","",383,null],[11,"def_id","","",383,null],[11,"input_types","","",383,null],[11,"self_ty","","",383,null],[11,"def_id","rustc::ty::sty","",121,null],[11,"dep_node","","",121,null],[11,"fmt","rustc::ty","",384,null],[11,"hash","","",384,null],[11,"eq","","",384,null],[11,"ne","","",384,null],[11,"clone","","",384,null],[11,"fmt","","",385,null],[11,"hash","","",385,null],[11,"eq","","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"hash","","",361,null],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"clone","","",361,null],[11,"item_name","rustc::ty::sty","",121,null],[11,"sort_key","","",121,null],[11,"to_poly_trait_ref","","",120,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_predicate","","",120,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"walk_tys","rustc::ty","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",386,null],[11,"to_opt_poly_trait_ref","","",386,null],[11,"clone","","",397,null],[11,"empty","","",397,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",397,null],[11,"new","rustc::ty::sty","",120,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",120,null],[11,"input_types","","",120,null],[11,"clone","rustc::ty","",378,null],[11,"with_caller_bounds","","",378,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",378,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",399,null],[11,"clone","","",399,null],[11,"hash","","",487,null],[11,"cmp","","",487,null],[11,"partial_cmp","","",487,null],[11,"lt","","",487,null],[11,"le","","",487,null],[11,"gt","","",487,null],[11,"ge","","",487,null],[11,"clone","","",487,null],[11,"eq","","",487,null],[11,"ne","","",487,null],[18,"NO_ADT_FLAGS","rustc_trans::session","",487,null],[18,"IS_ENUM","","",487,null],[18,"IS_DTORCK","","",487,null],[18,"IS_DTORCK_VALID","","",487,null],[18,"IS_PHANTOM_DATA","","",487,null],[18,"IS_SIMD","","",487,null],[18,"IS_FUNDAMENTAL","","",487,null],[18,"IS_NO_DROP_FLAG","","",487,null],[11,"empty","rustc::ty","Returns an empty set of flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",487,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",487,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",487,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",487,null],[11,"is_all","","Returns `true` if all flags are currently set.",487,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",487,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",487,null],[11,"insert","","Inserts the specified flags in-place.",487,null],[11,"remove","","Removes the specified flags in-place.",487,null],[11,"toggle","","Toggles the specified flags in-place.",487,null],[11,"bitor","","Returns the union of the two sets of flags.",487,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",487,null],[11,"bitand","","Returns the intersection between the two sets of flags.",487,null],[11,"sub","","Returns the set difference of the two sets of flags.",487,null],[11,"not","","Returns the complement of this set of flags.",487,null],[11,"eq","","",488,null],[11,"hash","","",488,null],[11,"eq","","",489,null],[11,"fmt","","",489,null],[11,"clone","","",489,null],[11,"decode","","",490,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",490,null],[11,"fmt","","",490,null],[11,"hash","","",490,null],[11,"eq","","",490,null],[11,"clone","","",490,null],[11,"from_variant_data","","",490,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantkind"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",488,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",488,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",488,null],[11,"is_simd","","",488,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",488,null],[11,"has_dtor","","Returns whether this type has a destructor.",488,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",488,null],[11,"type_scheme","","",488,null],[11,"predicates","","",488,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",488,null],[11,"is_empty","","",488,null],[11,"is_univariant","","",488,null],[11,"is_payloadfree","","",488,null],[11,"variant_with_id","","",488,null],[11,"variant_index_with_id","","",488,null],[11,"variant_of_def","","",488,null],[11,"destructor","","",488,null],[11,"set_destructor","","",488,null],[11,"dtor_kind","","",488,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",488,null],[11,"kind","","",491,null],[11,"is_tuple_struct","","",491,null],[11,"find_field_named","","",491,null],[11,"index_of_field_named","","",491,null],[11,"field_named","","",491,null],[11,"new","","",492,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"fielddefdata"}}],[11,"ty","","",492,null],[11,"unsubst_ty","","",492,null],[11,"fulfill_ty","","",492,null],[11,"clone","","",387,null],[11,"decode","","",493,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",493,null],[11,"fmt","","",493,null],[11,"hash","","",493,null],[11,"eq","","",493,null],[11,"cmp","","",493,null],[11,"partial_cmp","","",493,null],[11,"clone","","",493,null],[11,"trait_did","","",493,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",493,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",320,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",320,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",320,null],[11,"is_noop","","",387,null],[11,"eq","","",494,null],[11,"fmt","","",494,null],[11,"clone","","",494,null],[11,"from_mutbl","","",494,{"inputs":[{"name":"mutability"}],"output":{"name":"lvaluepreference"}}],[11,"from_mutbl","","",484,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",484,null],[11,"to_user_str","","",484,null],[11,"node_id_to_type","rustc::ty::context","",119,null],[11,"node_id_to_type_opt","","",119,null],[11,"node_id_item_substs","","",119,null],[11,"pat_ty","","",119,null],[11,"pat_ty_opt","","",119,null],[11,"expr_ty","","",119,null],[11,"expr_ty_opt","","",119,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",119,null],[11,"expr_ty_adjusted_opt","","",119,null],[11,"expr_span","","",119,null],[11,"local_var_name_str","","",119,null],[11,"resolve_expr","","",119,null],[11,"expr_is_lval","","",119,null],[11,"provided_trait_methods","","",119,null],[11,"associated_consts","","",119,null],[11,"trait_impl_polarity","","",119,null],[11,"custom_coerce_unsized_kind","","",119,null],[11,"impl_or_trait_item","","",119,null],[11,"trait_item_def_ids","","",119,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",119,null],[11,"is_impl","","Returns whether this DefId refers to an impl",119,null],[11,"trait_ref_to_def_id","","",119,null],[11,"def_key","","",119,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",119,null],[11,"item_name","","",119,null],[11,"register_item_type","","",119,null],[11,"lookup_item_type","","",119,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",119,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",119,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",119,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",119,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",119,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",119,null],[11,"get_attrs","","Get the attributes of a definition.",119,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",119,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",119,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",119,null],[11,"item_variances","","",119,null],[11,"trait_has_default_impl","","",119,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",119,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",119,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",119,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",119,null],[11,"closure_kind","","",119,null],[11,"closure_type","","",119,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",119,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",119,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",119,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",119,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",119,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",119,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",119,null],[11,"is_method_call","","",119,null],[11,"is_overloaded_autoderef","","",119,null],[11,"upvar_capture","","",119,null],[11,"visit_all_items_in_krate","","",119,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",119,null],[11,"fmt","rustc::ty","",495,null],[11,"eq","","",495,null],[11,"ne","","",495,null],[11,"clone","","",495,null],[11,"with_freevars","rustc::ty::context","",119,null],[11,"fmt","rustc::util::common","",496,null],[11,"clone","","",496,null],[11,"drop","","",497,null],[11,"memoize","core::cell","",6,null],[11,"eq","rustc::util::ppaux","",498,null],[11,"clone","","",498,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",392,null],[11,"fmt","","",394,null],[11,"fmt","","",320,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"fmt","rustc::ty::subst","",367,null],[11,"fmt","rustc::ty","",387,null],[11,"fmt","rustc::ty::sty","",120,null],[11,"fmt","rustc::ty::trait_def","",371,null],[11,"fmt","rustc::ty","",488,null],[11,"fmt","rustc::ty::adjustment","",316,null],[11,"fmt","","",317,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",386,null],[11,"fmt","rustc::ty::sty","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",364,null],[11,"fmt","","",388,null],[11,"fmt","rustc::ty","",398,null],[11,"fmt","","",378,null],[11,"fmt","","",393,null],[11,"fmt","rustc::ty::sty","",364,null],[11,"fmt","","",400,null],[11,"fmt","rustc::ty","",478,null],[11,"fmt","","",477,null],[11,"fmt","","",396,null],[11,"fmt","","",397,null],[11,"fmt","","",471,null],[11,"fmt","rustc::ty::sty","",161,null],[11,"fmt","","",362,null],[11,"fmt","","",363,null],[11,"fmt","","",150,null],[11,"fmt","","",144,null],[11,"fmt","","",148,null],[11,"fmt","","",146,null],[11,"fmt","","",161,null],[11,"fmt","","",409,null],[11,"fmt","rustc::ty","",147,null],[11,"fmt","rustc::ty::sty","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",120,null],[11,"fmt","","",402,null],[11,"fmt","rustc::ty","",320,null],[11,"fmt","","",483,null],[11,"fmt","","",486,null],[11,"fmt","rustc::ty::sty","",409,null],[11,"fmt","rustc::ty","",495,null],[11,"fmt","rustc::ty::sty","",405,null],[11,"fmt","","",405,null],[11,"fmt","rustc::ty","",385,null],[11,"fmt","","",384,null],[11,"fmt","","",383,null],[11,"fmt","","",383,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"fmt","rustc::ty","",493,null],[11,"fmt","","",386,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",499,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",499,null],[11,"result","","",499,null],[11,"reset","","",499,null],[11,"output_bits","","",499,null],[3,"Config","rustc_trans::session::config","",null,null],[12,"target","","",500,null],[12,"int_type","","",500,null],[12,"uint_type","","",500,null],[4,"OptLevel","","",null,null],[13,"No","","",256,null],[13,"Less","","",256,null],[13,"Default","","",256,null],[13,"Aggressive","","",256,null],[13,"Size","","",256,null],[13,"SizeMin","","",256,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",257,null],[13,"LimitedDebugInfo","","",257,null],[13,"FullDebugInfo","","",257,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",258,null],[13,"Assembly","","",258,null],[13,"LlvmAssembly","","",258,null],[13,"Object","","",258,null],[13,"Exe","","",258,null],[13,"DepInfo","","",258,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",259,null],[13,"Json","","",259,null],[3,"Options","","",null,null],[12,"crate_types","","",260,null],[12,"gc","","",260,null],[12,"optimize","","",260,null],[12,"debug_assertions","","",260,null],[12,"debuginfo","","",260,null],[12,"lint_opts","","",260,null],[12,"lint_cap","","",260,null],[12,"describe_lints","","",260,null],[12,"output_types","","",260,null],[12,"search_paths","","",260,null],[12,"libs","","",260,null],[12,"maybe_sysroot","","",260,null],[12,"target_triple","","",260,null],[12,"cfg","","",260,null],[12,"test","","",260,null],[12,"parse_only","","",260,null],[12,"no_trans","","",260,null],[12,"error_format","","",260,null],[12,"treat_err_as_bug","","",260,null],[12,"continue_parse_after_error","","",260,null],[12,"mir_opt_level","","",260,null],[12,"incremental","","if Some, enable incremental compilation, using the given\ndirectory to store intermediate results",260,null],[12,"no_analysis","","",260,null],[12,"debugging_opts","","",260,null],[12,"prints","","",260,null],[12,"cg","","",260,null],[12,"externs","","",260,null],[12,"crate_name","","",260,null],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = &quot;name&quot;`. Default to &quot;std&quot;. Used by\nout-of-tree drivers.",260,null],[12,"unstable_features","","Indicates how the compiler should treat unstable features",260,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",261,null],[13,"Sysroot","","",261,null],[13,"CrateName","","",261,null],[13,"Cfg","","",261,null],[13,"TargetList","","",261,null],[4,"Input","","",null,null],[13,"File","","Load source from file",262,null],[13,"Str","","",262,null],[12,"name","rustc_trans::session::config::Input","",262,null],[12,"input","","",262,null],[3,"OutputFilenames","rustc_trans::session::config","",null,null],[12,"out_directory","","",263,null],[12,"out_filestem","","",263,null],[12,"single_output_file","","",263,null],[12,"extra","","",263,null],[12,"outputs","","",263,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",264,null],[13,"EntryStart","","",264,null],[13,"EntryNone","","",264,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",265,null],[13,"CrateTypeDylib","","",265,null],[13,"CrateTypeRlib","","",265,null],[13,"CrateTypeStaticlib","","",265,null],[4,"Passes","","",null,null],[13,"SomePasses","","",266,null],[13,"AllPasses","","",266,null],[4,"PanicStrategy","","",null,null],[13,"Unwind","","",267,null],[13,"Abort","","",267,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",268,null],[12,"linker","","",268,null],[12,"link_args","","",268,null],[12,"link_dead_code","","",268,null],[12,"lto","","",268,null],[12,"target_cpu","","",268,null],[12,"target_feature","","",268,null],[12,"passes","","",268,null],[12,"llvm_args","","",268,null],[12,"save_temps","","",268,null],[12,"rpath","","",268,null],[12,"no_prepopulate_passes","","",268,null],[12,"no_vectorize_loops","","",268,null],[12,"no_vectorize_slp","","",268,null],[12,"soft_float","","",268,null],[12,"prefer_dynamic","","",268,null],[12,"no_integrated_as","","",268,null],[12,"no_redzone","","",268,null],[12,"relocation_model","","",268,null],[12,"code_model","","",268,null],[12,"metadata","","",268,null],[12,"extra_filename","","",268,null],[12,"codegen_units","","",268,null],[12,"remark","","",268,null],[12,"no_stack_check","","",268,null],[12,"debuginfo","","",268,null],[12,"opt_level","","",268,null],[12,"debug_assertions","","",268,null],[12,"inline_threshold","","",268,null],[12,"panic","","",268,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",269,null],[12,"time_passes","","",269,null],[12,"count_llvm_insns","","",269,null],[12,"time_llvm_passes","","",269,null],[12,"input_stats","","",269,null],[12,"trans_stats","","",269,null],[12,"asm_comments","","",269,null],[12,"no_verify","","",269,null],[12,"borrowck_stats","","",269,null],[12,"no_landing_pads","","",269,null],[12,"debug_llvm","","",269,null],[12,"count_type_sizes","","",269,null],[12,"meta_stats","","",269,null],[12,"print_link_args","","",269,null],[12,"gc","","",269,null],[12,"print_llvm_passes","","",269,null],[12,"ast_json","","",269,null],[12,"ast_json_noexpand","","",269,null],[12,"ls","","",269,null],[12,"save_analysis","","",269,null],[12,"save_analysis_csv","","",269,null],[12,"print_move_fragments","","",269,null],[12,"flowgraph_print_loans","","",269,null],[12,"flowgraph_print_moves","","",269,null],[12,"flowgraph_print_assigns","","",269,null],[12,"flowgraph_print_all","","",269,null],[12,"print_region_graph","","",269,null],[12,"parse_only","","",269,null],[12,"no_trans","","",269,null],[12,"treat_err_as_bug","","",269,null],[12,"continue_parse_after_error","","",269,null],[12,"incremental","","",269,null],[12,"dump_dep_graph","","",269,null],[12,"query_dep_graph","","",269,null],[12,"no_analysis","","",269,null],[12,"extra_plugins","","",269,null],[12,"unstable_options","","",269,null],[12,"print_enum_sizes","","",269,null],[12,"force_overflow_checks","","",269,null],[12,"force_dropflag_checks","","",269,null],[12,"trace_macros","","",269,null],[12,"enable_nonzeroing_move_hints","","",269,null],[12,"keep_mtwt_tables","","",269,null],[12,"keep_ast","","",269,null],[12,"show_span","","",269,null],[12,"print_trans_items","","",269,null],[12,"mir_opt_level","","",269,null],[12,"dump_mir","","",269,null],[12,"orbit","","",269,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"append_configuration","","",null,null],[5,"build_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",270,null],[13,"UnstableButNotReally","","",270,null],[13,"Unstable","","",270,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",271,null],[12,"stability","","",271,null],[5,"rustc_short_optgroups","","Returns the &quot;short&quot; subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"build_session_options","","",null,{"inputs":[{"name":"matches"}],"output":{"name":"options"}}],[5,"get_unstable_features_setting","","",null,{"inputs":[],"output":{"name":"unstablefeatures"}}],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_trans::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_trans::session","",null,null],[4,"FileMatch","rustc_trans::session::filesearch","",null,null],[13,"FileMatches","","",272,null],[13,"FileDoesntMatch","","",272,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",273,null],[12,"search_paths","","",273,null],[12,"triple","","",273,null],[12,"kind","","",273,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"rustlibdir","","",null,{"inputs":[],"output":{"name":"string"}}],[0,"search_paths","rustc_trans::session","",null,null],[3,"SearchPaths","rustc_trans::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",275,null],[13,"Crate","","",275,null],[13,"Dependency","","",275,null],[13,"Framework","","",275,null],[13,"ExternFlag","","",275,null],[13,"All","","",275,null],[3,"Session","rustc_trans::session","",null,null],[12,"target","","",277,null],[12,"host","","",277,null],[12,"opts","","",277,null],[12,"cstore","","",277,null],[12,"parse_sess","","",277,null],[12,"entry_fn","","",277,null],[12,"entry_type","","",277,null],[12,"plugin_registrar_fn","","",277,null],[12,"default_sysroot","","",277,null],[12,"local_crate_source_file","","",277,null],[12,"working_dir","","",277,null],[12,"lint_store","","",277,null],[12,"lints","","",277,null],[12,"plugin_llvm_passes","","",277,null],[12,"mir_passes","","",277,null],[12,"plugin_attributes","","",277,null],[12,"crate_types","","",277,null],[12,"dependency_formats","","",277,null],[12,"crate_disambiguator","","",277,null],[12,"features","","",277,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",277,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime\ndependency if it didn&#39;t already find one, and this tracks what was\ninjected.",277,null],[12,"injected_panic_runtime","","",277,null],[12,"available_macros","","Names of all bang-style macros and syntax extensions\navailable in this crate",277,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of\nthe localized span for the macro body) to the\nmacro name and defintion span in the source crate.",277,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"early_error","","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[0,"middle","rustc_trans","",null,null],[0,"astconv_util","rustc_trans::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_trans::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor.",null,null],[10,"consume","","",501,null],[10,"matched_pat","","",501,null],[10,"consume_pat","","",501,null],[10,"borrow","","",501,null],[10,"decl_without_init","","",501,null],[10,"mutate","","",501,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",174,null],[13,"AddrOf","","",174,null],[13,"AutoRef","","",174,null],[13,"AutoUnsafe","","",174,null],[13,"RefBinding","","",174,null],[13,"OverloadedOperator","","",174,null],[13,"ClosureInvocation","","",174,null],[13,"ForLoop","","",174,null],[13,"MatchDiscriminant","","",174,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",175,null],[13,"Move","","",175,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",176,null],[13,"PatBindingMove","","",176,null],[13,"CaptureMove","","",176,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",177,null],[13,"BorrowingMatch","","",177,null],[13,"CopyingMatch","","",177,null],[13,"MovingMatch","","",177,null],[4,"MutateMode","","",null,null],[13,"Init","","",178,null],[13,"JustWrite","","",178,null],[13,"WriteAndRead","","",178,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_trans::middle","",null,null],[4,"ConstVal","rustc_trans::middle::const_val","",null,null],[13,"Float","","",180,null],[13,"Integral","","",180,null],[13,"Str","","",180,null],[13,"ByteStr","","",180,null],[13,"Bool","","",180,null],[13,"Struct","","",180,null],[13,"Tuple","","",180,null],[13,"Function","","",180,null],[13,"Array","","",180,null],[13,"Repeat","","",180,null],[13,"Char","","",180,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never\nhandle this case. Its sole purpose is to allow more errors to be reported instead of\ncausing a fatal error.",180,null],[0,"const_qualif","rustc_trans::middle","",null,null],[3,"ConstQualif","rustc_trans::middle::const_qualif","",null,null],[0,"cstore","rustc_trans::middle","",null,null],[3,"LinkMeta","rustc_trans::middle::cstore","",null,null],[12,"crate_name","","",182,null],[12,"crate_hash","","",182,null],[3,"CrateSource","","",null,null],[12,"dylib","","",183,null],[12,"rlib","","",183,null],[12,"cnum","","",183,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",184,null],[13,"RequireStatic","","",184,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",185,null],[13,"NativeFramework","","",185,null],[13,"NativeUnknown","","",185,null],[4,"DefLike","","",null,null],[13,"DlDef","","",186,null],[13,"DlImpl","","",186,null],[13,"DlField","","",186,null],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans.",null,null],[13,"Item","","",187,null],[13,"TraitItem","","",187,null],[13,"ImplItem","","",187,null],[13,"Foreign","","",187,null],[4,"InlinedItemRef","","A borrowed version of `hir::InlinedItem`.",null,null],[13,"Item","","",188,null],[13,"TraitItem","","",188,null],[13,"ImplItem","","",188,null],[13,"Foreign","","",188,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId.",null,null],[3,"ChildItem","","",null,null],[12,"def","","",189,null],[12,"name","","",189,null],[12,"vis","","",189,null],[4,"FoundAst","","",null,null],[13,"Found","","",502,null],[13,"FoundParent","","",502,null],[13,"NotFound","","",502,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused\nthis crate to be loaded; note that there could be multiple\nsuch ids",190,null],[12,"span","","span of the extern crate that caused this to be loaded",190,null],[12,"direct","","If true, then this crate is the crate named by the extern\ncrate referenced above. If false, then this crate is a dep\nof the crate.",190,null],[12,"path_len","","Number of links to reach the extern crate `def_id`\ndeclaration; used to select the extern crate with the shortest\npath",190,null],[8,"CrateStore","","A store of Rust crates, through with their metadata\ncan be accessed.",null,null],[10,"stability","","",503,null],[10,"deprecation","","",503,null],[10,"visibility","","",503,null],[10,"closure_kind","","",503,null],[10,"closure_ty","","",503,null],[10,"item_variances","","",503,null],[10,"repr_attrs","","",503,null],[10,"item_type","","",503,null],[10,"visible_parent_map","","",503,null],[10,"item_name","","",503,null],[10,"item_predicates","","",503,null],[10,"item_super_predicates","","",503,null],[10,"item_attrs","","",503,null],[10,"item_symbol","","",503,null],[10,"trait_def","","",503,null],[10,"adt_def","","",503,null],[10,"method_arg_names","","",503,null],[10,"inherent_implementations_for_type","","",503,null],[10,"implementations_of_trait","","",503,null],[10,"provided_trait_methods","","",503,null],[10,"trait_item_def_ids","","",503,null],[10,"impl_items","","",503,null],[10,"impl_trait_ref","","",503,null],[10,"impl_polarity","","",503,null],[10,"custom_coerce_unsized_kind","","",503,null],[10,"associated_consts","","",503,null],[10,"impl_parent","","",503,null],[10,"trait_of_item","","",503,null],[10,"impl_or_trait_item","","",503,null],[10,"is_const_fn","","",503,null],[10,"is_defaulted_trait","","",503,null],[10,"is_impl","","",503,null],[10,"is_default_impl","","",503,null],[10,"is_extern_item","","",503,null],[10,"is_static_method","","",503,null],[10,"is_statically_included_foreign_item","","",503,null],[10,"is_typedef","","",503,null],[10,"dylib_dependency_formats","","",503,null],[10,"lang_items","","",503,null],[10,"missing_lang_items","","",503,null],[10,"is_staged_api","","",503,null],[10,"is_explicitly_linked","","",503,null],[10,"is_allocator","","",503,null],[10,"is_panic_runtime","","",503,null],[10,"panic_strategy","","",503,null],[10,"extern_crate","","",503,null],[10,"crate_attrs","","",503,null],[10,"crate_name","","The name of the crate as it is referred to in source code of the current\ncrate.",503,null],[10,"original_crate_name","","The name of the crate as it is stored in the crate&#39;s metadata.",503,null],[10,"crate_hash","","",503,null],[10,"crate_disambiguator","","",503,null],[10,"crate_struct_field_attrs","","",503,null],[10,"plugin_registrar_fn","","",503,null],[10,"native_libraries","","",503,null],[10,"reachable_ids","","",503,null],[10,"def_key","","",503,null],[10,"relative_def_path","","",503,null],[10,"variant_kind","","",503,null],[10,"struct_ctor_def_id","","",503,null],[10,"tuple_struct_definition_if_ctor","","",503,null],[10,"struct_field_names","","",503,null],[10,"item_children","","",503,null],[10,"crate_top_level_items","","",503,null],[10,"maybe_get_item_ast","","",503,null],[10,"maybe_get_item_mir","","",503,null],[10,"is_item_mir_available","","",503,null],[10,"crates","","",503,null],[10,"used_libraries","","",503,null],[10,"used_link_args","","",503,null],[10,"metadata_filename","","",503,null],[10,"metadata_section_name","","",503,null],[10,"encode_type","","",503,null],[10,"used_crates","","",503,null],[10,"used_crate_source","","",503,null],[10,"extern_mod_stmt_cnum","","",503,null],[10,"encode_metadata","","",503,null],[10,"metadata_encoding_version","","",503,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates,\nfor test purposes.",null,null],[0,"tls","","Metadata encoding and decoding can make use of thread-local encoding and\ndecoding contexts. These allow implementers of serialize::Encodable and\nDecodable to access information and datastructures that would otherwise not\nbe available to them. For example, we can automatically translate def-id and\nspan information during decoding because the decoding context knows which\ncrate the data is decoded from. Or it allows to make ty::Ty decodable\nbecause the context has access to the TyCtxt that is needed for creating\nty::Ty instances.",null,null],[8,"EncodingContext","rustc_trans::middle::cstore::tls","",null,null],[10,"tcx","","",504,null],[10,"encode_ty","","",504,null],[10,"encode_substs","","",504,null],[5,"enter_encoding_context","","Execute f after pushing the given EncodingContext onto the TLS stack.",null,{"inputs":[{"name":"encodingcontext"},{"name":"encoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder. This function will panic if the encoder passed in and the\ncontext encoder are not the same.",null,{"inputs":[{"name":"e"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[8,"DecodingContext","","",null,null],[10,"tcx","","",505,null],[10,"decode_ty","","",505,null],[10,"decode_substs","","",505,null],[10,"translate_def_id","","",505,null],[5,"enter_decoding_context","","Execute f after pushing the given DecodingContext onto the TLS stack.",null,{"inputs":[{"name":"decodingcontext"},{"name":"decoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder. This function will panic if the decoder passed in and the\ncontext decoder are not the same.",null,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"dataflow","rustc_trans::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_trans::middle::dataflow","",null,null],[13,"Entry","","",192,null],[13,"Exit","","",192,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&amp;`",506,null],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",507,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill\ntakes effect only when control flows directly through the node in\nquestion, or if the kill&#39;s effect is associated with any\ncontrol-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control\nflow goes over the node. A kill associated with the end of the\nscope of a variable declaration `let x;` is an example of a\n`ScopeEnd` kill.",194,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control\nflow goes through the node to completion. A kill associated\nwith an assignment statement `x = expr;` is an example of an\n`Execution` kill.",194,null],[0,"dead","rustc_trans::middle","",null,null],[5,"check_crate","rustc_trans::middle::dead","",null,null],[0,"dependency_format","rustc_trans::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_trans::middle::dependency_format","",null,null],[6,"Dependencies","","",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",195,null],[13,"IncludedFromDylib","","",195,null],[13,"Static","","",195,null],[13,"Dynamic","","",195,null],[5,"calculate","","",null,null],[0,"effect","rustc_trans::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`.",null,null],[5,"check_crate","rustc_trans::middle::effect","",null,null],[0,"entry","rustc_trans::middle","",null,null],[5,"find_entry_point","rustc_trans::middle::entry","",null,null],[0,"free_region","rustc_trans::middle","This file handles the relationships between free regions --\nmeaning lifetime parameters. Ordinarily, free regions are\nunrelated to one another, but they can be related via implied or\nexplicit bounds.  In that case, we track the bounds using the\n`TransitiveRelation` type and use that to decide when one free\nregion outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_trans::middle::free_region","",null,null],[0,"intrinsicck","rustc_trans::middle","",null,null],[5,"check_crate","rustc_trans::middle::intrinsicck","",null,null],[0,"lang_items","rustc_trans::middle","",null,null],[4,"LangItem","rustc_trans::middle::lang_items","",null,null],[13,"CharImplItem","","",197,null],[13,"StrImplItem","","",197,null],[13,"SliceImplItem","","",197,null],[13,"ConstPtrImplItem","","",197,null],[13,"MutPtrImplItem","","",197,null],[13,"I8ImplItem","","",197,null],[13,"I16ImplItem","","",197,null],[13,"I32ImplItem","","",197,null],[13,"I64ImplItem","","",197,null],[13,"IsizeImplItem","","",197,null],[13,"U8ImplItem","","",197,null],[13,"U16ImplItem","","",197,null],[13,"U32ImplItem","","",197,null],[13,"U64ImplItem","","",197,null],[13,"UsizeImplItem","","",197,null],[13,"F32ImplItem","","",197,null],[13,"F64ImplItem","","",197,null],[13,"SendTraitLangItem","","",197,null],[13,"SizedTraitLangItem","","",197,null],[13,"UnsizeTraitLangItem","","",197,null],[13,"CopyTraitLangItem","","",197,null],[13,"SyncTraitLangItem","","",197,null],[13,"DropTraitLangItem","","",197,null],[13,"CoerceUnsizedTraitLangItem","","",197,null],[13,"AddTraitLangItem","","",197,null],[13,"SubTraitLangItem","","",197,null],[13,"MulTraitLangItem","","",197,null],[13,"DivTraitLangItem","","",197,null],[13,"RemTraitLangItem","","",197,null],[13,"NegTraitLangItem","","",197,null],[13,"NotTraitLangItem","","",197,null],[13,"BitXorTraitLangItem","","",197,null],[13,"BitAndTraitLangItem","","",197,null],[13,"BitOrTraitLangItem","","",197,null],[13,"ShlTraitLangItem","","",197,null],[13,"ShrTraitLangItem","","",197,null],[13,"AddAssignTraitLangItem","","",197,null],[13,"SubAssignTraitLangItem","","",197,null],[13,"MulAssignTraitLangItem","","",197,null],[13,"DivAssignTraitLangItem","","",197,null],[13,"RemAssignTraitLangItem","","",197,null],[13,"BitXorAssignTraitLangItem","","",197,null],[13,"BitAndAssignTraitLangItem","","",197,null],[13,"BitOrAssignTraitLangItem","","",197,null],[13,"ShlAssignTraitLangItem","","",197,null],[13,"ShrAssignTraitLangItem","","",197,null],[13,"IndexTraitLangItem","","",197,null],[13,"IndexMutTraitLangItem","","",197,null],[13,"UnsafeCellTypeLangItem","","",197,null],[13,"DerefTraitLangItem","","",197,null],[13,"DerefMutTraitLangItem","","",197,null],[13,"FnTraitLangItem","","",197,null],[13,"FnMutTraitLangItem","","",197,null],[13,"FnOnceTraitLangItem","","",197,null],[13,"EqTraitLangItem","","",197,null],[13,"OrdTraitLangItem","","",197,null],[13,"StrEqFnLangItem","","",197,null],[13,"PanicFnLangItem","","",197,null],[13,"PanicBoundsCheckFnLangItem","","",197,null],[13,"PanicFmtLangItem","","",197,null],[13,"ExchangeMallocFnLangItem","","",197,null],[13,"ExchangeFreeFnLangItem","","",197,null],[13,"BoxFreeFnLangItem","","",197,null],[13,"StrDupUniqFnLangItem","","",197,null],[13,"StartFnLangItem","","",197,null],[13,"EhPersonalityLangItem","","",197,null],[13,"EhPersonalityCatchLangItem","","",197,null],[13,"EhUnwindResumeLangItem","","",197,null],[13,"MSVCTryFilterLangItem","","",197,null],[13,"OwnedBoxLangItem","","",197,null],[13,"PhantomDataItem","","",197,null],[13,"CovariantTypeItem","","",197,null],[13,"ContravariantTypeItem","","",197,null],[13,"InvariantTypeItem","","",197,null],[13,"CovariantLifetimeItem","","",197,null],[13,"ContravariantLifetimeItem","","",197,null],[13,"InvariantLifetimeItem","","",197,null],[13,"NoCopyItem","","",197,null],[13,"NonZeroItem","","",197,null],[13,"DebugTraitLangItem","","",197,null],[3,"LanguageItems","","",null,null],[12,"items","","",198,null],[12,"missing","","",198,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_trans::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid.",null,null],[5,"check_crate","rustc_trans::middle::liveness","",null,null],[0,"mem_categorization","rustc_trans::middle","# Categorization",null,null],[4,"Categorization","rustc_trans::middle::mem_categorization","",null,null],[13,"Rvalue","","",199,null],[13,"StaticItem","","",199,null],[13,"Upvar","","",199,null],[13,"Local","","",199,null],[13,"Deref","","",199,null],[13,"Interior","","",199,null],[13,"Downcast","","",199,null],[3,"Upvar","","",null,null],[12,"id","","",200,null],[12,"kind","","",200,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box&lt;T&gt;`",201,null],[13,"BorrowedPtr","","`&amp;T`",201,null],[13,"UnsafePtr","","`*T`",201,null],[13,"Implicit","","Implicit deref of the `&amp;T` that results from an overloaded index `[]`.",201,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",202,null],[13,"InteriorElement","","",202,null],[4,"FieldName","","",null,null],[13,"NamedField","","",203,null],[13,"PositionalField","","",203,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",204,null],[13,"Pattern","","",204,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",205,null],[13,"OtherElement","","",205,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",206,null],[13,"McDeclared","","",206,null],[13,"McInherited","","",206,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",207,null],[13,"NoteUpvarRef","","",207,null],[13,"NoteNone","","",207,null],[3,"cmt_","","",null,null],[12,"id","","",208,null],[12,"span","","",208,null],[12,"cat","","",208,null],[12,"mutbl","","",208,null],[12,"ty","","",208,null],[12,"note","","",208,null],[6,"cmt","","",null,null],[4,"deref_kind","","",null,null],[13,"deref_ptr","","",209,null],[13,"deref_interior","","",209,null],[8,"ast_node","","",null,null],[10,"id","","",508,null],[10,"span","","",508,null],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",210,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",211,null],[13,"NonAliasable","","",211,null],[13,"ImmutableUnique","","",211,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",212,null],[13,"AliasableClosure","","",212,null],[13,"AliasableOther","","",212,null],[13,"UnaliasableImmutable","","",212,null],[13,"AliasableStatic","","",212,null],[13,"AliasableStaticMut","","",212,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_trans::middle","A pass that checks to make sure private fields and methods aren&#39;t used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_trans::middle::privacy","",null,null],[13,"Reachable","","",213,null],[13,"Exported","","",213,null],[13,"Public","","",213,null],[3,"AccessLevels","","",null,null],[12,"map","","",214,null],[6,"ExternalExports","","",null,null],[0,"reachable","rustc_trans::middle","",null,null],[5,"find_reachable","rustc_trans::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_trans::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized.",null,null],[3,"CodeExtent","rustc_trans::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling\ninstead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values.",null,null],[13,"Misc","","",216,null],[13,"CallSiteScope","","",216,null],[12,"fn_id","rustc_trans::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"ParameterScope","rustc_trans::middle::region","",216,null],[12,"fn_id","rustc_trans::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"DestructionScope","rustc_trans::middle::region","",216,null],[13,"Remainder","","",216,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",217,null],[12,"body_id","","",217,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`.",null,null],[12,"block","","",218,null],[12,"first_statement_index","","",218,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[5,"resolve_inlined_item","","",null,null],[0,"recursion_limit","rustc_trans::middle","",null,null],[5,"update_recursion_limit","rustc_trans::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_trans::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_trans::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",221,null],[13,"DefEarlyBoundRegion","","",221,null],[13,"DefLateBoundRegion","","",221,null],[13,"DefFreeRegion","","",221,null],[6,"NamedRegionMap","","",null,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"hashmap"}],"output":{"name":"result"}}],[5,"early_bound_lifetimes","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"vec"}}],[0,"stability","rustc_trans::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_trans::middle::stability","",null,null],[13,"Unstable","","",222,null],[13,"Stable","","",222,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used.",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"hashmap"}}],[5,"check_item","","Helper for discovering nodes to check for stability",null,null],[5,"check_expr","","Helper for discovering nodes to check for stability",null,null],[5,"check_path","","",null,null],[5,"check_path_list_item","","",null,null],[5,"check_pat","","",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don&#39;t exist and error about them.",null,null],[0,"weak_lang_items","rustc_trans::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_trans::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"lint","rustc_trans","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_trans::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",165,null],[12,"default_level","","Default level for the lint.",165,null],[12,"desc","","Description of the lint or the issue it detects.",165,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",509,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",510,null],[11,"check_crate","","",510,null],[11,"check_crate_post","","",510,null],[11,"check_mod","","",510,null],[11,"check_mod_post","","",510,null],[11,"check_foreign_item","","",510,null],[11,"check_foreign_item_post","","",510,null],[11,"check_item","","",510,null],[11,"check_item_post","","",510,null],[11,"check_local","","",510,null],[11,"check_block","","",510,null],[11,"check_block_post","","",510,null],[11,"check_stmt","","",510,null],[11,"check_arm","","",510,null],[11,"check_pat","","",510,null],[11,"check_decl","","",510,null],[11,"check_expr","","",510,null],[11,"check_expr_post","","",510,null],[11,"check_ty","","",510,null],[11,"check_generics","","",510,null],[11,"check_fn","","",510,null],[11,"check_fn_post","","",510,null],[11,"check_trait_item","","",510,null],[11,"check_trait_item_post","","",510,null],[11,"check_impl_item","","",510,null],[11,"check_impl_item_post","","",510,null],[11,"check_struct_def","","",510,null],[11,"check_struct_def_post","","",510,null],[11,"check_struct_field","","",510,null],[11,"check_variant","","",510,null],[11,"check_variant_post","","",510,null],[11,"check_lifetime","","",510,null],[11,"check_lifetime_def","","",510,null],[11,"check_explicit_self","","",510,null],[11,"check_path","","",510,null],[11,"check_path_list_item","","",510,null],[11,"check_attribute","","",510,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",510,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",510,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",511,null],[11,"check_crate","","",511,null],[11,"check_crate_post","","",511,null],[11,"check_mod","","",511,null],[11,"check_mod_post","","",511,null],[11,"check_foreign_item","","",511,null],[11,"check_foreign_item_post","","",511,null],[11,"check_item","","",511,null],[11,"check_item_post","","",511,null],[11,"check_local","","",511,null],[11,"check_block","","",511,null],[11,"check_block_post","","",511,null],[11,"check_stmt","","",511,null],[11,"check_arm","","",511,null],[11,"check_pat","","",511,null],[11,"check_decl","","",511,null],[11,"check_expr","","",511,null],[11,"check_expr_post","","",511,null],[11,"check_ty","","",511,null],[11,"check_generics","","",511,null],[11,"check_fn","","",511,null],[11,"check_fn_post","","",511,null],[11,"check_trait_item","","",511,null],[11,"check_trait_item_post","","",511,null],[11,"check_impl_item","","",511,null],[11,"check_impl_item_post","","",511,null],[11,"check_struct_def","","",511,null],[11,"check_struct_def_post","","",511,null],[11,"check_struct_field","","",511,null],[11,"check_variant","","",511,null],[11,"check_variant_post","","",511,null],[11,"check_lifetime","","",511,null],[11,"check_lifetime_def","","",511,null],[11,"check_explicit_self","","",511,null],[11,"check_path","","",511,null],[11,"check_path_list_item","","",511,null],[11,"check_attribute","","",511,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",511,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",511,null],[6,"EarlyLintPassObject","","",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",167,null],[13,"Warn","","",167,null],[13,"Deny","","",167,null],[13,"Forbid","","",167,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",168,null],[13,"Node","","Lint level was set by an attribute.",168,null],[13,"CommandLine","","Lint level was set by a command-line flag.",168,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_trans::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"VARIANT_SIZE_DIFFERENCES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"UNSIZED_IN_TUPLE","","",null,null],[7,"OBJECT_UNSAFE_FRAGMENT","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler.",null,null],[5,"raw_emit_lint","rustc_trans::lint","Emit a lint as a warning or an error (or not at all)\naccording to `level`.",null,null],[3,"GatherNodeLevels","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[8,"LintContext","","",null,null],[10,"sess","","",512,null],[10,"lints","","",512,null],[10,"mut_lints","","",512,null],[10,"level_stack","","",512,null],[10,"enter_attrs","","",512,null],[10,"exit_attrs","","",512,null],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",512,null],[11,"level_src","","",512,null],[11,"lookup_and_emit","","",512,null],[11,"lookup","","",512,null],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",512,null],[11,"struct_span_lint","","",512,null],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",512,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",512,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",512,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the\ncurrent lint context, call the provided function, then reset the\nlints in effect to their previous state.",512,null],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess.",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[5,"raw_struct_lint","","",null,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to\nHIR.",null,null],[12,"sess","","Type context we&#39;re checking in.",172,null],[12,"krate","","The crate being checked.",172,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we&#39;re checking in.",171,null],[12,"krate","","The crate being checked.",171,null],[12,"access_levels","","Items accessible from the crate being checked.",171,null],[5,"check_ast_crate","","",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call\nto `register_future_incompatible` in `librustc_lint/lib.rs` for\nguidelines.",null,null],[12,"id","","",513,null],[12,"reference","","",513,null],[0,"util","rustc_trans","",null,null],[0,"common","rustc_trans::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_trans::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[5,"loop_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[5,"block_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",514,null],[16,"Value","","",514,null],[10,"memoize","","If `key` is present in the map, return the valuee,\notherwise invoke `op` and store the value in the map.",514,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_trans::util","",null,null],[5,"verbose","rustc_trans::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[4,"Ns","","Namespace of the path given to parameterized to print.",null,null],[13,"Type","","",498,null],[13,"Value","","",498,null],[5,"parameterized","","",null,null],[0,"nodemap","rustc_trans::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_trans::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[11,"clone","rustc_data_structures::bitvec","",515,null],[11,"new","","",515,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"contains","","",515,null],[11,"insert","","Returns true if the bit has changed.",515,null],[11,"insert_all","","",515,null],[11,"grow","","",515,null],[11,"iter","","Iterates over indexes of set bits in a sorted order",515,null],[11,"next","","",516,null],[11,"from_iter","","",515,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",517,null],[11,"new","","",517,{"inputs":[{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",517,null],[11,"contains","","Do the bits from `source` contain `target`?",517,null],[11,"intersection","","Returns those indices that are reachable from both `a` and\n`b`. This is an O(n) operation where `n` is the number of\nelements (somewhat independent from the actual size of the\nintersection, in particular).",517,null],[11,"merge","","Add the bits from `read` to the bits from `write`,\nreturn true if anything changed.",517,null],[11,"reverse","rustc_data_structures::graph","",518,null],[11,"reverse","","",519,null],[11,"fmt","","",519,null],[11,"hash","","",520,null],[11,"fmt","","",520,null],[11,"eq","","",520,null],[11,"ne","","",520,null],[11,"clone","","",520,null],[11,"hash","","",521,null],[11,"fmt","","",521,null],[11,"eq","","",521,null],[11,"ne","","",521,null],[11,"clone","","",521,null],[11,"eq","","",522,null],[11,"ne","","",522,null],[11,"fmt","","",522,null],[11,"clone","","",522,null],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",520,null],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",521,null],[11,"new","","",523,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",523,null],[11,"len_nodes","","",523,null],[11,"all_edges","","",523,null],[11,"len_edges","","",523,null],[11,"next_node_index","","",523,null],[11,"add_node","","",523,null],[11,"mut_node_data","","",523,null],[11,"node_data","","",523,null],[11,"node","","",523,null],[11,"next_edge_index","","",523,null],[11,"add_edge","","",523,null],[11,"mut_edge_data","","",523,null],[11,"edge_data","","",523,null],[11,"edge","","",523,null],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",523,null],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",523,null],[11,"each_node","","Iterates over all edges defined in the graph.",523,null],[11,"each_edge","","Iterates over all edges defined in the graph",523,null],[11,"outgoing_edges","","",523,null],[11,"incoming_edges","","",523,null],[11,"adjacent_edges","","",523,null],[11,"successor_nodes","","",523,null],[11,"predecessor_nodes","","",523,null],[11,"iterate_until_fixed_point","","",523,null],[11,"depth_traverse","","",523,null],[11,"next","","",524,null],[11,"next","","",525,null],[11,"next","","",526,null],[11,"next","","",527,null],[11,"source","","",519,null],[11,"target","","",519,null],[11,"source_or_target","","",519,null],[11,"eq","rustc_data_structures::ivar","",528,null],[11,"ne","","",528,null],[11,"new","","",528,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",528,null],[11,"fulfill","","",528,null],[11,"is_fulfilled","","",528,null],[11,"unwrap","","",528,null],[11,"fmt","","",528,null],[11,"clone","","",528,null],[11,"fmt","rustc_data_structures::obligation_forest","",529,null],[11,"eq","","",530,null],[11,"ne","","",530,null],[11,"fmt","","",530,null],[11,"new","","",531,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not\nyet been fully resolved.",531,null],[11,"start_snapshot","","",531,null],[11,"commit_snapshot","","",531,null],[11,"rollback_snapshot","","",531,null],[11,"in_snapshot","","",531,null],[11,"register_obligation","","Registers an obligation",531,null],[11,"to_errors","","Convert all remaining obligations to the given error.",531,null],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",531,null],[11,"process_obligations","","Perform a pass through the obligation list. This must\nbe called in a loop until `outcome.stalled` is false.",531,null],[11,"new","rustc_data_structures::snapshot_vec","",532,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",532,null],[11,"len","","",532,null],[11,"push","","",532,null],[11,"get","","",532,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",532,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",532,null],[11,"start_snapshot","","",532,null],[11,"actions_since_snapshot","","",532,null],[11,"rollback_to","","",532,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",532,null],[11,"deref","","",532,null],[11,"deref_mut","","",532,null],[11,"index","","",532,null],[11,"index_mut","","",532,null],[11,"extend","","",532,null],[11,"clone","rustc_data_structures::transitive_relation","",533,null],[11,"new","","",533,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"add","","Indicate that `a &lt; b` (where `&lt;` is this relation)",533,null],[11,"contains","","Check whether `a &lt; target` (transitively)",533,null],[11,"postdom_upper_bound","","Picks what I am referring to as the &quot;postdominating&quot;\nupper-bound for `a` and `b`. This is usually the least upper\nbound, but in cases where there is no single least upper\nbound, it is the &quot;mutual immediate postdominator&quot;, if you\nimagine a graph where `a &lt; b` means `a -&gt; b`.",533,null],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",533,null],[11,"fmt","rustc_data_structures::unify","",534,null],[11,"clone","","",534,null],[11,"eq","","",534,null],[11,"ne","","",534,null],[11,"new","","",535,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a &quot;LIFO&quot; (stack) order.",535,null],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",535,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",535,null],[11,"new_key","","",535,null],[11,"union","","",535,null],[11,"find","","",535,null],[11,"find_value","","",535,null],[11,"unioned","","",535,null],[11,"unify_var_var","","",535,null],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",535,null],[11,"has_value","","",535,null],[11,"probe","","",535,null],[11,"unsolved_variables","","",535,null],[11,"default","rustc_data_structures::fnv","",536,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",536,null],[11,"finish","","",536,null],[11,"with_capacity","rustc_data_structures::veccell","",537,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",537,null],[11,"swap","","",537,null],[6,"FnvHashMap","rustc_trans::util::nodemap","",null,null],[6,"FnvHashSet","","",null,null],[5,"FnvHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FnvHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[0,"num","rustc_trans::util","",null,null],[8,"ToPrimitive","rustc_trans::util::num","",null,null],[10,"to_i8","","",538,null],[10,"to_i16","","",538,null],[10,"to_i32","","",538,null],[10,"to_i64","","",538,null],[10,"to_u8","","",538,null],[10,"to_u16","","",538,null],[10,"to_u32","","",538,null],[10,"to_u64","","",538,null],[0,"fs","rustc_trans::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_trans::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[0,"sha2","rustc_trans::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant.",null,null],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",539,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",539,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",539,null],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",539,null],[11,"close","","Close and remove the temporary directory",539,null],[11,"drop","","",539,null],[11,"fmt","rustc_back::target","",540,null],[11,"clone","","",540,null],[11,"fmt","","",541,null],[11,"clone","","",541,null],[11,"default","","Create a set of &quot;sane defaults&quot; for any target. This is still\nincomplete, and if used for compilation, will certainly not work.",541,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn &quot;System&quot; into the correct ABI for this target.",540,null],[11,"from_json","","Load a target descriptor from a JSON object.",540,{"inputs":[{"name":"json"}],"output":{"name":"target"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",540,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"drop","rustc_back::dynamic_lib","",542,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",542,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",542,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",542,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",542,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",542,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",542,null],[8,"Digest","rustc_trans::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",543,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",543,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",543,null],[10,"output_bits","","Get the output size in bits.",543,null],[11,"input_str","","Convenience function that feeds a string into a digest.",543,null],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",543,null],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",543,null],[3,"Sha256","","The SHA-256 hash algorithm",null,null],[3,"Disr","rustc_trans","",null,null],[12,"0","","",544,null],[3,"ModuleTranslation","","",null,null],[12,"llcx","","",545,null],[12,"llmod","","",545,null],[3,"CrateTranslation","","",null,null],[12,"modules","","",546,null],[12,"metadata_module","","",546,null],[12,"link","","",546,null],[12,"metadata","","",546,null],[12,"reachable","","",546,null],[12,"no_builtins","","",546,null],[5,"trans_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mirmap"},{"name":"crateanalysis"}],"output":{"name":"cratetranslation"}}],[0,"back","","",null,null],[0,"rpath","rustc_trans::back","",null,null],[3,"RPathConfig","rustc_trans::back::rpath","",null,null],[12,"used_crates","","",547,null],[12,"out_filename","","",547,null],[12,"is_like_osx","","",547,null],[12,"has_rpath","","",547,null],[12,"linker_is_gnu","","",547,null],[12,"get_install_prefix_lib_path","","",547,null],[5,"get_rpath_flags","","",null,{"inputs":[{"name":"rpathconfig"}],"output":{"name":"vec"}}],[0,"svh","rustc_trans::back","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc_trans::back::svh","",null,null],[0,"archive","rustc_trans::back","A helper class for dealing with static archives",null,null],[3,"ArchiveConfig","rustc_trans::back::archive","",null,null],[12,"sess","","",548,null],[12,"dst","","",548,null],[12,"src","","",548,null],[12,"lib_search_paths","","",548,null],[12,"ar_prog","","",548,null],[12,"command_path","","",548,null],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`.",null,null],[5,"find_library","","",null,null],[11,"new","","Create a new static archive, ready for modifying the archive specified\nby `config`.",549,{"inputs":[{"name":"archiveconfig"}],"output":{"name":"archivebuilder"}}],[11,"remove_file","","Removes a file from this archive",549,null],[11,"src_files","","Lists all files in an archive",549,null],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",549,null],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",549,null],[11,"add_file","","Adds an arbitrary file to this archive",549,null],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run &#39;ar s&#39; over it).",549,null],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",549,null],[11,"llvm_archive_kind","","",549,null],[11,"using_llvm","","",549,null],[0,"linker","rustc_trans::back","",null,null],[3,"GnuLinker","rustc_trans::back::linker","",null,null],[12,"cmd","","",550,null],[12,"sess","","",550,null],[3,"MsvcLinker","","",null,null],[12,"cmd","","",551,null],[12,"sess","","",551,null],[8,"Linker","","Linker abstraction used by back::link to build up the command to invoke a\nlinker.",null,null],[10,"link_dylib","","",552,null],[10,"link_rust_dylib","","",552,null],[10,"link_framework","","",552,null],[10,"link_staticlib","","",552,null],[10,"link_rlib","","",552,null],[10,"link_whole_rlib","","",552,null],[10,"link_whole_staticlib","","",552,null],[10,"include_path","","",552,null],[10,"framework_path","","",552,null],[10,"output_filename","","",552,null],[10,"add_object","","",552,null],[10,"gc_sections","","",552,null],[10,"position_independent_executable","","",552,null],[10,"optimize","","",552,null],[10,"debuginfo","","",552,null],[10,"no_default_libraries","","",552,null],[10,"build_dylib","","",552,null],[10,"args","","",552,null],[10,"hint_static","","",552,null],[10,"hint_dynamic","","",552,null],[10,"whole_archives","","",552,null],[10,"no_whole_archives","","",552,null],[10,"export_symbols","","",552,null],[11,"link_dylib","","",550,null],[11,"link_staticlib","","",550,null],[11,"link_rlib","","",550,null],[11,"include_path","","",550,null],[11,"framework_path","","",550,null],[11,"output_filename","","",550,null],[11,"add_object","","",550,null],[11,"position_independent_executable","","",550,null],[11,"args","","",550,null],[11,"link_rust_dylib","","",550,null],[11,"link_framework","","",550,null],[11,"link_whole_staticlib","","",550,null],[11,"link_whole_rlib","","",550,null],[11,"gc_sections","","",550,null],[11,"optimize","","",550,null],[11,"debuginfo","","",550,null],[11,"no_default_libraries","","",550,null],[11,"build_dylib","","",550,null],[11,"whole_archives","","",550,null],[11,"no_whole_archives","","",550,null],[11,"hint_static","","",550,null],[11,"hint_dynamic","","",550,null],[11,"export_symbols","","",550,null],[11,"link_rlib","","",551,null],[11,"add_object","","",551,null],[11,"args","","",551,null],[11,"build_dylib","","",551,null],[11,"gc_sections","","",551,null],[11,"link_dylib","","",551,null],[11,"link_rust_dylib","","",551,null],[11,"link_staticlib","","",551,null],[11,"position_independent_executable","","",551,null],[11,"no_default_libraries","","",551,null],[11,"include_path","","",551,null],[11,"output_filename","","",551,null],[11,"framework_path","","",551,null],[11,"link_framework","","",551,null],[11,"link_whole_staticlib","","",551,null],[11,"link_whole_rlib","","",551,null],[11,"optimize","","",551,null],[11,"debuginfo","","",551,null],[11,"whole_archives","","",551,null],[11,"no_whole_archives","","",551,null],[11,"hint_static","","",551,null],[11,"hint_dynamic","","",551,null],[11,"export_symbols","","",551,null],[0,"link","rustc_trans::back","",null,null],[5,"find_crate_name","rustc_trans::back::link","",null,null],[5,"build_link_meta","","",null,{"inputs":[{"name":"tyctxt"},{"name":"str"}],"output":{"name":"linkmeta"}}],[5,"get_linker","","",null,null],[5,"get_ar_prog","","",null,{"inputs":[{"name":"session"}],"output":{"name":"string"}}],[5,"remove","","",null,{"inputs":[{"name":"session"},{"name":"path"}],"output":null}],[5,"link_binary","","Perform the linkage portion of the compilation phase. This will generate all\nof the requested outputs for this compilation session.",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"outputfilenames"},{"name":"str"}],"output":{"name":"vec"}}],[5,"default_output_for_target","","Returns default crate type for target",null,{"inputs":[{"name":"session"}],"output":{"name":"cratetype"}}],[5,"invalid_output_for_target","","Checks if target supports crate_type as output",null,{"inputs":[{"name":"session"},{"name":"cratetype"}],"output":{"name":"bool"}}],[5,"filename_for_input","","",null,{"inputs":[{"name":"session"},{"name":"cratetype"},{"name":"str"},{"name":"outputfilenames"}],"output":{"name":"pathbuf"}}],[5,"each_linked_rlib","","",null,{"inputs":[{"name":"session"},{"name":"fnmut"}],"output":null}],[17,"RLIB_BYTECODE_OBJECT_MAGIC","","",null,null],[17,"RLIB_BYTECODE_OBJECT_VERSION","","",null,null],[17,"RLIB_BYTECODE_OBJECT_VERSION_OFFSET","","",null,null],[17,"RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET","","",null,null],[17,"RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET","","",null,null],[0,"lto","rustc_trans::back","",null,null],[5,"run","rustc_trans::back::lto","",null,null],[0,"symbol_names","rustc_trans::back","The Rust Linkage Model and Symbol Names\n=======================================",null,null],[5,"def_id_to_string","rustc_trans::back::symbol_names","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"string"}}],[5,"def_path_to_string","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defpath"}],"output":{"name":"string"}}],[5,"exported_name","","",null,{"inputs":[{"name":"cratecontext"},{"name":"instance"}],"output":{"name":"string"}}],[5,"exported_name_with_suffix","","",null,{"inputs":[{"name":"cratecontext"},{"name":"instance"},{"name":"str"}],"output":{"name":"string"}}],[5,"internal_name_from_type_and_suffix","","Only symbols that are invisible outside their compilation unit should use a\nname generated by this function.",null,{"inputs":[{"name":"cratecontext"},{"name":"ty"},{"name":"str"}],"output":{"name":"string"}}],[5,"sanitize","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"mangle","","",null,{"inputs":[{"name":"pi"},{"name":"option"}],"output":{"name":"string"}}],[0,"write","rustc_trans::back","",null,null],[3,"ModuleConfig","rustc_trans::back::write","Module-specific configuration for `optimize_and_codegen`.",null,null],[5,"llvm_err","","",null,{"inputs":[{"name":"handler"},{"name":"string"}],"output":null}],[5,"write_output_file","","",null,{"inputs":[{"name":"handler"},{"name":"targetmachineref"},{"name":"passmanagerref"},{"name":"moduleref"},{"name":"path"},{"name":"filetype"}],"output":null}],[5,"create_target_machine","","",null,{"inputs":[{"name":"session"}],"output":{"name":"targetmachineref"}}],[5,"run_passes","","",null,{"inputs":[{"name":"session"},{"name":"cratetranslation"},{"name":"hashmap"},{"name":"outputfilenames"}],"output":null}],[5,"run_assembler","","",null,{"inputs":[{"name":"session"},{"name":"outputfilenames"}],"output":null}],[5,"with_llvm_pmb","","",null,{"inputs":[{"name":"moduleref"},{"name":"moduleconfig"},{"name":"fnmut"}],"output":null}],[11,"clone","","",553,null],[0,"msvc","rustc_trans::back","MSVC-specific logic for linkers and such.",null,null],[5,"link_exe_cmd","rustc_trans::back::msvc","",null,{"inputs":[{"name":"session"}],"output":{"name":"command"}}],[5,"host_dll_path","","",null,{"inputs":[],"output":{"name":"option"}}],[0,"diagnostics","rustc_trans","",null,null],[11,"index","syntax::abi","",359,null],[11,"data","","",359,null],[11,"name","","",359,null],[11,"new","syntax::util::interner","",554,{"inputs":[],"output":{"name":"interner"}}],[11,"prefill","","",554,null],[11,"intern","","",554,null],[11,"gensym","","",554,null],[11,"get","","",554,null],[11,"len","","",554,null],[11,"find","","",554,null],[11,"clear","","",554,null],[11,"partial_cmp","","",555,null],[11,"lt","","",555,null],[11,"le","","",555,null],[11,"gt","","",555,null],[11,"ge","","",555,null],[11,"hash","","",555,null],[11,"eq","","",555,null],[11,"ne","","",555,null],[11,"clone","","",555,null],[11,"new","","",555,{"inputs":[{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",555,null],[11,"fmt","","",555,null],[11,"fmt","","",555,null],[11,"borrow","","",555,null],[11,"deref","","",555,null],[11,"new","","",556,{"inputs":[],"output":{"name":"strinterner"}}],[11,"prefill","","",556,null],[11,"intern","","",556,null],[11,"gensym","","",556,null],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",556,null],[11,"get","","",556,null],[11,"len","","",556,null],[11,"find","","",556,null],[11,"clear","","",556,null],[11,"reset","","",556,null],[11,"new","syntax::util::node_count","",557,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",557,null],[11,"visit_mod","","",557,null],[11,"visit_foreign_item","","",557,null],[11,"visit_item","","",557,null],[11,"visit_local","","",557,null],[11,"visit_block","","",557,null],[11,"visit_stmt","","",557,null],[11,"visit_arm","","",557,null],[11,"visit_pat","","",557,null],[11,"visit_decl","","",557,null],[11,"visit_expr","","",557,null],[11,"visit_ty","","",557,null],[11,"visit_generics","","",557,null],[11,"visit_fn","","",557,null],[11,"visit_trait_item","","",557,null],[11,"visit_impl_item","","",557,null],[11,"visit_trait_ref","","",557,null],[11,"visit_ty_param_bound","","",557,null],[11,"visit_poly_trait_ref","","",557,null],[11,"visit_variant_data","","",557,null],[11,"visit_struct_field","","",557,null],[11,"visit_enum_def","","",557,null],[11,"visit_variant","","",557,null],[11,"visit_lifetime","","",557,null],[11,"visit_lifetime_def","","",557,null],[11,"visit_explicit_self","","",557,null],[11,"visit_mac","","",557,null],[11,"visit_path","","",557,null],[11,"visit_path_list_item","","",557,null],[11,"visit_path_parameters","","",557,null],[11,"visit_assoc_type_binding","","",557,null],[11,"visit_attribute","","",557,null],[11,"visit_macro_def","","",557,null],[11,"eq","syntax::util::parser","",558,null],[11,"ne","","",558,null],[11,"fmt","","",558,null],[11,"eq","","",559,null],[11,"fmt","","",559,null],[11,"from_token","","Create a new AssocOP from a token",558,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",558,{"inputs":[{"name":"binopkind"}],"output":{"name":"assocop"}}],[11,"precedence","","Gets the precedence of this operator",558,null],[11,"fixity","","Gets the fixity of this operator",558,null],[11,"is_comparison","","",558,null],[11,"is_assign_like","","",558,null],[11,"to_ast_binop","","",558,null],[11,"from_iter","syntax::util::small_vector","",560,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",560,null],[11,"zero","","",560,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",560,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",560,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",560,null],[11,"pop","","",560,null],[11,"push","","",560,null],[11,"push_all","","",560,null],[11,"get","","",560,null],[11,"expect_one","","",560,null],[11,"len","","",560,null],[11,"is_empty","","",560,null],[11,"into_iter","","",560,null],[11,"next","","",561,null],[11,"size_hint","","",561,null],[11,"move_flat_map","","",560,null],[11,"move_flat_map","collections::vec","",241,null],[11,"move_flat_map","syntax::ptr","",389,null],[11,"clone","syntax::diagnostics::registry","",562,null],[11,"new","","",562,null],[11,"find_description","","",562,null],[11,"encode","syntax::diagnostics::metadata","",563,null],[11,"decode","","",563,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",563,null],[11,"ne","","",563,null],[11,"encode","","",564,null],[11,"decode","","",564,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",564,null],[11,"ne","","",564,null],[11,"from_span","","Create an error location from a span.",564,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[11,"eq","syntax::errors::emitter","",565,null],[11,"fmt","","",565,null],[11,"clone","","",565,null],[11,"emit_message","","",566,null],[11,"stderr","","",566,{"inputs":[{"name":"colorconfig"}],"output":{"name":"basicemitter"}}],[11,"emit_message","","",567,null],[11,"stderr","","",567,{"inputs":[{"name":"colorconfig"},{"name":"option"},{"name":"rc"}],"output":{"name":"emitterwriter"}}],[11,"new","","",567,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"emitterwriter"}}],[11,"basic","syntax::errors::json","",568,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"stderr","","",568,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",568,null],[11,"emit_struct","","",568,null],[11,"clone","syntax::errors::snippet","",569,null],[11,"clone","","",570,null],[11,"fmt","","",571,null],[11,"fmt","","",572,null],[11,"fmt","","",573,null],[11,"eq","","",574,null],[11,"fmt","","",574,null],[11,"clone","","",574,null],[11,"clone","","",575,null],[11,"fmt","","",575,null],[11,"new","","",569,{"inputs":[{"name":"rc"},{"name":"option"}],"output":{"name":"snippetdata"}}],[11,"push","","",569,null],[11,"render_lines","","",569,null],[11,"make_string","collections::string","",447,null],[11,"make_string","collections::vec","",241,null],[11,"from","syntax::errors::snippet","",571,null],[11,"from","","",571,null],[11,"clone","syntax::errors","",576,null],[11,"clone","","",577,null],[11,"splice_lines","","Returns the assembled code suggestion.",577,null],[11,"fmt","","",578,null],[11,"clone","","",578,null],[11,"fmt","","",578,null],[11,"description","","",578,null],[11,"fmt","","",579,null],[11,"clone","","",579,null],[11,"fmt","","",579,null],[11,"description","","",579,null],[11,"clone","","",580,null],[11,"emit","","Emit the diagnostic.",580,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",580,null],[11,"cancelled","","",580,null],[11,"is_fatal","","",580,null],[11,"span_label","","Add a span/label to be included in the resulting snippet.\nThis is pushed onto the `MultiSpan` that was created when the\ndiagnostic was first built. If you don&#39;t call this function at\nall, and you just supplied a `Span` to create the diagnostic,\nthen the snippet will just include that `Span`, which is\ncalled the primary span.",580,null],[11,"note_expected_found","","",580,null],[11,"note","","",580,null],[11,"span_note","","",580,null],[11,"warn","","",580,null],[11,"span_warn","","",580,null],[11,"help","","",580,null],[11,"span_help","","",580,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",580,null],[11,"set_span","","",580,null],[11,"code","","",580,null],[11,"message","","",580,null],[11,"level","","",580,null],[11,"fmt","","",580,null],[11,"drop","","",580,null],[11,"with_tty_emitter","","",581,{"inputs":[{"name":"colorconfig"},{"name":"option"},{"name":"bool"},{"name":"bool"},{"name":"rc"}],"output":{"name":"handler"}}],[11,"with_emitter","","",581,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",581,null],[11,"struct_dummy","","",581,null],[11,"struct_span_warn","","",581,null],[11,"struct_span_warn_with_code","","",581,null],[11,"struct_warn","","",581,null],[11,"struct_span_err","","",581,null],[11,"struct_span_err_with_code","","",581,null],[11,"struct_err","","",581,null],[11,"struct_span_fatal","","",581,null],[11,"struct_span_fatal_with_code","","",581,null],[11,"struct_fatal","","",581,null],[11,"cancel","","",581,null],[11,"span_fatal","","",581,null],[11,"span_fatal_with_code","","",581,null],[11,"span_err","","",581,null],[11,"span_err_with_code","","",581,null],[11,"span_warn","","",581,null],[11,"span_warn_with_code","","",581,null],[11,"span_bug","","",581,null],[11,"delay_span_bug","","",581,null],[11,"span_bug_no_panic","","",581,null],[11,"span_note_without_error","","",581,null],[11,"span_unimpl","","",581,null],[11,"fatal","","",581,null],[11,"err","","",581,null],[11,"warn","","",581,null],[11,"note_without_error","","",581,null],[11,"bug","","",581,null],[11,"unimpl","","",581,null],[11,"bump_err_count","","",581,null],[11,"err_count","","",581,null],[11,"has_errors","","",581,null],[11,"abort_if_errors","","",581,null],[11,"emit","","",581,null],[11,"emit_with_code","","",581,null],[11,"fmt","","",582,null],[11,"clone","","",582,null],[11,"eq","","",582,null],[11,"fmt","","",582,null],[11,"hash","syntax::parse::parser","",583,null],[11,"cmp","","",583,null],[11,"partial_cmp","","",583,null],[11,"lt","","",583,null],[11,"le","","",583,null],[11,"gt","","",583,null],[11,"ge","","",583,null],[11,"clone","","",583,null],[11,"eq","","",583,null],[11,"ne","","",583,null],[11,"empty","","Returns an empty set of flags.",583,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",583,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",583,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",583,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",583,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",583,null],[11,"is_all","","Returns `true` if all flags are currently set.",583,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",583,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",583,null],[11,"insert","","Inserts the specified flags in-place.",583,null],[11,"remove","","Removes the specified flags in-place.",583,null],[11,"toggle","","Toggles the specified flags in-place.",583,null],[11,"bitor","","Returns the union of the two sets of flags.",583,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",583,null],[11,"bitand","","Returns the intersection between the two sets of flags.",583,null],[11,"sub","","Returns the set difference of the two sets of flags.",583,null],[11,"not","","Returns the complement of this set of flags.",583,null],[11,"eq","","",584,null],[11,"clone","","",584,null],[11,"eq","","",585,null],[11,"clone","","",585,null],[11,"eq","","",586,null],[11,"clone","","",586,null],[11,"clone","","",587,null],[11,"eq","","",587,null],[11,"ne","","",587,null],[11,"from","","",588,{"inputs":[{"name":"option"}],"output":{"name":"lhsexpr"}}],[11,"from","","",588,{"inputs":[{"name":"p"}],"output":{"name":"lhsexpr"}}],[11,"new","","",589,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self&#39;s reader",589,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self&#39;s reader",589,null],[11,"this_token_descr","","",589,null],[11,"unexpected_last","","",589,null],[11,"unexpected","","",589,null],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",589,null],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",589,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",589,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",589,null],[11,"commit_expr_expecting","","",589,null],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",589,null],[11,"commit_stmt_expecting","","",589,null],[11,"parse_ident","","",589,null],[11,"check","","Check if the next token is `tok`, and return `true` if so.",589,null],[11,"eat","","Consume token &#39;tok&#39; if it exists. Returns true if the given\ntoken was present, false otherwise.",589,null],[11,"check_keyword","","",589,null],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",589,null],[11,"eat_keyword_noexpect","","",589,null],[11,"check_contextual_keyword","","",589,null],[11,"eat_contextual_keyword","","",589,null],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",589,null],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",589,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",589,null],[11,"expect_no_suffix","","",589,null],[11,"expect_gt","","Expect and consume a GT. if a &gt;&gt; is seen, replace it\nwith a single &gt; and continue. If a GT is not seen,\nsignal an error.",589,null],[11,"parse_seq_to_before_gt_or_return","","",589,null],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by &#39;&lt;&#39; and &#39;&gt;&#39;, stopping\nbefore the &#39;&gt;&#39;.",589,null],[11,"parse_seq_to_gt","","",589,null],[11,"parse_seq_to_gt_or_return","","",589,null],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees,\npasses through any errors encountered. Used for error recovery.",589,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",589,null],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",589,null],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",589,null],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",589,null],[11,"parse_seq","","",589,null],[11,"bump","","Advance the parser by one token",589,null],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",589,null],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when\nconsuming a part of a token. For example a single `&lt;` from `&lt;&lt;`.",589,null],[11,"buffer_length","","",589,null],[11,"look_ahead","","",589,null],[11,"fatal","","",589,null],[11,"span_fatal","","",589,null],[11,"span_fatal_help","","",589,null],[11,"bug","","",589,null],[11,"warn","","",589,null],[11,"span_warn","","",589,null],[11,"span_err","","",589,null],[11,"span_bug","","",589,null],[11,"abort_if_errors","","",589,null],[11,"diagnostic","","",589,null],[11,"id_to_interned_str","","",589,null],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",589,null],[11,"get_lifetime","","",589,null],[11,"parse_for_in_type","","",589,null],[11,"parse_ty_path","","",589,null],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",589,null],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&amp;:`, `&amp;mut:`, or `:`).",589,null],[11,"parse_unsafety","","",589,null],[11,"parse_trait_items","","Parse the items in a trait declaration",589,null],[11,"parse_mt","","Parse a possibly mutable type",589,null],[11,"parse_ret_ty","","Parse optional return type [ -&gt; TY ] in function decl",589,null],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",589,null],[11,"parse_ty","","Parse a type.",589,null],[11,"parse_borrowed_pointee","","",589,null],[11,"parse_ptr","","",589,null],[11,"is_named_argument","","",589,null],[11,"parse_arg_general","","This version of parse arg doesn&#39;t necessarily require\nidentifier names.",589,null],[11,"parse_arg","","Parse a single function argument",589,null],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",589,null],[11,"maybe_parse_fixed_length_of_vec","","",589,null],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",589,null],[11,"parse_lit","","Matches lit = true | false | token_lit",589,null],[11,"parse_pat_literal_maybe_minus","","matches &#39;-&#39; lit | lit",589,null],[11,"parse_path_segment_ident","","",589,null],[11,"parse_qualified_path","","Parses qualified path.",589,null],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",589,null],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b&lt;T,U&gt;::c&lt;V,W&gt;`\n- `a::b&lt;T,U&gt;::c(V) -&gt; W`\n- `a::b&lt;T,U&gt;::c(V)`",589,null],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::&lt;T,U&gt;::c`",589,null],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",589,null],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",589,null],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",589,null],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { &#39;,&#39; lifetime_defs } ]` where `lifetime_def  =\nlifetime [&#39;:&#39; lifetimes]`",589,null],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",589,null],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",589,null],[11,"parse_field","","Parse ident COLON expr",589,null],[11,"mk_expr","","",589,null],[11,"mk_unary","","",589,null],[11,"mk_binary","","",589,null],[11,"mk_call","","",589,null],[11,"mk_index","","",589,null],[11,"mk_range","","",589,null],[11,"mk_field","","",589,null],[11,"mk_tup_field","","",589,null],[11,"mk_assign_op","","",589,null],[11,"mk_mac_expr","","",589,null],[11,"mk_lit_u32","","",589,null],[11,"parse_block_expr","","Parse a block or unsafe block",589,null],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",589,null],[11,"parse_dot_or_call_expr_with","","",589,null],[11,"check_unknown_macro_variable","","",589,null],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",589,null],[11,"parse_token_tree","","parse a single token tree from the input.",589,null],[11,"parse_all_token_trees","","",589,null],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",589,null],[11,"parse_assoc_expr","","Parse an associative expression",589,null],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",589,null],[11,"parse_if_expr","","Parse an &#39;if&#39; or &#39;if let&#39; expression (&#39;if&#39; token already eaten)",589,null],[11,"parse_if_let_expr","","Parse an &#39;if let&#39; expression (&#39;if&#39; token already eaten)",589,null],[11,"parse_lambda_expr","","",589,null],[11,"parse_else_expr","","",589,null],[11,"parse_for_expr","","Parse a &#39;for&#39; .. &#39;in&#39; expression (&#39;for&#39; token already eaten)",589,null],[11,"parse_while_expr","","Parse a &#39;while&#39; or &#39;while let&#39; expression (&#39;while&#39; token already eaten)",589,null],[11,"parse_while_let_expr","","Parse a &#39;while let&#39; expression (&#39;while&#39; token already eaten)",589,null],[11,"parse_loop_expr","","",589,null],[11,"parse_arm","","",589,null],[11,"parse_expr","","Parse an expression",589,null],[11,"with_res","","Evaluate the closure with restrictions in place.",589,null],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",589,null],[11,"parse_pat","","Parse a pattern.",589,null],[11,"parse_stmt","","Parse a statement. may include decl.",589,null],[11,"parse_block","","Parse a block. No inner attrs are allowed.",589,null],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",589,null],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",589,null],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",589,null],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",589,null],[11,"parse_fn_front_matter","","parses all the &quot;front matter&quot; for a `fn` declaration, up to\nand including the `fn` keyword:",589,null],[11,"parse_impl_item","","Parse an impl item.",589,null],[11,"parse_record_struct_body","","",589,null],[11,"parse_tuple_struct_body","","",589,null],[11,"parse_single_struct_field","","Parse a structure field declaration",589,null],[11,"submod_path_from_attr","","",589,null],[11,"default_submod_path","","Returns either a path to a module, or .",589,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",589,null],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",589,null],[11,"parse_optional_str","","",589,null],[11,"parse_str","","",589,null],[11,"eq","syntax::parse::lexer::comments","",590,null],[11,"clone","","",590,null],[11,"clone","","",591,null],[11,"clone","","",592,null],[11,"fmt","syntax::parse::lexer","",593,null],[11,"eq","","",593,null],[11,"ne","","",593,null],[11,"clone","","",593,null],[11,"is_eof","","",594,null],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",594,null],[11,"fatal","","",594,null],[11,"err","","",594,null],[11,"emit_fatal_errors","","",594,null],[11,"peek","","",594,null],[11,"is_eof","syntax::ext::tt::transcribe","",595,null],[11,"try_next_token","","",595,null],[11,"fatal","","",595,null],[11,"err","","",595,null],[11,"emit_fatal_errors","","",595,null],[11,"peek","","",595,null],[11,"new_raw","syntax::parse::lexer","For comments.rs, which hackily pokes into pos and curr",594,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",594,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",594,null],[11,"fatal_span","","Report a fatal lexical error with a given span.",594,null],[11,"err_span","","Report a lexical error with a given span.",594,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",594,null],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",594,null],[11,"name_from_to","","As name_from, with an explicit endpoint.",594,null],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap&#39;s list of line start offsets.",594,null],[11,"nextch","","",594,null],[11,"nextch_is","","",594,null],[11,"nextnextch","","",594,null],[11,"nextnextch_is","","",594,null],[11,"fmt","syntax::parse::token","",596,null],[11,"hash","","",596,null],[11,"eq","","",596,null],[11,"decode","","",596,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",596,null],[11,"clone","","",596,null],[11,"fmt","","",597,null],[11,"hash","","",597,null],[11,"eq","","",597,null],[11,"decode","","",597,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",597,null],[11,"clone","","",597,null],[11,"fmt","","",598,null],[11,"hash","","",598,null],[11,"eq","","",598,null],[11,"decode","","",598,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",598,null],[11,"clone","","",598,null],[11,"as_str","","",598,null],[11,"fmt","","",599,null],[11,"hash","","",599,null],[11,"eq","","",599,null],[11,"ne","","",599,null],[11,"decode","","",599,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",599,null],[11,"clone","","",599,null],[11,"short_name","","",599,null],[11,"fmt","","",600,null],[11,"hash","","",600,null],[11,"eq","","",600,null],[11,"ne","","",600,null],[11,"decode","","",600,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",600,null],[11,"clone","","",600,null],[11,"is_like_gt","","Returns `true` if the token starts with &#39;&gt;&#39;.",600,null],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",600,null],[11,"is_lit","","Returns `true` if the token is any literal",600,null],[11,"is_ident","","Returns `true` if the token is an identifier.",600,null],[11,"is_interpolated","","Returns `true` if the token is interpolated.",600,null],[11,"is_path","","Returns `true` if the token is an interpolated path.",600,null],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",600,null],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",600,null],[11,"is_path_start","","",600,null],[11,"to_binop","","Maps a token to its corresponding binary operator.",600,null],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",600,null],[11,"is_path_segment_keyword","","",600,null],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",600,null],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",600,null],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",600,null],[11,"mtwt_eq","","Hygienic identifier equality comparison.",600,null],[11,"hash","","",601,null],[11,"eq","","",601,null],[11,"ne","","",601,null],[11,"decode","","",601,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",601,null],[11,"clone","","",601,null],[11,"fmt","","",601,null],[11,"eq","syntax::parse::token::keywords","",602,null],[11,"ne","","",602,null],[11,"clone","","",602,null],[11,"ident","","",602,null],[11,"name","","",602,null],[11,"cmp","syntax::parse::token","",603,null],[11,"partial_cmp","","",603,null],[11,"lt","","",603,null],[11,"le","","",603,null],[11,"gt","","",603,null],[11,"ge","","",603,null],[11,"hash","","",603,null],[11,"eq","","",603,null],[11,"ne","","",603,null],[11,"clone","","",603,null],[11,"new","","",603,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",603,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",603,null],[11,"fmt","","",603,null],[11,"fmt","","",603,null],[11,"eq","","",603,null],[11,"ne","","",603,null],[11,"eq","","",603,null],[11,"ne","","",603,null],[11,"decode","","",603,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",603,null],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",589,null],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",589,null],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",589,null],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",589,null],[11,"trailing_allowed","syntax::parse::common","",604,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",604,{"inputs":[],"output":{"name":"seqsep"}}],[11,"hash","syntax::parse::obsolete","",605,null],[11,"eq","","",605,null],[11,"clone","","",605,null],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",589,null],[11,"report","","",589,null],[11,"new","syntax::parse","",606,{"inputs":[],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",606,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",606,null],[11,"hash","syntax::ast","",607,null],[11,"cmp","","",607,null],[11,"partial_cmp","","",607,null],[11,"lt","","",607,null],[11,"le","","",607,null],[11,"gt","","",607,null],[11,"ge","","",607,null],[11,"eq","","",607,null],[11,"ne","","",607,null],[11,"clone","","",607,null],[11,"decode","","",608,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",608,null],[11,"fmt","","",608,null],[11,"hash","","",608,null],[11,"eq","","",608,null],[11,"ne","","",608,null],[11,"clone","","",608,null],[11,"clone","","",609,null],[11,"as_str","","",607,null],[11,"unhygienize","","",607,null],[11,"fmt","","",607,null],[11,"fmt","","",607,null],[11,"encode","","",607,null],[11,"decode","","",607,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",609,{"inputs":[{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"ident"}}],[11,"with_empty_ctxt","","",609,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"eq","","",609,null],[11,"hash","","",609,null],[11,"fmt","","",609,null],[11,"fmt","","",609,null],[11,"encode","","",609,null],[11,"decode","","",609,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",610,null],[11,"decode","","",610,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",610,null],[11,"eq","","",610,null],[11,"ne","","",610,null],[11,"clone","","",610,null],[11,"fmt","","",610,null],[11,"fmt","","",611,null],[11,"hash","","",611,null],[11,"decode","","",611,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",611,null],[11,"eq","","",611,null],[11,"ne","","",611,null],[11,"clone","","",611,null],[11,"hash","","",612,null],[11,"decode","","",612,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",612,null],[11,"eq","","",612,null],[11,"ne","","",612,null],[11,"clone","","",612,null],[11,"fmt","","",612,null],[11,"fmt","","",612,null],[11,"from_ident","","",612,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"fmt","","",613,null],[11,"hash","","",613,null],[11,"decode","","",613,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",613,null],[11,"eq","","",613,null],[11,"ne","","",613,null],[11,"clone","","",613,null],[11,"fmt","","",614,null],[11,"hash","","",614,null],[11,"decode","","",614,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",614,null],[11,"eq","","",614,null],[11,"ne","","",614,null],[11,"clone","","",614,null],[11,"none","","",614,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",614,null],[11,"has_lifetimes","","",614,null],[11,"has_types","","",614,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",614,null],[11,"lifetimes","","",614,null],[11,"bindings","","",614,null],[11,"fmt","","",615,null],[11,"hash","","",615,null],[11,"decode","","",615,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",615,null],[11,"eq","","",615,null],[11,"ne","","",615,null],[11,"clone","","",615,null],[11,"fmt","","",616,null],[11,"hash","","",616,null],[11,"decode","","",616,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",616,null],[11,"eq","","",616,null],[11,"ne","","",616,null],[11,"clone","","",616,null],[11,"fmt","","",617,null],[11,"hash","","",617,null],[11,"decode","","",617,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",617,null],[11,"eq","","",617,null],[11,"ne","","",617,null],[11,"clone","","",617,null],[11,"fmt","","",618,null],[11,"hash","","",618,null],[11,"decode","","",618,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",618,null],[11,"eq","","",618,null],[11,"clone","","",618,null],[11,"fmt","","",619,null],[11,"hash","","",619,null],[11,"decode","","",619,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",619,null],[11,"eq","","",619,null],[11,"ne","","",619,null],[11,"clone","","",619,null],[11,"fmt","","",620,null],[11,"hash","","",620,null],[11,"decode","","",620,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",620,null],[11,"eq","","",620,null],[11,"ne","","",620,null],[11,"clone","","",620,null],[11,"is_lt_parameterized","","",620,null],[11,"is_type_parameterized","","",620,null],[11,"is_parameterized","","",620,null],[11,"default","","",620,{"inputs":[],"output":{"name":"generics"}}],[11,"fmt","","",621,null],[11,"hash","","",621,null],[11,"decode","","",621,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",621,null],[11,"eq","","",621,null],[11,"ne","","",621,null],[11,"clone","","",621,null],[11,"fmt","","",622,null],[11,"hash","","",622,null],[11,"decode","","",622,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",622,null],[11,"eq","","",622,null],[11,"ne","","",622,null],[11,"clone","","",622,null],[11,"fmt","","",623,null],[11,"hash","","",623,null],[11,"decode","","",623,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",623,null],[11,"eq","","",623,null],[11,"ne","","",623,null],[11,"clone","","",623,null],[11,"fmt","","",624,null],[11,"hash","","",624,null],[11,"decode","","",624,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",624,null],[11,"eq","","",624,null],[11,"ne","","",624,null],[11,"clone","","",624,null],[11,"fmt","","",625,null],[11,"hash","","",625,null],[11,"decode","","",625,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",625,null],[11,"eq","","",625,null],[11,"ne","","",625,null],[11,"clone","","",625,null],[11,"fmt","","",626,null],[11,"hash","","",626,null],[11,"decode","","",626,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",626,null],[11,"eq","","",626,null],[11,"ne","","",626,null],[11,"clone","","",626,null],[11,"fmt","","",627,null],[11,"hash","","",627,null],[11,"decode","","",627,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",627,null],[11,"clone","","",627,null],[11,"eq","","",627,null],[11,"fmt","","",628,null],[11,"hash","","",628,null],[11,"decode","","",628,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",628,null],[11,"eq","","",628,null],[11,"ne","","",628,null],[11,"clone","","",628,null],[11,"hash","","",629,null],[11,"decode","","",629,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",629,null],[11,"eq","","",629,null],[11,"ne","","",629,null],[11,"clone","","",629,null],[11,"fmt","","",629,null],[11,"walk","","",629,null],[11,"fmt","","",630,null],[11,"hash","","",630,null],[11,"decode","","",630,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",630,null],[11,"eq","","",630,null],[11,"ne","","",630,null],[11,"clone","","",630,null],[11,"fmt","","",631,null],[11,"hash","","",631,null],[11,"decode","","",631,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",631,null],[11,"eq","","",631,null],[11,"ne","","",631,null],[11,"clone","","",631,null],[11,"fmt","","",632,null],[11,"hash","","",632,null],[11,"decode","","",632,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",632,null],[11,"eq","","",632,null],[11,"ne","","",632,null],[11,"clone","","",632,null],[11,"fmt","","",633,null],[11,"hash","","",633,null],[11,"decode","","",633,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",633,null],[11,"eq","","",633,null],[11,"clone","","",633,null],[11,"fmt","","",634,null],[11,"hash","","",634,null],[11,"decode","","",634,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",634,null],[11,"eq","","",634,null],[11,"clone","","",634,null],[11,"to_string","","",634,null],[11,"lazy","","",634,null],[11,"is_shift","","",634,null],[11,"is_comparison","","",634,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",634,null],[11,"fmt","","",635,null],[11,"hash","","",635,null],[11,"decode","","",635,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",635,null],[11,"eq","","",635,null],[11,"clone","","",635,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",635,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",635,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"fmt","syntax::codemap","",636,null],[11,"hash","syntax::ast","",637,null],[11,"decode","","",637,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",637,null],[11,"eq","","",637,null],[11,"ne","","",637,null],[11,"clone","","",637,null],[11,"id","","",637,null],[11,"attrs","","",637,null],[11,"fmt","","",638,null],[11,"hash","","",638,null],[11,"decode","","",638,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",638,null],[11,"eq","","",638,null],[11,"clone","","",638,null],[11,"fmt","","",639,null],[11,"hash","","",639,null],[11,"decode","","",639,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",639,null],[11,"eq","","",639,null],[11,"ne","","",639,null],[11,"clone","","",639,null],[11,"attrs","","",639,null],[11,"fmt","","",640,null],[11,"hash","","",640,null],[11,"decode","","",640,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",640,null],[11,"eq","","",640,null],[11,"ne","","",640,null],[11,"clone","","",640,null],[11,"attrs","syntax::codemap","",636,null],[11,"fmt","syntax::ast","",641,null],[11,"hash","","",641,null],[11,"decode","","",641,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",641,null],[11,"eq","","",641,null],[11,"ne","","",641,null],[11,"clone","","",641,null],[11,"fmt","","",642,null],[11,"hash","","",642,null],[11,"decode","","",642,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",642,null],[11,"eq","","",642,null],[11,"ne","","",642,null],[11,"clone","","",642,null],[11,"fmt","","",643,null],[11,"hash","","",643,null],[11,"decode","","",643,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",643,null],[11,"eq","","",643,null],[11,"ne","","",643,null],[11,"clone","","",643,null],[11,"fmt","","",644,null],[11,"hash","","",644,null],[11,"decode","","",644,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",644,null],[11,"eq","","",644,null],[11,"clone","","",644,null],[11,"hash","","",645,null],[11,"decode","","",645,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",645,null],[11,"eq","","",645,null],[11,"ne","","",645,null],[11,"clone","","",645,null],[11,"attrs","","",645,null],[11,"fmt","","",645,null],[11,"fmt","","",646,null],[11,"hash","","",646,null],[11,"decode","","",646,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",646,null],[11,"eq","","",646,null],[11,"clone","","",646,null],[11,"fmt","","",647,null],[11,"hash","","",647,null],[11,"decode","","",647,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",647,null],[11,"eq","","",647,null],[11,"ne","","",647,null],[11,"clone","","",647,null],[11,"fmt","","",648,null],[11,"hash","","",648,null],[11,"decode","","",648,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",648,null],[11,"eq","","",648,null],[11,"ne","","",648,null],[11,"clone","","",648,null],[11,"fmt","","",649,null],[11,"hash","","",649,null],[11,"decode","","",649,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",649,null],[11,"eq","","",649,null],[11,"clone","","",649,null],[11,"fmt","","",650,null],[11,"hash","","",650,null],[11,"decode","","",650,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",650,null],[11,"eq","","",650,null],[11,"ne","","",650,null],[11,"clone","","",650,null],[11,"open_token","","Returns the opening delimiter as a token.",650,null],[11,"close_token","","Returns the closing delimiter as a token.",650,null],[11,"open_tt","","Returns the opening delimiter as a token tree.",650,null],[11,"close_tt","","Returns the closing delimiter as a token tree.",650,null],[11,"fmt","","",651,null],[11,"hash","","",651,null],[11,"decode","","",651,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",651,null],[11,"eq","","",651,null],[11,"ne","","",651,null],[11,"clone","","",651,null],[11,"fmt","","",652,null],[11,"hash","","",652,null],[11,"decode","","",652,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",652,null],[11,"eq","","",652,null],[11,"clone","","",652,null],[11,"fmt","","",653,null],[11,"hash","","",653,null],[11,"decode","","",653,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",653,null],[11,"eq","","",653,null],[11,"ne","","",653,null],[11,"clone","","",653,null],[11,"len","","",653,null],[11,"get_tt","","",653,null],[11,"get_span","","Returns the `Span` corresponding to this token tree.",653,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",653,null],[11,"fmt","","",654,null],[11,"hash","","",654,null],[11,"decode","","",654,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",654,null],[11,"eq","","",654,null],[11,"ne","","",654,null],[11,"clone","","",654,null],[11,"fmt","","",655,null],[11,"hash","","",655,null],[11,"decode","","",655,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",655,null],[11,"eq","","",655,null],[11,"ne","","",655,null],[11,"clone","","",655,null],[11,"fmt","","",656,null],[11,"hash","","",656,null],[11,"decode","","",656,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",656,null],[11,"eq","","",656,null],[11,"ne","","",656,null],[11,"clone","","",656,null],[11,"fmt","","",657,null],[11,"hash","","",657,null],[11,"decode","","",657,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",657,null],[11,"eq","","",657,null],[11,"ne","","",657,null],[11,"clone","","",657,null],[11,"is_str","","Returns true if this literal is a string and false otherwise.",657,null],[11,"fmt","","",658,null],[11,"hash","","",658,null],[11,"decode","","",658,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",658,null],[11,"eq","","",658,null],[11,"ne","","",658,null],[11,"clone","","",658,null],[11,"fmt","","",659,null],[11,"hash","","",659,null],[11,"decode","","",659,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",659,null],[11,"eq","","",659,null],[11,"ne","","",659,null],[11,"clone","","",659,null],[11,"fmt","","",660,null],[11,"hash","","",660,null],[11,"decode","","",660,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",660,null],[11,"eq","","",660,null],[11,"ne","","",660,null],[11,"clone","","",660,null],[11,"fmt","","",661,null],[11,"hash","","",661,null],[11,"decode","","",661,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",661,null],[11,"eq","","",661,null],[11,"ne","","",661,null],[11,"clone","","",661,null],[11,"fmt","","",662,null],[11,"hash","","",662,null],[11,"decode","","",662,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",662,null],[11,"eq","","",662,null],[11,"ne","","",662,null],[11,"clone","","",662,null],[11,"fmt","","",663,null],[11,"hash","","",663,null],[11,"decode","","",663,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",663,null],[11,"eq","","",663,null],[11,"ne","","",663,null],[11,"clone","","",663,null],[11,"hash","","",664,null],[11,"decode","","",664,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",664,null],[11,"eq","","",664,null],[11,"clone","","",664,null],[11,"fmt","","",664,null],[11,"fmt","","",664,null],[11,"ty_to_string","","",664,null],[11,"val_to_string","","",664,null],[11,"ty_max","","",664,null],[11,"bit_width","","",664,null],[11,"hash","","",665,null],[11,"decode","","",665,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",665,null],[11,"eq","","",665,null],[11,"clone","","",665,null],[11,"ty_to_string","","",665,null],[11,"val_to_string","","",665,null],[11,"ty_max","","",665,null],[11,"bit_width","","",665,null],[11,"fmt","","",665,null],[11,"fmt","","",665,null],[11,"hash","","",149,null],[11,"decode","","",149,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",149,null],[11,"eq","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",149,null],[11,"fmt","","",149,null],[11,"ty_to_string","","",149,null],[11,"bit_width","","",149,null],[11,"fmt","","",666,null],[11,"hash","","",666,null],[11,"decode","","",666,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",666,null],[11,"eq","","",666,null],[11,"ne","","",666,null],[11,"clone","","",666,null],[11,"hash","","",667,null],[11,"decode","","",667,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",667,null],[11,"eq","","",667,null],[11,"ne","","",667,null],[11,"clone","","",667,null],[11,"fmt","","",667,null],[11,"fmt","","",668,null],[11,"hash","","",668,null],[11,"decode","","",668,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",668,null],[11,"eq","","",668,null],[11,"ne","","",668,null],[11,"clone","","",668,null],[11,"fmt","","",669,null],[11,"hash","","",669,null],[11,"decode","","",669,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",669,null],[11,"eq","","",669,null],[11,"ne","","",669,null],[11,"clone","","",669,null],[11,"fmt","","",670,null],[11,"hash","","",670,null],[11,"decode","","",670,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",670,null],[11,"eq","","",670,null],[11,"clone","","",670,null],[11,"fmt","","",671,null],[11,"hash","","",671,null],[11,"decode","","",671,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",671,null],[11,"eq","","",671,null],[11,"ne","","",671,null],[11,"clone","","",671,null],[11,"fmt","","",672,null],[11,"hash","","",672,null],[11,"decode","","",672,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",672,null],[11,"eq","","",672,null],[11,"ne","","",672,null],[11,"clone","","",672,null],[11,"fmt","","",673,null],[11,"hash","","",673,null],[11,"decode","","",673,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",673,null],[11,"eq","","",673,null],[11,"ne","","",673,null],[11,"clone","","",673,null],[11,"fmt","","",674,null],[11,"hash","","",674,null],[11,"decode","","",674,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",674,null],[11,"eq","","",674,null],[11,"ne","","",674,null],[11,"clone","","",674,null],[11,"new_self","","",673,{"inputs":[{"name":"span"},{"name":"mutability"},{"name":"ident"}],"output":{"name":"arg"}}],[11,"to_self","","",673,null],[11,"from_self","","",673,{"inputs":[{"name":"spanned"},{"name":"span"},{"name":"mutability"}],"output":{"name":"arg"}}],[11,"fmt","","",675,null],[11,"hash","","",675,null],[11,"decode","","",675,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",675,null],[11,"eq","","",675,null],[11,"ne","","",675,null],[11,"clone","","",675,null],[11,"fmt","","",676,null],[11,"hash","","",676,null],[11,"decode","","",676,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",676,null],[11,"eq","","",676,null],[11,"clone","","",676,null],[11,"fmt","","",677,null],[11,"hash","","",677,null],[11,"decode","","",677,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",677,null],[11,"eq","","",677,null],[11,"clone","","",677,null],[11,"fmt","","",678,null],[11,"hash","","",678,null],[11,"decode","","",678,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",678,null],[11,"eq","","",678,null],[11,"clone","","",678,null],[11,"fmt","","",676,null],[11,"hash","","",679,null],[11,"decode","","",679,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",679,null],[11,"eq","","",679,null],[11,"clone","","",679,null],[11,"fmt","","",679,null],[11,"fmt","","",680,null],[11,"hash","","",680,null],[11,"decode","","",680,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",680,null],[11,"eq","","",680,null],[11,"ne","","",680,null],[11,"clone","","",680,null],[11,"span","","",680,null],[11,"fmt","","",681,null],[11,"hash","","",681,null],[11,"decode","","",681,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",681,null],[11,"eq","","",681,null],[11,"ne","","",681,null],[11,"clone","","",681,null],[11,"fmt","","",682,null],[11,"hash","","",682,null],[11,"decode","","",682,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",682,null],[11,"eq","","",682,null],[11,"ne","","",682,null],[11,"clone","","",682,null],[11,"fmt","","",683,null],[11,"hash","","",683,null],[11,"decode","","",683,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",683,null],[11,"eq","","",683,null],[11,"ne","","",683,null],[11,"clone","","",683,null],[11,"fmt","","",684,null],[11,"hash","","",684,null],[11,"decode","","",684,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",684,null],[11,"eq","","",684,null],[11,"ne","","",684,null],[11,"clone","","",684,null],[11,"fmt","","",685,null],[11,"hash","","",685,null],[11,"decode","","",685,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",685,null],[11,"eq","","",685,null],[11,"ne","","",685,null],[11,"clone","","",685,null],[11,"id","","",685,null],[11,"name","","",685,null],[11,"rename","","",685,null],[11,"fmt","","",686,null],[11,"hash","","",686,null],[11,"decode","","",686,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",686,null],[11,"eq","","",686,null],[11,"ne","","",686,null],[11,"clone","","",686,null],[11,"fmt","","",687,null],[11,"hash","","",687,null],[11,"decode","","",687,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",687,null],[11,"eq","","",687,null],[11,"clone","","",687,null],[11,"fmt","","",688,null],[11,"hash","","",688,null],[11,"decode","","",688,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",688,null],[11,"eq","","",688,null],[11,"ne","","",688,null],[11,"clone","","",688,null],[11,"fmt","","",689,null],[11,"hash","","",689,null],[11,"decode","","",689,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",689,null],[11,"eq","","",689,null],[11,"ne","","",689,null],[11,"clone","","",689,null],[11,"fmt","","",690,null],[11,"hash","","",690,null],[11,"decode","","",690,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",690,null],[11,"eq","","",690,null],[11,"ne","","",690,null],[11,"clone","","",690,null],[11,"fmt","","",691,null],[11,"hash","","",691,null],[11,"decode","","",691,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",691,null],[11,"eq","","",691,null],[11,"ne","","",691,null],[11,"clone","","",691,null],[11,"fmt","","",692,null],[11,"hash","","",692,null],[11,"decode","","",692,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",692,null],[11,"eq","","",692,null],[11,"ne","","",692,null],[11,"clone","","",692,null],[11,"fmt","","",693,null],[11,"hash","","",693,null],[11,"decode","","",693,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",693,null],[11,"eq","","",693,null],[11,"ne","","",693,null],[11,"clone","","",693,null],[11,"fmt","","",694,null],[11,"hash","","",694,null],[11,"decode","","",694,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",694,null],[11,"eq","","",694,null],[11,"ne","","",694,null],[11,"clone","","",694,null],[11,"fields","","",694,null],[11,"id","","",694,null],[11,"is_struct","","",694,null],[11,"is_tuple","","",694,null],[11,"is_unit","","",694,null],[11,"fmt","","",695,null],[11,"hash","","",695,null],[11,"decode","","",695,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",695,null],[11,"eq","","",695,null],[11,"ne","","",695,null],[11,"clone","","",695,null],[11,"attrs","","",695,null],[11,"fmt","","",696,null],[11,"hash","","",696,null],[11,"decode","","",696,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",696,null],[11,"eq","","",696,null],[11,"ne","","",696,null],[11,"clone","","",696,null],[11,"descriptive_variant","","",696,null],[11,"fmt","","",697,null],[11,"hash","","",697,null],[11,"decode","","",697,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",697,null],[11,"eq","","",697,null],[11,"ne","","",697,null],[11,"clone","","",697,null],[11,"fmt","","",698,null],[11,"hash","","",698,null],[11,"decode","","",698,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",698,null],[11,"eq","","",698,null],[11,"ne","","",698,null],[11,"clone","","",698,null],[11,"descriptive_variant","","",698,null],[11,"fmt","","",699,null],[11,"hash","","",699,null],[11,"decode","","",699,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",699,null],[11,"eq","","",699,null],[11,"ne","","",699,null],[11,"clone","","",699,null],[11,"clone","syntax::ext::base","",700,null],[11,"fmt","","",700,null],[11,"attrs","","",700,null],[11,"fold_attrs","","",700,null],[11,"expect_item","","",700,null],[11,"map_item_or","","",700,null],[11,"expect_trait_item","","",700,null],[11,"expect_impl_item","","",700,null],[11,"default","","",701,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",701,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",701,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",701,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",701,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",701,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",701,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",701,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",701,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",701,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",701,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",701,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",701,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",702,null],[11,"any","","Create a default MacResult that can be anything.",702,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",702,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",702,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",702,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",702,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",702,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",702,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",702,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",702,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",702,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"new","","",703,{"inputs":[],"output":{"name":"blockinfo"}}],[11,"new","","",704,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"expansionconfig"},{"name":"vec"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",704,null],[11,"new_parser_from_tts","","",704,null],[11,"codemap","","",704,null],[11,"parse_sess","","",704,null],[11,"cfg","","",704,null],[11,"call_site","","",704,null],[11,"backtrace","","",704,null],[11,"original_span","","Original span that caused the current exapnsion to happen.",704,null],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",704,null],[11,"mod_push","","",704,null],[11,"mod_pop","","",704,null],[11,"mod_path","","",704,null],[11,"bt_push","","",704,null],[11,"bt_pop","","",704,null],[11,"insert_macro","","",704,null],[11,"struct_span_warn","","",704,null],[11,"struct_span_err","","",704,null],[11,"struct_span_fatal","","",704,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",704,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",704,null],[11,"span_warn","","",704,null],[11,"span_unimpl","","",704,null],[11,"span_bug","","",704,null],[11,"bug","","",704,null],[11,"trace_macros","","",704,null],[11,"set_trace_macros","","",704,null],[11,"ident_of","","",704,null],[11,"std_path","","",704,null],[11,"name_of","","",704,null],[11,"suggest_macro_name","","",704,null],[11,"push_frame","","",705,null],[11,"pop_frame","","",705,null],[11,"find","","",705,null],[11,"insert","","",705,null],[11,"info","","",705,null],[11,"path","","",704,null],[11,"path_ident","","",704,null],[11,"path_global","","",704,null],[11,"path_all","","",704,null],[11,"qpath","","Constructs a qualified path.",704,null],[11,"qpath_all","","Constructs a qualified path.",704,null],[11,"ty_mt","","",704,null],[11,"ty","","",704,null],[11,"ty_path","","",704,null],[11,"ty_sum","","",704,null],[11,"ty_ident","","",704,null],[11,"ty_rptr","","",704,null],[11,"ty_ptr","","",704,null],[11,"ty_option","","",704,null],[11,"ty_infer","","",704,null],[11,"typaram","","",704,null],[11,"ty_vars","","",704,null],[11,"ty_vars_global","","",704,null],[11,"trait_ref","","",704,null],[11,"poly_trait_ref","","",704,null],[11,"typarambound","","",704,null],[11,"lifetime","","",704,null],[11,"lifetime_def","","",704,null],[11,"stmt_expr","","",704,null],[11,"stmt_let","","",704,null],[11,"stmt_let_typed","","",704,null],[11,"block","","",704,null],[11,"stmt_item","","",704,null],[11,"block_expr","","",704,null],[11,"block_all","","",704,null],[11,"expr","","",704,null],[11,"expr_path","","",704,null],[11,"expr_qpath","","Constructs a QPath expression.",704,null],[11,"expr_ident","","",704,null],[11,"expr_self","","",704,null],[11,"expr_binary","","",704,null],[11,"expr_deref","","",704,null],[11,"expr_unary","","",704,null],[11,"expr_field_access","","",704,null],[11,"expr_tup_field_access","","",704,null],[11,"expr_addr_of","","",704,null],[11,"expr_mut_addr_of","","",704,null],[11,"expr_call","","",704,null],[11,"expr_call_ident","","",704,null],[11,"expr_call_global","","",704,null],[11,"expr_method_call","","",704,null],[11,"expr_block","","",704,null],[11,"field_imm","","",704,null],[11,"expr_struct","","",704,null],[11,"expr_struct_ident","","",704,null],[11,"expr_lit","","",704,null],[11,"expr_usize","","",704,null],[11,"expr_isize","","",704,null],[11,"expr_u32","","",704,null],[11,"expr_u8","","",704,null],[11,"expr_bool","","",704,null],[11,"expr_vec","","",704,null],[11,"expr_vec_ng","","",704,null],[11,"expr_vec_slice","","",704,null],[11,"expr_str","","",704,null],[11,"expr_cast","","",704,null],[11,"expr_some","","",704,null],[11,"expr_none","","",704,null],[11,"expr_break","","",704,null],[11,"expr_tuple","","",704,null],[11,"expr_fail","","",704,null],[11,"expr_unreachable","","",704,null],[11,"expr_ok","","",704,null],[11,"expr_err","","",704,null],[11,"expr_try","","",704,null],[11,"pat","","",704,null],[11,"pat_wild","","",704,null],[11,"pat_lit","","",704,null],[11,"pat_ident","","",704,null],[11,"pat_ident_binding_mode","","",704,null],[11,"pat_enum","","",704,null],[11,"pat_struct","","",704,null],[11,"pat_tuple","","",704,null],[11,"pat_some","","",704,null],[11,"pat_none","","",704,null],[11,"pat_ok","","",704,null],[11,"pat_err","","",704,null],[11,"arm","","",704,null],[11,"arm_unreachable","","",704,null],[11,"expr_match","","",704,null],[11,"expr_if","","",704,null],[11,"expr_loop","","",704,null],[11,"lambda_fn_decl","","",704,null],[11,"lambda","","",704,null],[11,"lambda0","","",704,null],[11,"lambda1","","",704,null],[11,"lambda_expr","","",704,null],[11,"lambda_expr_0","","",704,null],[11,"lambda_expr_1","","",704,null],[11,"lambda_stmts","","",704,null],[11,"lambda_stmts_0","","",704,null],[11,"lambda_stmts_1","","",704,null],[11,"arg","","",704,null],[11,"fn_decl","","",704,null],[11,"item","","",704,null],[11,"item_fn_poly","","",704,null],[11,"item_fn","","",704,null],[11,"variant","","",704,null],[11,"item_enum_poly","","",704,null],[11,"item_enum","","",704,null],[11,"item_struct","","",704,null],[11,"item_struct_poly","","",704,null],[11,"item_mod","","",704,null],[11,"item_static","","",704,null],[11,"item_const","","",704,null],[11,"item_ty_poly","","",704,null],[11,"item_ty","","",704,null],[11,"attribute","","",704,null],[11,"meta_word","","",704,null],[11,"meta_list","","",704,null],[11,"meta_name_value","","",704,null],[11,"item_use","","",704,null],[11,"item_use_simple","","",704,null],[11,"item_use_simple_","","",704,null],[11,"item_use_list","","",704,null],[11,"item_use_glob","","",704,null],[11,"fold_ident","syntax::ext::expand","",706,null],[11,"fold_mac","","",706,null],[11,"fold_pat","","",707,null],[11,"fold_mac","","",707,null],[11,"new","","",708,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_crate","","",708,null],[11,"fold_expr","","",708,null],[11,"fold_pat","","",708,null],[11,"fold_item","","",708,null],[11,"fold_item_kind","","",708,null],[11,"fold_stmt","","",708,null],[11,"fold_block","","",708,null],[11,"fold_arm","","",708,null],[11,"fold_trait_item","","",708,null],[11,"fold_impl_item","","",708,null],[11,"fold_ty","","",708,null],[11,"new_span","","",708,null],[11,"default","","",709,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",709,null],[11,"enable_asm","","",709,null],[11,"enable_log_syntax","","",709,null],[11,"enable_concat_idents","","",709,null],[11,"enable_trace_macros","","",709,null],[11,"enable_allow_internal_unstable","","",709,null],[11,"enable_custom_derive","","",709,null],[11,"enable_pushpop_unsafe","","",709,null],[11,"clone","syntax::ext::mtwt","",710,null],[11,"fmt","","",710,null],[11,"hash","","",710,null],[11,"decode","","",710,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",710,null],[11,"eq","","",710,null],[11,"ne","","",710,null],[11,"to_tokens","syntax::ast","",653,null],[11,"to_tokens","collections::vec","",241,null],[11,"to_tokens","syntax::codemap","",636,null],[11,"to_tokens","core::option","",382,null],[11,"to_tokens","syntax::ast","",609,null],[11,"to_tokens","","",612,null],[11,"to_tokens","","",667,null],[11,"to_tokens","","",628,null],[11,"to_tokens","","",620,null],[11,"to_tokens","","",621,null],[11,"to_tokens","syntax::ptr","",389,null],[11,"to_tokens","syntax::ast","",662,null],[11,"to_tokens","syntax::ptr","",389,null],[11,"to_tokens","syntax::ast","",660,null],[11,"to_tokens","syntax::codemap","",636,null],[11,"to_tokens","syntax::ptr","",389,null],[11,"to_tokens","","",389,null],[11,"to_tokens","syntax::ast","",641,null],[11,"to_tokens","","",673,null],[11,"to_tokens","syntax::ptr","",389,null],[11,"to_tokens","","",389,null],[11,"to_tokens","syntax::codemap","",636,null],[11,"to_tokens","","",636,null],[11,"parse_item","syntax::ext::base","",704,null],[11,"parse_stmt","","",704,null],[11,"parse_expr","","",704,null],[11,"parse_tts","","",704,null],[11,"clone","syntax::ext::tt::transcribe","",595,null],[11,"clone","syntax::ext::tt::macro_parser","",711,null],[11,"fmt","syntax::abi","",712,null],[11,"eq","","",712,null],[11,"clone","","",712,null],[11,"fmt","","",359,null],[11,"clone","","",359,null],[11,"decode","","",359,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",359,null],[11,"hash","","",359,null],[11,"eq","","",359,null],[11,"fmt","","",713,null],[11,"eq","","",713,null],[11,"clone","","",713,null],[11,"clone","","",714,null],[11,"clone","","",715,null],[11,"fmt","","",359,null],[11,"fmt","","",712,null],[11,"check_name","syntax::codemap","",636,null],[11,"name","","",636,null],[11,"value_str","","",636,null],[11,"meta_item_list","","",636,null],[11,"span","","",636,null],[11,"name","","",636,null],[11,"value_str","","",636,null],[11,"meta_item_list","","",636,null],[11,"span","","",636,null],[11,"name","syntax::ptr","",389,null],[11,"value_str","","",389,null],[11,"meta_item_list","","",389,null],[11,"span","","",389,null],[11,"meta","syntax::codemap","Extract the MetaItem from inside this Attribute.",636,null],[11,"with_desugared_doc","","Convert self to a normal #[doc=&quot;foo&quot;] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",636,null],[11,"eq","syntax::attr","",716,null],[11,"clone","","",716,null],[11,"hash","","",717,null],[11,"eq","","",717,null],[11,"ne","","",717,null],[11,"fmt","","",717,null],[11,"clone","","",717,null],[11,"decode","","",717,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",717,null],[11,"hash","","",718,null],[11,"fmt","","",718,null],[11,"clone","","",718,null],[11,"partial_cmp","","",718,null],[11,"lt","","",718,null],[11,"le","","",718,null],[11,"gt","","",718,null],[11,"ge","","",718,null],[11,"eq","","",718,null],[11,"ne","","",718,null],[11,"decode","","",718,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",718,null],[11,"hash","","",719,null],[11,"fmt","","",719,null],[11,"clone","","",719,null],[11,"partial_cmp","","",719,null],[11,"lt","","",719,null],[11,"le","","",719,null],[11,"gt","","",719,null],[11,"ge","","",719,null],[11,"eq","","",719,null],[11,"ne","","",719,null],[11,"decode","","",719,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",719,null],[11,"hash","","",720,null],[11,"fmt","","",720,null],[11,"clone","","",720,null],[11,"partial_cmp","","",720,null],[11,"lt","","",720,null],[11,"le","","",720,null],[11,"gt","","",720,null],[11,"ge","","",720,null],[11,"eq","","",720,null],[11,"ne","","",720,null],[11,"decode","","",720,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",720,null],[11,"is_unstable","","",718,null],[11,"is_stable","","",718,null],[11,"clone","","",721,null],[11,"decode","","",721,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",721,null],[11,"fmt","","",721,null],[11,"eq","","",721,null],[11,"ne","","",721,null],[11,"is_ffi_safe","","",721,null],[11,"clone","","",375,null],[11,"decode","","",375,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",375,null],[11,"fmt","","",375,null],[11,"eq","","",375,null],[11,"ne","","",375,null],[11,"hash","","",375,null],[11,"is_signed","","",375,null],[11,"map_thin_attrs","core::option","",382,null],[11,"prepend","","",382,null],[11,"append","","",382,null],[11,"update","","",382,null],[11,"as_attr_slice","","",382,null],[11,"into_attr_vec","","",382,null],[11,"into_thin_attrs","collections::vec","",241,null],[11,"with_attrs","syntax::ptr","",389,null],[11,"with_attrs","","",389,null],[11,"with_attrs","","",389,null],[11,"with_attrs","","",389,null],[11,"with_attrs","","",389,null],[11,"fmt","syntax::codemap","",722,null],[11,"cmp","","",722,null],[11,"partial_cmp","","",722,null],[11,"lt","","",722,null],[11,"le","","",722,null],[11,"gt","","",722,null],[11,"ge","","",722,null],[11,"hash","","",722,null],[11,"eq","","",722,null],[11,"ne","","",722,null],[11,"clone","","",722,null],[11,"fmt","","",723,null],[11,"cmp","","",723,null],[11,"partial_cmp","","",723,null],[11,"lt","","",723,null],[11,"le","","",723,null],[11,"gt","","",723,null],[11,"ge","","",723,null],[11,"hash","","",723,null],[11,"eq","","",723,null],[11,"ne","","",723,null],[11,"clone","","",723,null],[11,"from_usize","","",722,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",722,null],[11,"add","","",722,null],[11,"sub","","",722,null],[11,"encode","","",722,null],[11,"decode","","",722,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",723,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",723,null],[11,"add","","",723,null],[11,"sub","","",723,null],[11,"eq","","",724,null],[11,"ne","","",724,null],[11,"hash","","",724,null],[11,"clone","","",724,null],[11,"clone","","",725,null],[11,"fmt","","",726,null],[11,"clone","","",726,null],[11,"end_point","","Returns a new span representing just the end-point of this span",724,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",724,null],[11,"contains","","",724,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",724,null],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",724,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",724,null],[11,"fmt","","",636,null],[11,"hash","","",636,null],[11,"decode","","",636,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",636,null],[11,"eq","","",636,null],[11,"ne","","",636,null],[11,"clone","","",636,null],[11,"encode","","",724,null],[11,"decode","","",724,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",724,null],[11,"new","","",725,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",725,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",725,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",725,null],[11,"primary_span","","Selects the first primary span (if any)",725,null],[11,"primary_spans","","Returns all primary spans.",725,null],[11,"span_labels","","Returns the strings to highlight. We always ensure that there\nis an entry for each of the primary spans -- for each primary\nspan P, if there is at least one label with span P, we return\nthose labels (marked as primary). But otherwise we return\n`SpanLabel` instances with empty labels.",725,null],[11,"from","","",725,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"fmt","","",727,null],[11,"fmt","","",728,null],[11,"fmt","","",729,null],[11,"fmt","","",730,null],[11,"eq","","",731,null],[11,"ne","","",731,null],[11,"fmt","","",731,null],[11,"hash","","",731,null],[11,"clone","","",731,null],[11,"fmt","","",732,null],[11,"hash","","",732,null],[11,"clone","","",732,null],[11,"name","","",732,null],[11,"fmt","","",733,null],[11,"hash","","",733,null],[11,"decode","","",734,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",734,null],[11,"hash","","",734,null],[11,"fmt","","",734,null],[11,"clone","","",734,null],[11,"eq","","",734,null],[11,"ne","","",734,null],[11,"from_u32","","",734,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",734,null],[11,"eq","","",735,null],[11,"ne","","",735,null],[11,"fmt","","",735,null],[11,"clone","","",735,null],[11,"eq","","",736,null],[11,"ne","","",736,null],[11,"decode","","",736,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",736,null],[11,"clone","","",736,null],[11,"encode","","",737,null],[11,"decode","","",737,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",737,null],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",737,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",737,null],[11,"record_multibyte_char","","",737,null],[11,"is_real_file","","",737,null],[11,"is_imported","","",737,null],[11,"file_exists","","",738,null],[11,"read_file","","",738,null],[11,"new","","",739,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",739,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",739,null],[11,"load_file","","",739,null],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don&#39;t\nintend to set the line information yourself, you should use new_filemap_and_lines.",739,null],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",739,null],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an &quot;imported filemap&quot; is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",739,null],[11,"mk_substr_filename","","",739,null],[11,"lookup_char_pos","","Lookup source information about a BytePos",739,null],[11,"lookup_char_pos_adj","","",739,null],[11,"span_to_string","","",739,null],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",739,null],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for\nthe macro callsite that expanded to it.",739,null],[11,"source_callee","","Return the source callee.",739,null],[11,"span_to_filename","","",739,null],[11,"span_to_lines","","",739,null],[11,"span_to_snippet","","",739,null],[11,"get_filemap","","",739,null],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",739,null],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",739,null],[11,"more_specific_trace","","Check if the backtrace `subtrace` contains `suptrace` as a prefix.",739,null],[11,"record_expansion","","",739,null],[11,"with_expn_info","","",739,null],[11,"span_allows_unstable","","Check if a span is &quot;internal&quot; to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",739,null],[11,"count_lines","","",739,null],[11,"macro_backtrace","","",739,null],[11,"fmt","","",740,null],[11,"eq","","",740,null],[11,"ne","","",740,null],[11,"clone","","",740,null],[11,"fmt","","",741,null],[11,"eq","","",741,null],[11,"ne","","",741,null],[11,"clone","","",741,null],[11,"fmt","","",742,null],[11,"eq","","",742,null],[11,"ne","","",742,null],[11,"clone","","",742,null],[11,"fmt","","",743,null],[11,"eq","","",743,null],[11,"ne","","",743,null],[11,"clone","","",743,null],[11,"emit_error","syntax::config","",744,null],[11,"flag_gated","","",744,null],[11,"new","syntax::feature_gate","",745,{"inputs":[],"output":{"name":"features"}}],[11,"fmt","","",746,null],[11,"clone","","",746,null],[11,"eq","","",746,null],[11,"fmt","","",747,null],[11,"eq","","",748,null],[11,"ne","","",748,null],[11,"fmt","","",748,null],[11,"eq","","",749,null],[11,"ne","","",749,null],[11,"fmt","","",749,null],[11,"cmp","","",748,null],[11,"partial_cmp","","",748,null],[11,"check_and_emit","","",748,null],[11,"gate","","",749,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"clone","","",750,null],[11,"cmp","syntax::ptr","",389,null],[11,"partial_cmp","","",389,null],[11,"lt","","",389,null],[11,"le","","",389,null],[11,"gt","","",389,null],[11,"ge","","",389,null],[11,"eq","","",389,null],[11,"ne","","",389,null],[11,"hash","","",389,null],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",389,null],[11,"unwrap","","Equivalent to and_then(|x| x)",389,null],[11,"map","","Transform the inner value, consuming `self` and producing a new `P&lt;T&gt;`.",389,null],[11,"deref","","",389,null],[11,"clone","","",389,null],[11,"fmt","","",389,null],[11,"fmt","","",389,null],[11,"fmt","","",389,null],[11,"decode","","",389,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",389,null],[11,"new","","",389,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",389,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",389,null],[11,"default","","",389,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",389,null],[11,"from","","",389,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into","","",389,null],[11,"from_iter","","",389,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",389,null],[11,"encode","","",389,null],[11,"decode","","",389,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","syntax::visit","",751,null],[11,"ne","","",751,null],[11,"clone","","",751,null],[11,"eq","syntax::print::pp","",752,null],[11,"clone","","",752,null],[11,"clone","","",753,null],[11,"clone","","",754,null],[11,"clone","","",755,null],[11,"is_eof","","",755,null],[11,"is_hardbreak_tok","","",755,null],[11,"fmt","","",755,null],[11,"clone","","",756,null],[11,"clone","","",757,null],[11,"last_token","","",758,null],[11,"replace_last_token","","",758,null],[11,"pretty_print","","",758,null],[11,"check_stream","","",758,null],[11,"scan_push","","",758,null],[11,"scan_pop","","",758,null],[11,"scan_top","","",758,null],[11,"scan_pop_bottom","","",758,null],[11,"advance_right","","",758,null],[11,"advance_left","","",758,null],[11,"check_stack","","",758,null],[11,"print_newline","","",758,null],[11,"indent","","",758,null],[11,"get_top","","",758,null],[11,"print_str","","",758,null],[11,"print","","",758,null],[11,"clone","syntax::print::pprust","",759,null],[11,"clone","","",760,null],[11,"new_from_input","","",761,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",761,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",761,null],[11,"boxes","","",761,null],[11,"comments","","",761,null],[11,"cur_cmnt_and_lit","","",761,null],[11,"literals","","",761,null],[11,"cbox","","",761,null],[11,"word_nbsp","","",761,null],[11,"head","","",761,null],[11,"bopen","","",761,null],[11,"bclose_","","",761,null],[11,"bclose_maybe_open","","",761,null],[11,"bclose","","",761,null],[11,"in_cbox","","",761,null],[11,"break_offset_if_not_bol","","",761,null],[11,"synth_comment","","",761,null],[11,"commasep_cmnt","","",761,null],[11,"commasep_exprs","","",761,null],[11,"print_mod","","",761,null],[11,"print_foreign_mod","","",761,null],[11,"print_opt_lifetime","","",761,null],[11,"print_type","","",761,null],[11,"print_foreign_item","","",761,null],[11,"print_item","","Pretty-print an item",761,null],[11,"print_enum_def","","",761,null],[11,"print_variants","","",761,null],[11,"print_visibility","","",761,null],[11,"print_struct","","",761,null],[11,"print_tt","","This doesn&#39;t deserve to be called &quot;pretty&quot; printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it&#39;d be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",761,null],[11,"print_tts","","",761,null],[11,"print_variant","","",761,null],[11,"print_method_sig","","",761,null],[11,"print_trait_item","","",761,null],[11,"print_impl_item","","",761,null],[11,"print_stmt","","",761,null],[11,"print_block","","",761,null],[11,"print_block_unclosed","","",761,null],[11,"print_block_unclosed_with_attrs","","",761,null],[11,"print_block_unclosed_indent","","",761,null],[11,"print_block_with_attrs","","",761,null],[11,"print_block_maybe_unclosed","","",761,null],[11,"print_if","","",761,null],[11,"print_if_let","","",761,null],[11,"print_mac","","",761,null],[11,"check_expr_bin_needs_paren","","",761,null],[11,"print_expr_maybe_paren","","",761,null],[11,"print_expr","","",761,null],[11,"print_local_decl","","",761,null],[11,"print_decl","","",761,null],[11,"print_ident","","",761,null],[11,"print_usize","","",761,null],[11,"print_name","","",761,null],[11,"print_for_decl","","",761,null],[11,"print_pat","","",761,null],[11,"print_fn","","",761,null],[11,"print_fn_args","","",761,null],[11,"print_fn_args_and_ret","","",761,null],[11,"print_fn_block_args","","",761,null],[11,"print_capture_clause","","",761,null],[11,"print_bounds","","",761,null],[11,"print_lifetime","","",761,null],[11,"print_lifetime_def","","",761,null],[11,"print_generics","","",761,null],[11,"print_ty_param","","",761,null],[11,"print_where_clause","","",761,null],[11,"print_view_path","","",761,null],[11,"print_mutability","","",761,null],[11,"print_mt","","",761,null],[11,"print_arg","","",761,null],[11,"print_fn_output","","",761,null],[11,"print_ty_fn","","",761,null],[11,"maybe_print_trailing_comment","","",761,null],[11,"print_remaining_comments","","",761,null],[11,"print_opt_abi_and_extern_if_nondefault","","",761,null],[11,"print_extern_opt_abi","","",761,null],[11,"print_fn_header_info","","",761,null],[11,"print_unsafety","","",761,null],[11,"clone","rustc_trans","",544,null],[11,"eq","","",544,null],[11,"ne","","",544,null],[11,"fmt","","",544,null],[11,"wrapping_add","","",544,null],[11,"bitand","","",544,null],[11,"from","","",544,{"inputs":[{"name":"disr"}],"output":{"name":"disr"}}],[11,"from","","",544,{"inputs":[{"name":"usize"}],"output":{"name":"disr"}}],[11,"partial_cmp","","",544,null],[11,"cmp","","",544,null],[17,"DIAGNOSTICS","","",null,null],[11,"clone","","",545,null]],"paths":[[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFGEdgeData"],[3,"CFG"],[4,"DepNode"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[3,"DepGraphQuery"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefIndex"],[3,"DefId"],[4,"FnKind"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[3,"IdVisitor"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"FnLikeNode"],[3,"Item"],[3,"TraitItem"],[3,"Expr"],[4,"Code"],[3,"Definitions"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[4,"Node"],[4,"MapEntry"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"State"],[3,"NoAnn"],[3,"Svh"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[4,"SelfKind"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Bivariate"],[3,"CombineFields"],[3,"InferCtxt"],[4,"Result"],[3,"Equate"],[3,"TyCtxt"],[3,"TraitRef"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[3,"SameRegions"],[3,"RegionVarBindings"],[4,"VarValue"],[4,"Verify"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"IntVid"],[3,"RegionVidKey"],[3,"RegionVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[3,"TyVid"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"InferCtxtBuilder"],[3,"FnSig"],[4,"FnOutput"],[3,"ClosureSubsts"],[4,"LvalueTy"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LateContext"],[3,"EarlyContext"],[3,"GatherNodeLevels"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[3,"ChildItem"],[3,"ExternCrate"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[3,"DataFlowContext"],[4,"KillFrom"],[4,"Linkage"],[3,"FreeRegionMap"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[4,"deref_kind"],[3,"MemCategorizationContext"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[3,"CodeExtent"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[4,"Mutability"],[4,"BorrowKind"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[4,"TerminatorKind"],[3,"Statement"],[4,"StatementKind"],[4,"Lvalue"],[3,"Projection"],[4,"ProjectionElem"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[3,"ScopeData"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[3,"Constant"],[3,"TypedConstVal"],[4,"Literal"],[4,"LvalueContext"],[4,"MirSource"],[3,"Passes"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"TraitErrorKey"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[4,"ProjectionMode"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[3,"SelectionCache"],[4,"MethodMatchedData"],[3,"EvaluationCache"],[3,"SelectionContext"],[4,"MethodMatchResult"],[3,"Graph"],[4,"Node"],[4,"NodeItems"],[3,"Ancestors"],[3,"NodeItem"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"SpecializesCache"],[3,"Obligation"],[4,"Vtable"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[4,"SelectionError"],[3,"SupertraitDefIds"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[4,"AutoAdjustment"],[3,"AutoDerefRef"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[3,"TyS"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[3,"RegionFolder"],[4,"RootMode"],[3,"TargetDataLayout"],[4,"Endian"],[3,"Size"],[3,"Align"],[4,"Integer"],[4,"Primitive"],[3,"Struct"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[3,"TypeAndMut"],[4,"Abi"],[3,"ProjectionTy"],[3,"ProjectionPredicate"],[3,"ExistentialBounds"],[3,"BuiltinBounds"],[4,"Region"],[3,"Rc"],[3,"Box"],[3,"Substs"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"IntType"],[4,"CopyImplementationError"],[4,"Representability"],[3,"ParameterEnvironment"],[3,"TypeContents"],[3,"CtxtArenas"],[3,"Tables"],[4,"Option"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[4,"Predicate"],[3,"ItemSubsts"],[3,"ClosureTy"],[3,"P"],[3,"TraitTy"],[3,"ImplHeader"],[3,"TypeParameterDef"],[4,"ObjectLifetimeDefault"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ClosureUpvar"],[3,"TypeScheme"],[3,"FreeRegion"],[4,"BoundRegion"],[4,"TypeVariants"],[3,"TypeFlags"],[3,"BareFnTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"EarlyBoundRegion"],[3,"SkolemizedRegionVid"],[4,"InferTy"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[4,"BuiltinBound"],[3,"CrateAnalysis"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Visibility"],[3,"Method"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"ItemVariances"],[4,"Variance"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[4,"FragmentInfo"],[3,"UpvarId"],[4,"BorrowKind"],[4,"UpvarCapture"],[3,"UpvarBorrow"],[3,"AdtFlags"],[3,"AdtDefData"],[4,"AdtKind"],[4,"VariantKind"],[3,"VariantDefData"],[3,"FieldDefData"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"Sha256"],[3,"Config"],[8,"Delegate"],[4,"FoundAst"],[8,"CrateStore"],[8,"EncodingContext"],[8,"DecodingContext"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[8,"ast_node"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[8,"LintContext"],[3,"FutureIncompatibleInfo"],[8,"MemoizationMap"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"Outcome"],[3,"Error"],[3,"ObligationForest"],[3,"SnapshotVec"],[3,"TransitiveRelation"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[3,"VecCell"],[8,"ToPrimitive"],[3,"TempDir"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"],[8,"Digest"],[3,"Disr"],[3,"ModuleTranslation"],[3,"CrateTranslation"],[3,"RPathConfig"],[3,"ArchiveConfig"],[3,"ArchiveBuilder"],[3,"GnuLinker"],[3,"MsvcLinker"],[8,"Linker"],[3,"ModuleConfig"],[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[3,"Registry"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[4,"ColorConfig"],[3,"BasicEmitter"],[3,"EmitterWriter"],[3,"JsonEmitter"],[3,"SnippetData"],[3,"FileInfo"],[3,"RenderedLine"],[3,"StyledString"],[3,"StyledBuffer"],[4,"Style"],[4,"RenderedLineKind"],[4,"RenderSpan"],[3,"CodeSuggestion"],[3,"FatalError"],[3,"ExplicitBug"],[3,"DiagnosticBuilder"],[3,"Handler"],[4,"Level"],[3,"Restrictions"],[4,"PathStyle"],[4,"BoundParsingMode"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Parser"],[4,"CommentStyle"],[3,"Comment"],[3,"Literal"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"TtReader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[3,"ParseSess"],[3,"Name"],[3,"SyntaxContext"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[4,"MetaItemKind"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[3,"Spanned"],[4,"StmtKind"],[4,"MacStmtStyle"],[3,"Local"],[4,"DeclKind"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"Expr"],[4,"RangeLimits"],[4,"ExprKind"],[3,"QSelf"],[4,"CaptureBy"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[3,"Mac_"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[4,"TraitItemKind"],[3,"ImplItem"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[4,"TyKind"],[4,"AsmDialect"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[4,"SelfKind"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItemKind"],[4,"ViewPath_"],[4,"AttrStyle"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"Item"],[4,"ItemKind"],[3,"ForeignItem"],[4,"ForeignItemKind"],[3,"MacroDef"],[4,"Annotatable"],[3,"MacEager"],[3,"DummyResult"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[3,"MacroExpander"],[3,"ExpansionConfig"],[4,"SyntaxContext_"],[3,"MatcherPos"],[4,"Os"],[4,"Architecture"],[3,"AbiData"],[4,"AbiArchitecture"],[4,"InlineAttr"],[3,"Stability"],[4,"StabilityLevel"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"ReprAttr"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[3,"MultiSpan"],[3,"SpanLabel"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[4,"ExpnFormat"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"ExpnId"],[3,"LineInfo"],[3,"MultiByteChar"],[3,"FileMap"],[3,"RealFileLoader"],[3,"CodeMap"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"CfgDiagReal"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GatedCfgAttr"],[3,"GatedCfg"],[4,"UnstableFeatures"],[4,"FnKind"],[4,"Breaks"],[3,"BreakToken"],[3,"BeginToken"],[4,"Token"],[4,"PrintStackBreak"],[3,"PrintStackElem"],[3,"Printer"],[3,"NoAnn"],[3,"CurrentCommentAndLiteral"],[3,"State"]]};
searchIndex["rustc_borrowck"] = {"doc":"","items":[[3,"AnalysisData","rustc_borrowck","Collection of conclusions determined via borrow checker analyses.",null,null],[12,"all_loans","","",0,null],[12,"loans","","",0,null],[12,"move_data","","",0,null],[3,"BorrowckCtxt","","",null,null],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mirmap"}],"output":null}],[5,"build_borrowck_dataflow_data_for_fn","","Accessor for introspective clients inspecting `AnalysisData` and\nthe `BorrowckCtxt` itself , e.g. the flowgraph visualizer.",null,null],[0,"diagnostics","","",null,null],[11,"visit_fn","","",1,null],[11,"visit_item","","",1,null],[11,"visit_trait_item","","",1,null],[11,"visit_impl_item","","",1,null],[11,"is_subregion_of","","",1,null],[11,"report","","",1,null],[11,"report_use_of_moved_value","","",1,null],[11,"report_partial_reinitialization_of_uninitialized_structure","","",1,null],[11,"report_reassigned_immutable_variable","","",1,null],[11,"span_err","","",1,null],[11,"struct_span_err","","",1,null],[11,"struct_span_err_with_code","","",1,null],[11,"span_err_with_code","","",1,null],[11,"bckerr_to_string","","",1,null],[11,"report_aliasability_violation","","",1,null],[11,"note_and_explain_bckerr","","",1,null],[11,"append_loan_path_to_string","","",1,null],[11,"append_autoderefd_loan_path_to_string","","",1,null],[11,"loan_path_to_string","","",1,null],[11,"cmt_to_string","","",1,null],[11,"cmt_to_path_or_string","","",1,null],[0,"graphviz","","This module provides linkage between rustc::middle::graph and\nlibgraphviz traits, specialized to attaching borrowck analysis\ndata to rendered labels.",null,null],[11,"graph_id","rustc::cfg::graphviz","",2,null],[11,"node_id","","",2,null],[11,"node_label","","",2,null],[11,"edge_label","","",2,null],[11,"nodes","","",2,null],[11,"edges","","",2,null],[11,"source","","",2,null],[11,"target","","",2,null],[11,"eq","rustc::cfg","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"id","","",3,null],[11,"fmt","","",4,null],[11,"new","","",5,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",5,null],[11,"decode","rustc::dep_graph::dep_node","",6,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",6,null],[11,"hash","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"from_label_string","","Used in testing",6,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",6,null],[11,"new","rustc::dep_graph::dep_tracking_map","",7,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",7,null],[11,"insert","","",7,null],[11,"contains_key","","",7,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",8,null],[11,"index","rustc::dep_graph::dep_tracking_map","",7,null],[11,"clone","rustc::dep_graph::graph","",9,null],[11,"new","","",9,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",9,null],[11,"query","","",9,null],[11,"in_ignore","","",9,null],[11,"in_task","","",9,null],[11,"with_ignore","","",9,null],[11,"with_task","","",9,null],[11,"read","","",9,null],[11,"write","","",9,null],[11,"new","rustc::dep_graph::query","",10,null],[11,"contains_node","","",10,null],[11,"nodes","","",10,null],[11,"edges","","",10,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",10,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",10,null],[11,"fmt","rustc::hir::def","",11,null],[11,"hash","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",12,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",12,null],[11,"new","","",12,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",13,null],[11,"var_id","","",11,null],[11,"def_id","","",11,null],[11,"variant_def_ids","","",11,null],[11,"kind_name","","",11,null],[11,"hash","rustc::hir::def_id","",14,null],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"partial_cmp","","",14,null],[11,"lt","","",14,null],[11,"le","","",14,null],[11,"gt","","",14,null],[11,"ge","","",14,null],[11,"cmp","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"new","","",14,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",14,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",14,null],[11,"as_u32","","",14,null],[11,"hash","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"cmp","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"local","","",15,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",15,null],[11,"eq","rustc::hir::intravisit","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"attrs","","",16,null],[11,"fmt","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,null],[11,"clone","","",17,null],[11,"max","","",17,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",17,null],[11,"add","","",17,null],[11,"new","","",18,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",18,null],[11,"visit_id","","",18,null],[11,"new","","",19,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",19,null],[11,"visit_foreign_item","","",19,null],[11,"visit_item","","",19,null],[11,"visit_local","","",19,null],[11,"visit_block","","",19,null],[11,"visit_stmt","","",19,null],[11,"visit_pat","","",19,null],[11,"visit_expr","","",19,null],[11,"visit_ty","","",19,null],[11,"visit_generics","","",19,null],[11,"visit_fn","","",19,null],[11,"visit_struct_field","","",19,null],[11,"visit_variant_data","","",19,null],[11,"visit_trait_item","","",19,null],[11,"visit_impl_item","","",19,null],[11,"visit_lifetime","","",19,null],[11,"visit_lifetime_def","","",19,null],[11,"visit_trait_ref","","",19,null],[11,"resolve_generated_global_path","rustc::hir::lowering","",20,null],[11,"get_resolution","","",20,null],[11,"record_resolution","","",20,null],[11,"definitions","","",20,null],[11,"testing_context","","",21,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"loweringcontext"}}],[11,"lower_item","","",21,null],[11,"clone","rustc::hir::map::blocks","",22,null],[11,"is_fn_like","rustc::hir","",23,null],[11,"is_fn_like","","",24,null],[11,"is_fn_like","","",25,null],[11,"clone","rustc::hir::map::blocks","",26,null],[11,"id","","",26,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",26,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",22,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",22,null],[11,"body","","",22,null],[11,"decl","","",22,null],[11,"span","","",22,null],[11,"id","","",22,null],[11,"kind","","",22,null],[11,"clone","rustc::hir::map::definitions","",27,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,null],[11,"hash","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"hash","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"is_local","","",31,null],[11,"make","","",31,{"inputs":[{"name":"u32"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,null],[11,"hash","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,null],[11,"hash","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"new","","",27,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",27,null],[11,"def_key","","",27,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",27,null],[11,"opt_def_index","","",27,null],[11,"opt_local_def_id","","",27,null],[11,"local_def_id","","",27,null],[11,"as_local_node_id","","",27,null],[11,"retrace_path","","",27,null],[11,"create_def_with_parent","","",27,null],[11,"as_interned_str","","",33,null],[11,"to_string","","",33,null],[11,"fmt","rustc::hir::map","",34,null],[11,"clone","","",34,null],[11,"fmt","","",35,null],[11,"clone","","",35,null],[11,"new","","",36,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",36,null],[11,"clone","","",37,null],[11,"num_local_def_ids","","",37,null],[11,"def_key","","",37,null],[11,"def_path_from_id","","",37,null],[11,"def_path","","",37,null],[11,"retrace_path","","",37,null],[11,"local_def_id","","",37,null],[11,"opt_local_def_id","","",37,null],[11,"as_local_node_id","","",37,null],[11,"krate","","",37,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",37,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",37,null],[11,"get_if_local","","",37,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",37,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",37,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",37,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",37,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",37,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",37,null],[11,"get_parent_did","","",37,null],[11,"get_foreign_abi","","",37,null],[11,"expect_item","","",37,null],[11,"expect_trait_item","","",37,null],[11,"expect_struct","","",37,null],[11,"expect_variant","","",37,null],[11,"expect_foreign_item","","",37,null],[11,"expect_expr","","",37,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",37,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",37,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",37,null],[11,"opt_span","","",37,null],[11,"span","","",37,null],[11,"span_if_local","","",37,null],[11,"def_id_span","","",37,null],[11,"node_to_string","","",37,null],[11,"node_to_user_string","","",37,null],[11,"next","","",38,null],[11,"print_node","rustc::hir::print","",39,null],[11,"clone","","",40,null],[11,"writer","","",39,null],[11,"boxes","","",39,null],[11,"comments","","",39,null],[11,"cur_cmnt_and_lit","","",39,null],[11,"literals","","",39,null],[11,"new_from_input","","",39,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",39,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",39,null],[11,"nbsp","","",39,null],[11,"word_nbsp","","",39,null],[11,"head","","",39,null],[11,"bopen","","",39,null],[11,"bclose_","","",39,null],[11,"bclose_maybe_open","","",39,null],[11,"bclose","","",39,null],[11,"in_cbox","","",39,null],[11,"space_if_not_bol","","",39,null],[11,"break_offset_if_not_bol","","",39,null],[11,"synth_comment","","",39,null],[11,"commasep_cmnt","","",39,null],[11,"commasep_exprs","","",39,null],[11,"print_mod","","",39,null],[11,"print_foreign_mod","","",39,null],[11,"print_opt_lifetime","","",39,null],[11,"print_type","","",39,null],[11,"print_foreign_item","","",39,null],[11,"print_item_id","","",39,null],[11,"print_item","","Pretty-print an item",39,null],[11,"print_enum_def","","",39,null],[11,"print_variants","","",39,null],[11,"print_visibility","","",39,null],[11,"print_struct","","",39,null],[11,"print_variant","","",39,null],[11,"print_method_sig","","",39,null],[11,"print_trait_item","","",39,null],[11,"print_impl_item","","",39,null],[11,"print_stmt","","",39,null],[11,"print_block","","",39,null],[11,"print_block_unclosed","","",39,null],[11,"print_block_unclosed_indent","","",39,null],[11,"print_block_with_attrs","","",39,null],[11,"print_block_maybe_unclosed","","",39,null],[11,"print_if","","",39,null],[11,"print_if_let","","",39,null],[11,"print_expr_maybe_paren","","",39,null],[11,"print_expr","","",39,null],[11,"print_local_decl","","",39,null],[11,"print_decl","","",39,null],[11,"print_usize","","",39,null],[11,"print_name","","",39,null],[11,"print_for_decl","","",39,null],[11,"print_pat","","",39,null],[11,"print_fn","","",39,null],[11,"print_fn_args_and_ret","","",39,null],[11,"print_fn_block_args","","",39,null],[11,"print_capture_clause","","",39,null],[11,"print_bounds","","",39,null],[11,"print_lifetime","","",39,null],[11,"print_lifetime_def","","",39,null],[11,"print_generics","","",39,null],[11,"print_ty_param","","",39,null],[11,"print_where_clause","","",39,null],[11,"print_view_path","","",39,null],[11,"print_mutability","","",39,null],[11,"print_mt","","",39,null],[11,"print_arg","","",39,null],[11,"print_fn_output","","",39,null],[11,"print_ty_fn","","",39,null],[11,"maybe_print_trailing_comment","","",39,null],[11,"print_remaining_comments","","",39,null],[11,"print_opt_abi_and_extern_if_nondefault","","",39,null],[11,"print_extern_opt_abi","","",39,null],[11,"print_fn_header_info","","",39,null],[11,"print_unsafety","","",39,null],[11,"fmt","rustc::hir::svh","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"hash","","",41,null],[11,"clone","","",41,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",41,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",41,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",41,null],[11,"fmt","","",41,null],[11,"hash","rustc::hir","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"fmt","","",44,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",44,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"none","","",46,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",46,null],[11,"has_lifetimes","","",46,null],[11,"has_types","","",46,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",46,null],[11,"lifetimes","","",46,null],[11,"bindings","","",46,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"clone","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"empty","","",52,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",52,null],[11,"is_type_parameterized","","",52,null],[11,"is_parameterized","","",52,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"item","","",58,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",58,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"walk","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"clone","","",66,null],[11,"as_str","","",66,null],[11,"is_lazy","","",66,null],[11,"is_shift","","",66,null],[11,"is_comparison","","",66,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",66,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"clone","","",67,null],[11,"as_str","","",67,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"attrs","","",68,null],[11,"id","","",68,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"attrs","","",70,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"clone","","",74,null],[11,"hash","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",24,null],[11,"hash","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"clone","","",92,null],[11,"to_self","","",91,null],[11,"is_self","","",91,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"clone","","",93,null],[11,"has_self","","",93,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"clone","","",96,null],[11,"is_final","","",96,null],[11,"is_default","","",96,null],[11,"fmt","","",94,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"span","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"id","","",103,null],[11,"name","","",103,null],[11,"rename","","",103,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"clone","","",108,null],[11,"is_positional","","",108,null],[11,"fmt","","",109,null],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"fields","","",109,null],[11,"id","","",109,null],[11,"is_struct","","",109,null],[11,"is_tuple","","",109,null],[11,"is_unit","","",109,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",23,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",111,null],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"clone","","",111,null],[11,"descriptive_variant","","",111,null],[11,"fmt","","",112,null],[11,"hash","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"clone","","",112,null],[11,"fmt","","",113,null],[11,"hash","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"clone","","",113,null],[11,"descriptive_variant","","",113,null],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",114,null],[11,"clone","","",114,null],[11,"clone","","",115,null],[11,"new","rustc::infer::bivariate","",116,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",116,null],[11,"tcx","","",116,null],[11,"a_is_expected","","",116,null],[11,"relate_with_variance","","",116,null],[11,"tys","","",116,null],[11,"regions","","",116,null],[11,"binders","","",116,null],[11,"clone","rustc::infer::combine","",117,null],[11,"super_combine_tys","rustc::infer","",118,null],[11,"tcx","rustc::infer::combine","",117,null],[11,"switch_expected","","",117,null],[11,"equate","","",117,null],[11,"bivariate","","",117,null],[11,"sub","","",117,null],[11,"lub","","",117,null],[11,"glb","","",117,null],[11,"instantiate","","",117,null],[11,"compare","core::result","",119,null],[11,"new","rustc::infer::equate","",120,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",120,null],[11,"tag","","",120,null],[11,"tcx","","",120,null],[11,"a_is_expected","","",120,null],[11,"relate_with_variance","","",120,null],[11,"tys","","",120,null],[11,"regions","","",120,null],[11,"binders","","",120,null],[11,"note_and_explain_region","rustc::ty::context","",121,null],[11,"report_region_errors","rustc::infer","",118,null],[11,"report_and_explain_type_error","","",118,null],[11,"resolve","rustc::ty::sty","",122,null],[11,"resolve","","",123,null],[11,"new","rustc::infer::glb","",124,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",124,null],[11,"tag","","",124,null],[11,"tcx","","",124,null],[11,"a_is_expected","","",124,null],[11,"relate_with_variance","","",124,null],[11,"tys","","",124,null],[11,"regions","","",124,null],[11,"binders","","",124,null],[11,"infcx","","",124,null],[11,"relate_bound","","",124,null],[11,"higher_ranked_sub","rustc::infer::combine","",117,null],[11,"higher_ranked_lub","","",117,null],[11,"higher_ranked_glb","","",117,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",118,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",118,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",118,null],[11,"new","rustc::infer::lub","",125,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",125,null],[11,"tag","","",125,null],[11,"tcx","","",125,null],[11,"a_is_expected","","",125,null],[11,"relate_with_variance","","",125,null],[11,"tys","","",125,null],[11,"regions","","",125,null],[11,"binders","","",125,null],[11,"infcx","","",125,null],[11,"relate_bound","","",125,null],[11,"fmt","rustc::infer::region_inference","",126,null],[11,"hash","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",128,null],[11,"hash","","",129,null],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"clone","","",129,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"eq","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"contains","","",134,null],[11,"push","","",134,null],[11,"new","","",135,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",135,null],[11,"commit","","",135,null],[11,"rollback_to","","",135,null],[11,"num_vars","","",135,null],[11,"new_region_var","","",135,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",135,null],[11,"new_bound","","",135,null],[11,"add_given","","",135,null],[11,"make_eqregion","","",135,null],[11,"make_subregion","","",135,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",135,null],[11,"lub_regions","","",135,null],[11,"glb_regions","","",135,null],[11,"resolve_var","","",135,null],[11,"opportunistic_resolve_var","","",135,null],[11,"combine_vars","","",135,null],[11,"vars_created_since_snapshot","","",135,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",135,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"fmt","","",137,null],[11,"fmt","","",138,null],[11,"fmt","","",127,null],[11,"fmt","","",127,null],[11,"to_ty","","",127,null],[11,"must_hold","","",128,null],[11,"cannot_hold","","",128,null],[11,"or","","",128,null],[11,"and","","",128,null],[11,"new","rustc::infer::resolve","",139,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictyperesolver"}}],[11,"tcx","","",139,null],[11,"fold_ty","","",139,null],[11,"new","","",140,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictypeandregionresolver"}}],[11,"tcx","","",140,null],[11,"fold_ty","","",140,null],[11,"fold_region","","",140,null],[11,"new","rustc::infer::freshen","",141,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",141,null],[11,"fold_region","","",141,null],[11,"fold_ty","","",141,null],[11,"new","rustc::infer::sub","",142,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",142,null],[11,"tag","","",142,null],[11,"tcx","","",142,null],[11,"a_is_expected","","",142,null],[11,"with_cause","","",142,null],[11,"relate_with_variance","","",142,null],[11,"tys","","",142,null],[11,"regions","","",142,null],[11,"binders","","",142,null],[11,"hash","rustc::infer::type_variable","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"fmt","","",144,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"clone","","",144,null],[11,"new","","",145,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",145,null],[11,"var_diverges","","",145,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",145,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",145,null],[11,"new_var","","",145,null],[11,"root_var","","",145,null],[11,"probe","","",145,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",145,null],[11,"replace_if_possible","","",145,null],[11,"snapshot","","",145,null],[11,"rollback_to","","",145,null],[11,"commit","","",145,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",145,null],[11,"unsolved_variables","","",145,null],[11,"index","rustc::ty::sty","",146,null],[11,"from_index","","",146,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",146,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"fmt","rustc::infer::unify_key","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"combine","","",147,null],[11,"index","rustc::ty::sty","",148,null],[11,"from_index","","",148,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",148,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","rustc::ty","",149,null],[11,"index","rustc::ty::sty","",150,null],[11,"from_index","","",150,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",150,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","syntax::ast","",151,null],[11,"index","rustc::ty::sty","",152,null],[11,"from_index","","",152,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",152,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"clone","rustc::infer","",153,null],[11,"borrow","","",153,null],[11,"borrow_mut","","",153,null],[11,"fmt","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",154,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"fmt","","",161,null],[11,"infer_ctxt","rustc::ty::context","",121,null],[11,"normalizing_infer_ctxt","","",121,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",121,null],[11,"enter","rustc::infer","",162,null],[11,"trans_normalize","rustc::ty::sty","",163,null],[11,"trans_normalize","","",164,null],[11,"trans_normalize","","",165,null],[11,"trans_normalize","","",123,null],[11,"trans_normalize","rustc::mir::tcx","",166,null],[11,"normalize_associated_type","rustc::ty::context","",121,null],[11,"drain_fulfillment_cx_or_panic","rustc::infer","",118,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",118,null],[11,"projection_mode","","",118,null],[11,"freshen","","",118,null],[11,"type_var_diverges","","",118,null],[11,"freshener","","",118,null],[11,"type_is_unconstrained_numeric","","",118,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",118,null],[11,"unsolved_variables","","",118,null],[11,"equate","","",118,null],[11,"sub","","",118,null],[11,"lub","","",118,null],[11,"glb","","",118,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",118,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",118,null],[11,"in_snapshot","","",118,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",118,null],[11,"probe","","Execute `f` then unroll any bindings it creates",118,null],[11,"add_given","","",118,null],[11,"sub_types","","",118,null],[11,"can_sub_types","","",118,null],[11,"eq_types","","",118,null],[11,"eq_trait_refs","","",118,null],[11,"eq_impl_headers","","",118,null],[11,"sub_poly_trait_refs","","",118,null],[11,"sub_regions","","",118,null],[11,"equality_predicate","","",118,null],[11,"region_outlives_predicate","","",118,null],[11,"next_ty_var_id","","",118,null],[11,"next_ty_var","","",118,null],[11,"next_ty_var_with_default","","",118,null],[11,"next_diverging_ty_var","","",118,null],[11,"next_ty_vars","","",118,null],[11,"next_int_var_id","","",118,null],[11,"next_float_var_id","","",118,null],[11,"next_region_var","","",118,null],[11,"region_vars_for_defs","","",118,null],[11,"type_vars_for_defs","","",118,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",118,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",118,null],[11,"fresh_bound_region","","",118,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",118,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",118,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",118,null],[11,"node_type","","",118,null],[11,"expr_ty","","",118,null],[11,"resolve_regions_and_report_errors","","",118,null],[11,"ty_to_string","","",118,null],[11,"tys_to_string","","",118,null],[11,"trait_ref_to_string","","",118,null],[11,"shallow_resolve","","",118,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",118,null],[11,"resolve_type_and_region_vars_if_possible","","",118,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",118,null],[11,"type_error_message_str","","",118,null],[11,"type_error_struct_str","","",118,null],[11,"type_error_message_str_with_expected","","",118,null],[11,"type_error_struct_str_with_expected","","",118,null],[11,"type_error_message","","",118,null],[11,"type_error_struct","","",118,null],[11,"report_mismatched_types","","",118,null],[11,"report_conflicting_default_types","","",118,null],[11,"replace_late_bound_regions_with_fresh_var","","",118,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",118,null],[11,"can_equate","","",118,null],[11,"node_ty","","",118,null],[11,"expr_ty_adjusted","","",118,null],[11,"type_moves_by_default","","",118,null],[11,"node_method_ty","","",118,null],[11,"node_method_id","","",118,null],[11,"adjustments","","",118,null],[11,"is_method_call","","",118,null],[11,"temporary_scope","","",118,null],[11,"upvar_capture","","",118,null],[11,"param_env","","",118,null],[11,"closure_kind","","",118,null],[11,"closure_type","","",118,null],[11,"span","","",156,null],[11,"types","","",156,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"tys"},{"name":"tys"}],"output":{"name":"typetrace"}}],[11,"dummy","","",156,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",156,null],[11,"span","","",154,null],[11,"span","","",157,null],[11,"span","","",160,null],[11,"fmt","rustc::lint","",167,null],[11,"clone","","",167,null],[11,"name_lower","","Get the lint&#39;s name, with ASCII letters converted to lowercase.",167,null],[11,"fmt","","",168,null],[11,"clone","","",168,null],[11,"eq","","",168,null],[11,"hash","","",168,null],[11,"of","","Get the `LintId` for a `Lint`.",168,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",168,null],[11,"fmt","","",169,null],[11,"cmp","","",169,null],[11,"partial_cmp","","",169,null],[11,"eq","","",169,null],[11,"clone","","",169,null],[11,"as_str","","Convert a level to a lower-case string.",169,null],[11,"from_str","","Convert a lower-case string to a level.",169,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",170,null],[11,"ne","","",170,null],[11,"clone","","",170,null],[11,"clone","rustc::lint::builtin","",171,null],[11,"get_lints","","",171,null],[11,"new","rustc::lint::context","",172,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",172,null],[11,"get_lint_groups","","",172,null],[11,"register_early_pass","","",172,null],[11,"register_late_pass","","",172,null],[11,"register_future_incompatible","","",172,null],[11,"future_incompatible","","",172,null],[11,"register_group","","",172,null],[11,"register_renamed","","",172,null],[11,"register_removed","","",172,null],[11,"process_command_line","","",172,null],[11,"sess","","Get the overall compiler `Session` object.",173,null],[11,"lints","","",173,null],[11,"mut_lints","","",173,null],[11,"level_stack","","",173,null],[11,"enter_attrs","","",173,null],[11,"exit_attrs","","",173,null],[11,"sess","","Get the overall compiler `Session` object.",174,null],[11,"lints","","",174,null],[11,"mut_lints","","",174,null],[11,"level_stack","","",174,null],[11,"enter_attrs","","",174,null],[11,"exit_attrs","","",174,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",173,null],[11,"visit_item","","",173,null],[11,"visit_foreign_item","","",173,null],[11,"visit_pat","","",173,null],[11,"visit_expr","","",173,null],[11,"visit_stmt","","",173,null],[11,"visit_fn","","",173,null],[11,"visit_variant_data","","",173,null],[11,"visit_struct_field","","",173,null],[11,"visit_variant","","",173,null],[11,"visit_ty","","",173,null],[11,"visit_name","","",173,null],[11,"visit_mod","","",173,null],[11,"visit_local","","",173,null],[11,"visit_block","","",173,null],[11,"visit_arm","","",173,null],[11,"visit_decl","","",173,null],[11,"visit_expr_post","","",173,null],[11,"visit_generics","","",173,null],[11,"visit_trait_item","","",173,null],[11,"visit_impl_item","","",173,null],[11,"visit_lifetime","","",173,null],[11,"visit_lifetime_def","","",173,null],[11,"visit_path","","",173,null],[11,"visit_path_list_item","","",173,null],[11,"visit_attribute","","",173,null],[11,"visit_item","","",174,null],[11,"visit_foreign_item","","",174,null],[11,"visit_pat","","",174,null],[11,"visit_expr","","",174,null],[11,"visit_stmt","","",174,null],[11,"visit_fn","","",174,null],[11,"visit_variant_data","","",174,null],[11,"visit_struct_field","","",174,null],[11,"visit_variant","","",174,null],[11,"visit_ty","","",174,null],[11,"visit_ident","","",174,null],[11,"visit_mod","","",174,null],[11,"visit_local","","",174,null],[11,"visit_block","","",174,null],[11,"visit_arm","","",174,null],[11,"visit_decl","","",174,null],[11,"visit_expr_post","","",174,null],[11,"visit_generics","","",174,null],[11,"visit_trait_item","","",174,null],[11,"visit_impl_item","","",174,null],[11,"visit_lifetime","","",174,null],[11,"visit_lifetime_def","","",174,null],[11,"visit_explicit_self","","",174,null],[11,"visit_path","","",174,null],[11,"visit_path_list_item","","",174,null],[11,"visit_attribute","","",174,null],[11,"visit_id","","",173,null],[11,"get_lints","","",175,null],[11,"check_item","","",175,null],[11,"prohibit_type_params","rustc::ty::context","",121,null],[11,"prohibit_projection","","",121,null],[11,"prim_ty_to_ty","","",121,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",121,null],[11,"fmt","rustc::middle::expr_use_visitor","",176,null],[11,"eq","","",176,null],[11,"ne","","",176,null],[11,"clone","","",176,null],[11,"fmt","","",177,null],[11,"eq","","",177,null],[11,"ne","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"eq","","",178,null],[11,"clone","","",178,null],[11,"fmt","","",179,null],[11,"eq","","",179,null],[11,"clone","","",179,null],[11,"fmt","","",180,null],[11,"eq","","",180,null],[11,"clone","","",180,null],[11,"new","","",181,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"walk_fn","","",181,null],[11,"consume_expr","","",181,null],[11,"walk_expr","","",181,null],[11,"decode","rustc::middle::const_val","",182,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",182,null],[11,"fmt","","",182,null],[11,"clone","","",182,null],[11,"hash","","",182,null],[11,"eq","","",182,null],[11,"description","","",182,null],[11,"hash","rustc::middle::const_qualif","",183,null],[11,"cmp","","",183,null],[11,"partial_cmp","","",183,null],[11,"lt","","",183,null],[11,"le","","",183,null],[11,"gt","","",183,null],[11,"ge","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"decode","","",183,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",183,null],[18,"MUTABLE_MEM","rustc_borrowck","",183,null],[18,"NEEDS_DROP","","",183,null],[18,"PREFER_IN_PLACE","","",183,null],[18,"NON_ZERO_SIZED","","",183,null],[18,"HAS_STATIC_BORROWS","","",183,null],[18,"NOT_CONST","","",183,null],[18,"NON_STATIC_BORROWS","","",183,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",183,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",183,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",183,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",183,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",183,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",183,null],[11,"is_all","","Returns `true` if all flags are currently set.",183,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",183,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",183,null],[11,"insert","","Inserts the specified flags in-place.",183,null],[11,"remove","","Removes the specified flags in-place.",183,null],[11,"toggle","","Toggles the specified flags in-place.",183,null],[11,"bitor","","Returns the union of the two sets of flags.",183,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",183,null],[11,"bitand","","Returns the intersection between the two sets of flags.",183,null],[11,"sub","","Returns the set difference of the two sets of flags.",183,null],[11,"not","","Returns the complement of this set of flags.",183,null],[11,"fmt","rustc::middle::cstore","",184,null],[11,"clone","","",184,null],[11,"fmt","","",185,null],[11,"clone","","",185,null],[11,"eq","","",185,null],[11,"ne","","",185,null],[11,"clone","","",186,null],[11,"eq","","",186,null],[11,"fmt","","",186,null],[11,"eq","","",187,null],[11,"clone","","",187,null],[11,"from_u32","","",187,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",188,null],[11,"clone","","",188,null],[11,"fmt","","",189,null],[11,"hash","","",189,null],[11,"decode","","",189,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",189,null],[11,"eq","","",189,null],[11,"ne","","",189,null],[11,"clone","","",189,null],[11,"fmt","","",190,null],[11,"hash","","",190,null],[11,"eq","","",190,null],[11,"ne","","",190,null],[11,"clone","","",190,null],[11,"clone","","",191,null],[11,"fmt","","",192,null],[11,"clone","","",192,null],[11,"visit","","",189,null],[11,"visit_ids","","",189,null],[11,"stability","","",193,null],[11,"deprecation","","",193,null],[11,"visibility","","",193,null],[11,"closure_kind","","",193,null],[11,"closure_ty","","",193,null],[11,"item_variances","","",193,null],[11,"repr_attrs","","",193,null],[11,"item_type","","",193,null],[11,"visible_parent_map","","",193,null],[11,"item_name","","",193,null],[11,"item_predicates","","",193,null],[11,"item_super_predicates","","",193,null],[11,"item_attrs","","",193,null],[11,"item_symbol","","",193,null],[11,"trait_def","","",193,null],[11,"adt_def","","",193,null],[11,"method_arg_names","","",193,null],[11,"inherent_implementations_for_type","","",193,null],[11,"implementations_of_trait","","",193,null],[11,"provided_trait_methods","","",193,null],[11,"trait_item_def_ids","","",193,null],[11,"impl_items","","",193,null],[11,"impl_trait_ref","","",193,null],[11,"impl_polarity","","",193,null],[11,"custom_coerce_unsized_kind","","",193,null],[11,"associated_consts","","",193,null],[11,"impl_parent","","",193,null],[11,"trait_of_item","","",193,null],[11,"impl_or_trait_item","","",193,null],[11,"is_const_fn","","",193,null],[11,"is_defaulted_trait","","",193,null],[11,"is_impl","","",193,null],[11,"is_default_impl","","",193,null],[11,"is_extern_item","","",193,null],[11,"is_static_method","","",193,null],[11,"is_statically_included_foreign_item","","",193,null],[11,"is_typedef","","",193,null],[11,"dylib_dependency_formats","","",193,null],[11,"lang_items","","",193,null],[11,"missing_lang_items","","",193,null],[11,"is_staged_api","","",193,null],[11,"is_explicitly_linked","","",193,null],[11,"is_allocator","","",193,null],[11,"is_panic_runtime","","",193,null],[11,"panic_strategy","","",193,null],[11,"extern_crate","","",193,null],[11,"crate_attrs","","",193,null],[11,"crate_name","","",193,null],[11,"original_crate_name","","",193,null],[11,"crate_hash","","",193,null],[11,"crate_disambiguator","","",193,null],[11,"crate_struct_field_attrs","","",193,null],[11,"plugin_registrar_fn","","",193,null],[11,"native_libraries","","",193,null],[11,"reachable_ids","","",193,null],[11,"def_key","","",193,null],[11,"relative_def_path","","",193,null],[11,"variant_kind","","",193,null],[11,"struct_ctor_def_id","","",193,null],[11,"tuple_struct_definition_if_ctor","","",193,null],[11,"struct_field_names","","",193,null],[11,"item_children","","",193,null],[11,"crate_top_level_items","","",193,null],[11,"maybe_get_item_ast","","",193,null],[11,"maybe_get_item_mir","","",193,null],[11,"is_item_mir_available","","",193,null],[11,"crates","","",193,null],[11,"used_libraries","","",193,null],[11,"used_link_args","","",193,null],[11,"metadata_filename","","",193,null],[11,"metadata_section_name","","",193,null],[11,"encode_type","","",193,null],[11,"used_crates","","",193,null],[11,"used_crate_source","","",193,null],[11,"extern_mod_stmt_cnum","","",193,null],[11,"encode_metadata","","",193,null],[11,"metadata_encoding_version","","",193,null],[11,"fmt","rustc::middle::dataflow","",194,null],[11,"clone","","",194,null],[11,"clone","","",195,null],[11,"pre","","",195,null],[11,"fmt","","",196,null],[11,"eq","","",196,null],[11,"clone","","",196,null],[11,"new","","",195,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",195,null],[11,"add_kill","","Indicates that `id` kills `bit`",195,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",195,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",195,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",195,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",195,null],[11,"propagate","","Performs the data flow analysis.",195,null],[11,"fmt","rustc::middle::dependency_format","",197,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"clone","rustc::middle::free_region","",198,null],[11,"new","","",198,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",198,null],[11,"relate_free_regions_from_predicates","","",198,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",198,null],[11,"lub_free_regions","","",198,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",198,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",198,null],[11,"hash","rustc::middle::lang_items","",199,null],[11,"eq","","",199,null],[11,"clone","","",199,null],[11,"from_u32","","",199,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",200,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",200,null],[11,"item_name","","",200,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",200,null],[11,"require_owned_box","","",200,null],[11,"from_builtin_kind","","",200,null],[11,"to_builtin_kind","","",200,null],[11,"fn_trait_kind","","",200,null],[11,"char_impl","","",200,null],[11,"str_impl","","",200,null],[11,"slice_impl","","",200,null],[11,"const_ptr_impl","","",200,null],[11,"mut_ptr_impl","","",200,null],[11,"i8_impl","","",200,null],[11,"i16_impl","","",200,null],[11,"i32_impl","","",200,null],[11,"i64_impl","","",200,null],[11,"isize_impl","","",200,null],[11,"u8_impl","","",200,null],[11,"u16_impl","","",200,null],[11,"u32_impl","","",200,null],[11,"u64_impl","","",200,null],[11,"usize_impl","","",200,null],[11,"f32_impl","","",200,null],[11,"f64_impl","","",200,null],[11,"send_trait","","",200,null],[11,"sized_trait","","",200,null],[11,"unsize_trait","","",200,null],[11,"copy_trait","","",200,null],[11,"sync_trait","","",200,null],[11,"drop_trait","","",200,null],[11,"coerce_unsized_trait","","",200,null],[11,"add_trait","","",200,null],[11,"sub_trait","","",200,null],[11,"mul_trait","","",200,null],[11,"div_trait","","",200,null],[11,"rem_trait","","",200,null],[11,"neg_trait","","",200,null],[11,"not_trait","","",200,null],[11,"bitxor_trait","","",200,null],[11,"bitand_trait","","",200,null],[11,"bitor_trait","","",200,null],[11,"shl_trait","","",200,null],[11,"shr_trait","","",200,null],[11,"add_assign_trait","","",200,null],[11,"sub_assign_trait","","",200,null],[11,"mul_assign_trait","","",200,null],[11,"div_assign_trait","","",200,null],[11,"rem_assign_trait","","",200,null],[11,"bitxor_assign_trait","","",200,null],[11,"bitand_assign_trait","","",200,null],[11,"bitor_assign_trait","","",200,null],[11,"shl_assign_trait","","",200,null],[11,"shr_assign_trait","","",200,null],[11,"index_trait","","",200,null],[11,"index_mut_trait","","",200,null],[11,"unsafe_cell_type","","",200,null],[11,"deref_trait","","",200,null],[11,"deref_mut_trait","","",200,null],[11,"fn_trait","","",200,null],[11,"fn_mut_trait","","",200,null],[11,"fn_once_trait","","",200,null],[11,"eq_trait","","",200,null],[11,"ord_trait","","",200,null],[11,"str_eq_fn","","",200,null],[11,"panic_fn","","",200,null],[11,"panic_bounds_check_fn","","",200,null],[11,"panic_fmt","","",200,null],[11,"exchange_malloc_fn","","",200,null],[11,"exchange_free_fn","","",200,null],[11,"box_free_fn","","",200,null],[11,"strdup_uniq_fn","","",200,null],[11,"start_fn","","",200,null],[11,"eh_personality","","",200,null],[11,"eh_personality_catch","","",200,null],[11,"eh_unwind_resume","","",200,null],[11,"msvc_try_filter","","",200,null],[11,"owned_box","","",200,null],[11,"phantom_data","","",200,null],[11,"covariant_type","","",200,null],[11,"contravariant_type","","",200,null],[11,"invariant_type","","",200,null],[11,"covariant_lifetime","","",200,null],[11,"contravariant_lifetime","","",200,null],[11,"invariant_lifetime","","",200,null],[11,"no_copy_bound","","",200,null],[11,"non_zero","","",200,null],[11,"debug_trait","","",200,null],[11,"eq","rustc::middle::mem_categorization","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"eq","","",202,null],[11,"ne","","",202,null],[11,"clone","","",202,null],[11,"hash","","",203,null],[11,"eq","","",203,null],[11,"ne","","",203,null],[11,"clone","","",203,null],[11,"hash","","",204,null],[11,"eq","","",204,null],[11,"ne","","",204,null],[11,"clone","","",204,null],[11,"fmt","","",205,null],[11,"hash","","",205,null],[11,"eq","","",205,null],[11,"ne","","",205,null],[11,"clone","","",205,null],[11,"fmt","","",206,null],[11,"hash","","",206,null],[11,"eq","","",206,null],[11,"clone","","",206,null],[11,"fmt","","",207,null],[11,"hash","","",207,null],[11,"eq","","",207,null],[11,"clone","","",207,null],[11,"fmt","","",208,null],[11,"hash","","",208,null],[11,"eq","","",208,null],[11,"clone","","",208,null],[11,"fmt","","",209,null],[11,"eq","","",209,null],[11,"ne","","",209,null],[11,"clone","","",209,null],[11,"eq","","",210,null],[11,"ne","","",210,null],[11,"clone","","",210,null],[11,"clone","","",211,null],[11,"id","rustc::hir","",25,null],[11,"span","","",25,null],[11,"id","","",61,null],[11,"span","","",61,null],[11,"clone","rustc::middle::mem_categorization","",212,null],[11,"from_mutbl","","",208,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",208,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",208,null],[11,"is_mutable","","",208,null],[11,"is_immutable","","",208,null],[11,"to_user_str","","",208,null],[11,"new","","",212,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",212,null],[11,"cat_expr_autoderefd","","",212,null],[11,"cat_expr_unadjusted","","",212,null],[11,"cat_def","","",212,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",212,null],[11,"cat_rvalue_node","","",212,null],[11,"cat_rvalue","","",212,null],[11,"cat_field","","",212,null],[11,"cat_tup_field","","",212,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",212,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",212,null],[11,"cat_imm_interior","","",212,null],[11,"cat_downcast","","",212,null],[11,"cat_pattern","","",212,null],[11,"fmt","","",213,null],[11,"clone","","",213,null],[11,"fmt","","",214,null],[11,"clone","","",214,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",210,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",210,null],[11,"upvar","","",210,null],[11,"descriptive_string","","",210,null],[11,"fmt","","",210,null],[11,"fmt","","",201,null],[11,"fmt","","",203,null],[11,"fmt","","",204,null],[11,"fmt","","",202,null],[11,"fmt","","",202,null],[11,"cmp","rustc::middle::privacy","",215,null],[11,"partial_cmp","","",215,null],[11,"eq","","",215,null],[11,"fmt","","",215,null],[11,"clone","","",215,null],[11,"clone","","",216,null],[11,"is_reachable","","",216,null],[11,"is_exported","","",216,null],[11,"is_public","","",216,null],[11,"default","","",216,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"fmt","","",216,null],[11,"decode","rustc::middle::region","",217,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",217,null],[11,"hash","","",217,null],[11,"cmp","","",217,null],[11,"partial_cmp","","",217,null],[11,"lt","","",217,null],[11,"le","","",217,null],[11,"gt","","",217,null],[11,"ge","","",217,null],[11,"eq","","",217,null],[11,"ne","","",217,null],[11,"clone","","",217,null],[11,"fmt","","",217,null],[11,"fmt","","",218,null],[11,"hash","","",218,null],[11,"cmp","","",218,null],[11,"partial_cmp","","",218,null],[11,"lt","","",218,null],[11,"le","","",218,null],[11,"gt","","",218,null],[11,"ge","","",218,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"clone","","",218,null],[11,"fmt","","",219,null],[11,"decode","","",219,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",219,null],[11,"hash","","",219,null],[11,"cmp","","",219,null],[11,"partial_cmp","","",219,null],[11,"lt","","",219,null],[11,"le","","",219,null],[11,"gt","","",219,null],[11,"ge","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"clone","","",219,null],[11,"to_code_extent","","",219,null],[11,"fmt","","",220,null],[11,"decode","","",220,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",220,null],[11,"hash","","",220,null],[11,"cmp","","",220,null],[11,"partial_cmp","","",220,null],[11,"lt","","",220,null],[11,"le","","",220,null],[11,"gt","","",220,null],[11,"ge","","",220,null],[11,"eq","","",220,null],[11,"ne","","",220,null],[11,"clone","","",220,null],[11,"node_id","","Returns a node id associated with this scope.",218,null],[11,"node_id","","",217,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",217,null],[11,"clone","","",221,null],[11,"fmt","","",221,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",222,null],[11,"lookup_code_extent","","",222,null],[11,"node_extent","","",222,null],[11,"item_extent","","",222,null],[11,"call_site_extent","","",222,null],[11,"opt_destruction_extent","","",222,null],[11,"intern_code_extent","","",222,null],[11,"intern_node","","",222,null],[11,"code_extent_data","","",222,null],[11,"each_encl_scope","","",222,null],[11,"each_var_scope","","",222,null],[11,"each_rvalue_scope","","",222,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",222,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",222,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",222,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",222,null],[11,"var_region","","Returns the lifetime of the variable `id`.",222,null],[11,"scopes_intersect","","",222,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",222,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",222,null],[11,"fmt","rustc::middle::resolve_lifetime","",223,null],[11,"decode","","",223,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",223,null],[11,"hash","","",223,null],[11,"eq","","",223,null],[11,"ne","","",223,null],[11,"clone","","",223,null],[11,"hash","rustc::middle::stability","",224,null],[11,"fmt","","",224,null],[11,"clone","","",224,null],[11,"partial_cmp","","",224,null],[11,"eq","","",224,null],[11,"decode","","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",224,null],[11,"from_attr_level","","",224,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"build","","Construct the stability index for a crate being compiled.",225,null],[11,"new","","",225,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"lookup_stability","rustc::ty::context","Lookup the stability for a node, loading external crate\nmetadata as necessary.",121,null],[11,"lookup_deprecation","","",121,null],[11,"decode","rustc::mir::repr","",226,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",226,null],[11,"clone","","",226,null],[11,"all_basic_blocks","","",226,null],[11,"basic_block_data","","",226,null],[11,"basic_block_data_mut","","",226,null],[11,"index","","",226,null],[11,"index_mut","","",226,null],[11,"decode","","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",227,null],[11,"eq","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"decode","","",228,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",228,null],[11,"eq","","",228,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"decode","","",229,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"decode","","",230,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",230,null],[11,"fmt","","",230,null],[11,"clone","","",230,null],[11,"decode","","",231,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",231,null],[11,"fmt","","",231,null],[11,"clone","","",231,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"fmt","","",232,null],[11,"clone","","",232,null],[11,"decode","","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",233,null],[11,"hash","","",233,null],[11,"eq","","",233,null],[11,"ne","","",233,null],[11,"clone","","",233,null],[11,"new","","",233,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",233,null],[11,"fmt","","",233,null],[11,"decode","","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",234,null],[11,"fmt","","",234,null],[11,"clone","","",234,null],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",235,null],[11,"fmt","","",235,null],[11,"clone","","",235,null],[11,"decode","","",236,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",236,null],[11,"clone","","",236,null],[11,"successors","","",235,null],[11,"successors_mut","","",235,null],[11,"successors","","",236,null],[11,"successors_mut","","",236,null],[11,"new","","",234,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",234,null],[11,"terminator_mut","","",234,null],[11,"fmt","","",236,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",236,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",236,null],[11,"decode","","",237,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",237,null],[11,"clone","","",237,null],[11,"decode","","",238,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",238,null],[11,"fmt","","",238,null],[11,"clone","","",238,null],[11,"fmt","","",237,null],[11,"decode","","",239,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",239,null],[11,"eq","","",239,null],[11,"ne","","",239,null],[11,"clone","","",239,null],[11,"decode","","",240,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",240,null],[11,"hash","","",240,null],[11,"eq","","",240,null],[11,"ne","","",240,null],[11,"fmt","","",240,null],[11,"clone","","",240,null],[11,"decode","","",241,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",241,null],[11,"hash","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"fmt","","",241,null],[11,"clone","","",241,null],[11,"decode","","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",242,null],[11,"hash","","",242,null],[11,"eq","","",242,null],[11,"ne","","",242,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"new","","",242,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",242,null],[11,"field","","",239,null],[11,"deref","","",239,null],[11,"index","","",239,null],[11,"elem","","",239,null],[11,"fmt","","",239,null],[11,"index","collections::vec","",243,null],[11,"index_mut","","",243,null],[11,"decode","rustc::mir::repr","",244,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",244,null],[11,"eq","","",244,null],[11,"ne","","",244,null],[11,"hash","","",244,null],[11,"fmt","","",244,null],[11,"clone","","",244,null],[11,"new","","",244,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",244,null],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",245,null],[11,"fmt","","",245,null],[11,"clone","","",245,null],[11,"decode","","",246,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",246,null],[11,"eq","","",246,null],[11,"ne","","",246,null],[11,"clone","","",246,null],[11,"fmt","","",246,null],[11,"decode","","",247,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",247,null],[11,"clone","","",247,null],[11,"decode","","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",248,null],[11,"eq","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"decode","","",249,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",249,null],[11,"eq","","",249,null],[11,"ne","","",249,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"decode","","",250,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",250,null],[11,"eq","","",250,null],[11,"fmt","","",250,null],[11,"clone","","",250,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"eq","","",251,null],[11,"fmt","","",251,null],[11,"clone","","",251,null],[11,"fmt","","",247,null],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",252,null],[11,"hash","","",252,null],[11,"eq","","",252,null],[11,"ne","","",252,null],[11,"clone","","",252,null],[11,"decode","","",253,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",253,null],[11,"clone","","",253,null],[11,"fmt","","",253,null],[11,"decode","","",254,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",254,null],[11,"hash","","",254,null],[11,"eq","","",254,null],[11,"ne","","",254,null],[11,"clone","","",254,null],[11,"fmt","","",252,null],[11,"fmt","","",254,null],[11,"fmt","rustc::mir::tcx","",166,null],[11,"clone","","",166,null],[11,"from_ty","","",166,{"inputs":[{"name":"tys"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",166,null],[11,"projection_ty","","",166,null],[11,"super_fold_with","","",166,null],[11,"super_visit_with","","",166,null],[11,"operand_ty","rustc::mir::repr","",226,null],[11,"binop_ty","","",226,null],[11,"lvalue_ty","","",226,null],[11,"rvalue_ty","","",226,null],[11,"to_mutbl_lossy","","",228,null],[11,"to_hir_binop","","",250,null],[11,"fmt","rustc::mir::visit","",255,null],[11,"clone","","",255,null],[11,"clone","rustc::mir::transform","",256,null],[11,"from_node","","",256,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"mirsource"}}],[11,"item_id","","",256,null],[11,"new","","",257,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",257,null],[11,"push_pass","","Pushes a built-in pass.",257,null],[11,"extend","","",257,null],[11,"eq","rustc::session::config","",258,null],[11,"clone","","",258,null],[11,"eq","","",259,null],[11,"clone","","",259,null],[11,"hash","","",260,null],[11,"eq","","",260,null],[11,"clone","","",260,null],[11,"eq","","",261,null],[11,"ne","","",261,null],[11,"fmt","","",261,null],[11,"clone","","",261,null],[11,"default","","",261,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",262,null],[11,"eq","","",263,null],[11,"clone","","",263,null],[11,"filestem","","",264,null],[11,"clone","","",265,null],[11,"path","","",265,null],[11,"temp_path","","",265,null],[11,"with_extension","","",265,null],[11,"filestem","","",265,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",262,null],[11,"eq","","",266,null],[11,"clone","","",266,null],[11,"fmt","","",267,null],[11,"hash","","",267,null],[11,"cmp","","",267,null],[11,"clone","","",267,null],[11,"partial_cmp","","",267,null],[11,"eq","","",267,null],[11,"clone","","",268,null],[11,"is_empty","","",268,null],[11,"eq","","",269,null],[11,"clone","","",269,null],[11,"desc","","",269,null],[11,"clone","","",270,null],[11,"clone","","",271,null],[11,"fmt","","",272,null],[11,"eq","","",272,null],[11,"clone","","",272,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"clone","","",273,null],[11,"is_stable","","",273,null],[11,"stable","","",273,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",273,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",267,null],[11,"clone","rustc::session::filesearch","",274,null],[11,"for_each_lib_search_path","","",275,null],[11,"get_lib_path","","",275,null],[11,"search","","",275,null],[11,"new","","",275,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",275,null],[11,"get_tools_search_paths","","",275,null],[11,"fmt","rustc::session::search_paths","",276,null],[11,"clone","","",276,null],[11,"fmt","","",277,null],[11,"clone","","",277,null],[11,"eq","","",277,null],[11,"new","","",276,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",276,null],[11,"iter","","",276,null],[11,"next","","",278,null],[11,"struct_span_warn","rustc::session","",279,null],[11,"struct_span_warn_with_code","","",279,null],[11,"struct_warn","","",279,null],[11,"struct_span_err","","",279,null],[11,"struct_span_err_with_code","","",279,null],[11,"struct_err","","",279,null],[11,"struct_span_fatal","","",279,null],[11,"struct_span_fatal_with_code","","",279,null],[11,"struct_fatal","","",279,null],[11,"span_fatal","","",279,null],[11,"span_fatal_with_code","","",279,null],[11,"fatal","","",279,null],[11,"span_err_or_warn","","",279,null],[11,"span_err","","",279,null],[11,"span_err_with_code","","",279,null],[11,"err","","",279,null],[11,"err_count","","",279,null],[11,"has_errors","","",279,null],[11,"abort_if_errors","","",279,null],[11,"track_errors","","",279,null],[11,"span_warn","","",279,null],[11,"span_warn_with_code","","",279,null],[11,"warn","","",279,null],[11,"opt_span_warn","","",279,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",279,null],[11,"note_without_error","","",279,null],[11,"span_note_without_error","","",279,null],[11,"span_unimpl","","",279,null],[11,"unimpl","","",279,null],[11,"add_lint","","",279,null],[11,"reserve_node_ids","","",279,null],[11,"diagnostic","","",279,null],[11,"codemap","","",279,null],[11,"verbose","","",279,null],[11,"time_passes","","",279,null],[11,"count_llvm_insns","","",279,null],[11,"count_type_sizes","","",279,null],[11,"time_llvm_passes","","",279,null],[11,"trans_stats","","",279,null],[11,"meta_stats","","",279,null],[11,"asm_comments","","",279,null],[11,"no_verify","","",279,null],[11,"borrowck_stats","","",279,null],[11,"print_llvm_passes","","",279,null],[11,"lto","","",279,null],[11,"no_landing_pads","","",279,null],[11,"unstable_options","","",279,null],[11,"print_enum_sizes","","",279,null],[11,"nonzeroing_move_hints","","",279,null],[11,"sysroot","","",279,null],[11,"target_filesearch","","",279,null],[11,"host_filesearch","","",279,null],[11,"next_node_id","","",279,null],[11,"peek_node_id","","",279,null],[11,"diagnostic","","",279,null],[11,"hash","rustc::traits::error_reporting","",280,null],[11,"eq","","",280,null],[11,"ne","","",280,null],[11,"fmt","","",280,null],[11,"report_fulfillment_errors","rustc::infer","",118,null],[11,"report_fulfillment_errors_as_warnings","","",118,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",118,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",118,null],[11,"report_selection_error","","",118,null],[11,"recursive_type_with_infinite_size_error","rustc::ty::context","",121,null],[11,"report_object_safety_error","","",121,null],[11,"clone","rustc::traits::fulfill","",281,null],[11,"new","","Creates a new fulfillment context.",282,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",282,null],[11,"register_builtin_bound","","",282,null],[11,"register_region_obligation","","",282,null],[11,"register_predicate_obligation","","",282,null],[11,"register_rfc1592_obligation","","",282,null],[11,"region_obligations","","",282,null],[11,"select_rfc1592_obligations","","",282,null],[11,"select_all_or_error","","",282,null],[11,"select_where_possible","","",282,null],[11,"pending_obligations","","",282,null],[11,"new","","",283,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",283,null],[11,"check_duplicate_trait","","",283,null],[11,"eq","rustc::traits::project","",284,null],[11,"clone","","",284,null],[11,"fmt","","",284,null],[11,"is_topmost","","",284,null],[11,"is_any_final","","",284,null],[11,"is_any","","",284,null],[11,"clone","","",285,null],[11,"clone","","",286,null],[11,"with","","",286,null],[11,"hash","rustc::traits::object_safety","",287,null],[11,"eq","","",287,null],[11,"ne","","",287,null],[11,"fmt","","",287,null],[11,"clone","","",287,null],[11,"hash","","",288,null],[11,"eq","","",288,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"is_object_safe","rustc::ty::context","",121,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",121,null],[11,"object_safety_violations","","",121,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",121,null],[11,"clone","rustc::traits::select","",289,null],[11,"fmt","","",290,null],[11,"clone","","",290,null],[11,"clone","","",291,null],[11,"new","","",292,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",292,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",292,null],[11,"tcx","","",292,null],[11,"param_env","","",292,null],[11,"closure_typer","","",292,null],[11,"projection_mode","","",292,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",292,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",292,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",292,null],[11,"new","","",289,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",291,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",293,null],[11,"new","rustc::traits::specialize::specialization_graph","",294,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",294,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",294,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",294,null],[11,"clone","","",295,null],[11,"fmt","","",295,null],[11,"is_from_trait","","",295,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",295,null],[11,"def_id","","",295,null],[11,"next","","",296,null],[11,"next","","",297,null],[11,"map","","",298,null],[11,"next","","",299,null],[11,"next","","",300,null],[11,"next","","",301,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",297,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",297,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",297,null],[11,"new","rustc::traits::specialize","",302,{"inputs":[],"output":{"name":"specializescache"}}],[11,"check","","",302,null],[11,"insert","","",302,null],[11,"fmt","rustc::traits::project","",286,null],[11,"fmt","rustc::traits::fulfill","",281,null],[11,"fmt","rustc::traits","",303,null],[11,"fmt","","",304,null],[11,"fmt","","",305,null],[11,"fmt","","",306,null],[11,"fmt","","",307,null],[11,"fmt","","",308,null],[11,"fmt","","",309,null],[11,"fmt","","",310,null],[11,"fmt","","",311,null],[11,"fmt","","",312,null],[11,"fmt","rustc::traits::project","",285,null],[11,"lift_to_tcx","rustc::traits","",313,null],[11,"lift_to_tcx","","",304,null],[11,"super_fold_with","","",303,null],[11,"super_visit_with","","",303,null],[11,"super_fold_with","","",305,null],[11,"super_visit_with","","",305,null],[11,"super_fold_with","","",306,null],[11,"super_visit_with","","",306,null],[11,"super_fold_with","","",308,null],[11,"super_visit_with","","",308,null],[11,"super_fold_with","","",307,null],[11,"super_visit_with","","",307,null],[11,"super_fold_with","","",309,null],[11,"super_visit_with","","",309,null],[11,"super_fold_with","","",310,null],[11,"super_visit_with","","",310,null],[11,"super_fold_with","","",304,null],[11,"super_visit_with","","",304,null],[11,"super_fold_with","rustc::traits::project","",286,null],[11,"super_visit_with","","",286,null],[11,"next","rustc::traits::util","",314,null],[11,"trait_ref_for_builtin_bound","rustc::ty::context","",121,null],[11,"predicate_for_trait_def","","",121,null],[11,"predicate_for_builtin_bound","","",121,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",121,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",121,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",121,null],[11,"closure_trait_ref_and_return_type","","",121,null],[11,"eq","rustc::traits","",303,null],[11,"ne","","",303,null],[11,"clone","","",303,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"fmt","","",315,null],[11,"clone","","",315,null],[11,"eq","","",316,null],[11,"ne","","",316,null],[11,"fmt","","",316,null],[11,"clone","","",316,null],[11,"eq","","",317,null],[11,"ne","","",317,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"clone","","",312,null],[11,"clone","","",304,null],[11,"eq","","",305,null],[11,"ne","","",305,null],[11,"clone","","",305,null],[11,"eq","","",306,null],[11,"ne","","",306,null],[11,"clone","","",306,null],[11,"clone","","",308,null],[11,"clone","","",307,null],[11,"clone","","",309,null],[11,"eq","","",309,null],[11,"ne","","",309,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"clone","","",310,null],[11,"new","","",303,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",303,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",303,null],[11,"new","","",315,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",315,{"inputs":[{"name":"span"},{"name":"u32"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",315,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",304,null],[11,"map","","",304,null],[11,"clone","rustc::ty::adjustment","",318,null],[11,"clone","","",319,null],[11,"is_identity","","",318,null],[11,"is_identity","","",319,null],[11,"fmt","","",320,null],[11,"eq","","",320,null],[11,"ne","","",320,null],[11,"clone","","",320,null],[11,"fmt","","",321,null],[11,"decode","","",321,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",321,null],[11,"clone","","",321,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",322,null],[11,"adjust_for_autoderef","","",322,null],[11,"adjust_for_autoref","","",322,null],[11,"eq","rustc::ty::cast","",323,null],[11,"ne","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"eq","","",324,null],[11,"ne","","",324,null],[11,"fmt","","",324,null],[11,"clone","","",324,null],[11,"decode","","",325,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",325,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"from_ty","","",324,{"inputs":[{"name":"tys"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::error","",326,null],[11,"clone","","",326,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"fmt","","",328,null],[11,"hash","","",328,null],[11,"eq","","",328,null],[11,"decode","","",328,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",328,null],[11,"clone","","",328,null],[11,"fmt","","",327,null],[11,"note_and_explain_type_err","rustc::ty::context","",121,null],[11,"hash","rustc::ty::fast_reject","",329,null],[11,"eq","","",329,null],[11,"ne","","",329,null],[11,"fmt","","",329,null],[11,"clone","","",329,null],[11,"tcx","rustc::ty::fold","",330,null],[11,"fold_ty","","",330,null],[11,"collect_regions","rustc::ty::context","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",121,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",121,null],[11,"new","rustc::ty::fold","",331,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",331,null],[11,"fold_binder","","",331,null],[11,"fold_region","","",331,null],[11,"replace_late_bound_regions","rustc::ty::context","",121,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",121,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",121,null],[11,"no_late_bound_regions","","",121,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",121,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",121,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",121,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",121,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",121,null],[11,"item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",121,null],[11,"node_path_str","","Returns a string identifying this local node-id.",121,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",121,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",121,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",121,null],[11,"push_item_path","","",121,null],[11,"fmt","rustc::ty::item_path","",332,null],[11,"default","rustc::ty::layout","",333,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",333,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",333,null],[11,"ptr_sized_integer","","",333,null],[11,"clone","","",334,null],[11,"fmt","","",335,null],[11,"hash","","",335,null],[11,"cmp","","",335,null],[11,"partial_cmp","","",335,null],[11,"lt","","",335,null],[11,"le","","",335,null],[11,"gt","","",335,null],[11,"ge","","",335,null],[11,"eq","","",335,null],[11,"ne","","",335,null],[11,"clone","","",335,null],[11,"from_bits","","",335,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",335,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",335,null],[11,"bits","","",335,null],[11,"abi_align","","",335,null],[11,"checked_add","","",335,null],[11,"checked_mul","","",335,null],[11,"fmt","","",336,null],[11,"hash","","",336,null],[11,"eq","","",336,null],[11,"ne","","",336,null],[11,"clone","","",336,null],[11,"from_bits","","",336,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",336,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",336,null],[11,"pref","","",336,null],[11,"min","","",336,null],[11,"max","","",336,null],[11,"fmt","","",337,null],[11,"hash","","",337,null],[11,"cmp","","",337,null],[11,"partial_cmp","","",337,null],[11,"eq","","",337,null],[11,"clone","","",337,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",337,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",337,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",337,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",337,null],[11,"fmt","","",338,null],[11,"hash","","",338,null],[11,"eq","","",338,null],[11,"ne","","",338,null],[11,"clone","","",338,null],[11,"size","","",338,null],[11,"align","","",338,null],[11,"fmt","","",339,null],[11,"hash","","",339,null],[11,"eq","","",339,null],[11,"ne","","",339,null],[11,"new","","",339,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",339,null],[11,"min_size","","Get the size without trailing alignment padding.",339,null],[11,"stride","","Get the size with trailing aligment padding.",339,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",339,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",339,{"inputs":[{"name":"inferctxt"},{"name":"tys"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",339,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",340,null],[11,"eq","","",340,null],[11,"ne","","",340,null],[11,"fmt","","",340,null],[11,"fmt","","",341,null],[11,"clone","","",341,null],[11,"fmt","","",341,null],[11,"compute_uncached","","",340,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",340,null],[11,"size","","",340,null],[11,"align","","",340,null],[11,"fmt","","",342,null],[11,"clone","","",342,null],[11,"compute","","",342,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",342,null],[11,"new","rustc::ty::_match","",343,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",343,null],[11,"tcx","","",343,null],[11,"a_is_expected","","",343,null],[11,"relate_with_variance","","",343,null],[11,"regions","","",343,null],[11,"tys","","",343,null],[11,"binders","","",343,null],[11,"to_dep_node","rustc::ty::maps","",344,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",345,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",346,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",347,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",348,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",349,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",350,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",351,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",352,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",353,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",354,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",355,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",356,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",357,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"fmt","rustc::ty::outlives","",358,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",118,null],[11,"fmt","rustc::ty::relate","",359,null],[11,"clone","","",359,null],[11,"relate","rustc::ty::sty","",360,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"result"}}],[11,"relate","","",163,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"result"}}],[11,"relate","rustc::hir","",94,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"relate","syntax::abi","",361,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",362,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",363,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"result"}}],[11,"relate","collections::vec","",243,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",364,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"result"}}],[11,"relate","","",365,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"result"}}],[11,"relate","","",122,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"relate","","",165,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"result"}}],[11,"relate","","",366,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"result"}}],[11,"relate","","",123,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"result"}}],[11,"relate","alloc::rc","",367,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"relate","alloc::boxed","",368,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"result"}}],[11,"hash","rustc::ty::subst","",369,null],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"clone","","",369,null],[11,"new","","",369,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",369,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",369,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"tys"}],"output":{"name":"substs"}}],[11,"empty","","",369,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",369,null],[11,"type_for_def","","",369,null],[11,"self_ty","","",369,null],[11,"with_self_ty","","",369,null],[11,"erase_regions","","",369,null],[11,"with_method","","",369,null],[11,"with_method_from","","",369,null],[11,"with_method_from_subst","","",369,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",369,null],[11,"encode","","",369,null],[11,"decode","","",369,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",370,null],[11,"decode","","",370,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",370,null],[11,"hash","","",370,null],[11,"clone","","",370,null],[11,"eq","","",370,null],[11,"cmp","","",370,null],[11,"partial_cmp","","",370,null],[11,"all","","",370,null],[11,"to_uint","","",370,null],[11,"from_uint","","",370,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",371,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",371,null],[11,"hash","","",371,null],[11,"clone","","",371,null],[11,"eq","","",371,null],[11,"ne","","",371,null],[11,"fmt","","",371,null],[11,"empty","","",371,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",371,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",371,null],[11,"extend","","Appends `values` to the vector associated with `space`.",371,null],[11,"pop","","",371,null],[11,"truncate","","",371,null],[11,"replace","","",371,null],[11,"get_self","","",371,null],[11,"len","","",371,null],[11,"is_empty_in","","",371,null],[11,"get_slice","","",371,null],[11,"get_mut_slice","","",371,null],[11,"opt_get","","",371,null],[11,"get","","",371,null],[11,"iter","","",371,null],[11,"into_iter","","",371,null],[11,"iter_enumerated","","",371,null],[11,"as_slice","","",371,null],[11,"into_vec","","",371,null],[11,"all_vecs","","",371,null],[11,"all","","",371,null],[11,"any","","",371,null],[11,"is_empty","","",371,null],[11,"map","","",371,null],[11,"map_enumerated","","",371,null],[11,"split","","",371,null],[11,"with_slice","","",371,null],[11,"clone","","",372,null],[11,"next","","",372,null],[11,"size_hint","","",372,null],[11,"into_iter","","",371,null],[11,"new","rustc::ty::trait_def","",373,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",373,null],[11,"object_safety","","",373,null],[11,"set_object_safety","","",373,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",373,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",373,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",373,null],[11,"ancestors","","",373,null],[11,"for_each_impl","","",373,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",373,null],[11,"hash","","",374,null],[11,"cmp","","",374,null],[11,"partial_cmp","","",374,null],[11,"lt","","",374,null],[11,"le","","",374,null],[11,"gt","","",374,null],[11,"ge","","",374,null],[11,"clone","","",374,null],[11,"eq","","",374,null],[11,"ne","","",374,null],[18,"NO_TRAIT_FLAGS","rustc_borrowck","",374,null],[18,"HAS_DEFAULT_IMPL","","",374,null],[18,"IS_OBJECT_SAFE","","",374,null],[18,"OBJECT_SAFETY_VALID","","",374,null],[18,"IMPLS_VALID","","",374,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",374,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",374,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",374,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",374,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",374,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",374,null],[11,"is_all","","Returns `true` if all flags are currently set.",374,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",374,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",374,null],[11,"insert","","Inserts the specified flags in-place.",374,null],[11,"remove","","Removes the specified flags in-place.",374,null],[11,"toggle","","Toggles the specified flags in-place.",374,null],[11,"bitor","","Returns the union of the two sets of flags.",374,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",374,null],[11,"bitand","","Returns the intersection between the two sets of flags.",374,null],[11,"sub","","Returns the set difference of the two sets of flags.",374,null],[11,"not","","Returns the complement of this set of flags.",374,null],[11,"new","rustc::ty::walk","",375,{"inputs":[{"name":"tys"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",375,null],[11,"next","","",375,null],[11,"fmt","rustc::ty::wf","",376,null],[11,"to_ty","syntax::attr","",377,null],[11,"initial_discriminant","","",377,null],[11,"assert_ty_matches","","",377,null],[11,"disr_incr","","",377,null],[11,"clone","rustc::ty::util","",378,null],[11,"fmt","","",379,null],[11,"eq","","",379,null],[11,"cmp","","",379,null],[11,"partial_cmp","","",379,null],[11,"clone","","",379,null],[11,"can_type_implement_copy","rustc::ty","",380,null],[11,"pat_contains_ref_binding","rustc::ty::context","",121,null],[11,"arm_contains_ref_binding","","",121,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",121,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",121,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",121,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",121,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",121,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",121,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",121,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",121,null],[11,"moves_by_default","rustc::ty","",322,null],[11,"is_sized","","",322,null],[11,"layout","","",322,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",322,null],[11,"clone","rustc::ty::contents","",381,null],[11,"when","","",381,null],[11,"intersects","","",381,null],[11,"owns_owned","","",381,null],[11,"interior_param","","",381,null],[11,"interior_unsafe","","",381,null],[11,"needs_drop","","",381,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",381,null],[11,"union","","",381,null],[11,"has_dtor","","",381,null],[11,"bitor","","",381,null],[11,"bitand","","",381,null],[11,"sub","","",381,null],[11,"fmt","","",381,null],[11,"type_contents","rustc::ty","",322,null],[11,"new","rustc::ty::context","",382,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",383,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",121,null],[11,"deref","","",121,null],[11,"crate_name","","",121,null],[11,"crate_disambiguator","","",121,null],[11,"type_parameter_def","","",121,null],[11,"node_types","","",121,null],[11,"node_type_insert","","",121,null],[11,"intern_trait_def","","",121,null],[11,"alloc_trait_def","","",121,null],[11,"intern_adt_def","","",121,null],[11,"intern_stability","","",121,null],[11,"intern_layout","","",121,null],[11,"store_free_region_map","","",121,null],[11,"free_region_map","","",121,null],[11,"lift","","",121,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",121,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",121,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"hashmap"},{"name":"map"},{"name":"hashmap"},{"name":"hashset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",121,null],[11,"mk_type_list","","",121,null],[11,"mk_substs","","",121,null],[11,"mk_bare_fn","","",121,null],[11,"mk_region","","",121,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",121,null],[11,"mk_ty","","",121,null],[11,"mk_mach_int","","",121,null],[11,"mk_mach_uint","","",121,null],[11,"mk_mach_float","","",121,null],[11,"mk_str","","",121,null],[11,"mk_static_str","","",121,null],[11,"mk_enum","","",121,null],[11,"mk_box","","",121,null],[11,"mk_ptr","","",121,null],[11,"mk_ref","","",121,null],[11,"mk_mut_ref","","",121,null],[11,"mk_imm_ref","","",121,null],[11,"mk_mut_ptr","","",121,null],[11,"mk_imm_ptr","","",121,null],[11,"mk_nil_ptr","","",121,null],[11,"mk_array","","",121,null],[11,"mk_slice","","",121,null],[11,"mk_tup","","",121,null],[11,"mk_nil","","",121,null],[11,"mk_bool","","",121,null],[11,"mk_fn_def","","",121,null],[11,"mk_fn_ptr","","",121,null],[11,"mk_trait","","",121,null],[11,"mk_projection","","",121,null],[11,"mk_struct","","",121,null],[11,"mk_closure","","",121,null],[11,"mk_closure_from_closure_substs","","",121,null],[11,"mk_var","","",121,null],[11,"mk_int_var","","",121,null],[11,"mk_float_var","","",121,null],[11,"mk_infer","","",121,null],[11,"mk_param","","",121,null],[11,"mk_self_type","","",121,null],[11,"mk_param_from_def","","",121,null],[11,"trait_items","","",121,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",121,null],[11,"lift_to_tcx","core::option","",384,null],[11,"lift_to_tcx","core::result","",119,null],[11,"lift_to_tcx","collections::vec","",243,null],[11,"lift_to_tcx","rustc::ty::sty","",366,null],[11,"lift_to_tcx","","",122,null],[11,"lift_to_tcx","rustc::ty","",385,null],[11,"lift_to_tcx","","",386,null],[11,"lift_to_tcx","","",387,null],[11,"lift_to_tcx","","",363,null],[11,"lift_to_tcx","","",388,null],[11,"lift_to_tcx","rustc::ty::sty","",123,null],[11,"lift_to_tcx","","",165,null],[11,"lift_to_tcx","rustc::ty","",389,null],[11,"lift_to_tcx","rustc::ty::adjustment","",320,null],[11,"lift_to_tcx","rustc::ty::sty","",164,null],[11,"lift_to_tcx","","",163,null],[11,"lift_to_tcx","","",390,null],[11,"lift_to_tcx","rustc::ty::error","",326,null],[11,"lift_to_tcx","rustc::infer::type_variable","",143,null],[11,"lift_to_tcx","rustc::ty::error","",327,null],[11,"super_fold_with","rustc::hir","",94,null],[11,"super_visit_with","","",94,null],[11,"super_fold_with","syntax::abi","",361,null],[11,"super_visit_with","","",361,null],[11,"super_fold_with","core::option","",384,null],[11,"super_visit_with","","",384,null],[11,"super_fold_with","alloc::rc","",367,null],[11,"super_visit_with","","",367,null],[11,"super_fold_with","alloc::boxed","",368,null],[11,"super_visit_with","","",368,null],[11,"super_fold_with","collections::vec","",243,null],[11,"super_visit_with","","",243,null],[11,"super_fold_with","rustc::ty::sty","",123,null],[11,"fold_with","","",123,null],[11,"super_visit_with","","",123,null],[11,"visit_with","","",123,null],[11,"super_fold_with","syntax::ptr","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","rustc::ty::subst","",371,null],[11,"super_visit_with","","",371,null],[11,"super_fold_with","rustc::ty::sty","",392,null],[11,"super_visit_with","","",392,null],[11,"super_fold_with","","",390,null],[11,"fold_with","","",390,null],[11,"super_visit_with","","",390,null],[11,"super_fold_with","","",360,null],[11,"fold_with","","",360,null],[11,"super_visit_with","","",360,null],[11,"super_fold_with","","",164,null],[11,"fold_with","","",164,null],[11,"super_visit_with","","",164,null],[11,"super_fold_with","","",163,null],[11,"fold_with","","",163,null],[11,"super_visit_with","","",163,null],[11,"super_fold_with","","",122,null],[11,"fold_with","","",122,null],[11,"super_visit_with","","",122,null],[11,"super_fold_with","rustc::ty","",393,null],[11,"fold_with","","",393,null],[11,"super_visit_with","","",393,null],[11,"super_fold_with","rustc::ty::sty","",366,null],[11,"fold_with","","",366,null],[11,"super_visit_with","","",366,null],[11,"visit_with","","",366,null],[11,"super_fold_with","","",165,null],[11,"super_visit_with","","",165,null],[11,"super_fold_with","rustc::ty","",389,null],[11,"super_visit_with","","",389,null],[11,"super_fold_with","rustc::ty::adjustment","",320,null],[11,"fold_with","","",320,null],[11,"super_visit_with","","",320,null],[11,"super_fold_with","rustc::ty::sty","",365,null],[11,"super_visit_with","","",365,null],[11,"super_fold_with","","",364,null],[11,"fold_with","","",364,null],[11,"super_visit_with","","",364,null],[11,"super_fold_with","rustc::ty","",394,null],[11,"super_visit_with","","",394,null],[11,"super_fold_with","","",395,null],[11,"super_visit_with","","",395,null],[11,"super_fold_with","","",396,null],[11,"super_visit_with","","",396,null],[11,"super_fold_with","","",397,null],[11,"super_visit_with","","",397,null],[11,"super_fold_with","","",398,null],[11,"super_visit_with","","",398,null],[11,"super_fold_with","","",388,null],[11,"super_visit_with","","",388,null],[11,"super_fold_with","","",363,null],[11,"super_visit_with","","",363,null],[11,"super_fold_with","rustc::ty::sty","",362,null],[11,"super_visit_with","","",362,null],[11,"super_fold_with","rustc::ty","",399,null],[11,"super_visit_with","","",399,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",387,null],[11,"super_visit_with","","",387,null],[11,"super_fold_with","","",400,null],[11,"super_visit_with","","",400,null],[11,"super_fold_with","","",380,null],[11,"super_visit_with","","",380,null],[11,"super_fold_with","","",401,null],[11,"super_visit_with","","",401,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"hash","","",360,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"clone","","",360,null],[11,"decode","","",402,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",402,null],[11,"hash","","",402,null],[11,"cmp","","",402,null],[11,"partial_cmp","","",402,null],[11,"lt","","",402,null],[11,"le","","",402,null],[11,"gt","","",402,null],[11,"ge","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"clone","","",402,null],[11,"decode","","",403,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",403,null],[11,"hash","","",403,null],[11,"cmp","","",403,null],[11,"partial_cmp","","",403,null],[11,"lt","","",403,null],[11,"le","","",403,null],[11,"gt","","",403,null],[11,"ge","","",403,null],[11,"eq","","",403,null],[11,"ne","","",403,null],[11,"clone","","",403,null],[11,"fmt","","",404,null],[11,"hash","","",404,null],[11,"eq","","",404,null],[11,"ne","","",404,null],[11,"clone","","",404,null],[11,"fmt","","",165,null],[11,"hash","","",165,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"clone","","",165,null],[11,"encode","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",392,null],[11,"eq","","",392,null],[11,"ne","","",392,null],[11,"clone","","",392,null],[11,"principal_def_id","","",392,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",392,null],[11,"projection_bounds_with_self_ty","","",392,null],[11,"hash","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"clone","","",122,null],[11,"self_ty","","",123,null],[11,"def_id","","",123,null],[11,"substs","","",123,null],[11,"input_types","","",123,null],[11,"to_poly_trait_predicate","","",123,null],[11,"fmt","","",123,null],[11,"hash","","",123,null],[11,"eq","","",123,null],[11,"ne","","",123,null],[11,"clone","","",123,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",123,null],[11,"as_ref","","",123,null],[11,"map_bound_ref","","",123,null],[11,"map_bound","","",123,null],[11,"fmt","rustc::ty","",405,null],[11,"fmt","rustc::ty::sty","",362,null],[11,"hash","","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"clone","","",362,null],[11,"sort_key","","",362,null],[11,"fmt","","",406,null],[11,"hash","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",406,null],[11,"hash","","",390,null],[11,"eq","","",390,null],[11,"ne","","",390,null],[11,"clone","","",390,null],[11,"decode","","",164,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",164,null],[11,"fmt","","",164,null],[11,"hash","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"clone","","",164,null],[11,"diverges","","",164,null],[11,"unwrap","","",164,null],[11,"unwrap_or","","",164,null],[11,"diverges","","",123,null],[11,"hash","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"inputs","","",123,null],[11,"input","","",123,null],[11,"output","","",123,null],[11,"variadic","","",123,null],[11,"hash","","",407,null],[11,"eq","","",407,null],[11,"ne","","",407,null],[11,"clone","","",407,null],[11,"new","","",407,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",407,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",407,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",407,null],[11,"is_self","","",407,null],[11,"fmt","","",408,null],[11,"decode","","",408,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",408,null],[11,"hash","","",408,null],[11,"eq","","",408,null],[11,"ne","","",408,null],[11,"clone","","",408,null],[11,"decode","","",366,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",366,null],[11,"hash","","",366,null],[11,"eq","","",366,null],[11,"ne","","",366,null],[11,"clone","","",366,null],[11,"fmt","","",409,null],[11,"decode","","",409,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",409,null],[11,"hash","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"clone","","",409,null],[11,"hash","","",152,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"clone","","",152,null],[11,"hash","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"hash","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"hash","","",148,null],[11,"decode","","",148,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"decode","","",410,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",410,null],[11,"hash","","",410,null],[11,"eq","","",410,null],[11,"ne","","",410,null],[11,"clone","","",410,null],[11,"hash","","",411,null],[11,"eq","","",411,null],[11,"ne","","",411,null],[11,"clone","","",411,null],[11,"clone","","",364,null],[11,"hash","","",364,null],[11,"eq","","",364,null],[11,"ne","","",364,null],[11,"new","","",364,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"existentialbounds"}}],[11,"fmt","","",365,null],[11,"hash","","",365,null],[11,"eq","","",365,null],[11,"ne","","",365,null],[11,"clone","","",365,null],[11,"empty","","",365,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",365,null],[11,"to_predicates","","",365,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",412,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",412,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",412,null],[11,"clear","","",412,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",412,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",412,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",412,null],[11,"union","","Returns the union of both `EnumSets`.",412,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",412,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",412,null],[11,"remove","","Removes an enum from the EnumSet",412,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",412,null],[11,"iter","","Returns an iterator over an `EnumSet`.",412,null],[11,"clone","collections::binary_heap","",413,null],[11,"clone_from","","",413,null],[11,"default","","",413,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",413,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",413,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",413,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",413,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",413,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",413,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",413,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",413,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",413,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",413,null],[11,"push","","Pushes an item onto the binary heap.",413,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",413,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",413,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",413,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",413,null],[11,"len","","Returns the length of the binary heap.",413,null],[11,"is_empty","","Checks if the binary heap is empty.",413,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",413,null],[11,"clear","","Drops all items from the binary heap.",413,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",413,null],[11,"clone","","",414,null],[11,"next","","",414,null],[11,"size_hint","","",414,null],[11,"next_back","","",414,null],[11,"clone","","",415,null],[11,"next","","",415,null],[11,"size_hint","","",415,null],[11,"next_back","","",415,null],[11,"next","","",416,null],[11,"size_hint","","",416,null],[11,"next_back","","",416,null],[11,"from","","",413,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",243,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",413,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",413,null],[11,"extend","","",413,null],[11,"extend","","",413,null],[11,"drop","collections::btree::map","",417,null],[11,"clone","","",417,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",417,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",417,null],[11,"get","","Returns a reference to the value corresponding to the key.",417,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",417,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",417,null],[11,"insert","","Inserts a key-value pair into the map.",417,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",417,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",417,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",417,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",417,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",417,null],[11,"next","","",418,null],[11,"size_hint","","",418,null],[11,"next_back","","",418,null],[11,"len","","",418,null],[11,"clone","","",418,null],[11,"next","","",419,null],[11,"size_hint","","",419,null],[11,"next_back","","",419,null],[11,"len","","",419,null],[11,"into_iter","","",417,null],[11,"drop","","",420,null],[11,"next","","",420,null],[11,"size_hint","","",420,null],[11,"next_back","","",420,null],[11,"len","","",420,null],[11,"next","","",421,null],[11,"size_hint","","",421,null],[11,"next_back","","",421,null],[11,"len","","",421,null],[11,"clone","","",421,null],[11,"next","","",422,null],[11,"size_hint","","",422,null],[11,"next_back","","",422,null],[11,"len","","",422,null],[11,"clone","","",422,null],[11,"next","","",423,null],[11,"next","","",424,null],[11,"size_hint","","",424,null],[11,"next_back","","",424,null],[11,"len","","",424,null],[11,"next_back","","",423,null],[11,"clone","","",423,null],[11,"next","","",425,null],[11,"next_back","","",425,null],[11,"from_iter","","",417,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",417,null],[11,"extend","","",417,null],[11,"hash","","",417,null],[11,"default","","",417,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",417,null],[11,"partial_cmp","","",417,null],[11,"cmp","","",417,null],[11,"fmt","","",417,null],[11,"index","","",417,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",417,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",417,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",417,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",417,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",417,null],[11,"len","","Returns the number of elements in the map.",417,null],[11,"is_empty","","Returns true if the map contains no elements.",417,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",426,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",426,null],[11,"key","","Returns a reference to this entry&#39;s key.",426,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",427,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",427,null],[11,"key","","Gets a reference to the key in the entry.",428,null],[11,"get","","Gets a reference to the value in the entry.",428,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",428,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",428,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",428,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",428,null],[11,"partial_cmp","collections::btree::set","",429,null],[11,"lt","","",429,null],[11,"le","","",429,null],[11,"gt","","",429,null],[11,"ge","","",429,null],[11,"cmp","","",429,null],[11,"eq","","",429,null],[11,"ne","","",429,null],[11,"hash","","",429,null],[11,"clone","","",429,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",429,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",429,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",429,null],[11,"difference","","Visits the values representing the difference, in ascending order.",429,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",429,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",429,null],[11,"union","","Visits the values representing the union, in ascending order.",429,null],[11,"len","","Returns the number of elements in the set.",429,null],[11,"is_empty","","Returns true if the set contains no elements.",429,null],[11,"clear","","Clears the set, removing all values.",429,null],[11,"contains","","Returns `true` if the set contains a value.",429,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",429,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",429,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",429,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",429,null],[11,"insert","","Adds a value to the set.",429,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",429,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",429,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",429,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",429,null],[11,"from_iter","","",429,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",429,null],[11,"extend","","",429,null],[11,"extend","","",429,null],[11,"default","","",429,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",429,null],[11,"clone","","",430,null],[11,"next","","",430,null],[11,"size_hint","","",430,null],[11,"next_back","","",430,null],[11,"len","","",430,null],[11,"next","","",431,null],[11,"size_hint","","",431,null],[11,"next_back","","",431,null],[11,"len","","",431,null],[11,"clone","","",432,null],[11,"next","","",432,null],[11,"next_back","","",432,null],[11,"clone","","",433,null],[11,"next","","",433,null],[11,"size_hint","","",433,null],[11,"clone","","",434,null],[11,"next","","",434,null],[11,"size_hint","","",434,null],[11,"clone","","",435,null],[11,"next","","",435,null],[11,"size_hint","","",435,null],[11,"clone","","",436,null],[11,"next","","",436,null],[11,"size_hint","","",436,null],[11,"borrow","collections::borrow","",437,null],[11,"clone","","",437,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",437,null],[11,"into_owned","","Extracts the owned data.",437,null],[11,"deref","","",437,null],[11,"cmp","","",437,null],[11,"eq","","",437,null],[11,"partial_cmp","","",437,null],[11,"fmt","","",437,null],[11,"fmt","","",437,null],[11,"hash","","",437,null],[11,"as_ref","","",437,null],[11,"hash","collections::enum_set","",412,null],[11,"cmp","","",412,null],[11,"partial_cmp","","",412,null],[11,"lt","","",412,null],[11,"le","","",412,null],[11,"gt","","",412,null],[11,"ge","","",412,null],[11,"eq","","",412,null],[11,"ne","","",412,null],[11,"clone","","",412,null],[11,"fmt","","",412,null],[11,"sub","","",412,null],[11,"bitor","","",412,null],[11,"bitand","","",412,null],[11,"bitxor","","",412,null],[11,"clone","","",438,null],[11,"next","","",438,null],[11,"size_hint","","",438,null],[11,"from_iter","","",412,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",412,null],[11,"extend","","",412,null],[11,"clone","collections::linked_list","",439,null],[11,"clone","","",440,null],[11,"default","","",441,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",441,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",441,null],[11,"iter","","Provides a forward iterator.",441,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",441,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",441,null],[11,"len","","Returns the length of the `LinkedList`.",441,null],[11,"clear","","Removes all elements from the `LinkedList`.",441,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",441,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",441,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",441,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",441,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",441,null],[11,"push_front","","Adds an element first in the list.",441,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",441,null],[11,"push_back","","Appends an element to the back of a list",441,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",441,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",441,null],[11,"front_place","","Returns a place for insertion at the front of the list.",441,null],[11,"back_place","","Returns a place for insertion at the back of the list.",441,null],[11,"drop","","",441,null],[11,"next","","",439,null],[11,"size_hint","","",439,null],[11,"next_back","","",439,null],[11,"next","","",442,null],[11,"size_hint","","",442,null],[11,"next_back","","",442,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",442,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",442,null],[11,"next","","",440,null],[11,"size_hint","","",440,null],[11,"next_back","","",440,null],[11,"from_iter","","",441,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",441,null],[11,"extend","","",441,null],[11,"extend","","",441,null],[11,"eq","","",441,null],[11,"ne","","",441,null],[11,"partial_cmp","","",441,null],[11,"cmp","","",441,null],[11,"clone","","",441,null],[11,"fmt","","",441,null],[11,"hash","","",441,null],[11,"make_place","","",443,null],[11,"pointer","","",443,null],[11,"finalize","","",443,null],[11,"make_place","","",444,null],[11,"pointer","","",444,null],[11,"finalize","","",444,null],[11,"start","core::ops","",445,null],[11,"end","","",446,null],[11,"start","","",447,null],[11,"end","","",447,null],[11,"borrow","collections::vec","",243,null],[11,"borrow_mut","","",243,null],[11,"clone","collections::str","",448,null],[11,"next","","",448,null],[11,"size_hint","","",448,null],[11,"borrow","collections::string","",449,null],[11,"fmt","core::str::pattern","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"clone","","",450,null],[11,"fmt","","",451,null],[11,"clone","","",451,null],[11,"haystack","","",451,null],[11,"next","","",451,null],[11,"next_match","","",451,null],[11,"next_reject","","",451,null],[11,"next_back","","",451,null],[11,"next_match_back","","",451,null],[11,"next_reject_back","","",451,null],[11,"fmt","","",452,null],[11,"clone","","",452,null],[11,"haystack","","",452,null],[11,"next","","",452,null],[11,"next_match","","",452,null],[11,"next_reject","","",452,null],[11,"next_back","","",452,null],[11,"next_match_back","","",452,null],[11,"next_reject_back","","",452,null],[11,"clone","","",453,null],[11,"fmt","","",453,null],[11,"haystack","","",453,null],[11,"next","","",453,null],[11,"next_match","","",453,null],[11,"next_reject","","",453,null],[11,"next_back","","",453,null],[11,"next_match_back","","",453,null],[11,"next_reject_back","","",453,null],[11,"fmt","","",454,null],[11,"clone","","",454,null],[11,"haystack","","",454,null],[11,"next","","",454,null],[11,"next_match","","",454,null],[11,"next_back","","",454,null],[11,"next_match_back","","",454,null],[11,"cmp","collections::string","",449,null],[11,"partial_cmp","","",449,null],[11,"lt","","",449,null],[11,"le","","",449,null],[11,"gt","","",449,null],[11,"ge","","",449,null],[11,"fmt","","",455,null],[11,"fmt","","",456,null],[11,"new","","Creates a new empty `String`.",449,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",449,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",449,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",449,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",449,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",449,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",449,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",449,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",449,null],[11,"as_str","","Extracts a string slice containing the entire string.",449,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",449,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",449,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",449,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",449,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",449,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",449,null],[11,"push","","Appends the given `char` to the end of this `String`.",449,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",449,null],[11,"truncate","","Shortens this `String` to the specified length.",449,null],[11,"pop","","Removes the last character from the string buffer and returns it.",449,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",449,null],[11,"insert","","Inserts a character into this `String` at a byte position.",449,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",449,null],[11,"len","","Returns the length of this `String`, in bytes.",449,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",449,null],[11,"clear","","Truncates this `String`, removing all contents.",449,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",449,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",449,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",455,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",455,null],[11,"fmt","","",455,null],[11,"fmt","","",456,null],[11,"clone","","",449,null],[11,"clone_from","","",449,null],[11,"from_iter","","",449,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",449,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",449,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",449,null],[11,"extend","","",449,null],[11,"extend","","",449,null],[11,"extend","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"eq","collections::borrow","",437,null],[11,"ne","","",437,null],[11,"eq","","",437,null],[11,"ne","","",437,null],[11,"eq","","",437,null],[11,"ne","","",437,null],[11,"eq","collections::string","",449,null],[11,"ne","","",449,null],[11,"default","","",449,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",449,null],[11,"fmt","","",449,null],[11,"hash","","",449,null],[11,"add","","",449,null],[11,"index","","",449,null],[11,"index","","",449,null],[11,"index","","",449,null],[11,"index","","",449,null],[11,"index","","",449,null],[11,"index","","",449,null],[11,"index_mut","","",449,null],[11,"index_mut","","",449,null],[11,"index_mut","","",449,null],[11,"index_mut","","",449,null],[11,"index_mut","","",449,null],[11,"index_mut","","",449,null],[11,"deref","","",449,null],[11,"deref_mut","","",449,null],[11,"from_str","","",449,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",457,null],[11,"fmt","","",457,null],[11,"fmt","","",457,null],[11,"eq","","",457,null],[11,"as_ref","","",449,null],[11,"as_ref","","",449,null],[11,"from","","",449,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",437,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",437,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",449,null],[11,"write_str","","",449,null],[11,"write_char","","",449,null],[11,"drop","","",458,null],[11,"next","","",458,null],[11,"size_hint","","",458,null],[11,"next_back","","",458,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",243,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",243,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",243,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",243,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",243,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",243,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",243,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",243,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",243,null],[11,"as_slice","","Extracts a slice containing the entire vector.",243,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",243,null],[11,"set_len","","Sets the length of a vector.",243,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",243,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",243,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",243,null],[11,"retain","","Retains only the elements specified by the predicate.",243,null],[11,"push","","Appends an element to the back of a collection.",243,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",243,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",243,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",243,null],[11,"clear","","Clears the vector, removing all values.",243,null],[11,"len","","Returns the number of elements in the vector.",243,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",243,null],[11,"split_off","","Splits the collection into two at the given index.",243,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",243,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",243,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",243,null],[11,"clone","","",243,null],[11,"clone_from","","",243,null],[11,"hash","","",243,null],[11,"index","","",243,null],[11,"index_mut","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"index_mut","","",243,null],[11,"deref","","",243,null],[11,"deref_mut","","",243,null],[11,"from_iter","","",243,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",243,null],[11,"extend","","",243,null],[11,"extend","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","collections::borrow","",437,null],[11,"ne","","",437,null],[11,"eq","","",437,null],[11,"ne","","",437,null],[11,"eq","","",437,null],[11,"ne","","",437,null],[11,"eq","collections::vec","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"eq","","",243,null],[11,"ne","","",243,null],[11,"partial_cmp","","",243,null],[11,"cmp","","",243,null],[11,"drop","","",243,null],[11,"default","","",243,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",243,null],[11,"as_ref","","",243,null],[11,"as_mut","","",243,null],[11,"as_ref","","",243,null],[11,"as_mut","","",243,null],[11,"from","","",243,null],[11,"from","","",243,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",437,null],[11,"from","","",437,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",437,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",459,null],[11,"size_hint","","",459,null],[11,"count","","",459,null],[11,"next_back","","",459,null],[11,"clone","","",459,null],[11,"drop","","",459,null],[11,"next","","",460,null],[11,"size_hint","","",460,null],[11,"next_back","","",460,null],[11,"drop","","",460,null],[11,"clone","collections::vec_deque","",461,null],[11,"drop","","",461,null],[11,"default","","",461,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",461,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",461,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",461,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",461,null],[11,"swap","","Swaps elements at indices `i` and `j`.",461,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",461,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",461,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",461,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",461,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",461,null],[11,"iter","","Returns a front-to-back iterator.",461,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",461,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",461,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",461,null],[11,"len","","Returns the number of elements in the `VecDeque`.",461,null],[11,"is_empty","","Returns true if the buffer contains no elements",461,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",461,null],[11,"clear","","Clears the buffer, removing all values.",461,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",461,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",461,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",461,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",461,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",461,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",461,null],[11,"push_front","","Inserts an element first in the sequence.",461,null],[11,"push_back","","Appends an element to the back of a buffer",461,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",461,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",461,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",461,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",461,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",461,null],[11,"split_off","","Splits the collection into two at the given index.",461,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",461,null],[11,"retain","","Retains only the elements specified by the predicate.",461,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",461,null],[11,"clone","","",462,null],[11,"next","","",462,null],[11,"size_hint","","",462,null],[11,"next_back","","",462,null],[11,"next","","",463,null],[11,"size_hint","","",463,null],[11,"next_back","","",463,null],[11,"clone","","",464,null],[11,"next","","",464,null],[11,"size_hint","","",464,null],[11,"next_back","","",464,null],[11,"drop","","",465,null],[11,"next","","",465,null],[11,"size_hint","","",465,null],[11,"next_back","","",465,null],[11,"eq","","",461,null],[11,"partial_cmp","","",461,null],[11,"cmp","","",461,null],[11,"hash","","",461,null],[11,"index","","",461,null],[11,"index_mut","","",461,null],[11,"from_iter","","",461,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",461,null],[11,"extend","","",461,null],[11,"extend","","",461,null],[11,"fmt","","",461,null],[11,"from","","",461,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",243,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",466,null],[11,"ne","","",466,null],[11,"hash","","",466,null],[11,"fmt","","",466,null],[11,"clone","","",466,null],[11,"clone","alloc::boxed","",467,null],[11,"pointer","","",468,null],[11,"make_place","","",468,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",468,null],[11,"finalize","","",368,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",467,null],[11,"drop","","",468,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",368,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",368,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",368,null],[11,"default","","",368,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",368,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",368,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",368,null],[11,"clone","","",368,null],[11,"eq","","",368,null],[11,"ne","","",368,null],[11,"partial_cmp","","",368,null],[11,"lt","","",368,null],[11,"le","","",368,null],[11,"ge","","",368,null],[11,"gt","","",368,null],[11,"cmp","","",368,null],[11,"hash","","",368,null],[11,"from","","",368,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",368,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",368,null],[11,"fmt","","",368,null],[11,"fmt","","",368,null],[11,"fmt","","",368,null],[11,"deref","","",368,null],[11,"deref_mut","","",368,null],[11,"next","","",368,null],[11,"size_hint","","",368,null],[11,"next_back","","",368,null],[11,"call_once","","",368,null],[11,"call_once","","",368,null],[11,"clone","","",368,null],[11,"borrow","","",368,null],[11,"borrow_mut","","",368,null],[11,"as_ref","","",368,null],[11,"as_mut","","",368,null],[11,"deref","rustc::ty::sty","",365,null],[11,"deref_mut","","",365,null],[11,"fmt","","",469,null],[11,"hash","","",469,null],[11,"decode","","",469,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",469,null],[11,"encode","","",469,null],[11,"clone","","",469,null],[11,"to_usize","","",469,null],[11,"from_usize","","",469,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","rustc::ty::context","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",121,null],[11,"new","rustc::ty::sty","",408,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",408,null],[11,"is_bound","","",366,null],[11,"needs_infer","","",366,null],[11,"escapes_depth","","",366,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",366,null],[11,"as_opt_param_ty","rustc::ty","",322,null],[11,"is_nil","","",322,null],[11,"is_empty","","",322,null],[11,"is_primitive","","",322,null],[11,"is_ty_var","","",322,null],[11,"is_phantom_data","","",322,null],[11,"is_bool","","",322,null],[11,"is_param","","",322,null],[11,"is_self","","",322,null],[11,"is_slice","","",322,null],[11,"is_structural","","",322,null],[11,"is_simd","","",322,null],[11,"sequence_element_type","","",322,null],[11,"simd_type","","",322,null],[11,"simd_size","","",322,null],[11,"is_region_ptr","","",322,null],[11,"is_unsafe_ptr","","",322,null],[11,"is_unique","","",322,null],[11,"is_scalar","","",322,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",322,null],[11,"is_trait","","",322,null],[11,"is_integral","","",322,null],[11,"is_fresh","","",322,null],[11,"is_uint","","",322,null],[11,"is_char","","",322,null],[11,"is_fp","","",322,null],[11,"is_numeric","","",322,null],[11,"is_signed","","",322,null],[11,"is_machine","","",322,null],[11,"has_concrete_skeleton","","",322,null],[11,"builtin_deref","","",322,null],[11,"builtin_index","","",322,null],[11,"fn_sig","","",322,null],[11,"fn_abi","","Returns the ABI of the given function.",322,null],[11,"fn_args","","",322,null],[11,"fn_ret","","",322,null],[11,"is_fn","","",322,null],[11,"ty_to_def_id","","",322,null],[11,"ty_adt_def","","",322,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",322,null],[11,"clone","","",470,null],[11,"clone","","",471,null],[11,"is_present","","",471,null],[11,"has_drop_flag","","",471,null],[11,"fmt","","",472,null],[11,"eq","","",472,null],[11,"ne","","",472,null],[11,"clone","","",472,null],[11,"id","","",472,null],[11,"fmt","","",393,null],[11,"hash","","",393,null],[11,"eq","","",393,null],[11,"ne","","",393,null],[11,"clone","","",393,null],[11,"with_fresh_ty_vars","","",393,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",473,null],[11,"def","","",473,null],[11,"def_id","","",473,null],[11,"name","","",473,null],[11,"vis","","",473,null],[11,"container","","",473,null],[11,"as_opt_method","","",473,null],[11,"fmt","","",474,null],[11,"clone","","",474,null],[11,"def_id","","",474,null],[11,"eq","","",475,null],[11,"ne","","",475,null],[11,"fmt","","",475,null],[11,"clone","","",475,null],[11,"is_descendant_of","rustc::hir::map","",37,null],[11,"from_hir","rustc::ty","",475,{"inputs":[{"name":"visibility"},{"name":"u32"},{"name":"tyctxt"}],"output":{"name":"visibility"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",475,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",475,null],[11,"fmt","","",476,null],[11,"clone","","",476,null],[11,"new","","",476,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",476,null],[11,"eq","","",476,null],[11,"hash","","",476,null],[11,"fmt","","",477,null],[11,"clone","","",477,null],[11,"fmt","","",478,null],[11,"clone","","",478,null],[11,"encode","","",479,null],[11,"decode","","",479,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",479,null],[11,"ne","","",479,null],[11,"clone","","",479,null],[11,"encode","","",480,null],[11,"decode","","",480,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",480,null],[11,"clone","","",480,null],[11,"fmt","","",481,null],[11,"clone","","",481,null],[11,"fmt","","",482,null],[11,"hash","","",482,null],[11,"eq","","",482,null],[11,"ne","","",482,null],[11,"clone","","",482,null],[11,"expr","","",482,{"inputs":[{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",482,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",483,null],[11,"eq","","",483,null],[11,"ne","","",483,null],[11,"clone","","",483,null],[11,"fmt","","",484,null],[11,"clone","","",484,null],[11,"hash","","",405,null],[11,"cmp","","",405,null],[11,"partial_cmp","","",405,null],[11,"lt","","",405,null],[11,"le","","",405,null],[11,"gt","","",405,null],[11,"ge","","",405,null],[11,"clone","","",405,null],[11,"eq","","",405,null],[11,"ne","","",405,null],[18,"HAS_PARAMS","rustc_borrowck","",405,null],[18,"HAS_SELF","","",405,null],[18,"HAS_TY_INFER","","",405,null],[18,"HAS_RE_INFER","","",405,null],[18,"HAS_RE_EARLY_BOUND","","",405,null],[18,"HAS_FREE_REGIONS","","",405,null],[18,"HAS_TY_ERR","","",405,null],[18,"HAS_PROJECTION","","",405,null],[18,"HAS_TY_CLOSURE","","",405,null],[18,"HAS_LOCAL_NAMES","","",405,null],[18,"KEEP_IN_LOCAL_TCX","","",405,null],[18,"NEEDS_SUBST","","",405,null],[18,"NOMINAL_FLAGS","","",405,null],[18,"SIZEDNESS_CACHED","","",405,null],[18,"IS_SIZED","","",405,null],[18,"MOVENESS_CACHED","","",405,null],[18,"MOVES_BY_DEFAULT","","",405,null],[11,"empty","rustc::ty","Returns an empty set of flags.",405,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",405,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",405,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",405,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",405,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",405,null],[11,"is_all","","Returns `true` if all flags are currently set.",405,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",405,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",405,null],[11,"insert","","Inserts the specified flags in-place.",405,null],[11,"remove","","Removes the specified flags in-place.",405,null],[11,"toggle","","Toggles the specified flags in-place.",405,null],[11,"bitor","","Returns the union of the two sets of flags.",405,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",405,null],[11,"bitand","","Returns the intersection between the two sets of flags.",405,null],[11,"sub","","Returns the set difference of the two sets of flags.",405,null],[11,"not","","Returns the complement of this set of flags.",405,null],[11,"eq","","",322,null],[11,"hash","","",322,null],[11,"hash","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[11,"clone","","",485,null],[11,"decode","","",486,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",486,null],[11,"fmt","","",486,null],[11,"hash","","",486,null],[11,"eq","","",486,null],[11,"clone","","",486,null],[11,"fmt","","",487,null],[11,"clone","","",487,null],[11,"eq","","",487,null],[11,"ne","","",487,null],[11,"clone","","",488,null],[11,"eq","","",488,null],[11,"ne","","",488,null],[11,"clone","","",400,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"clone","","",149,null],[11,"clone","","",395,null],[11,"clone","","",394,null],[11,"clone","","",396,null],[11,"to_early_bound_region","","",396,null],[11,"to_bound_region","","",396,null],[11,"fmt","","",397,null],[11,"clone","","",397,null],[11,"empty","","",397,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",397,null],[11,"has_type_params","","",397,null],[11,"has_region_params","","",397,null],[11,"clone","","",398,null],[11,"empty","","",398,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",398,null],[11,"instantiate_supertrait","","",398,null],[11,"hash","","",388,null],[11,"eq","","",388,null],[11,"ne","","",388,null],[11,"clone","","",388,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",388,null],[11,"hash","","",385,null],[11,"eq","","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"def_id","","",385,null],[11,"input_types","","",385,null],[11,"self_ty","","",385,null],[11,"def_id","rustc::ty::sty","",123,null],[11,"dep_node","","",123,null],[11,"fmt","rustc::ty","",386,null],[11,"hash","","",386,null],[11,"eq","","",386,null],[11,"ne","","",386,null],[11,"clone","","",386,null],[11,"fmt","","",387,null],[11,"hash","","",387,null],[11,"eq","","",387,null],[11,"ne","","",387,null],[11,"clone","","",387,null],[11,"hash","","",363,null],[11,"eq","","",363,null],[11,"ne","","",363,null],[11,"clone","","",363,null],[11,"item_name","rustc::ty::sty","",123,null],[11,"sort_key","","",123,null],[11,"to_poly_trait_ref","","",122,null],[11,"to_poly_trait_ref","","",123,null],[11,"to_poly_trait_ref","","",123,null],[11,"to_predicate","","",122,null],[11,"to_predicate","","",123,null],[11,"to_predicate","","",123,null],[11,"to_predicate","","",123,null],[11,"to_predicate","","",123,null],[11,"to_predicate","","",123,null],[11,"walk_tys","rustc::ty","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",388,null],[11,"to_opt_poly_trait_ref","","",388,null],[11,"clone","","",399,null],[11,"empty","","",399,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",399,null],[11,"new","rustc::ty::sty","",122,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",122,null],[11,"input_types","","",122,null],[11,"clone","rustc::ty","",380,null],[11,"with_caller_bounds","","",380,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",380,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",401,null],[11,"clone","","",401,null],[11,"hash","","",489,null],[11,"cmp","","",489,null],[11,"partial_cmp","","",489,null],[11,"lt","","",489,null],[11,"le","","",489,null],[11,"gt","","",489,null],[11,"ge","","",489,null],[11,"clone","","",489,null],[11,"eq","","",489,null],[11,"ne","","",489,null],[18,"NO_ADT_FLAGS","rustc_borrowck","",489,null],[18,"IS_ENUM","","",489,null],[18,"IS_DTORCK","","",489,null],[18,"IS_DTORCK_VALID","","",489,null],[18,"IS_PHANTOM_DATA","","",489,null],[18,"IS_SIMD","","",489,null],[18,"IS_FUNDAMENTAL","","",489,null],[18,"IS_NO_DROP_FLAG","","",489,null],[11,"empty","rustc::ty","Returns an empty set of flags.",489,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",489,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",489,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",489,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",489,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",489,null],[11,"is_all","","Returns `true` if all flags are currently set.",489,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",489,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",489,null],[11,"insert","","Inserts the specified flags in-place.",489,null],[11,"remove","","Removes the specified flags in-place.",489,null],[11,"toggle","","Toggles the specified flags in-place.",489,null],[11,"bitor","","Returns the union of the two sets of flags.",489,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",489,null],[11,"bitand","","Returns the intersection between the two sets of flags.",489,null],[11,"sub","","Returns the set difference of the two sets of flags.",489,null],[11,"not","","Returns the complement of this set of flags.",489,null],[11,"eq","","",490,null],[11,"hash","","",490,null],[11,"eq","","",491,null],[11,"fmt","","",491,null],[11,"clone","","",491,null],[11,"decode","","",492,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",492,null],[11,"fmt","","",492,null],[11,"hash","","",492,null],[11,"eq","","",492,null],[11,"clone","","",492,null],[11,"from_variant_data","","",492,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantkind"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",490,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",490,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",490,null],[11,"is_simd","","",490,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",490,null],[11,"has_dtor","","Returns whether this type has a destructor.",490,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",490,null],[11,"type_scheme","","",490,null],[11,"predicates","","",490,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",490,null],[11,"is_empty","","",490,null],[11,"is_univariant","","",490,null],[11,"is_payloadfree","","",490,null],[11,"variant_with_id","","",490,null],[11,"variant_index_with_id","","",490,null],[11,"variant_of_def","","",490,null],[11,"destructor","","",490,null],[11,"set_destructor","","",490,null],[11,"dtor_kind","","",490,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",490,null],[11,"kind","","",493,null],[11,"is_tuple_struct","","",493,null],[11,"find_field_named","","",493,null],[11,"index_of_field_named","","",493,null],[11,"field_named","","",493,null],[11,"new","","",494,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"fielddefdata"}}],[11,"ty","","",494,null],[11,"unsubst_ty","","",494,null],[11,"fulfill_ty","","",494,null],[11,"clone","","",389,null],[11,"decode","","",495,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",495,null],[11,"fmt","","",495,null],[11,"hash","","",495,null],[11,"eq","","",495,null],[11,"cmp","","",495,null],[11,"partial_cmp","","",495,null],[11,"clone","","",495,null],[11,"trait_did","","",495,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",495,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",322,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",322,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",322,null],[11,"is_noop","","",389,null],[11,"eq","","",496,null],[11,"fmt","","",496,null],[11,"clone","","",496,null],[11,"from_mutbl","","",496,{"inputs":[{"name":"mutability"}],"output":{"name":"lvaluepreference"}}],[11,"from_mutbl","","",486,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",486,null],[11,"to_user_str","","",486,null],[11,"node_id_to_type","rustc::ty::context","",121,null],[11,"node_id_to_type_opt","","",121,null],[11,"node_id_item_substs","","",121,null],[11,"pat_ty","","",121,null],[11,"pat_ty_opt","","",121,null],[11,"expr_ty","","",121,null],[11,"expr_ty_opt","","",121,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",121,null],[11,"expr_ty_adjusted_opt","","",121,null],[11,"expr_span","","",121,null],[11,"local_var_name_str","","",121,null],[11,"resolve_expr","","",121,null],[11,"expr_is_lval","","",121,null],[11,"provided_trait_methods","","",121,null],[11,"associated_consts","","",121,null],[11,"trait_impl_polarity","","",121,null],[11,"custom_coerce_unsized_kind","","",121,null],[11,"impl_or_trait_item","","",121,null],[11,"trait_item_def_ids","","",121,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",121,null],[11,"is_impl","","Returns whether this DefId refers to an impl",121,null],[11,"trait_ref_to_def_id","","",121,null],[11,"def_key","","",121,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",121,null],[11,"item_name","","",121,null],[11,"register_item_type","","",121,null],[11,"lookup_item_type","","",121,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",121,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",121,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",121,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",121,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",121,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",121,null],[11,"get_attrs","","Get the attributes of a definition.",121,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",121,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",121,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",121,null],[11,"item_variances","","",121,null],[11,"trait_has_default_impl","","",121,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",121,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",121,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",121,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",121,null],[11,"closure_kind","","",121,null],[11,"closure_type","","",121,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",121,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",121,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",121,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",121,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",121,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",121,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",121,null],[11,"is_method_call","","",121,null],[11,"is_overloaded_autoderef","","",121,null],[11,"upvar_capture","","",121,null],[11,"visit_all_items_in_krate","","",121,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",121,null],[11,"fmt","rustc::ty","",497,null],[11,"eq","","",497,null],[11,"ne","","",497,null],[11,"clone","","",497,null],[11,"with_freevars","rustc::ty::context","",121,null],[11,"fmt","rustc::util::common","",498,null],[11,"clone","","",498,null],[11,"drop","","",499,null],[11,"memoize","core::cell","",8,null],[11,"eq","rustc::util::ppaux","",500,null],[11,"clone","","",500,null],[11,"fmt","rustc::ty::sty","",392,null],[11,"fmt","rustc::ty","",394,null],[11,"fmt","","",396,null],[11,"fmt","","",322,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"fmt","rustc::ty::subst","",369,null],[11,"fmt","rustc::ty","",389,null],[11,"fmt","rustc::ty::sty","",122,null],[11,"fmt","rustc::ty::trait_def","",373,null],[11,"fmt","rustc::ty","",490,null],[11,"fmt","rustc::ty::adjustment","",318,null],[11,"fmt","","",319,null],[11,"fmt","rustc::ty::sty","",392,null],[11,"fmt","rustc::ty","",388,null],[11,"fmt","rustc::ty::sty","",403,null],[11,"fmt","","",403,null],[11,"fmt","","",366,null],[11,"fmt","","",390,null],[11,"fmt","rustc::ty","",400,null],[11,"fmt","","",380,null],[11,"fmt","","",395,null],[11,"fmt","rustc::ty::sty","",366,null],[11,"fmt","","",402,null],[11,"fmt","rustc::ty","",480,null],[11,"fmt","","",479,null],[11,"fmt","","",398,null],[11,"fmt","","",399,null],[11,"fmt","","",473,null],[11,"fmt","rustc::ty::sty","",163,null],[11,"fmt","","",364,null],[11,"fmt","","",365,null],[11,"fmt","","",152,null],[11,"fmt","","",146,null],[11,"fmt","","",150,null],[11,"fmt","","",148,null],[11,"fmt","","",163,null],[11,"fmt","","",411,null],[11,"fmt","rustc::ty","",149,null],[11,"fmt","rustc::ty::sty","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",122,null],[11,"fmt","","",404,null],[11,"fmt","rustc::ty","",322,null],[11,"fmt","","",485,null],[11,"fmt","","",488,null],[11,"fmt","rustc::ty::sty","",411,null],[11,"fmt","rustc::ty","",497,null],[11,"fmt","rustc::ty::sty","",407,null],[11,"fmt","","",407,null],[11,"fmt","rustc::ty","",387,null],[11,"fmt","","",386,null],[11,"fmt","","",385,null],[11,"fmt","","",385,null],[11,"fmt","","",363,null],[11,"fmt","","",363,null],[11,"fmt","rustc::ty::sty","",362,null],[11,"fmt","rustc::ty","",495,null],[11,"fmt","","",388,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",501,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",501,null],[11,"result","","",501,null],[11,"reset","","",501,null],[11,"output_bits","","",501,null],[6,"Node","rustc_borrowck::graphviz","",null,null],[6,"Edge","","",null,null],[3,"DataflowLabeller","","",null,null],[12,"inner","","",502,null],[12,"variants","","",502,null],[12,"borrowck_ctxt","","",502,null],[12,"analysis_data","","",502,null],[4,"Variant","","",null,null],[13,"Loans","","",503,null],[13,"Moves","","",503,null],[13,"Assigns","","",503,null],[11,"clone","","",503,null],[11,"fmt","","",503,null],[11,"short_name","","",503,null],[11,"graph_id","","",502,null],[11,"node_id","","",502,null],[11,"node_label","","",502,null],[11,"edge_label","","",502,null],[11,"nodes","","",502,null],[11,"edges","","",502,null],[11,"source","","",502,null],[11,"target","","",502,null],[17,"DIAGNOSTICS","rustc_borrowck","",null,null]],"paths":[[3,"AnalysisData"],[3,"BorrowckCtxt"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFGEdgeData"],[3,"CFG"],[4,"DepNode"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[3,"DepGraphQuery"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefIndex"],[3,"DefId"],[4,"FnKind"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[3,"IdVisitor"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"FnLikeNode"],[3,"Item"],[3,"TraitItem"],[3,"Expr"],[4,"Code"],[3,"Definitions"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[4,"Node"],[4,"MapEntry"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"State"],[3,"NoAnn"],[3,"Svh"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[4,"SelfKind"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Bivariate"],[3,"CombineFields"],[3,"InferCtxt"],[4,"Result"],[3,"Equate"],[3,"TyCtxt"],[3,"TraitRef"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[3,"SameRegions"],[3,"RegionVarBindings"],[4,"VarValue"],[4,"Verify"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"IntVid"],[3,"RegionVidKey"],[3,"RegionVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[3,"TyVid"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"InferCtxtBuilder"],[3,"FnSig"],[4,"FnOutput"],[3,"ClosureSubsts"],[4,"LvalueTy"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LateContext"],[3,"EarlyContext"],[3,"GatherNodeLevels"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[3,"ChildItem"],[3,"ExternCrate"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[3,"DataFlowContext"],[4,"KillFrom"],[4,"Linkage"],[3,"FreeRegionMap"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[4,"deref_kind"],[3,"MemCategorizationContext"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[3,"CodeExtent"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[4,"Mutability"],[4,"BorrowKind"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[4,"TerminatorKind"],[3,"Statement"],[4,"StatementKind"],[4,"Lvalue"],[3,"Projection"],[4,"ProjectionElem"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[3,"ScopeData"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[3,"Constant"],[3,"TypedConstVal"],[4,"Literal"],[4,"LvalueContext"],[4,"MirSource"],[3,"Passes"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"TraitErrorKey"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[4,"ProjectionMode"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[3,"SelectionCache"],[4,"MethodMatchedData"],[3,"EvaluationCache"],[3,"SelectionContext"],[4,"MethodMatchResult"],[3,"Graph"],[4,"Node"],[4,"NodeItems"],[3,"Ancestors"],[3,"NodeItem"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"SpecializesCache"],[3,"Obligation"],[4,"Vtable"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[4,"SelectionError"],[3,"SupertraitDefIds"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[4,"AutoAdjustment"],[3,"AutoDerefRef"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[3,"TyS"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[3,"RegionFolder"],[4,"RootMode"],[3,"TargetDataLayout"],[4,"Endian"],[3,"Size"],[3,"Align"],[4,"Integer"],[4,"Primitive"],[3,"Struct"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[3,"TypeAndMut"],[4,"Abi"],[3,"ProjectionTy"],[3,"ProjectionPredicate"],[3,"ExistentialBounds"],[3,"BuiltinBounds"],[4,"Region"],[3,"Rc"],[3,"Box"],[3,"Substs"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"IntType"],[4,"CopyImplementationError"],[4,"Representability"],[3,"ParameterEnvironment"],[3,"TypeContents"],[3,"CtxtArenas"],[3,"Tables"],[4,"Option"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[4,"Predicate"],[3,"ItemSubsts"],[3,"ClosureTy"],[3,"P"],[3,"TraitTy"],[3,"ImplHeader"],[3,"TypeParameterDef"],[4,"ObjectLifetimeDefault"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ClosureUpvar"],[3,"TypeScheme"],[3,"FreeRegion"],[4,"BoundRegion"],[4,"TypeVariants"],[3,"TypeFlags"],[3,"BareFnTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"EarlyBoundRegion"],[3,"SkolemizedRegionVid"],[4,"InferTy"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[4,"BuiltinBound"],[3,"CrateAnalysis"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Visibility"],[3,"Method"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"ItemVariances"],[4,"Variance"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[4,"FragmentInfo"],[3,"UpvarId"],[4,"BorrowKind"],[4,"UpvarCapture"],[3,"UpvarBorrow"],[3,"AdtFlags"],[3,"AdtDefData"],[4,"AdtKind"],[4,"VariantKind"],[3,"VariantDefData"],[3,"FieldDefData"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"Sha256"],[3,"DataflowLabeller"],[4,"Variant"]]};
searchIndex["rustc_typeck"] = {"doc":"typeck.rs, an introduction","items":[[0,"dep_graph","rustc_typeck","",null,null],[5,"visit_all_items_in_krate","rustc_typeck::dep_graph","Visit all the items in the krate in some order. When visiting a\nparticular item, first create a dep-node by calling `dep_node_fn`\nand push that onto the dep-graph stack of tasks, and also create a\nread edge from the corresponding AST node. This is used in\ncompiler passes to automatically record the item that they are\nworking on.",null,null],[11,"from_label_string","rustc::dep_graph::dep_node","Used in testing",0,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",0,null],[11,"graph_id","rustc::cfg::graphviz","",1,null],[11,"node_id","","",1,null],[11,"node_label","","",1,null],[11,"edge_label","","",1,null],[11,"nodes","","",1,null],[11,"edges","","",1,null],[11,"source","","",1,null],[11,"target","","",1,null],[11,"eq","rustc::cfg","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"id","","",2,null],[11,"fmt","","",3,null],[11,"new","","",4,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",4,null],[11,"decode","rustc::dep_graph::dep_node","",0,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","rustc::dep_graph::dep_tracking_map","",5,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",5,null],[11,"insert","","",5,null],[11,"contains_key","","",5,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",6,null],[11,"index","rustc::dep_graph::dep_tracking_map","",5,null],[11,"clone","rustc::dep_graph::graph","",7,null],[11,"new","","",7,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",7,null],[11,"query","","",7,null],[11,"in_ignore","","",7,null],[11,"in_task","","",7,null],[11,"with_ignore","","",7,null],[11,"with_task","","",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"new","rustc::dep_graph::query","",8,null],[11,"contains_node","","",8,null],[11,"nodes","","",8,null],[11,"edges","","",8,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",8,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",8,null],[11,"fmt","rustc::hir::def","",9,null],[11,"hash","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",10,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",10,null],[11,"new","","",10,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",11,null],[11,"var_id","","",9,null],[11,"def_id","","",9,null],[11,"variant_def_ids","","",9,null],[11,"kind_name","","",9,null],[11,"hash","rustc::hir::def_id","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"new","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",12,null],[11,"as_u32","","",12,null],[11,"hash","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"cmp","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"local","","",13,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",13,null],[11,"eq","rustc::hir::intravisit","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"attrs","","",14,null],[11,"fmt","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"clone","","",15,null],[11,"max","","",15,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",15,null],[11,"add","","",15,null],[11,"new","","",16,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",16,null],[11,"visit_id","","",16,null],[11,"new","","",17,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",17,null],[11,"visit_foreign_item","","",17,null],[11,"visit_item","","",17,null],[11,"visit_local","","",17,null],[11,"visit_block","","",17,null],[11,"visit_stmt","","",17,null],[11,"visit_pat","","",17,null],[11,"visit_expr","","",17,null],[11,"visit_ty","","",17,null],[11,"visit_generics","","",17,null],[11,"visit_fn","","",17,null],[11,"visit_struct_field","","",17,null],[11,"visit_variant_data","","",17,null],[11,"visit_trait_item","","",17,null],[11,"visit_impl_item","","",17,null],[11,"visit_lifetime","","",17,null],[11,"visit_lifetime_def","","",17,null],[11,"visit_trait_ref","","",17,null],[11,"resolve_generated_global_path","rustc::hir::lowering","",18,null],[11,"get_resolution","","",18,null],[11,"record_resolution","","",18,null],[11,"definitions","","",18,null],[11,"testing_context","","",19,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"loweringcontext"}}],[11,"lower_item","","",19,null],[11,"clone","rustc::hir::map::blocks","",20,null],[11,"is_fn_like","rustc::hir","",21,null],[11,"is_fn_like","","",22,null],[11,"is_fn_like","","",23,null],[11,"clone","rustc::hir::map::blocks","",24,null],[11,"id","","",24,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",24,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",20,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",20,null],[11,"body","","",20,null],[11,"decl","","",20,null],[11,"span","","",20,null],[11,"id","","",20,null],[11,"kind","","",20,null],[11,"clone","rustc::hir::map::definitions","",25,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"hash","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"hash","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"hash","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"is_local","","",29,null],[11,"make","","",29,{"inputs":[{"name":"u32"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"hash","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"new","","",25,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",25,null],[11,"def_key","","",25,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",25,null],[11,"opt_def_index","","",25,null],[11,"opt_local_def_id","","",25,null],[11,"local_def_id","","",25,null],[11,"as_local_node_id","","",25,null],[11,"retrace_path","","",25,null],[11,"create_def_with_parent","","",25,null],[11,"as_interned_str","","",31,null],[11,"to_string","","",31,null],[11,"fmt","rustc::hir::map","",32,null],[11,"clone","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"new","","",34,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",34,null],[11,"clone","","",35,null],[11,"num_local_def_ids","","",35,null],[11,"def_key","","",35,null],[11,"def_path_from_id","","",35,null],[11,"def_path","","",35,null],[11,"retrace_path","","",35,null],[11,"local_def_id","","",35,null],[11,"opt_local_def_id","","",35,null],[11,"as_local_node_id","","",35,null],[11,"krate","","",35,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",35,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",35,null],[11,"get_if_local","","",35,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",35,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",35,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",35,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",35,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",35,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",35,null],[11,"get_parent_did","","",35,null],[11,"get_foreign_abi","","",35,null],[11,"expect_item","","",35,null],[11,"expect_trait_item","","",35,null],[11,"expect_struct","","",35,null],[11,"expect_variant","","",35,null],[11,"expect_foreign_item","","",35,null],[11,"expect_expr","","",35,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",35,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",35,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",35,null],[11,"opt_span","","",35,null],[11,"span","","",35,null],[11,"span_if_local","","",35,null],[11,"def_id_span","","",35,null],[11,"node_to_string","","",35,null],[11,"node_to_user_string","","",35,null],[11,"next","","",36,null],[11,"print_node","rustc::hir::print","",37,null],[11,"clone","","",38,null],[11,"writer","","",37,null],[11,"boxes","","",37,null],[11,"comments","","",37,null],[11,"cur_cmnt_and_lit","","",37,null],[11,"literals","","",37,null],[11,"new_from_input","","",37,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",37,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",37,null],[11,"nbsp","","",37,null],[11,"word_nbsp","","",37,null],[11,"head","","",37,null],[11,"bopen","","",37,null],[11,"bclose_","","",37,null],[11,"bclose_maybe_open","","",37,null],[11,"bclose","","",37,null],[11,"in_cbox","","",37,null],[11,"space_if_not_bol","","",37,null],[11,"break_offset_if_not_bol","","",37,null],[11,"synth_comment","","",37,null],[11,"commasep_cmnt","","",37,null],[11,"commasep_exprs","","",37,null],[11,"print_mod","","",37,null],[11,"print_foreign_mod","","",37,null],[11,"print_opt_lifetime","","",37,null],[11,"print_type","","",37,null],[11,"print_foreign_item","","",37,null],[11,"print_item_id","","",37,null],[11,"print_item","","Pretty-print an item",37,null],[11,"print_enum_def","","",37,null],[11,"print_variants","","",37,null],[11,"print_visibility","","",37,null],[11,"print_struct","","",37,null],[11,"print_variant","","",37,null],[11,"print_method_sig","","",37,null],[11,"print_trait_item","","",37,null],[11,"print_impl_item","","",37,null],[11,"print_stmt","","",37,null],[11,"print_block","","",37,null],[11,"print_block_unclosed","","",37,null],[11,"print_block_unclosed_indent","","",37,null],[11,"print_block_with_attrs","","",37,null],[11,"print_block_maybe_unclosed","","",37,null],[11,"print_if","","",37,null],[11,"print_if_let","","",37,null],[11,"print_expr_maybe_paren","","",37,null],[11,"print_expr","","",37,null],[11,"print_local_decl","","",37,null],[11,"print_decl","","",37,null],[11,"print_usize","","",37,null],[11,"print_name","","",37,null],[11,"print_for_decl","","",37,null],[11,"print_pat","","",37,null],[11,"print_fn","","",37,null],[11,"print_fn_args_and_ret","","",37,null],[11,"print_fn_block_args","","",37,null],[11,"print_capture_clause","","",37,null],[11,"print_bounds","","",37,null],[11,"print_lifetime","","",37,null],[11,"print_lifetime_def","","",37,null],[11,"print_generics","","",37,null],[11,"print_ty_param","","",37,null],[11,"print_where_clause","","",37,null],[11,"print_view_path","","",37,null],[11,"print_mutability","","",37,null],[11,"print_mt","","",37,null],[11,"print_arg","","",37,null],[11,"print_fn_output","","",37,null],[11,"print_ty_fn","","",37,null],[11,"maybe_print_trailing_comment","","",37,null],[11,"print_remaining_comments","","",37,null],[11,"print_opt_abi_and_extern_if_nondefault","","",37,null],[11,"print_extern_opt_abi","","",37,null],[11,"print_fn_header_info","","",37,null],[11,"print_unsafety","","",37,null],[11,"fmt","rustc::hir::svh","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"hash","","",39,null],[11,"clone","","",39,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",39,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",39,null],[11,"fmt","","",39,null],[11,"hash","rustc::hir","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",42,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",42,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"none","","",44,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",44,null],[11,"has_lifetimes","","",44,null],[11,"has_types","","",44,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",44,null],[11,"lifetimes","","",44,null],[11,"bindings","","",44,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"empty","","",50,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",50,null],[11,"is_type_parameterized","","",50,null],[11,"is_parameterized","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"item","","",56,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"walk","","",59,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"clone","","",64,null],[11,"as_str","","",64,null],[11,"is_lazy","","",64,null],[11,"is_shift","","",64,null],[11,"is_comparison","","",64,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",64,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"as_str","","",65,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",65,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"attrs","","",66,null],[11,"id","","",66,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"attrs","","",68,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",22,null],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",83,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"to_self","","",89,null],[11,"is_self","","",89,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"has_self","","",91,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"clone","","",92,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"is_final","","",94,null],[11,"is_default","","",94,null],[11,"fmt","","",92,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",95,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"clone","","",96,null],[11,"span","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"id","","",101,null],[11,"name","","",101,null],[11,"rename","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"is_positional","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"fields","","",107,null],[11,"id","","",107,null],[11,"is_struct","","",107,null],[11,"is_tuple","","",107,null],[11,"is_unit","","",107,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",21,null],[11,"hash","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",109,null],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"descriptive_variant","","",109,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",111,null],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"clone","","",111,null],[11,"descriptive_variant","","",111,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"clone","","",112,null],[11,"clone","","",113,null],[11,"new","rustc::infer::bivariate","",114,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",114,null],[11,"tcx","","",114,null],[11,"a_is_expected","","",114,null],[11,"relate_with_variance","","",114,null],[11,"tys","","",114,null],[11,"regions","","",114,null],[11,"binders","","",114,null],[11,"clone","rustc::infer::combine","",115,null],[11,"super_combine_tys","rustc::infer","",116,null],[11,"tcx","rustc::infer::combine","",115,null],[11,"switch_expected","","",115,null],[11,"equate","","",115,null],[11,"bivariate","","",115,null],[11,"sub","","",115,null],[11,"lub","","",115,null],[11,"glb","","",115,null],[11,"instantiate","","",115,null],[11,"compare","core::result","",117,null],[11,"new","rustc::infer::equate","",118,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",118,null],[11,"tag","","",118,null],[11,"tcx","","",118,null],[11,"a_is_expected","","",118,null],[11,"relate_with_variance","","",118,null],[11,"tys","","",118,null],[11,"regions","","",118,null],[11,"binders","","",118,null],[11,"note_and_explain_region","rustc::ty::context","",119,null],[11,"report_region_errors","rustc::infer","",116,null],[11,"report_and_explain_type_error","","",116,null],[11,"resolve","rustc::ty::sty","",120,null],[11,"resolve","","",121,null],[11,"new","rustc::infer::glb","",122,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",122,null],[11,"tag","","",122,null],[11,"tcx","","",122,null],[11,"a_is_expected","","",122,null],[11,"relate_with_variance","","",122,null],[11,"tys","","",122,null],[11,"regions","","",122,null],[11,"binders","","",122,null],[11,"infcx","","",122,null],[11,"relate_bound","","",122,null],[11,"higher_ranked_sub","rustc::infer::combine","",115,null],[11,"higher_ranked_lub","","",115,null],[11,"higher_ranked_glb","","",115,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",116,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",116,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",116,null],[11,"new","rustc::infer::lub","",123,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",123,null],[11,"tag","","",123,null],[11,"tcx","","",123,null],[11,"a_is_expected","","",123,null],[11,"relate_with_variance","","",123,null],[11,"tys","","",123,null],[11,"regions","","",123,null],[11,"binders","","",123,null],[11,"infcx","","",123,null],[11,"relate_bound","","",123,null],[11,"fmt","rustc::infer::region_inference","",124,null],[11,"hash","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"clone","","",124,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",126,null],[11,"hash","","",127,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"eq","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"contains","","",132,null],[11,"push","","",132,null],[11,"new","","",133,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",133,null],[11,"commit","","",133,null],[11,"rollback_to","","",133,null],[11,"num_vars","","",133,null],[11,"new_region_var","","",133,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",133,null],[11,"new_bound","","",133,null],[11,"add_given","","",133,null],[11,"make_eqregion","","",133,null],[11,"make_subregion","","",133,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",133,null],[11,"lub_regions","","",133,null],[11,"glb_regions","","",133,null],[11,"resolve_var","","",133,null],[11,"opportunistic_resolve_var","","",133,null],[11,"combine_vars","","",133,null],[11,"vars_created_since_snapshot","","",133,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",133,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"to_ty","","",125,null],[11,"must_hold","","",126,null],[11,"cannot_hold","","",126,null],[11,"or","","",126,null],[11,"and","","",126,null],[11,"new","rustc::infer::resolve","",137,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictyperesolver"}}],[11,"tcx","","",137,null],[11,"fold_ty","","",137,null],[11,"new","","",138,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictypeandregionresolver"}}],[11,"tcx","","",138,null],[11,"fold_ty","","",138,null],[11,"fold_region","","",138,null],[11,"new","rustc::infer::freshen","",139,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",139,null],[11,"fold_region","","",139,null],[11,"fold_ty","","",139,null],[11,"new","rustc::infer::sub","",140,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",140,null],[11,"tag","","",140,null],[11,"tcx","","",140,null],[11,"a_is_expected","","",140,null],[11,"with_cause","","",140,null],[11,"relate_with_variance","","",140,null],[11,"tys","","",140,null],[11,"regions","","",140,null],[11,"binders","","",140,null],[11,"hash","rustc::infer::type_variable","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"hash","","",142,null],[11,"eq","","",142,null],[11,"clone","","",142,null],[11,"new","","",143,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",143,null],[11,"var_diverges","","",143,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",143,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",143,null],[11,"new_var","","",143,null],[11,"root_var","","",143,null],[11,"probe","","",143,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",143,null],[11,"replace_if_possible","","",143,null],[11,"snapshot","","",143,null],[11,"rollback_to","","",143,null],[11,"commit","","",143,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",143,null],[11,"unsolved_variables","","",143,null],[11,"index","rustc::ty::sty","",144,null],[11,"from_index","","",144,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",144,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"fmt","rustc::infer::unify_key","",145,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"combine","","",145,null],[11,"index","rustc::ty::sty","",146,null],[11,"from_index","","",146,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",146,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","rustc::ty","",147,null],[11,"index","rustc::ty::sty","",148,null],[11,"from_index","","",148,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",148,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","syntax::ast","",149,null],[11,"index","rustc::ty::sty","",150,null],[11,"from_index","","",150,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",150,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"clone","rustc::infer","",151,null],[11,"borrow","","",151,null],[11,"borrow_mut","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",152,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[11,"infer_ctxt","rustc::ty::context","",119,null],[11,"normalizing_infer_ctxt","","",119,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",119,null],[11,"enter","rustc::infer","",160,null],[11,"trans_normalize","rustc::ty::sty","",161,null],[11,"trans_normalize","","",162,null],[11,"trans_normalize","","",163,null],[11,"trans_normalize","","",121,null],[11,"trans_normalize","rustc::mir::tcx","",164,null],[11,"normalize_associated_type","rustc::ty::context","",119,null],[11,"drain_fulfillment_cx_or_panic","rustc::infer","",116,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",116,null],[11,"projection_mode","","",116,null],[11,"freshen","","",116,null],[11,"type_var_diverges","","",116,null],[11,"freshener","","",116,null],[11,"type_is_unconstrained_numeric","","",116,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",116,null],[11,"unsolved_variables","","",116,null],[11,"equate","","",116,null],[11,"sub","","",116,null],[11,"lub","","",116,null],[11,"glb","","",116,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",116,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",116,null],[11,"in_snapshot","","",116,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",116,null],[11,"probe","","Execute `f` then unroll any bindings it creates",116,null],[11,"add_given","","",116,null],[11,"sub_types","","",116,null],[11,"can_sub_types","","",116,null],[11,"eq_types","","",116,null],[11,"eq_trait_refs","","",116,null],[11,"eq_impl_headers","","",116,null],[11,"sub_poly_trait_refs","","",116,null],[11,"sub_regions","","",116,null],[11,"equality_predicate","","",116,null],[11,"region_outlives_predicate","","",116,null],[11,"next_ty_var_id","","",116,null],[11,"next_ty_var","","",116,null],[11,"next_ty_var_with_default","","",116,null],[11,"next_diverging_ty_var","","",116,null],[11,"next_ty_vars","","",116,null],[11,"next_int_var_id","","",116,null],[11,"next_float_var_id","","",116,null],[11,"next_region_var","","",116,null],[11,"region_vars_for_defs","","",116,null],[11,"type_vars_for_defs","","",116,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",116,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",116,null],[11,"fresh_bound_region","","",116,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",116,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",116,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",116,null],[11,"node_type","","",116,null],[11,"expr_ty","","",116,null],[11,"resolve_regions_and_report_errors","","",116,null],[11,"ty_to_string","","",116,null],[11,"tys_to_string","","",116,null],[11,"trait_ref_to_string","","",116,null],[11,"shallow_resolve","","",116,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",116,null],[11,"resolve_type_and_region_vars_if_possible","","",116,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",116,null],[11,"type_error_message_str","","",116,null],[11,"type_error_struct_str","","",116,null],[11,"type_error_message_str_with_expected","","",116,null],[11,"type_error_struct_str_with_expected","","",116,null],[11,"type_error_message","","",116,null],[11,"type_error_struct","","",116,null],[11,"report_mismatched_types","","",116,null],[11,"report_conflicting_default_types","","",116,null],[11,"replace_late_bound_regions_with_fresh_var","","",116,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",116,null],[11,"can_equate","","",116,null],[11,"node_ty","","",116,null],[11,"expr_ty_adjusted","","",116,null],[11,"type_moves_by_default","","",116,null],[11,"node_method_ty","","",116,null],[11,"node_method_id","","",116,null],[11,"adjustments","","",116,null],[11,"is_method_call","","",116,null],[11,"temporary_scope","","",116,null],[11,"upvar_capture","","",116,null],[11,"param_env","","",116,null],[11,"closure_kind","","",116,null],[11,"closure_type","","",116,null],[11,"span","","",154,null],[11,"types","","",154,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"tys"},{"name":"tys"}],"output":{"name":"typetrace"}}],[11,"dummy","","",154,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",154,null],[11,"span","","",152,null],[11,"span","","",155,null],[11,"span","","",158,null],[11,"fmt","rustc::lint","",165,null],[11,"clone","","",165,null],[11,"name_lower","","Get the lint&#39;s name, with ASCII letters converted to lowercase.",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"hash","","",166,null],[11,"of","","Get the `LintId` for a `Lint`.",166,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",166,null],[11,"fmt","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"eq","","",167,null],[11,"clone","","",167,null],[11,"as_str","","Convert a level to a lower-case string.",167,null],[11,"from_str","","Convert a lower-case string to a level.",167,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",168,null],[11,"ne","","",168,null],[11,"clone","","",168,null],[11,"clone","rustc::lint::builtin","",169,null],[11,"get_lints","","",169,null],[11,"new","rustc::lint::context","",170,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",170,null],[11,"get_lint_groups","","",170,null],[11,"register_early_pass","","",170,null],[11,"register_late_pass","","",170,null],[11,"register_future_incompatible","","",170,null],[11,"future_incompatible","","",170,null],[11,"register_group","","",170,null],[11,"register_renamed","","",170,null],[11,"register_removed","","",170,null],[11,"process_command_line","","",170,null],[11,"sess","","Get the overall compiler `Session` object.",171,null],[11,"lints","","",171,null],[11,"mut_lints","","",171,null],[11,"level_stack","","",171,null],[11,"enter_attrs","","",171,null],[11,"exit_attrs","","",171,null],[11,"sess","","Get the overall compiler `Session` object.",172,null],[11,"lints","","",172,null],[11,"mut_lints","","",172,null],[11,"level_stack","","",172,null],[11,"enter_attrs","","",172,null],[11,"exit_attrs","","",172,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",171,null],[11,"visit_item","","",171,null],[11,"visit_foreign_item","","",171,null],[11,"visit_pat","","",171,null],[11,"visit_expr","","",171,null],[11,"visit_stmt","","",171,null],[11,"visit_fn","","",171,null],[11,"visit_variant_data","","",171,null],[11,"visit_struct_field","","",171,null],[11,"visit_variant","","",171,null],[11,"visit_ty","","",171,null],[11,"visit_name","","",171,null],[11,"visit_mod","","",171,null],[11,"visit_local","","",171,null],[11,"visit_block","","",171,null],[11,"visit_arm","","",171,null],[11,"visit_decl","","",171,null],[11,"visit_expr_post","","",171,null],[11,"visit_generics","","",171,null],[11,"visit_trait_item","","",171,null],[11,"visit_impl_item","","",171,null],[11,"visit_lifetime","","",171,null],[11,"visit_lifetime_def","","",171,null],[11,"visit_path","","",171,null],[11,"visit_path_list_item","","",171,null],[11,"visit_attribute","","",171,null],[11,"visit_item","","",172,null],[11,"visit_foreign_item","","",172,null],[11,"visit_pat","","",172,null],[11,"visit_expr","","",172,null],[11,"visit_stmt","","",172,null],[11,"visit_fn","","",172,null],[11,"visit_variant_data","","",172,null],[11,"visit_struct_field","","",172,null],[11,"visit_variant","","",172,null],[11,"visit_ty","","",172,null],[11,"visit_ident","","",172,null],[11,"visit_mod","","",172,null],[11,"visit_local","","",172,null],[11,"visit_block","","",172,null],[11,"visit_arm","","",172,null],[11,"visit_decl","","",172,null],[11,"visit_expr_post","","",172,null],[11,"visit_generics","","",172,null],[11,"visit_trait_item","","",172,null],[11,"visit_impl_item","","",172,null],[11,"visit_lifetime","","",172,null],[11,"visit_lifetime_def","","",172,null],[11,"visit_explicit_self","","",172,null],[11,"visit_path","","",172,null],[11,"visit_path_list_item","","",172,null],[11,"visit_attribute","","",172,null],[11,"visit_id","","",171,null],[11,"get_lints","","",173,null],[11,"check_item","","",173,null],[11,"prohibit_type_params","rustc::ty::context","",119,null],[11,"prohibit_projection","","",119,null],[11,"prim_ty_to_ty","","",119,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",119,null],[11,"fmt","rustc::middle::expr_use_visitor","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[11,"fmt","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"clone","","",175,null],[11,"fmt","","",176,null],[11,"eq","","",176,null],[11,"clone","","",176,null],[11,"fmt","","",177,null],[11,"eq","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"eq","","",178,null],[11,"clone","","",178,null],[11,"new","","",179,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"walk_fn","","",179,null],[11,"consume_expr","","",179,null],[11,"walk_expr","","",179,null],[11,"decode","rustc::middle::const_val","",180,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",180,null],[11,"fmt","","",180,null],[11,"clone","","",180,null],[11,"hash","","",180,null],[11,"eq","","",180,null],[11,"description","","",180,null],[11,"hash","rustc::middle::const_qualif","",181,null],[11,"cmp","","",181,null],[11,"partial_cmp","","",181,null],[11,"lt","","",181,null],[11,"le","","",181,null],[11,"gt","","",181,null],[11,"ge","","",181,null],[11,"clone","","",181,null],[11,"eq","","",181,null],[11,"ne","","",181,null],[11,"decode","","",181,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,null],[18,"MUTABLE_MEM","rustc_typeck","",181,null],[18,"NEEDS_DROP","","",181,null],[18,"PREFER_IN_PLACE","","",181,null],[18,"NON_ZERO_SIZED","","",181,null],[18,"HAS_STATIC_BORROWS","","",181,null],[18,"NOT_CONST","","",181,null],[18,"NON_STATIC_BORROWS","","",181,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",181,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",181,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",181,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",181,null],[11,"is_all","","Returns `true` if all flags are currently set.",181,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",181,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",181,null],[11,"insert","","Inserts the specified flags in-place.",181,null],[11,"remove","","Removes the specified flags in-place.",181,null],[11,"toggle","","Toggles the specified flags in-place.",181,null],[11,"bitor","","Returns the union of the two sets of flags.",181,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",181,null],[11,"bitand","","Returns the intersection between the two sets of flags.",181,null],[11,"sub","","Returns the set difference of the two sets of flags.",181,null],[11,"not","","Returns the complement of this set of flags.",181,null],[11,"fmt","rustc::middle::cstore","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",184,null],[11,"eq","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",185,null],[11,"clone","","",185,null],[11,"from_u32","","",185,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",187,null],[11,"hash","","",187,null],[11,"decode","","",187,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",188,null],[11,"hash","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"clone","","",188,null],[11,"clone","","",189,null],[11,"fmt","","",190,null],[11,"clone","","",190,null],[11,"visit","","",187,null],[11,"visit_ids","","",187,null],[11,"stability","","",191,null],[11,"deprecation","","",191,null],[11,"visibility","","",191,null],[11,"closure_kind","","",191,null],[11,"closure_ty","","",191,null],[11,"item_variances","","",191,null],[11,"repr_attrs","","",191,null],[11,"item_type","","",191,null],[11,"visible_parent_map","","",191,null],[11,"item_name","","",191,null],[11,"item_predicates","","",191,null],[11,"item_super_predicates","","",191,null],[11,"item_attrs","","",191,null],[11,"item_symbol","","",191,null],[11,"trait_def","","",191,null],[11,"adt_def","","",191,null],[11,"method_arg_names","","",191,null],[11,"inherent_implementations_for_type","","",191,null],[11,"implementations_of_trait","","",191,null],[11,"provided_trait_methods","","",191,null],[11,"trait_item_def_ids","","",191,null],[11,"impl_items","","",191,null],[11,"impl_trait_ref","","",191,null],[11,"impl_polarity","","",191,null],[11,"custom_coerce_unsized_kind","","",191,null],[11,"associated_consts","","",191,null],[11,"impl_parent","","",191,null],[11,"trait_of_item","","",191,null],[11,"impl_or_trait_item","","",191,null],[11,"is_const_fn","","",191,null],[11,"is_defaulted_trait","","",191,null],[11,"is_impl","","",191,null],[11,"is_default_impl","","",191,null],[11,"is_extern_item","","",191,null],[11,"is_static_method","","",191,null],[11,"is_statically_included_foreign_item","","",191,null],[11,"is_typedef","","",191,null],[11,"dylib_dependency_formats","","",191,null],[11,"lang_items","","",191,null],[11,"missing_lang_items","","",191,null],[11,"is_staged_api","","",191,null],[11,"is_explicitly_linked","","",191,null],[11,"is_allocator","","",191,null],[11,"is_panic_runtime","","",191,null],[11,"panic_strategy","","",191,null],[11,"extern_crate","","",191,null],[11,"crate_attrs","","",191,null],[11,"crate_name","","",191,null],[11,"original_crate_name","","",191,null],[11,"crate_hash","","",191,null],[11,"crate_disambiguator","","",191,null],[11,"crate_struct_field_attrs","","",191,null],[11,"plugin_registrar_fn","","",191,null],[11,"native_libraries","","",191,null],[11,"reachable_ids","","",191,null],[11,"def_key","","",191,null],[11,"relative_def_path","","",191,null],[11,"variant_kind","","",191,null],[11,"struct_ctor_def_id","","",191,null],[11,"tuple_struct_definition_if_ctor","","",191,null],[11,"struct_field_names","","",191,null],[11,"item_children","","",191,null],[11,"crate_top_level_items","","",191,null],[11,"maybe_get_item_ast","","",191,null],[11,"maybe_get_item_mir","","",191,null],[11,"is_item_mir_available","","",191,null],[11,"crates","","",191,null],[11,"used_libraries","","",191,null],[11,"used_link_args","","",191,null],[11,"metadata_filename","","",191,null],[11,"metadata_section_name","","",191,null],[11,"encode_type","","",191,null],[11,"used_crates","","",191,null],[11,"used_crate_source","","",191,null],[11,"extern_mod_stmt_cnum","","",191,null],[11,"encode_metadata","","",191,null],[11,"metadata_encoding_version","","",191,null],[11,"fmt","rustc::middle::dataflow","",192,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"pre","","",193,null],[11,"fmt","","",194,null],[11,"eq","","",194,null],[11,"clone","","",194,null],[11,"new","","",193,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",193,null],[11,"add_kill","","Indicates that `id` kills `bit`",193,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",193,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",193,null],[11,"propagate","","Performs the data flow analysis.",193,null],[11,"fmt","rustc::middle::dependency_format","",195,null],[11,"eq","","",195,null],[11,"clone","","",195,null],[11,"clone","rustc::middle::free_region","",196,null],[11,"new","","",196,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",196,null],[11,"relate_free_regions_from_predicates","","",196,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",196,null],[11,"lub_free_regions","","",196,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",196,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",196,null],[11,"hash","rustc::middle::lang_items","",197,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"from_u32","","",197,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",198,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",198,null],[11,"item_name","","",198,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",198,null],[11,"require_owned_box","","",198,null],[11,"from_builtin_kind","","",198,null],[11,"to_builtin_kind","","",198,null],[11,"fn_trait_kind","","",198,null],[11,"char_impl","","",198,null],[11,"str_impl","","",198,null],[11,"slice_impl","","",198,null],[11,"const_ptr_impl","","",198,null],[11,"mut_ptr_impl","","",198,null],[11,"i8_impl","","",198,null],[11,"i16_impl","","",198,null],[11,"i32_impl","","",198,null],[11,"i64_impl","","",198,null],[11,"isize_impl","","",198,null],[11,"u8_impl","","",198,null],[11,"u16_impl","","",198,null],[11,"u32_impl","","",198,null],[11,"u64_impl","","",198,null],[11,"usize_impl","","",198,null],[11,"f32_impl","","",198,null],[11,"f64_impl","","",198,null],[11,"send_trait","","",198,null],[11,"sized_trait","","",198,null],[11,"unsize_trait","","",198,null],[11,"copy_trait","","",198,null],[11,"sync_trait","","",198,null],[11,"drop_trait","","",198,null],[11,"coerce_unsized_trait","","",198,null],[11,"add_trait","","",198,null],[11,"sub_trait","","",198,null],[11,"mul_trait","","",198,null],[11,"div_trait","","",198,null],[11,"rem_trait","","",198,null],[11,"neg_trait","","",198,null],[11,"not_trait","","",198,null],[11,"bitxor_trait","","",198,null],[11,"bitand_trait","","",198,null],[11,"bitor_trait","","",198,null],[11,"shl_trait","","",198,null],[11,"shr_trait","","",198,null],[11,"add_assign_trait","","",198,null],[11,"sub_assign_trait","","",198,null],[11,"mul_assign_trait","","",198,null],[11,"div_assign_trait","","",198,null],[11,"rem_assign_trait","","",198,null],[11,"bitxor_assign_trait","","",198,null],[11,"bitand_assign_trait","","",198,null],[11,"bitor_assign_trait","","",198,null],[11,"shl_assign_trait","","",198,null],[11,"shr_assign_trait","","",198,null],[11,"index_trait","","",198,null],[11,"index_mut_trait","","",198,null],[11,"unsafe_cell_type","","",198,null],[11,"deref_trait","","",198,null],[11,"deref_mut_trait","","",198,null],[11,"fn_trait","","",198,null],[11,"fn_mut_trait","","",198,null],[11,"fn_once_trait","","",198,null],[11,"eq_trait","","",198,null],[11,"ord_trait","","",198,null],[11,"str_eq_fn","","",198,null],[11,"panic_fn","","",198,null],[11,"panic_bounds_check_fn","","",198,null],[11,"panic_fmt","","",198,null],[11,"exchange_malloc_fn","","",198,null],[11,"exchange_free_fn","","",198,null],[11,"box_free_fn","","",198,null],[11,"strdup_uniq_fn","","",198,null],[11,"start_fn","","",198,null],[11,"eh_personality","","",198,null],[11,"eh_personality_catch","","",198,null],[11,"eh_unwind_resume","","",198,null],[11,"msvc_try_filter","","",198,null],[11,"owned_box","","",198,null],[11,"phantom_data","","",198,null],[11,"covariant_type","","",198,null],[11,"contravariant_type","","",198,null],[11,"invariant_type","","",198,null],[11,"covariant_lifetime","","",198,null],[11,"contravariant_lifetime","","",198,null],[11,"invariant_lifetime","","",198,null],[11,"no_copy_bound","","",198,null],[11,"non_zero","","",198,null],[11,"debug_trait","","",198,null],[11,"eq","rustc::middle::mem_categorization","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"clone","","",200,null],[11,"hash","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"hash","","",202,null],[11,"eq","","",202,null],[11,"ne","","",202,null],[11,"clone","","",202,null],[11,"fmt","","",203,null],[11,"hash","","",203,null],[11,"eq","","",203,null],[11,"ne","","",203,null],[11,"clone","","",203,null],[11,"fmt","","",204,null],[11,"hash","","",204,null],[11,"eq","","",204,null],[11,"clone","","",204,null],[11,"fmt","","",205,null],[11,"hash","","",205,null],[11,"eq","","",205,null],[11,"clone","","",205,null],[11,"fmt","","",206,null],[11,"hash","","",206,null],[11,"eq","","",206,null],[11,"clone","","",206,null],[11,"fmt","","",207,null],[11,"eq","","",207,null],[11,"ne","","",207,null],[11,"clone","","",207,null],[11,"eq","","",208,null],[11,"ne","","",208,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"id","rustc::hir","",23,null],[11,"span","","",23,null],[11,"id","","",59,null],[11,"span","","",59,null],[11,"clone","rustc::middle::mem_categorization","",210,null],[11,"from_mutbl","","",206,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",206,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",206,null],[11,"is_mutable","","",206,null],[11,"is_immutable","","",206,null],[11,"to_user_str","","",206,null],[11,"new","","",210,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",210,null],[11,"cat_expr_autoderefd","","",210,null],[11,"cat_expr_unadjusted","","",210,null],[11,"cat_def","","",210,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",210,null],[11,"cat_rvalue_node","","",210,null],[11,"cat_rvalue","","",210,null],[11,"cat_field","","",210,null],[11,"cat_tup_field","","",210,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",210,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",210,null],[11,"cat_imm_interior","","",210,null],[11,"cat_downcast","","",210,null],[11,"cat_pattern","","",210,null],[11,"fmt","","",211,null],[11,"clone","","",211,null],[11,"fmt","","",212,null],[11,"clone","","",212,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",208,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",208,null],[11,"upvar","","",208,null],[11,"descriptive_string","","",208,null],[11,"fmt","","",208,null],[11,"fmt","","",199,null],[11,"fmt","","",201,null],[11,"fmt","","",202,null],[11,"fmt","","",200,null],[11,"fmt","","",200,null],[11,"cmp","rustc::middle::privacy","",213,null],[11,"partial_cmp","","",213,null],[11,"eq","","",213,null],[11,"fmt","","",213,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"is_reachable","","",214,null],[11,"is_exported","","",214,null],[11,"is_public","","",214,null],[11,"default","","",214,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"fmt","","",214,null],[11,"decode","rustc::middle::region","",215,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",215,null],[11,"hash","","",215,null],[11,"cmp","","",215,null],[11,"partial_cmp","","",215,null],[11,"lt","","",215,null],[11,"le","","",215,null],[11,"gt","","",215,null],[11,"ge","","",215,null],[11,"eq","","",215,null],[11,"ne","","",215,null],[11,"clone","","",215,null],[11,"fmt","","",215,null],[11,"fmt","","",216,null],[11,"hash","","",216,null],[11,"cmp","","",216,null],[11,"partial_cmp","","",216,null],[11,"lt","","",216,null],[11,"le","","",216,null],[11,"gt","","",216,null],[11,"ge","","",216,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"clone","","",216,null],[11,"fmt","","",217,null],[11,"decode","","",217,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",217,null],[11,"hash","","",217,null],[11,"cmp","","",217,null],[11,"partial_cmp","","",217,null],[11,"lt","","",217,null],[11,"le","","",217,null],[11,"gt","","",217,null],[11,"ge","","",217,null],[11,"eq","","",217,null],[11,"ne","","",217,null],[11,"clone","","",217,null],[11,"to_code_extent","","",217,null],[11,"fmt","","",218,null],[11,"decode","","",218,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",218,null],[11,"hash","","",218,null],[11,"cmp","","",218,null],[11,"partial_cmp","","",218,null],[11,"lt","","",218,null],[11,"le","","",218,null],[11,"gt","","",218,null],[11,"ge","","",218,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"clone","","",218,null],[11,"node_id","","Returns a node id associated with this scope.",216,null],[11,"node_id","","",215,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",215,null],[11,"clone","","",219,null],[11,"fmt","","",219,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",220,null],[11,"lookup_code_extent","","",220,null],[11,"node_extent","","",220,null],[11,"item_extent","","",220,null],[11,"call_site_extent","","",220,null],[11,"opt_destruction_extent","","",220,null],[11,"intern_code_extent","","",220,null],[11,"intern_node","","",220,null],[11,"code_extent_data","","",220,null],[11,"each_encl_scope","","",220,null],[11,"each_var_scope","","",220,null],[11,"each_rvalue_scope","","",220,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",220,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",220,null],[11,"var_region","","Returns the lifetime of the variable `id`.",220,null],[11,"scopes_intersect","","",220,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",220,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",220,null],[11,"fmt","rustc::middle::resolve_lifetime","",221,null],[11,"decode","","",221,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",221,null],[11,"hash","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"hash","rustc::middle::stability","",222,null],[11,"fmt","","",222,null],[11,"clone","","",222,null],[11,"partial_cmp","","",222,null],[11,"eq","","",222,null],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",222,null],[11,"from_attr_level","","",222,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"build","","Construct the stability index for a crate being compiled.",223,null],[11,"new","","",223,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"lookup_stability","rustc::ty::context","Lookup the stability for a node, loading external crate\nmetadata as necessary.",119,null],[11,"lookup_deprecation","","",119,null],[11,"decode","rustc::mir::repr","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",224,null],[11,"clone","","",224,null],[11,"all_basic_blocks","","",224,null],[11,"basic_block_data","","",224,null],[11,"basic_block_data_mut","","",224,null],[11,"index","","",224,null],[11,"index_mut","","",224,null],[11,"decode","","",225,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",225,null],[11,"eq","","",225,null],[11,"fmt","","",225,null],[11,"clone","","",225,null],[11,"decode","","",226,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",226,null],[11,"eq","","",226,null],[11,"fmt","","",226,null],[11,"clone","","",226,null],[11,"decode","","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"decode","","",228,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",228,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"decode","","",229,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"decode","","",230,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",230,null],[11,"fmt","","",230,null],[11,"clone","","",230,null],[11,"decode","","",231,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",231,null],[11,"hash","","",231,null],[11,"eq","","",231,null],[11,"ne","","",231,null],[11,"clone","","",231,null],[11,"new","","",231,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",231,null],[11,"fmt","","",231,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"fmt","","",232,null],[11,"clone","","",232,null],[11,"decode","","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",233,null],[11,"fmt","","",233,null],[11,"clone","","",233,null],[11,"decode","","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",234,null],[11,"clone","","",234,null],[11,"successors","","",233,null],[11,"successors_mut","","",233,null],[11,"successors","","",234,null],[11,"successors_mut","","",234,null],[11,"new","","",232,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",232,null],[11,"terminator_mut","","",232,null],[11,"fmt","","",234,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",234,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",234,null],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",235,null],[11,"clone","","",235,null],[11,"decode","","",236,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",236,null],[11,"fmt","","",236,null],[11,"clone","","",236,null],[11,"fmt","","",235,null],[11,"decode","","",237,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"clone","","",237,null],[11,"decode","","",238,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",238,null],[11,"hash","","",238,null],[11,"eq","","",238,null],[11,"ne","","",238,null],[11,"fmt","","",238,null],[11,"clone","","",238,null],[11,"decode","","",239,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",239,null],[11,"hash","","",239,null],[11,"eq","","",239,null],[11,"ne","","",239,null],[11,"fmt","","",239,null],[11,"clone","","",239,null],[11,"decode","","",240,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",240,null],[11,"hash","","",240,null],[11,"eq","","",240,null],[11,"ne","","",240,null],[11,"fmt","","",240,null],[11,"clone","","",240,null],[11,"new","","",240,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",240,null],[11,"field","","",237,null],[11,"deref","","",237,null],[11,"index","","",237,null],[11,"elem","","",237,null],[11,"fmt","","",237,null],[11,"index","collections::vec","",241,null],[11,"index_mut","","",241,null],[11,"decode","rustc::mir::repr","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",242,null],[11,"eq","","",242,null],[11,"ne","","",242,null],[11,"hash","","",242,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"new","","",242,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",242,null],[11,"decode","","",243,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",243,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"decode","","",244,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",244,null],[11,"eq","","",244,null],[11,"ne","","",244,null],[11,"clone","","",244,null],[11,"fmt","","",244,null],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",245,null],[11,"clone","","",245,null],[11,"decode","","",246,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",246,null],[11,"eq","","",246,null],[11,"fmt","","",246,null],[11,"clone","","",246,null],[11,"decode","","",247,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",247,null],[11,"eq","","",247,null],[11,"ne","","",247,null],[11,"fmt","","",247,null],[11,"clone","","",247,null],[11,"decode","","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",248,null],[11,"eq","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"decode","","",249,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",249,null],[11,"eq","","",249,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"fmt","","",245,null],[11,"decode","","",250,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",250,null],[11,"hash","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"clone","","",251,null],[11,"fmt","","",251,null],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",252,null],[11,"hash","","",252,null],[11,"eq","","",252,null],[11,"ne","","",252,null],[11,"clone","","",252,null],[11,"fmt","","",250,null],[11,"fmt","","",252,null],[11,"fmt","rustc::mir::tcx","",164,null],[11,"clone","","",164,null],[11,"from_ty","","",164,{"inputs":[{"name":"tys"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",164,null],[11,"projection_ty","","",164,null],[11,"super_fold_with","","",164,null],[11,"super_visit_with","","",164,null],[11,"operand_ty","rustc::mir::repr","",224,null],[11,"binop_ty","","",224,null],[11,"lvalue_ty","","",224,null],[11,"rvalue_ty","","",224,null],[11,"to_mutbl_lossy","","",226,null],[11,"to_hir_binop","","",248,null],[11,"fmt","rustc::mir::visit","",253,null],[11,"clone","","",253,null],[11,"clone","rustc::mir::transform","",254,null],[11,"from_node","","",254,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"mirsource"}}],[11,"item_id","","",254,null],[11,"new","","",255,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",255,null],[11,"push_pass","","Pushes a built-in pass.",255,null],[11,"extend","","",255,null],[11,"eq","rustc::session::config","",256,null],[11,"clone","","",256,null],[11,"eq","","",257,null],[11,"clone","","",257,null],[11,"hash","","",258,null],[11,"eq","","",258,null],[11,"clone","","",258,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"fmt","","",259,null],[11,"clone","","",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",260,null],[11,"eq","","",261,null],[11,"clone","","",261,null],[11,"filestem","","",262,null],[11,"clone","","",263,null],[11,"path","","",263,null],[11,"temp_path","","",263,null],[11,"with_extension","","",263,null],[11,"filestem","","",263,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",260,null],[11,"eq","","",264,null],[11,"clone","","",264,null],[11,"fmt","","",265,null],[11,"hash","","",265,null],[11,"cmp","","",265,null],[11,"clone","","",265,null],[11,"partial_cmp","","",265,null],[11,"eq","","",265,null],[11,"clone","","",266,null],[11,"is_empty","","",266,null],[11,"eq","","",267,null],[11,"clone","","",267,null],[11,"desc","","",267,null],[11,"clone","","",268,null],[11,"clone","","",269,null],[11,"fmt","","",270,null],[11,"eq","","",270,null],[11,"clone","","",270,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"clone","","",271,null],[11,"is_stable","","",271,null],[11,"stable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",265,null],[11,"clone","rustc::session::filesearch","",272,null],[11,"for_each_lib_search_path","","",273,null],[11,"get_lib_path","","",273,null],[11,"search","","",273,null],[11,"new","","",273,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",273,null],[11,"get_tools_search_paths","","",273,null],[11,"fmt","rustc::session::search_paths","",274,null],[11,"clone","","",274,null],[11,"fmt","","",275,null],[11,"clone","","",275,null],[11,"eq","","",275,null],[11,"new","","",274,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",274,null],[11,"iter","","",274,null],[11,"next","","",276,null],[11,"struct_span_warn","rustc::session","",277,null],[11,"struct_span_warn_with_code","","",277,null],[11,"struct_warn","","",277,null],[11,"struct_span_err","","",277,null],[11,"struct_span_err_with_code","","",277,null],[11,"struct_err","","",277,null],[11,"struct_span_fatal","","",277,null],[11,"struct_span_fatal_with_code","","",277,null],[11,"struct_fatal","","",277,null],[11,"span_fatal","","",277,null],[11,"span_fatal_with_code","","",277,null],[11,"fatal","","",277,null],[11,"span_err_or_warn","","",277,null],[11,"span_err","","",277,null],[11,"span_err_with_code","","",277,null],[11,"err","","",277,null],[11,"err_count","","",277,null],[11,"has_errors","","",277,null],[11,"abort_if_errors","","",277,null],[11,"track_errors","","",277,null],[11,"span_warn","","",277,null],[11,"span_warn_with_code","","",277,null],[11,"warn","","",277,null],[11,"opt_span_warn","","",277,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",277,null],[11,"note_without_error","","",277,null],[11,"span_note_without_error","","",277,null],[11,"span_unimpl","","",277,null],[11,"unimpl","","",277,null],[11,"add_lint","","",277,null],[11,"reserve_node_ids","","",277,null],[11,"diagnostic","","",277,null],[11,"codemap","","",277,null],[11,"verbose","","",277,null],[11,"time_passes","","",277,null],[11,"count_llvm_insns","","",277,null],[11,"count_type_sizes","","",277,null],[11,"time_llvm_passes","","",277,null],[11,"trans_stats","","",277,null],[11,"meta_stats","","",277,null],[11,"asm_comments","","",277,null],[11,"no_verify","","",277,null],[11,"borrowck_stats","","",277,null],[11,"print_llvm_passes","","",277,null],[11,"lto","","",277,null],[11,"no_landing_pads","","",277,null],[11,"unstable_options","","",277,null],[11,"print_enum_sizes","","",277,null],[11,"nonzeroing_move_hints","","",277,null],[11,"sysroot","","",277,null],[11,"target_filesearch","","",277,null],[11,"host_filesearch","","",277,null],[11,"next_node_id","","",277,null],[11,"peek_node_id","","",277,null],[11,"diagnostic","","",277,null],[11,"hash","rustc::traits::error_reporting","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"fmt","","",278,null],[11,"report_fulfillment_errors","rustc::infer","",116,null],[11,"report_fulfillment_errors_as_warnings","","",116,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",116,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",116,null],[11,"report_selection_error","","",116,null],[11,"recursive_type_with_infinite_size_error","rustc::ty::context","",119,null],[11,"report_object_safety_error","","",119,null],[11,"clone","rustc::traits::fulfill","",279,null],[11,"new","","Creates a new fulfillment context.",280,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",280,null],[11,"register_builtin_bound","","",280,null],[11,"register_region_obligation","","",280,null],[11,"register_predicate_obligation","","",280,null],[11,"register_rfc1592_obligation","","",280,null],[11,"region_obligations","","",280,null],[11,"select_rfc1592_obligations","","",280,null],[11,"select_all_or_error","","",280,null],[11,"select_where_possible","","",280,null],[11,"pending_obligations","","",280,null],[11,"new","","",281,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",281,null],[11,"check_duplicate_trait","","",281,null],[11,"eq","rustc::traits::project","",282,null],[11,"clone","","",282,null],[11,"fmt","","",282,null],[11,"is_topmost","","",282,null],[11,"is_any_final","","",282,null],[11,"is_any","","",282,null],[11,"clone","","",283,null],[11,"clone","","",284,null],[11,"with","","",284,null],[11,"hash","rustc::traits::object_safety","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"fmt","","",285,null],[11,"clone","","",285,null],[11,"hash","","",286,null],[11,"eq","","",286,null],[11,"fmt","","",286,null],[11,"clone","","",286,null],[11,"is_object_safe","rustc::ty::context","",119,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",119,null],[11,"object_safety_violations","","",119,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",119,null],[11,"clone","rustc::traits::select","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"clone","","",289,null],[11,"new","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",290,null],[11,"tcx","","",290,null],[11,"param_env","","",290,null],[11,"closure_typer","","",290,null],[11,"projection_mode","","",290,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",290,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",290,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",290,null],[11,"new","","",287,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",289,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",291,null],[11,"new","rustc::traits::specialize::specialization_graph","",292,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",292,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",292,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",292,null],[11,"clone","","",293,null],[11,"fmt","","",293,null],[11,"is_from_trait","","",293,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",293,null],[11,"def_id","","",293,null],[11,"next","","",294,null],[11,"next","","",295,null],[11,"map","","",296,null],[11,"next","","",297,null],[11,"next","","",298,null],[11,"next","","",299,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",295,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",295,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",295,null],[11,"new","rustc::traits::specialize","",300,{"inputs":[],"output":{"name":"specializescache"}}],[11,"check","","",300,null],[11,"insert","","",300,null],[11,"fmt","rustc::traits::project","",284,null],[11,"fmt","rustc::traits::fulfill","",279,null],[11,"fmt","rustc::traits","",301,null],[11,"fmt","","",302,null],[11,"fmt","","",303,null],[11,"fmt","","",304,null],[11,"fmt","","",305,null],[11,"fmt","","",306,null],[11,"fmt","","",307,null],[11,"fmt","","",308,null],[11,"fmt","","",309,null],[11,"fmt","","",310,null],[11,"fmt","rustc::traits::project","",283,null],[11,"lift_to_tcx","rustc::traits","",311,null],[11,"lift_to_tcx","","",302,null],[11,"super_fold_with","","",301,null],[11,"super_visit_with","","",301,null],[11,"super_fold_with","","",303,null],[11,"super_visit_with","","",303,null],[11,"super_fold_with","","",304,null],[11,"super_visit_with","","",304,null],[11,"super_fold_with","","",306,null],[11,"super_visit_with","","",306,null],[11,"super_fold_with","","",305,null],[11,"super_visit_with","","",305,null],[11,"super_fold_with","","",307,null],[11,"super_visit_with","","",307,null],[11,"super_fold_with","","",308,null],[11,"super_visit_with","","",308,null],[11,"super_fold_with","","",302,null],[11,"super_visit_with","","",302,null],[11,"super_fold_with","rustc::traits::project","",284,null],[11,"super_visit_with","","",284,null],[11,"next","rustc::traits::util","",312,null],[11,"trait_ref_for_builtin_bound","rustc::ty::context","",119,null],[11,"predicate_for_trait_def","","",119,null],[11,"predicate_for_builtin_bound","","",119,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",119,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",119,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",119,null],[11,"closure_trait_ref_and_return_type","","",119,null],[11,"eq","rustc::traits","",301,null],[11,"ne","","",301,null],[11,"clone","","",301,null],[11,"eq","","",313,null],[11,"ne","","",313,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"eq","","",314,null],[11,"ne","","",314,null],[11,"fmt","","",314,null],[11,"clone","","",314,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"fmt","","",315,null],[11,"clone","","",315,null],[11,"fmt","","",311,null],[11,"clone","","",311,null],[11,"clone","","",310,null],[11,"clone","","",302,null],[11,"eq","","",303,null],[11,"ne","","",303,null],[11,"clone","","",303,null],[11,"eq","","",304,null],[11,"ne","","",304,null],[11,"clone","","",304,null],[11,"clone","","",306,null],[11,"clone","","",305,null],[11,"clone","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"ne","","",308,null],[11,"clone","","",308,null],[11,"new","","",301,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",301,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",301,null],[11,"new","","",313,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",313,{"inputs":[{"name":"span"},{"name":"u32"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",313,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",302,null],[11,"map","","",302,null],[11,"clone","rustc::ty::adjustment","",316,null],[11,"clone","","",317,null],[11,"is_identity","","",316,null],[11,"is_identity","","",317,null],[11,"fmt","","",318,null],[11,"eq","","",318,null],[11,"ne","","",318,null],[11,"clone","","",318,null],[11,"fmt","","",319,null],[11,"decode","","",319,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",319,null],[11,"clone","","",319,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",320,null],[11,"adjust_for_autoderef","","",320,null],[11,"adjust_for_autoref","","",320,null],[11,"eq","rustc::ty::cast","",321,null],[11,"ne","","",321,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"fmt","","",322,null],[11,"clone","","",322,null],[11,"decode","","",323,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"from_ty","","",322,{"inputs":[{"name":"tys"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::error","",324,null],[11,"clone","","",324,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"fmt","","",326,null],[11,"hash","","",326,null],[11,"eq","","",326,null],[11,"decode","","",326,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",326,null],[11,"clone","","",326,null],[11,"fmt","","",325,null],[11,"note_and_explain_type_err","rustc::ty::context","",119,null],[11,"hash","rustc::ty::fast_reject","",327,null],[11,"eq","","",327,null],[11,"ne","","",327,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"tcx","rustc::ty::fold","",328,null],[11,"fold_ty","","",328,null],[11,"collect_regions","rustc::ty::context","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",119,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",119,null],[11,"new","rustc::ty::fold","",329,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",329,null],[11,"fold_binder","","",329,null],[11,"fold_region","","",329,null],[11,"replace_late_bound_regions","rustc::ty::context","",119,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",119,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",119,null],[11,"no_late_bound_regions","","",119,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",119,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",119,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",119,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",119,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",119,null],[11,"item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",119,null],[11,"node_path_str","","Returns a string identifying this local node-id.",119,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",119,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",119,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",119,null],[11,"push_item_path","","",119,null],[11,"fmt","rustc::ty::item_path","",330,null],[11,"default","rustc::ty::layout","",331,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",331,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",331,null],[11,"ptr_sized_integer","","",331,null],[11,"clone","","",332,null],[11,"fmt","","",333,null],[11,"hash","","",333,null],[11,"cmp","","",333,null],[11,"partial_cmp","","",333,null],[11,"lt","","",333,null],[11,"le","","",333,null],[11,"gt","","",333,null],[11,"ge","","",333,null],[11,"eq","","",333,null],[11,"ne","","",333,null],[11,"clone","","",333,null],[11,"from_bits","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",333,null],[11,"bits","","",333,null],[11,"abi_align","","",333,null],[11,"checked_add","","",333,null],[11,"checked_mul","","",333,null],[11,"fmt","","",334,null],[11,"hash","","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"clone","","",334,null],[11,"from_bits","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",334,null],[11,"pref","","",334,null],[11,"min","","",334,null],[11,"max","","",334,null],[11,"fmt","","",335,null],[11,"hash","","",335,null],[11,"cmp","","",335,null],[11,"partial_cmp","","",335,null],[11,"eq","","",335,null],[11,"clone","","",335,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",335,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",335,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",335,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",335,null],[11,"fmt","","",336,null],[11,"hash","","",336,null],[11,"eq","","",336,null],[11,"ne","","",336,null],[11,"clone","","",336,null],[11,"size","","",336,null],[11,"align","","",336,null],[11,"fmt","","",337,null],[11,"hash","","",337,null],[11,"eq","","",337,null],[11,"ne","","",337,null],[11,"new","","",337,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",337,null],[11,"min_size","","Get the size without trailing alignment padding.",337,null],[11,"stride","","Get the size with trailing aligment padding.",337,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",337,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"tys"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",338,null],[11,"eq","","",338,null],[11,"ne","","",338,null],[11,"fmt","","",338,null],[11,"fmt","","",339,null],[11,"clone","","",339,null],[11,"fmt","","",339,null],[11,"compute_uncached","","",338,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",338,null],[11,"size","","",338,null],[11,"align","","",338,null],[11,"fmt","","",340,null],[11,"clone","","",340,null],[11,"compute","","",340,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",340,null],[11,"new","rustc::ty::_match","",341,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",341,null],[11,"tcx","","",341,null],[11,"a_is_expected","","",341,null],[11,"relate_with_variance","","",341,null],[11,"regions","","",341,null],[11,"tys","","",341,null],[11,"binders","","",341,null],[11,"to_dep_node","rustc::ty::maps","",342,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",343,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",344,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",345,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",346,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",347,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",348,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",349,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",350,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",351,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",352,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",353,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",354,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",355,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"fmt","rustc::ty::outlives","",356,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",116,null],[11,"fmt","rustc::ty::relate","",357,null],[11,"clone","","",357,null],[11,"relate","rustc::ty::sty","",358,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"result"}}],[11,"relate","","",161,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"result"}}],[11,"relate","rustc::hir","",92,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"relate","syntax::abi","",359,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",360,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",361,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"result"}}],[11,"relate","collections::vec","",241,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",362,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"result"}}],[11,"relate","","",363,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"result"}}],[11,"relate","","",120,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"relate","","",163,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"result"}}],[11,"relate","","",364,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"result"}}],[11,"relate","","",121,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"result"}}],[11,"relate","alloc::rc","",365,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"relate","alloc::boxed","",366,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"result"}}],[11,"hash","rustc::ty::subst","",367,null],[11,"eq","","",367,null],[11,"ne","","",367,null],[11,"clone","","",367,null],[11,"new","","",367,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",367,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",367,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"tys"}],"output":{"name":"substs"}}],[11,"empty","","",367,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",367,null],[11,"type_for_def","","",367,null],[11,"self_ty","","",367,null],[11,"with_self_ty","","",367,null],[11,"erase_regions","","",367,null],[11,"with_method","","",367,null],[11,"with_method_from","","",367,null],[11,"with_method_from_subst","","",367,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",367,null],[11,"encode","","",367,null],[11,"decode","","",367,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",368,null],[11,"decode","","",368,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",368,null],[11,"hash","","",368,null],[11,"clone","","",368,null],[11,"eq","","",368,null],[11,"cmp","","",368,null],[11,"partial_cmp","","",368,null],[11,"all","","",368,null],[11,"to_uint","","",368,null],[11,"from_uint","","",368,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",369,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",369,null],[11,"hash","","",369,null],[11,"clone","","",369,null],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"fmt","","",369,null],[11,"empty","","",369,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",369,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",369,null],[11,"extend","","Appends `values` to the vector associated with `space`.",369,null],[11,"pop","","",369,null],[11,"truncate","","",369,null],[11,"replace","","",369,null],[11,"get_self","","",369,null],[11,"len","","",369,null],[11,"is_empty_in","","",369,null],[11,"get_slice","","",369,null],[11,"get_mut_slice","","",369,null],[11,"opt_get","","",369,null],[11,"get","","",369,null],[11,"iter","","",369,null],[11,"into_iter","","",369,null],[11,"iter_enumerated","","",369,null],[11,"as_slice","","",369,null],[11,"into_vec","","",369,null],[11,"all_vecs","","",369,null],[11,"all","","",369,null],[11,"any","","",369,null],[11,"is_empty","","",369,null],[11,"map","","",369,null],[11,"map_enumerated","","",369,null],[11,"split","","",369,null],[11,"with_slice","","",369,null],[11,"clone","","",370,null],[11,"next","","",370,null],[11,"size_hint","","",370,null],[11,"into_iter","","",369,null],[11,"new","rustc::ty::trait_def","",371,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",371,null],[11,"object_safety","","",371,null],[11,"set_object_safety","","",371,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",371,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",371,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",371,null],[11,"ancestors","","",371,null],[11,"for_each_impl","","",371,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",371,null],[11,"hash","","",372,null],[11,"cmp","","",372,null],[11,"partial_cmp","","",372,null],[11,"lt","","",372,null],[11,"le","","",372,null],[11,"gt","","",372,null],[11,"ge","","",372,null],[11,"clone","","",372,null],[11,"eq","","",372,null],[11,"ne","","",372,null],[18,"NO_TRAIT_FLAGS","rustc_typeck","",372,null],[18,"HAS_DEFAULT_IMPL","","",372,null],[18,"IS_OBJECT_SAFE","","",372,null],[18,"OBJECT_SAFETY_VALID","","",372,null],[18,"IMPLS_VALID","","",372,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",372,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",372,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",372,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",372,null],[11,"is_all","","Returns `true` if all flags are currently set.",372,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",372,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",372,null],[11,"insert","","Inserts the specified flags in-place.",372,null],[11,"remove","","Removes the specified flags in-place.",372,null],[11,"toggle","","Toggles the specified flags in-place.",372,null],[11,"bitor","","Returns the union of the two sets of flags.",372,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",372,null],[11,"bitand","","Returns the intersection between the two sets of flags.",372,null],[11,"sub","","Returns the set difference of the two sets of flags.",372,null],[11,"not","","Returns the complement of this set of flags.",372,null],[11,"new","rustc::ty::walk","",373,{"inputs":[{"name":"tys"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",373,null],[11,"next","","",373,null],[11,"fmt","rustc::ty::wf","",374,null],[11,"to_ty","syntax::attr","",375,null],[11,"initial_discriminant","","",375,null],[11,"assert_ty_matches","","",375,null],[11,"disr_incr","","",375,null],[11,"clone","rustc::ty::util","",376,null],[11,"fmt","","",377,null],[11,"eq","","",377,null],[11,"cmp","","",377,null],[11,"partial_cmp","","",377,null],[11,"clone","","",377,null],[11,"can_type_implement_copy","rustc::ty","",378,null],[11,"pat_contains_ref_binding","rustc::ty::context","",119,null],[11,"arm_contains_ref_binding","","",119,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",119,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",119,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",119,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",119,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",119,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",119,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",119,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",119,null],[11,"moves_by_default","rustc::ty","",320,null],[11,"is_sized","","",320,null],[11,"layout","","",320,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",320,null],[11,"clone","rustc::ty::contents","",379,null],[11,"when","","",379,null],[11,"intersects","","",379,null],[11,"owns_owned","","",379,null],[11,"interior_param","","",379,null],[11,"interior_unsafe","","",379,null],[11,"needs_drop","","",379,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",379,null],[11,"union","","",379,null],[11,"has_dtor","","",379,null],[11,"bitor","","",379,null],[11,"bitand","","",379,null],[11,"sub","","",379,null],[11,"fmt","","",379,null],[11,"type_contents","rustc::ty","",320,null],[11,"new","rustc::ty::context","",380,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",381,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",119,null],[11,"deref","","",119,null],[11,"crate_name","","",119,null],[11,"crate_disambiguator","","",119,null],[11,"type_parameter_def","","",119,null],[11,"node_types","","",119,null],[11,"node_type_insert","","",119,null],[11,"intern_trait_def","","",119,null],[11,"alloc_trait_def","","",119,null],[11,"intern_adt_def","","",119,null],[11,"intern_stability","","",119,null],[11,"intern_layout","","",119,null],[11,"store_free_region_map","","",119,null],[11,"free_region_map","","",119,null],[11,"lift","","",119,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",119,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",119,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"hashmap"},{"name":"map"},{"name":"hashmap"},{"name":"hashset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",119,null],[11,"mk_type_list","","",119,null],[11,"mk_substs","","",119,null],[11,"mk_bare_fn","","",119,null],[11,"mk_region","","",119,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",119,null],[11,"mk_ty","","",119,null],[11,"mk_mach_int","","",119,null],[11,"mk_mach_uint","","",119,null],[11,"mk_mach_float","","",119,null],[11,"mk_str","","",119,null],[11,"mk_static_str","","",119,null],[11,"mk_enum","","",119,null],[11,"mk_box","","",119,null],[11,"mk_ptr","","",119,null],[11,"mk_ref","","",119,null],[11,"mk_mut_ref","","",119,null],[11,"mk_imm_ref","","",119,null],[11,"mk_mut_ptr","","",119,null],[11,"mk_imm_ptr","","",119,null],[11,"mk_nil_ptr","","",119,null],[11,"mk_array","","",119,null],[11,"mk_slice","","",119,null],[11,"mk_tup","","",119,null],[11,"mk_nil","","",119,null],[11,"mk_bool","","",119,null],[11,"mk_fn_def","","",119,null],[11,"mk_fn_ptr","","",119,null],[11,"mk_trait","","",119,null],[11,"mk_projection","","",119,null],[11,"mk_struct","","",119,null],[11,"mk_closure","","",119,null],[11,"mk_closure_from_closure_substs","","",119,null],[11,"mk_var","","",119,null],[11,"mk_int_var","","",119,null],[11,"mk_float_var","","",119,null],[11,"mk_infer","","",119,null],[11,"mk_param","","",119,null],[11,"mk_self_type","","",119,null],[11,"mk_param_from_def","","",119,null],[11,"trait_items","","",119,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",119,null],[11,"lift_to_tcx","core::option","",382,null],[11,"lift_to_tcx","core::result","",117,null],[11,"lift_to_tcx","collections::vec","",241,null],[11,"lift_to_tcx","rustc::ty::sty","",364,null],[11,"lift_to_tcx","","",120,null],[11,"lift_to_tcx","rustc::ty","",383,null],[11,"lift_to_tcx","","",384,null],[11,"lift_to_tcx","","",385,null],[11,"lift_to_tcx","","",361,null],[11,"lift_to_tcx","","",386,null],[11,"lift_to_tcx","rustc::ty::sty","",121,null],[11,"lift_to_tcx","","",163,null],[11,"lift_to_tcx","rustc::ty","",387,null],[11,"lift_to_tcx","rustc::ty::adjustment","",318,null],[11,"lift_to_tcx","rustc::ty::sty","",162,null],[11,"lift_to_tcx","","",161,null],[11,"lift_to_tcx","","",388,null],[11,"lift_to_tcx","rustc::ty::error","",324,null],[11,"lift_to_tcx","rustc::infer::type_variable","",141,null],[11,"lift_to_tcx","rustc::ty::error","",325,null],[11,"super_fold_with","rustc::hir","",92,null],[11,"super_visit_with","","",92,null],[11,"super_fold_with","syntax::abi","",359,null],[11,"super_visit_with","","",359,null],[11,"super_fold_with","core::option","",382,null],[11,"super_visit_with","","",382,null],[11,"super_fold_with","alloc::rc","",365,null],[11,"super_visit_with","","",365,null],[11,"super_fold_with","alloc::boxed","",366,null],[11,"super_visit_with","","",366,null],[11,"super_fold_with","collections::vec","",241,null],[11,"super_visit_with","","",241,null],[11,"super_fold_with","rustc::ty::sty","",121,null],[11,"fold_with","","",121,null],[11,"super_visit_with","","",121,null],[11,"visit_with","","",121,null],[11,"super_fold_with","syntax::ptr","",389,null],[11,"super_visit_with","","",389,null],[11,"super_fold_with","rustc::ty::subst","",369,null],[11,"super_visit_with","","",369,null],[11,"super_fold_with","rustc::ty::sty","",390,null],[11,"super_visit_with","","",390,null],[11,"super_fold_with","","",388,null],[11,"fold_with","","",388,null],[11,"super_visit_with","","",388,null],[11,"super_fold_with","","",358,null],[11,"fold_with","","",358,null],[11,"super_visit_with","","",358,null],[11,"super_fold_with","","",162,null],[11,"fold_with","","",162,null],[11,"super_visit_with","","",162,null],[11,"super_fold_with","","",161,null],[11,"fold_with","","",161,null],[11,"super_visit_with","","",161,null],[11,"super_fold_with","","",120,null],[11,"fold_with","","",120,null],[11,"super_visit_with","","",120,null],[11,"super_fold_with","rustc::ty","",391,null],[11,"fold_with","","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","rustc::ty::sty","",364,null],[11,"fold_with","","",364,null],[11,"super_visit_with","","",364,null],[11,"visit_with","","",364,null],[11,"super_fold_with","","",163,null],[11,"super_visit_with","","",163,null],[11,"super_fold_with","rustc::ty","",387,null],[11,"super_visit_with","","",387,null],[11,"super_fold_with","rustc::ty::adjustment","",318,null],[11,"fold_with","","",318,null],[11,"super_visit_with","","",318,null],[11,"super_fold_with","rustc::ty::sty","",363,null],[11,"super_visit_with","","",363,null],[11,"super_fold_with","","",362,null],[11,"fold_with","","",362,null],[11,"super_visit_with","","",362,null],[11,"super_fold_with","rustc::ty","",392,null],[11,"super_visit_with","","",392,null],[11,"super_fold_with","","",393,null],[11,"super_visit_with","","",393,null],[11,"super_fold_with","","",394,null],[11,"super_visit_with","","",394,null],[11,"super_fold_with","","",395,null],[11,"super_visit_with","","",395,null],[11,"super_fold_with","","",396,null],[11,"super_visit_with","","",396,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","","",361,null],[11,"super_visit_with","","",361,null],[11,"super_fold_with","rustc::ty::sty","",360,null],[11,"super_visit_with","","",360,null],[11,"super_fold_with","rustc::ty","",397,null],[11,"super_visit_with","","",397,null],[11,"super_fold_with","","",384,null],[11,"super_visit_with","","",384,null],[11,"super_fold_with","","",383,null],[11,"super_visit_with","","",383,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",398,null],[11,"super_visit_with","","",398,null],[11,"super_fold_with","","",378,null],[11,"super_visit_with","","",378,null],[11,"super_fold_with","","",399,null],[11,"super_visit_with","","",399,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"hash","","",358,null],[11,"eq","","",358,null],[11,"ne","","",358,null],[11,"clone","","",358,null],[11,"decode","","",400,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",400,null],[11,"hash","","",400,null],[11,"cmp","","",400,null],[11,"partial_cmp","","",400,null],[11,"lt","","",400,null],[11,"le","","",400,null],[11,"gt","","",400,null],[11,"ge","","",400,null],[11,"eq","","",400,null],[11,"ne","","",400,null],[11,"clone","","",400,null],[11,"decode","","",401,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",401,null],[11,"hash","","",401,null],[11,"cmp","","",401,null],[11,"partial_cmp","","",401,null],[11,"lt","","",401,null],[11,"le","","",401,null],[11,"gt","","",401,null],[11,"ge","","",401,null],[11,"eq","","",401,null],[11,"ne","","",401,null],[11,"clone","","",401,null],[11,"fmt","","",402,null],[11,"hash","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"clone","","",402,null],[11,"fmt","","",163,null],[11,"hash","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"encode","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",390,null],[11,"eq","","",390,null],[11,"ne","","",390,null],[11,"clone","","",390,null],[11,"principal_def_id","","",390,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",390,null],[11,"projection_bounds_with_self_ty","","",390,null],[11,"hash","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"clone","","",120,null],[11,"self_ty","","",121,null],[11,"def_id","","",121,null],[11,"substs","","",121,null],[11,"input_types","","",121,null],[11,"to_poly_trait_predicate","","",121,null],[11,"fmt","","",121,null],[11,"hash","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",121,null],[11,"as_ref","","",121,null],[11,"map_bound_ref","","",121,null],[11,"map_bound","","",121,null],[11,"fmt","rustc::ty","",403,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"hash","","",360,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"clone","","",360,null],[11,"sort_key","","",360,null],[11,"fmt","","",404,null],[11,"hash","","",404,null],[11,"eq","","",404,null],[11,"ne","","",404,null],[11,"clone","","",404,null],[11,"hash","","",388,null],[11,"eq","","",388,null],[11,"ne","","",388,null],[11,"clone","","",388,null],[11,"decode","","",162,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,null],[11,"fmt","","",162,null],[11,"hash","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"clone","","",162,null],[11,"diverges","","",162,null],[11,"unwrap","","",162,null],[11,"unwrap_or","","",162,null],[11,"diverges","","",121,null],[11,"hash","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"clone","","",161,null],[11,"inputs","","",121,null],[11,"input","","",121,null],[11,"output","","",121,null],[11,"variadic","","",121,null],[11,"hash","","",405,null],[11,"eq","","",405,null],[11,"ne","","",405,null],[11,"clone","","",405,null],[11,"new","","",405,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",405,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",405,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",405,null],[11,"is_self","","",405,null],[11,"fmt","","",406,null],[11,"decode","","",406,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",406,null],[11,"hash","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",406,null],[11,"decode","","",364,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",364,null],[11,"hash","","",364,null],[11,"eq","","",364,null],[11,"ne","","",364,null],[11,"clone","","",364,null],[11,"fmt","","",407,null],[11,"decode","","",407,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",407,null],[11,"hash","","",407,null],[11,"eq","","",407,null],[11,"ne","","",407,null],[11,"clone","","",407,null],[11,"hash","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"hash","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"hash","","",146,null],[11,"decode","","",146,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"decode","","",408,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",408,null],[11,"hash","","",408,null],[11,"eq","","",408,null],[11,"ne","","",408,null],[11,"clone","","",408,null],[11,"hash","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"clone","","",409,null],[11,"clone","","",362,null],[11,"hash","","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"new","","",362,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"existentialbounds"}}],[11,"fmt","","",363,null],[11,"hash","","",363,null],[11,"eq","","",363,null],[11,"ne","","",363,null],[11,"clone","","",363,null],[11,"empty","","",363,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",363,null],[11,"to_predicates","","",363,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",410,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",410,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",410,null],[11,"clear","","",410,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",410,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",410,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",410,null],[11,"union","","Returns the union of both `EnumSets`.",410,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",410,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",410,null],[11,"remove","","Removes an enum from the EnumSet",410,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",410,null],[11,"iter","","Returns an iterator over an `EnumSet`.",410,null],[11,"clone","collections::binary_heap","",411,null],[11,"clone_from","","",411,null],[11,"default","","",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",411,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",411,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",411,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",411,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",411,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",411,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",411,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",411,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",411,null],[11,"push","","Pushes an item onto the binary heap.",411,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",411,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",411,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",411,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",411,null],[11,"len","","Returns the length of the binary heap.",411,null],[11,"is_empty","","Checks if the binary heap is empty.",411,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",411,null],[11,"clear","","Drops all items from the binary heap.",411,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",411,null],[11,"clone","","",412,null],[11,"next","","",412,null],[11,"size_hint","","",412,null],[11,"next_back","","",412,null],[11,"clone","","",413,null],[11,"next","","",413,null],[11,"size_hint","","",413,null],[11,"next_back","","",413,null],[11,"next","","",414,null],[11,"size_hint","","",414,null],[11,"next_back","","",414,null],[11,"from","","",411,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",411,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",411,null],[11,"extend","","",411,null],[11,"extend","","",411,null],[11,"drop","collections::btree::map","",415,null],[11,"clone","","",415,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",415,null],[11,"get","","Returns a reference to the value corresponding to the key.",415,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",415,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",415,null],[11,"insert","","Inserts a key-value pair into the map.",415,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",415,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",415,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",415,null],[11,"next","","",416,null],[11,"size_hint","","",416,null],[11,"next_back","","",416,null],[11,"len","","",416,null],[11,"clone","","",416,null],[11,"next","","",417,null],[11,"size_hint","","",417,null],[11,"next_back","","",417,null],[11,"len","","",417,null],[11,"into_iter","","",415,null],[11,"drop","","",418,null],[11,"next","","",418,null],[11,"size_hint","","",418,null],[11,"next_back","","",418,null],[11,"len","","",418,null],[11,"next","","",419,null],[11,"size_hint","","",419,null],[11,"next_back","","",419,null],[11,"len","","",419,null],[11,"clone","","",419,null],[11,"next","","",420,null],[11,"size_hint","","",420,null],[11,"next_back","","",420,null],[11,"len","","",420,null],[11,"clone","","",420,null],[11,"next","","",421,null],[11,"next","","",422,null],[11,"size_hint","","",422,null],[11,"next_back","","",422,null],[11,"len","","",422,null],[11,"next_back","","",421,null],[11,"clone","","",421,null],[11,"next","","",423,null],[11,"next_back","","",423,null],[11,"from_iter","","",415,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",415,null],[11,"extend","","",415,null],[11,"hash","","",415,null],[11,"default","","",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",415,null],[11,"partial_cmp","","",415,null],[11,"cmp","","",415,null],[11,"fmt","","",415,null],[11,"index","","",415,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",415,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",415,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",415,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",415,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",415,null],[11,"len","","Returns the number of elements in the map.",415,null],[11,"is_empty","","Returns true if the map contains no elements.",415,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",424,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",424,null],[11,"key","","Returns a reference to this entry&#39;s key.",424,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",425,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",425,null],[11,"key","","Gets a reference to the key in the entry.",426,null],[11,"get","","Gets a reference to the value in the entry.",426,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",426,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",426,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",426,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",426,null],[11,"partial_cmp","collections::btree::set","",427,null],[11,"lt","","",427,null],[11,"le","","",427,null],[11,"gt","","",427,null],[11,"ge","","",427,null],[11,"cmp","","",427,null],[11,"eq","","",427,null],[11,"ne","","",427,null],[11,"hash","","",427,null],[11,"clone","","",427,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",427,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",427,null],[11,"difference","","Visits the values representing the difference, in ascending order.",427,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",427,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",427,null],[11,"union","","Visits the values representing the union, in ascending order.",427,null],[11,"len","","Returns the number of elements in the set.",427,null],[11,"is_empty","","Returns true if the set contains no elements.",427,null],[11,"clear","","Clears the set, removing all values.",427,null],[11,"contains","","Returns `true` if the set contains a value.",427,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",427,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",427,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",427,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",427,null],[11,"insert","","Adds a value to the set.",427,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",427,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",427,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",427,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",427,null],[11,"from_iter","","",427,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",427,null],[11,"extend","","",427,null],[11,"extend","","",427,null],[11,"default","","",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",427,null],[11,"clone","","",428,null],[11,"next","","",428,null],[11,"size_hint","","",428,null],[11,"next_back","","",428,null],[11,"len","","",428,null],[11,"next","","",429,null],[11,"size_hint","","",429,null],[11,"next_back","","",429,null],[11,"len","","",429,null],[11,"clone","","",430,null],[11,"next","","",430,null],[11,"next_back","","",430,null],[11,"clone","","",431,null],[11,"next","","",431,null],[11,"size_hint","","",431,null],[11,"clone","","",432,null],[11,"next","","",432,null],[11,"size_hint","","",432,null],[11,"clone","","",433,null],[11,"next","","",433,null],[11,"size_hint","","",433,null],[11,"clone","","",434,null],[11,"next","","",434,null],[11,"size_hint","","",434,null],[11,"borrow","collections::borrow","",435,null],[11,"clone","","",435,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",435,null],[11,"into_owned","","Extracts the owned data.",435,null],[11,"deref","","",435,null],[11,"cmp","","",435,null],[11,"eq","","",435,null],[11,"partial_cmp","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"hash","","",435,null],[11,"as_ref","","",435,null],[11,"hash","collections::enum_set","",410,null],[11,"cmp","","",410,null],[11,"partial_cmp","","",410,null],[11,"lt","","",410,null],[11,"le","","",410,null],[11,"gt","","",410,null],[11,"ge","","",410,null],[11,"eq","","",410,null],[11,"ne","","",410,null],[11,"clone","","",410,null],[11,"fmt","","",410,null],[11,"sub","","",410,null],[11,"bitor","","",410,null],[11,"bitand","","",410,null],[11,"bitxor","","",410,null],[11,"clone","","",436,null],[11,"next","","",436,null],[11,"size_hint","","",436,null],[11,"from_iter","","",410,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",410,null],[11,"extend","","",410,null],[11,"clone","collections::linked_list","",437,null],[11,"clone","","",438,null],[11,"default","","",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",439,null],[11,"iter","","Provides a forward iterator.",439,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",439,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",439,null],[11,"len","","Returns the length of the `LinkedList`.",439,null],[11,"clear","","Removes all elements from the `LinkedList`.",439,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",439,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",439,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",439,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",439,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",439,null],[11,"push_front","","Adds an element first in the list.",439,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",439,null],[11,"push_back","","Appends an element to the back of a list",439,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",439,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",439,null],[11,"front_place","","Returns a place for insertion at the front of the list.",439,null],[11,"back_place","","Returns a place for insertion at the back of the list.",439,null],[11,"drop","","",439,null],[11,"next","","",437,null],[11,"size_hint","","",437,null],[11,"next_back","","",437,null],[11,"next","","",440,null],[11,"size_hint","","",440,null],[11,"next_back","","",440,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",440,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",440,null],[11,"next","","",438,null],[11,"size_hint","","",438,null],[11,"next_back","","",438,null],[11,"from_iter","","",439,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",439,null],[11,"extend","","",439,null],[11,"extend","","",439,null],[11,"eq","","",439,null],[11,"ne","","",439,null],[11,"partial_cmp","","",439,null],[11,"cmp","","",439,null],[11,"clone","","",439,null],[11,"fmt","","",439,null],[11,"hash","","",439,null],[11,"make_place","","",441,null],[11,"pointer","","",441,null],[11,"finalize","","",441,null],[11,"make_place","","",442,null],[11,"pointer","","",442,null],[11,"finalize","","",442,null],[11,"start","core::ops","",443,null],[11,"end","","",444,null],[11,"start","","",445,null],[11,"end","","",445,null],[11,"borrow","collections::vec","",241,null],[11,"borrow_mut","","",241,null],[11,"clone","collections::str","",446,null],[11,"next","","",446,null],[11,"size_hint","","",446,null],[11,"borrow","collections::string","",447,null],[11,"fmt","core::str::pattern","",448,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"clone","","",448,null],[11,"fmt","","",449,null],[11,"clone","","",449,null],[11,"haystack","","",449,null],[11,"next","","",449,null],[11,"next_match","","",449,null],[11,"next_reject","","",449,null],[11,"next_back","","",449,null],[11,"next_match_back","","",449,null],[11,"next_reject_back","","",449,null],[11,"fmt","","",450,null],[11,"clone","","",450,null],[11,"haystack","","",450,null],[11,"next","","",450,null],[11,"next_match","","",450,null],[11,"next_reject","","",450,null],[11,"next_back","","",450,null],[11,"next_match_back","","",450,null],[11,"next_reject_back","","",450,null],[11,"clone","","",451,null],[11,"fmt","","",451,null],[11,"haystack","","",451,null],[11,"next","","",451,null],[11,"next_match","","",451,null],[11,"next_reject","","",451,null],[11,"next_back","","",451,null],[11,"next_match_back","","",451,null],[11,"next_reject_back","","",451,null],[11,"fmt","","",452,null],[11,"clone","","",452,null],[11,"haystack","","",452,null],[11,"next","","",452,null],[11,"next_match","","",452,null],[11,"next_back","","",452,null],[11,"next_match_back","","",452,null],[11,"cmp","collections::string","",447,null],[11,"partial_cmp","","",447,null],[11,"lt","","",447,null],[11,"le","","",447,null],[11,"gt","","",447,null],[11,"ge","","",447,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"new","","Creates a new empty `String`.",447,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",447,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",447,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",447,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",447,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",447,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",447,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",447,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",447,null],[11,"as_str","","Extracts a string slice containing the entire string.",447,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",447,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",447,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",447,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",447,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",447,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",447,null],[11,"push","","Appends the given `char` to the end of this `String`.",447,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",447,null],[11,"truncate","","Shortens this `String` to the specified length.",447,null],[11,"pop","","Removes the last character from the string buffer and returns it.",447,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",447,null],[11,"insert","","Inserts a character into this `String` at a byte position.",447,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",447,null],[11,"len","","Returns the length of this `String`, in bytes.",447,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",447,null],[11,"clear","","Truncates this `String`, removing all contents.",447,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",447,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",447,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",453,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",453,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"clone","","",447,null],[11,"clone_from","","",447,null],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::string","",447,null],[11,"ne","","",447,null],[11,"default","","",447,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",447,null],[11,"fmt","","",447,null],[11,"hash","","",447,null],[11,"add","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"deref","","",447,null],[11,"deref_mut","","",447,null],[11,"from_str","","",447,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",455,null],[11,"fmt","","",455,null],[11,"fmt","","",455,null],[11,"eq","","",455,null],[11,"as_ref","","",447,null],[11,"as_ref","","",447,null],[11,"from","","",447,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",435,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",435,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",447,null],[11,"write_str","","",447,null],[11,"write_char","","",447,null],[11,"drop","","",456,null],[11,"next","","",456,null],[11,"size_hint","","",456,null],[11,"next_back","","",456,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",241,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",241,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",241,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",241,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",241,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",241,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",241,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",241,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",241,null],[11,"as_slice","","Extracts a slice containing the entire vector.",241,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",241,null],[11,"set_len","","Sets the length of a vector.",241,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",241,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",241,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",241,null],[11,"retain","","Retains only the elements specified by the predicate.",241,null],[11,"push","","Appends an element to the back of a collection.",241,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",241,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",241,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",241,null],[11,"clear","","Clears the vector, removing all values.",241,null],[11,"len","","Returns the number of elements in the vector.",241,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",241,null],[11,"split_off","","Splits the collection into two at the given index.",241,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",241,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",241,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",241,null],[11,"clone","","",241,null],[11,"clone_from","","",241,null],[11,"hash","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"deref","","",241,null],[11,"deref_mut","","",241,null],[11,"from_iter","","",241,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",241,null],[11,"extend","","",241,null],[11,"extend","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::vec","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"partial_cmp","","",241,null],[11,"cmp","","",241,null],[11,"drop","","",241,null],[11,"default","","",241,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"from","","",241,null],[11,"from","","",241,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",435,null],[11,"from","","",435,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",435,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",457,null],[11,"size_hint","","",457,null],[11,"count","","",457,null],[11,"next_back","","",457,null],[11,"clone","","",457,null],[11,"drop","","",457,null],[11,"next","","",458,null],[11,"size_hint","","",458,null],[11,"next_back","","",458,null],[11,"drop","","",458,null],[11,"clone","collections::vec_deque","",459,null],[11,"drop","","",459,null],[11,"default","","",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",459,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",459,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",459,null],[11,"swap","","Swaps elements at indices `i` and `j`.",459,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",459,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",459,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",459,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",459,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",459,null],[11,"iter","","Returns a front-to-back iterator.",459,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",459,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"len","","Returns the number of elements in the `VecDeque`.",459,null],[11,"is_empty","","Returns true if the buffer contains no elements",459,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",459,null],[11,"clear","","Clears the buffer, removing all values.",459,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",459,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",459,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",459,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",459,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",459,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",459,null],[11,"push_front","","Inserts an element first in the sequence.",459,null],[11,"push_back","","Appends an element to the back of a buffer",459,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",459,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",459,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",459,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",459,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",459,null],[11,"split_off","","Splits the collection into two at the given index.",459,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",459,null],[11,"retain","","Retains only the elements specified by the predicate.",459,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",459,null],[11,"clone","","",460,null],[11,"next","","",460,null],[11,"size_hint","","",460,null],[11,"next_back","","",460,null],[11,"next","","",461,null],[11,"size_hint","","",461,null],[11,"next_back","","",461,null],[11,"clone","","",462,null],[11,"next","","",462,null],[11,"size_hint","","",462,null],[11,"next_back","","",462,null],[11,"drop","","",463,null],[11,"next","","",463,null],[11,"size_hint","","",463,null],[11,"next_back","","",463,null],[11,"eq","","",459,null],[11,"partial_cmp","","",459,null],[11,"cmp","","",459,null],[11,"hash","","",459,null],[11,"index","","",459,null],[11,"index_mut","","",459,null],[11,"from_iter","","",459,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",459,null],[11,"extend","","",459,null],[11,"extend","","",459,null],[11,"fmt","","",459,null],[11,"from","","",459,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",464,null],[11,"ne","","",464,null],[11,"hash","","",464,null],[11,"fmt","","",464,null],[11,"clone","","",464,null],[11,"clone","alloc::boxed","",465,null],[11,"pointer","","",466,null],[11,"make_place","","",466,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",466,null],[11,"finalize","","",366,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",465,null],[11,"drop","","",466,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",366,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",366,null],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",366,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",366,null],[11,"clone","","",366,null],[11,"eq","","",366,null],[11,"ne","","",366,null],[11,"partial_cmp","","",366,null],[11,"lt","","",366,null],[11,"le","","",366,null],[11,"ge","","",366,null],[11,"gt","","",366,null],[11,"cmp","","",366,null],[11,"hash","","",366,null],[11,"from","","",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"deref","","",366,null],[11,"deref_mut","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"call_once","","",366,null],[11,"call_once","","",366,null],[11,"clone","","",366,null],[11,"borrow","","",366,null],[11,"borrow_mut","","",366,null],[11,"as_ref","","",366,null],[11,"as_mut","","",366,null],[11,"deref","rustc::ty::sty","",363,null],[11,"deref_mut","","",363,null],[11,"fmt","","",467,null],[11,"hash","","",467,null],[11,"decode","","",467,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",467,null],[11,"encode","","",467,null],[11,"clone","","",467,null],[11,"to_usize","","",467,null],[11,"from_usize","","",467,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","rustc::ty::context","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",119,null],[11,"new","rustc::ty::sty","",406,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",406,null],[11,"is_bound","","",364,null],[11,"needs_infer","","",364,null],[11,"escapes_depth","","",364,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",364,null],[11,"as_opt_param_ty","rustc::ty","",320,null],[11,"is_nil","","",320,null],[11,"is_empty","","",320,null],[11,"is_primitive","","",320,null],[11,"is_ty_var","","",320,null],[11,"is_phantom_data","","",320,null],[11,"is_bool","","",320,null],[11,"is_param","","",320,null],[11,"is_self","","",320,null],[11,"is_slice","","",320,null],[11,"is_structural","","",320,null],[11,"is_simd","","",320,null],[11,"sequence_element_type","","",320,null],[11,"simd_type","","",320,null],[11,"simd_size","","",320,null],[11,"is_region_ptr","","",320,null],[11,"is_unsafe_ptr","","",320,null],[11,"is_unique","","",320,null],[11,"is_scalar","","",320,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",320,null],[11,"is_trait","","",320,null],[11,"is_integral","","",320,null],[11,"is_fresh","","",320,null],[11,"is_uint","","",320,null],[11,"is_char","","",320,null],[11,"is_fp","","",320,null],[11,"is_numeric","","",320,null],[11,"is_signed","","",320,null],[11,"is_machine","","",320,null],[11,"has_concrete_skeleton","","",320,null],[11,"builtin_deref","","",320,null],[11,"builtin_index","","",320,null],[11,"fn_sig","","",320,null],[11,"fn_abi","","Returns the ABI of the given function.",320,null],[11,"fn_args","","",320,null],[11,"fn_ret","","",320,null],[11,"is_fn","","",320,null],[11,"ty_to_def_id","","",320,null],[11,"ty_adt_def","","",320,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",320,null],[11,"clone","","",468,null],[11,"clone","","",469,null],[11,"is_present","","",469,null],[11,"has_drop_flag","","",469,null],[11,"fmt","","",470,null],[11,"eq","","",470,null],[11,"ne","","",470,null],[11,"clone","","",470,null],[11,"id","","",470,null],[11,"fmt","","",391,null],[11,"hash","","",391,null],[11,"eq","","",391,null],[11,"ne","","",391,null],[11,"clone","","",391,null],[11,"with_fresh_ty_vars","","",391,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",471,null],[11,"def","","",471,null],[11,"def_id","","",471,null],[11,"name","","",471,null],[11,"vis","","",471,null],[11,"container","","",471,null],[11,"as_opt_method","","",471,null],[11,"fmt","","",472,null],[11,"clone","","",472,null],[11,"def_id","","",472,null],[11,"eq","","",473,null],[11,"ne","","",473,null],[11,"fmt","","",473,null],[11,"clone","","",473,null],[11,"is_descendant_of","rustc::hir::map","",35,null],[11,"from_hir","rustc::ty","",473,{"inputs":[{"name":"visibility"},{"name":"u32"},{"name":"tyctxt"}],"output":{"name":"visibility"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",473,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",473,null],[11,"fmt","","",474,null],[11,"clone","","",474,null],[11,"new","","",474,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",474,null],[11,"eq","","",474,null],[11,"hash","","",474,null],[11,"fmt","","",475,null],[11,"clone","","",475,null],[11,"fmt","","",476,null],[11,"clone","","",476,null],[11,"encode","","",477,null],[11,"decode","","",477,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",477,null],[11,"ne","","",477,null],[11,"clone","","",477,null],[11,"encode","","",478,null],[11,"decode","","",478,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",478,null],[11,"clone","","",478,null],[11,"fmt","","",479,null],[11,"clone","","",479,null],[11,"fmt","","",480,null],[11,"hash","","",480,null],[11,"eq","","",480,null],[11,"ne","","",480,null],[11,"clone","","",480,null],[11,"expr","","",480,{"inputs":[{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",480,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",481,null],[11,"eq","","",481,null],[11,"ne","","",481,null],[11,"clone","","",481,null],[11,"fmt","","",482,null],[11,"clone","","",482,null],[11,"hash","","",403,null],[11,"cmp","","",403,null],[11,"partial_cmp","","",403,null],[11,"lt","","",403,null],[11,"le","","",403,null],[11,"gt","","",403,null],[11,"ge","","",403,null],[11,"clone","","",403,null],[11,"eq","","",403,null],[11,"ne","","",403,null],[18,"HAS_PARAMS","rustc_typeck","",403,null],[18,"HAS_SELF","","",403,null],[18,"HAS_TY_INFER","","",403,null],[18,"HAS_RE_INFER","","",403,null],[18,"HAS_RE_EARLY_BOUND","","",403,null],[18,"HAS_FREE_REGIONS","","",403,null],[18,"HAS_TY_ERR","","",403,null],[18,"HAS_PROJECTION","","",403,null],[18,"HAS_TY_CLOSURE","","",403,null],[18,"HAS_LOCAL_NAMES","","",403,null],[18,"KEEP_IN_LOCAL_TCX","","",403,null],[18,"NEEDS_SUBST","","",403,null],[18,"NOMINAL_FLAGS","","",403,null],[18,"SIZEDNESS_CACHED","","",403,null],[18,"IS_SIZED","","",403,null],[18,"MOVENESS_CACHED","","",403,null],[18,"MOVES_BY_DEFAULT","","",403,null],[11,"empty","rustc::ty","Returns an empty set of flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",403,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",403,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",403,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",403,null],[11,"is_all","","Returns `true` if all flags are currently set.",403,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",403,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",403,null],[11,"insert","","Inserts the specified flags in-place.",403,null],[11,"remove","","Removes the specified flags in-place.",403,null],[11,"toggle","","Toggles the specified flags in-place.",403,null],[11,"bitor","","Returns the union of the two sets of flags.",403,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",403,null],[11,"bitand","","Returns the intersection between the two sets of flags.",403,null],[11,"sub","","Returns the set difference of the two sets of flags.",403,null],[11,"not","","Returns the complement of this set of flags.",403,null],[11,"eq","","",320,null],[11,"hash","","",320,null],[11,"hash","","",483,null],[11,"eq","","",483,null],[11,"ne","","",483,null],[11,"clone","","",483,null],[11,"decode","","",484,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",484,null],[11,"fmt","","",484,null],[11,"hash","","",484,null],[11,"eq","","",484,null],[11,"clone","","",484,null],[11,"fmt","","",485,null],[11,"clone","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[11,"clone","","",486,null],[11,"eq","","",486,null],[11,"ne","","",486,null],[11,"clone","","",398,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"clone","","",147,null],[11,"clone","","",393,null],[11,"clone","","",392,null],[11,"clone","","",394,null],[11,"to_early_bound_region","","",394,null],[11,"to_bound_region","","",394,null],[11,"fmt","","",395,null],[11,"clone","","",395,null],[11,"empty","","",395,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",395,null],[11,"has_type_params","","",395,null],[11,"has_region_params","","",395,null],[11,"clone","","",396,null],[11,"empty","","",396,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",396,null],[11,"instantiate_supertrait","","",396,null],[11,"hash","","",386,null],[11,"eq","","",386,null],[11,"ne","","",386,null],[11,"clone","","",386,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",386,null],[11,"hash","","",383,null],[11,"eq","","",383,null],[11,"ne","","",383,null],[11,"clone","","",383,null],[11,"def_id","","",383,null],[11,"input_types","","",383,null],[11,"self_ty","","",383,null],[11,"def_id","rustc::ty::sty","",121,null],[11,"dep_node","","",121,null],[11,"fmt","rustc::ty","",384,null],[11,"hash","","",384,null],[11,"eq","","",384,null],[11,"ne","","",384,null],[11,"clone","","",384,null],[11,"fmt","","",385,null],[11,"hash","","",385,null],[11,"eq","","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"hash","","",361,null],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"clone","","",361,null],[11,"item_name","rustc::ty::sty","",121,null],[11,"sort_key","","",121,null],[11,"to_poly_trait_ref","","",120,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_predicate","","",120,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"walk_tys","rustc::ty","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",386,null],[11,"to_opt_poly_trait_ref","","",386,null],[11,"clone","","",397,null],[11,"empty","","",397,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",397,null],[11,"new","rustc::ty::sty","",120,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",120,null],[11,"input_types","","",120,null],[11,"clone","rustc::ty","",378,null],[11,"with_caller_bounds","","",378,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",378,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",399,null],[11,"clone","","",399,null],[11,"hash","","",487,null],[11,"cmp","","",487,null],[11,"partial_cmp","","",487,null],[11,"lt","","",487,null],[11,"le","","",487,null],[11,"gt","","",487,null],[11,"ge","","",487,null],[11,"clone","","",487,null],[11,"eq","","",487,null],[11,"ne","","",487,null],[18,"NO_ADT_FLAGS","rustc_typeck","",487,null],[18,"IS_ENUM","","",487,null],[18,"IS_DTORCK","","",487,null],[18,"IS_DTORCK_VALID","","",487,null],[18,"IS_PHANTOM_DATA","","",487,null],[18,"IS_SIMD","","",487,null],[18,"IS_FUNDAMENTAL","","",487,null],[18,"IS_NO_DROP_FLAG","","",487,null],[11,"empty","rustc::ty","Returns an empty set of flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",487,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",487,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",487,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",487,null],[11,"is_all","","Returns `true` if all flags are currently set.",487,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",487,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",487,null],[11,"insert","","Inserts the specified flags in-place.",487,null],[11,"remove","","Removes the specified flags in-place.",487,null],[11,"toggle","","Toggles the specified flags in-place.",487,null],[11,"bitor","","Returns the union of the two sets of flags.",487,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",487,null],[11,"bitand","","Returns the intersection between the two sets of flags.",487,null],[11,"sub","","Returns the set difference of the two sets of flags.",487,null],[11,"not","","Returns the complement of this set of flags.",487,null],[11,"eq","","",488,null],[11,"hash","","",488,null],[11,"eq","","",489,null],[11,"fmt","","",489,null],[11,"clone","","",489,null],[11,"decode","","",490,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",490,null],[11,"fmt","","",490,null],[11,"hash","","",490,null],[11,"eq","","",490,null],[11,"clone","","",490,null],[11,"from_variant_data","","",490,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantkind"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",488,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",488,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",488,null],[11,"is_simd","","",488,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",488,null],[11,"has_dtor","","Returns whether this type has a destructor.",488,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",488,null],[11,"type_scheme","","",488,null],[11,"predicates","","",488,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",488,null],[11,"is_empty","","",488,null],[11,"is_univariant","","",488,null],[11,"is_payloadfree","","",488,null],[11,"variant_with_id","","",488,null],[11,"variant_index_with_id","","",488,null],[11,"variant_of_def","","",488,null],[11,"destructor","","",488,null],[11,"set_destructor","","",488,null],[11,"dtor_kind","","",488,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",488,null],[11,"kind","","",491,null],[11,"is_tuple_struct","","",491,null],[11,"find_field_named","","",491,null],[11,"index_of_field_named","","",491,null],[11,"field_named","","",491,null],[11,"new","","",492,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"fielddefdata"}}],[11,"ty","","",492,null],[11,"unsubst_ty","","",492,null],[11,"fulfill_ty","","",492,null],[11,"clone","","",387,null],[11,"decode","","",493,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",493,null],[11,"fmt","","",493,null],[11,"hash","","",493,null],[11,"eq","","",493,null],[11,"cmp","","",493,null],[11,"partial_cmp","","",493,null],[11,"clone","","",493,null],[11,"trait_did","","",493,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",493,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",320,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",320,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",320,null],[11,"is_noop","","",387,null],[11,"eq","","",494,null],[11,"fmt","","",494,null],[11,"clone","","",494,null],[11,"from_mutbl","","",494,{"inputs":[{"name":"mutability"}],"output":{"name":"lvaluepreference"}}],[11,"from_mutbl","","",484,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",484,null],[11,"to_user_str","","",484,null],[11,"node_id_to_type","rustc::ty::context","",119,null],[11,"node_id_to_type_opt","","",119,null],[11,"node_id_item_substs","","",119,null],[11,"pat_ty","","",119,null],[11,"pat_ty_opt","","",119,null],[11,"expr_ty","","",119,null],[11,"expr_ty_opt","","",119,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",119,null],[11,"expr_ty_adjusted_opt","","",119,null],[11,"expr_span","","",119,null],[11,"local_var_name_str","","",119,null],[11,"resolve_expr","","",119,null],[11,"expr_is_lval","","",119,null],[11,"provided_trait_methods","","",119,null],[11,"associated_consts","","",119,null],[11,"trait_impl_polarity","","",119,null],[11,"custom_coerce_unsized_kind","","",119,null],[11,"impl_or_trait_item","","",119,null],[11,"trait_item_def_ids","","",119,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",119,null],[11,"is_impl","","Returns whether this DefId refers to an impl",119,null],[11,"trait_ref_to_def_id","","",119,null],[11,"def_key","","",119,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",119,null],[11,"item_name","","",119,null],[11,"register_item_type","","",119,null],[11,"lookup_item_type","","",119,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",119,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",119,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",119,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",119,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",119,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",119,null],[11,"get_attrs","","Get the attributes of a definition.",119,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",119,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",119,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",119,null],[11,"item_variances","","",119,null],[11,"trait_has_default_impl","","",119,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",119,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",119,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",119,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",119,null],[11,"closure_kind","","",119,null],[11,"closure_type","","",119,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",119,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",119,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",119,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",119,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",119,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",119,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",119,null],[11,"is_method_call","","",119,null],[11,"is_overloaded_autoderef","","",119,null],[11,"upvar_capture","","",119,null],[11,"visit_all_items_in_krate","","",119,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",119,null],[11,"fmt","rustc::ty","",495,null],[11,"eq","","",495,null],[11,"ne","","",495,null],[11,"clone","","",495,null],[11,"with_freevars","rustc::ty::context","",119,null],[11,"fmt","rustc::util::common","",496,null],[11,"clone","","",496,null],[11,"drop","","",497,null],[11,"memoize","core::cell","",6,null],[11,"eq","rustc::util::ppaux","",498,null],[11,"clone","","",498,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",392,null],[11,"fmt","","",394,null],[11,"fmt","","",320,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"fmt","rustc::ty::subst","",367,null],[11,"fmt","rustc::ty","",387,null],[11,"fmt","rustc::ty::sty","",120,null],[11,"fmt","rustc::ty::trait_def","",371,null],[11,"fmt","rustc::ty","",488,null],[11,"fmt","rustc::ty::adjustment","",316,null],[11,"fmt","","",317,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",386,null],[11,"fmt","rustc::ty::sty","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",364,null],[11,"fmt","","",388,null],[11,"fmt","rustc::ty","",398,null],[11,"fmt","","",378,null],[11,"fmt","","",393,null],[11,"fmt","rustc::ty::sty","",364,null],[11,"fmt","","",400,null],[11,"fmt","rustc::ty","",478,null],[11,"fmt","","",477,null],[11,"fmt","","",396,null],[11,"fmt","","",397,null],[11,"fmt","","",471,null],[11,"fmt","rustc::ty::sty","",161,null],[11,"fmt","","",362,null],[11,"fmt","","",363,null],[11,"fmt","","",150,null],[11,"fmt","","",144,null],[11,"fmt","","",148,null],[11,"fmt","","",146,null],[11,"fmt","","",161,null],[11,"fmt","","",409,null],[11,"fmt","rustc::ty","",147,null],[11,"fmt","rustc::ty::sty","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",120,null],[11,"fmt","","",402,null],[11,"fmt","rustc::ty","",320,null],[11,"fmt","","",483,null],[11,"fmt","","",486,null],[11,"fmt","rustc::ty::sty","",409,null],[11,"fmt","rustc::ty","",495,null],[11,"fmt","rustc::ty::sty","",405,null],[11,"fmt","","",405,null],[11,"fmt","rustc::ty","",385,null],[11,"fmt","","",384,null],[11,"fmt","","",383,null],[11,"fmt","","",383,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"fmt","rustc::ty","",493,null],[11,"fmt","","",386,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",499,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",499,null],[11,"result","","",499,null],[11,"reset","","",499,null],[11,"output_bits","","",499,null],[4,"DepNode","rustc_typeck::dep_graph","",null,null],[13,"Krate","","",0,null],[13,"Hir","","",0,null],[13,"CrateReader","","",0,null],[13,"CollectLanguageItems","","",0,null],[13,"CheckStaticRecursion","","",0,null],[13,"ResolveLifetimes","","",0,null],[13,"RegionResolveCrate","","",0,null],[13,"CheckLoops","","",0,null],[13,"PluginRegistrar","","",0,null],[13,"StabilityIndex","","",0,null],[13,"CollectItem","","",0,null],[13,"Coherence","","",0,null],[13,"EffectCheck","","",0,null],[13,"Liveness","","",0,null],[13,"Resolve","","",0,null],[13,"EntryPoint","","",0,null],[13,"CheckEntryFn","","",0,null],[13,"CoherenceCheckImpl","","",0,null],[13,"CoherenceOverlapCheck","","",0,null],[13,"CoherenceOverlapCheckSpecial","","",0,null],[13,"CoherenceOverlapInherentCheck","","",0,null],[13,"CoherenceOrphanCheck","","",0,null],[13,"Variance","","",0,null],[13,"WfCheck","","",0,null],[13,"TypeckItemType","","",0,null],[13,"TypeckItemBody","","",0,null],[13,"Dropck","","",0,null],[13,"DropckImpl","","",0,null],[13,"UnusedTraitCheck","","",0,null],[13,"CheckConst","","",0,null],[13,"Privacy","","",0,null],[13,"IntrinsicCheck","","",0,null],[13,"MatchCheck","","",0,null],[13,"MirMapConstruction","","",0,null],[13,"MirPass","","",0,null],[13,"MirTypeck","","",0,null],[13,"BorrowCheck","","",0,null],[13,"RvalueCheck","","",0,null],[13,"Reachability","","",0,null],[13,"DeadCheck","","",0,null],[13,"StabilityCheck","","",0,null],[13,"LateLintCheck","","",0,null],[13,"TransCrate","","",0,null],[13,"TransCrateItem","","",0,null],[13,"TransInlinedItem","","",0,null],[13,"TransWriteMetadata","","",0,null],[13,"ImplOrTraitItems","","",0,null],[13,"ItemSignature","","",0,null],[13,"FieldTy","","",0,null],[13,"SizedConstraint","","",0,null],[13,"TraitItemDefIds","","",0,null],[13,"InherentImpls","","",0,null],[13,"ImplItems","","",0,null],[13,"TraitImpls","","",0,null],[13,"TraitItems","","",0,null],[13,"ReprHints","","",0,null],[13,"TraitSelect","","",0,null],[3,"DepGraphQuery","","",null,null],[12,"graph","","",8,null],[12,"indices","","",8,null],[3,"DepTrackingMap","","A DepTrackingMap offers a subset of the `Map` API and ensures that\nwe make calls to `read` and `write` as appropriate. We key the\nmaps with a unique type for brevity.",null,null],[8,"DepTrackingMapConfig","","",null,null],[16,"Key","","",500,null],[16,"Value","","",500,null],[10,"to_dep_node","","",500,null],[3,"DepGraph","","",null,null],[0,"hir","rustc_typeck","",null,null],[6,"HirVec","rustc_typeck::hir","",null,null],[0,"check_attr","","",null,null],[5,"check_crate","rustc_typeck::hir::check_attr","",null,null],[0,"def","rustc_typeck::hir","",null,null],[4,"Def","rustc_typeck::hir::def","",null,null],[13,"Fn","","",9,null],[13,"SelfTy","","",9,null],[13,"Mod","","",9,null],[13,"ForeignMod","","",9,null],[13,"Static","","",9,null],[13,"Const","","",9,null],[13,"AssociatedConst","","",9,null],[13,"Local","","",9,null],[13,"Variant","","",9,null],[13,"Enum","","",9,null],[13,"TyAlias","","",9,null],[13,"AssociatedTy","","",9,null],[13,"Trait","","",9,null],[13,"PrimTy","","",9,null],[13,"TyParam","","",9,null],[13,"Upvar","","",9,null],[13,"Struct","","",9,null],[13,"Label","","",9,null],[13,"Method","","",9,null],[13,"Err","","",9,null],[3,"PathResolution","","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution.",null,null],[12,"base_def","","",10,null],[12,"depth","","",10,null],[6,"DefMap","","",null,null],[6,"ExportMap","","",null,null],[3,"Export","","",null,null],[12,"name","","",11,null],[12,"def_id","","",11,null],[0,"def_id","rustc_typeck::hir","",null,null],[3,"DefIndex","rustc_typeck::hir::def_id","A DefIndex is an index into the hir-map for a crate, identifying a\nparticular definition. It should really be considered an interned\nshorthand for a particular DefPath.",null,null],[17,"CRATE_DEF_INDEX","","The crate root is always assigned index 0 by the AST Map code,\nthanks to `NodeCollector::new`.",null,null],[3,"DefId","","A DefId identifies a particular *definition*, by combining a crate\nindex and a def index.",null,null],[12,"krate","","",13,null],[12,"index","","",13,null],[0,"fold","rustc_typeck::hir","A Folder represents an HIR-&gt;HIR fold; it accepts a HIR piece,\nand returns a piece of the same type.",null,null],[8,"Folder","rustc_typeck::hir::fold","",null,null],[11,"fold_crate","","",501,null],[11,"fold_meta_items","","",501,null],[11,"fold_meta_item","","",501,null],[11,"fold_view_path","","",501,null],[11,"fold_foreign_item","","",501,null],[11,"fold_item","","",501,null],[11,"fold_item_id","","",501,null],[11,"fold_struct_field","","",501,null],[11,"fold_item_underscore","","",501,null],[11,"fold_trait_item","","",501,null],[11,"fold_impl_item","","",501,null],[11,"fold_fn_decl","","",501,null],[11,"fold_block","","",501,null],[11,"fold_stmt","","",501,null],[11,"fold_arm","","",501,null],[11,"fold_pat","","",501,null],[11,"fold_decl","","",501,null],[11,"fold_expr","","",501,null],[11,"fold_ty","","",501,null],[11,"fold_ty_binding","","",501,null],[11,"fold_mod","","",501,null],[11,"fold_foreign_mod","","",501,null],[11,"fold_variant","","",501,null],[11,"fold_name","","",501,null],[11,"fold_usize","","",501,null],[11,"fold_path","","",501,null],[11,"fold_path_parameters","","",501,null],[11,"fold_angle_bracketed_parameter_data","","",501,null],[11,"fold_parenthesized_parameter_data","","",501,null],[11,"fold_local","","",501,null],[11,"fold_lifetime","","",501,null],[11,"fold_lifetime_def","","",501,null],[11,"fold_attribute","","",501,null],[11,"fold_arg","","",501,null],[11,"fold_generics","","",501,null],[11,"fold_trait_ref","","",501,null],[11,"fold_poly_trait_ref","","",501,null],[11,"fold_variant_data","","",501,null],[11,"fold_lifetimes","","",501,null],[11,"fold_lifetime_defs","","",501,null],[11,"fold_ty_param","","",501,null],[11,"fold_ty_params","","",501,null],[11,"fold_opt_lifetime","","",501,null],[11,"fold_opt_bounds","","",501,null],[11,"fold_bounds","","",501,null],[11,"fold_ty_param_bound","","",501,null],[11,"fold_mt","","",501,null],[11,"fold_field","","",501,null],[11,"fold_where_clause","","",501,null],[11,"fold_where_predicate","","",501,null],[11,"new_id","","called for the `id` on each declaration",501,null],[11,"map_id","","called for ids that are references (e.g., ItemDef)",501,null],[11,"new_span","","",501,null],[5,"noop_fold_meta_items","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"spanned"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"noop_fold_name","","",null,{"inputs":[{"name":"name"},{"name":"t"}],"output":{"name":"name"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"spanned"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_underscore","","",null,{"inputs":[{"name":"item_"},{"name":"t"}],"output":{"name":"item_"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"traititem"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"implitem"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item_id","","",null,{"inputs":[{"name":"itemid"},{"name":"t"}],"output":{"name":"itemid"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"spanned"},{"name":"t"}],"output":{"name":"spanned"}}],[0,"intravisit","rustc_typeck::hir","HIR walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `intravisit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[4,"FnKind","rustc_typeck::hir::intravisit","",null,null],[13,"ItemFn","","fn foo() or extern &quot;Abi&quot; fn foo()",14,null],[13,"Method","","fn foo(&amp;self)",14,null],[13,"Closure","","|x, y| {}",14,null],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `intravisit::walk_mod`.",null,null],[11,"visit_nested_item","","Invoked when a nested item is encountered. By default, does\nnothing. If you want a deep walk, you need to override to\nfetch the item contents. But most of the time, it is easier\n(and better) to invoke `Crate::visit_all_items`, which visits\nall items in the crate in some order (but doesn&#39;t respect\nnesting).",502,null],[11,"visit_item","","Visit the top-level item and (optionally) nested items. See\n`visit_nested_item` for details.",502,null],[11,"visit_name","","",502,null],[11,"visit_mod","","",502,null],[11,"visit_foreign_item","","",502,null],[11,"visit_local","","",502,null],[11,"visit_block","","",502,null],[11,"visit_stmt","","",502,null],[11,"visit_arm","","",502,null],[11,"visit_pat","","",502,null],[11,"visit_decl","","",502,null],[11,"visit_expr","","",502,null],[11,"visit_expr_post","","",502,null],[11,"visit_ty","","",502,null],[11,"visit_generics","","",502,null],[11,"visit_fn","","",502,null],[11,"visit_trait_item","","",502,null],[11,"visit_impl_item","","",502,null],[11,"visit_trait_ref","","",502,null],[11,"visit_ty_param_bound","","",502,null],[11,"visit_poly_trait_ref","","",502,null],[11,"visit_variant_data","","",502,null],[11,"visit_struct_field","","",502,null],[11,"visit_enum_def","","",502,null],[11,"visit_variant","","",502,null],[11,"visit_lifetime","","",502,null],[11,"visit_lifetime_def","","",502,null],[11,"visit_path","","",502,null],[11,"visit_path_list_item","","",502,null],[11,"visit_path_segment","","",502,null],[11,"visit_path_parameters","","",502,null],[11,"visit_assoc_type_binding","","",502,null],[11,"visit_attribute","","",502,null],[11,"visit_macro_def","","",502,null],[11,"visit_vis","","",502,null],[5,"walk_opt_name","","",null,null],[5,"walk_crate","","Walks the contents of a crate. See also `Crate::visit_all_items`.",null,null],[5,"walk_macro_def","","",null,null],[5,"walk_mod","","",null,null],[5,"walk_local","","",null,null],[5,"walk_lifetime","","",null,null],[5,"walk_lifetime_def","","",null,null],[5,"walk_poly_trait_ref","","",null,null],[5,"walk_trait_ref","","",null,null],[5,"walk_item","","",null,null],[5,"walk_enum_def","","",null,null],[5,"walk_variant","","",null,null],[5,"walk_ty","","",null,null],[5,"walk_path","","",null,null],[5,"walk_path_list_item","","",null,null],[5,"walk_path_segment","","",null,null],[5,"walk_path_parameters","","",null,null],[5,"walk_assoc_type_binding","","",null,null],[5,"walk_pat","","",null,null],[5,"walk_foreign_item","","",null,null],[5,"walk_ty_param_bound","","",null,null],[5,"walk_generics","","",null,null],[5,"walk_fn_ret_ty","","",null,null],[5,"walk_fn_decl","","",null,null],[5,"walk_fn_decl_nopat","","",null,null],[5,"walk_fn_kind","","",null,null],[5,"walk_fn","","",null,null],[5,"walk_trait_item","","",null,null],[5,"walk_impl_item","","",null,null],[5,"walk_struct_def","","",null,null],[5,"walk_struct_field","","",null,null],[5,"walk_block","","",null,null],[5,"walk_stmt","","",null,null],[5,"walk_decl","","",null,null],[5,"walk_expr","","",null,null],[5,"walk_arm","","",null,null],[5,"walk_vis","","",null,null],[3,"IdRange","","",null,null],[12,"min","","",15,null],[12,"max","","",15,null],[8,"IdVisitingOperation","","",null,null],[10,"visit_id","","",503,null],[3,"IdRangeComputingVisitor","","",null,null],[12,"result","","",16,null],[3,"IdVisitor","","",null,null],[5,"compute_id_range_for_fn_body","","Computes the id range for a single fn body, ignoring nested items.",null,{"inputs":[{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"u32"}],"output":{"name":"idrange"}}],[0,"lowering","rustc_typeck::hir","",null,null],[3,"LoweringContext","rustc_typeck::hir::lowering","",null,null],[8,"Resolver","","",null,null],[10,"resolve_generated_global_path","","",504,null],[10,"get_resolution","","",504,null],[10,"record_resolution","","",504,null],[10,"definitions","","",504,null],[3,"DummyResolver","","",null,null],[5,"lower_crate","","",null,{"inputs":[{"name":"crate"},{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"crate"}}],[0,"map","rustc_typeck::hir","",null,null],[0,"blocks","rustc_typeck::hir::map","This module provides a simplified abstraction for working with\ncode blocks identified by their integer node-id.  In particular,\nit captures a common set of attributes that all &quot;function-like\nthings&quot; (represented by `FnLike` instances) share.  For example,\nall `FnLike` instances have a type signature (be it explicit or\ninferred).  And all `FnLike` instances have a body, i.e. the code\nthat is run when the function-like thing it represents is invoked.",null,null],[3,"FnLikeNode","rustc_typeck::hir::map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl\nand a body (as well as a NodeId, a span, etc).",null,null],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object\ncorresponds to some FnLikeNode.",null,null],[10,"is_fn_like","","",505,null],[3,"FnParts","","Components shared by fn-like things (fn items, methods, closures).",null,null],[12,"decl","","",506,null],[12,"body","","",506,null],[12,"kind","","",506,null],[12,"span","","",506,null],[12,"id","","",506,null],[4,"Code","","Carries either an FnLikeNode or a Block, as these are the two\nconstructs that correspond to &quot;code&quot; (as in, something from which\nwe can construct a control-flow graph).",null,null],[13,"FnLikeCode","","",24,null],[13,"BlockCode","","",24,null],[0,"definitions","rustc_typeck::hir::map","",null,null],[3,"Definitions","rustc_typeck::hir::map::definitions","",null,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition\nprecisely. It combines the index of the definition&#39;s parent (if\nany) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",26,null],[12,"disambiguated_data","","Identifier of this node.",26,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is\nnormally 0, but in the event that there are multiple defs with the\nsame `parent` and `data`, we use this field to disambiguate\nbetween them. This introduces some artificial ordering dependency\nbut means that if you have (e.g.) two impls for the same type in\nthe same module, they do get distinct def-ids.",null,null],[12,"data","","",27,null],[12,"disambiguator","","",27,null],[3,"DefData","","For each definition, we track the following data.  A definition\nhere is defined somewhat circularly as &quot;something with a def-id&quot;,\nbut it generally corresponds to things like structs, enums, etc.\nThere are also some rather random cases (like const initializer\nexpressions) that are mostly just leftovers.",null,null],[12,"key","","",28,null],[12,"node_id","","Local ID within the HIR.",28,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",29,null],[12,"krate","","what krate root is this path relative to?",29,null],[3,"InlinedRootPath","","Root of an inlined item. We track the `DefPath` of the item within\nthe original crate but also its def-id. This is kind of an\naugmented version of a `DefPath` that includes a `DefId`. This is\nall sort of ugly but the hope is that inlined items will be going\naway soon anyway.",null,null],[12,"data","","",30,null],[12,"def_id","","",30,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","",31,null],[13,"InlinedRoot","","",31,null],[13,"Misc","","",31,null],[13,"Impl","","",31,null],[13,"TypeNs","","",31,null],[13,"ValueNs","","",31,null],[13,"Module","","",31,null],[13,"MacroDef","","",31,null],[13,"ClosureExpr","","",31,null],[13,"TypeParam","","",31,null],[13,"LifetimeDef","","",31,null],[13,"EnumVariant","","",31,null],[13,"Field","","",31,null],[13,"StructCtor","","",31,null],[13,"Initializer","","",31,null],[13,"Binding","","",31,null],[4,"Node","rustc_typeck::hir::map","",null,null],[13,"NodeItem","","",32,null],[13,"NodeForeignItem","","",32,null],[13,"NodeTraitItem","","",32,null],[13,"NodeImplItem","","",32,null],[13,"NodeVariant","","",32,null],[13,"NodeExpr","","",32,null],[13,"NodeStmt","","",32,null],[13,"NodeLocal","","",32,null],[13,"NodePat","","",32,null],[13,"NodeBlock","","",32,null],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",32,null],[13,"NodeLifetime","","",32,null],[13,"NodeTyParam","","",32,null],[4,"MapEntry","","Represents an entry and its parent NodeID.\nThe odd layout is to bring down the total size.",null,null],[13,"NotPresent","","Placeholder for holes in the map.",33,null],[13,"EntryItem","","All the node types, with a parent ID.",33,null],[13,"EntryForeignItem","","",33,null],[13,"EntryTraitItem","","",33,null],[13,"EntryImplItem","","",33,null],[13,"EntryVariant","","",33,null],[13,"EntryExpr","","",33,null],[13,"EntryStmt","","",33,null],[13,"EntryLocal","","",33,null],[13,"EntryPat","","",33,null],[13,"EntryBlock","","",33,null],[13,"EntryStructCtor","","",33,null],[13,"EntryLifetime","","",33,null],[13,"EntryTyParam","","",33,null],[13,"RootCrate","","Roots for node trees.",33,null],[13,"RootInlinedParent","","",33,null],[3,"Forest","","Stores a crate and any number of inlined items from other crates.",null,null],[12,"dep_graph","","",34,null],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent\nNode IDs",null,null],[12,"forest","","The backing storage for all the AST nodes.",35,null],[12,"dep_graph","","Same as the dep_graph in forest, just available with one fewer\nderef. This is a gratuitious micro-optimization.",35,null],[3,"NodesMatchingSuffix","","",null,null],[8,"FoldOps","","",null,null],[11,"new_id","","",507,null],[11,"new_def_id","","",507,null],[11,"new_span","","",507,null],[5,"collect_definitions","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"definitions"}}],[5,"map_crate","","",null,{"inputs":[{"name":"forest"},{"name":"definitions"}],"output":{"name":"map"}}],[5,"map_decoded_item","","Used for items loaded from external crate that are being inlined into this\ncrate.",null,{"inputs":[{"name":"map"},{"name":"defpath"},{"name":"defid"},{"name":"inlineditem"},{"name":"f"}],"output":{"name":"inlineditem"}}],[8,"NodePrinter","","",null,null],[10,"print_node","","",508,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","",31,null],[13,"InlinedRoot","","",31,null],[13,"Misc","","",31,null],[13,"Impl","","",31,null],[13,"TypeNs","","",31,null],[13,"ValueNs","","",31,null],[13,"Module","","",31,null],[13,"MacroDef","","",31,null],[13,"ClosureExpr","","",31,null],[13,"TypeParam","","",31,null],[13,"LifetimeDef","","",31,null],[13,"EnumVariant","","",31,null],[13,"Field","","",31,null],[13,"StructCtor","","",31,null],[13,"Initializer","","",31,null],[13,"Binding","","",31,null],[3,"Definitions","","",null,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",29,null],[12,"krate","","what krate root is this path relative to?",29,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition\nprecisely. It combines the index of the definition&#39;s parent (if\nany) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",26,null],[12,"disambiguated_data","","Identifier of this node.",26,null],[3,"InlinedRootPath","","Root of an inlined item. We track the `DefPath` of the item within\nthe original crate but also its def-id. This is kind of an\naugmented version of a `DefPath` that includes a `DefId`. This is\nall sort of ugly but the hope is that inlined items will be going\naway soon anyway.",null,null],[12,"data","","",30,null],[12,"def_id","","",30,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is\nnormally 0, but in the event that there are multiple defs with the\nsame `parent` and `data`, we use this field to disambiguate\nbetween them. This introduces some artificial ordering dependency\nbut means that if you have (e.g.) two impls for the same type in\nthe same module, they do get distinct def-ids.",null,null],[12,"data","","",27,null],[12,"disambiguator","","",27,null],[0,"pat_util","rustc_typeck::hir","",null,null],[6,"PatIdMap","rustc_typeck::hir::pat_util","",null,null],[5,"pat_id_map","","",null,{"inputs":[{"name":"refcell"},{"name":"pat"}],"output":{"name":"hashmap"}}],[5,"pat_is_refutable","","",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_variant_or_struct","","",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_const","","",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_resolved_const","","",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_binding","","",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_binding_or_wild","","",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_bindings","","Call `it` on every &quot;binding&quot; in a pattern, e.g., on `a` in\n`match foo() { Some(a) =&gt; (), None =&gt; () }`",null,null],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_contains_ref_binding","","Checks if the pattern contains any `ref` or `ref mut` bindings,\nand if yes whether its containing mutable ones or just immutables ones.",null,{"inputs":[{"name":"refcell"},{"name":"pat"}],"output":{"name":"option"}}],[5,"arm_contains_ref_binding","","Checks if the patterns for this arm contain any `ref` or `ref mut`\nbindings, and if yes whether its containing mutable ones or just immutables ones.",null,{"inputs":[{"name":"refcell"},{"name":"arm"}],"output":{"name":"option"}}],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"simple_name","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"option"}}],[5,"def_to_path","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"path"}}],[5,"necessary_variants","","Return variants that are necessary to exist for the pattern to match.",null,{"inputs":[{"name":"hashmap"},{"name":"pat"}],"output":{"name":"vec"}}],[0,"print","rustc_typeck::hir","",null,null],[4,"AnnNode","rustc_typeck::hir::print","",null,null],[13,"NodeName","","",509,null],[13,"NodeBlock","","",509,null],[13,"NodeItem","","",509,null],[13,"NodeSubItem","","",509,null],[13,"NodeExpr","","",509,null],[13,"NodePat","","",509,null],[8,"PpAnn","","",null,null],[11,"pre","","",510,null],[11,"post","","",510,null],[3,"NoAnn","","",null,null],[3,"State","","",null,null],[12,"s","","",37,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"},{"name":"option"}],"output":{"name":"state"}}],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"stmt_to_string","","",null,{"inputs":[{"name":"spanned"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"name_to_string","","",null,{"inputs":[{"name":"name"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"name"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"spanned"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[0,"svh","rustc_typeck::hir","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc_typeck::hir::svh","",null,null],[3,"Lifetime","rustc_typeck::hir","",null,null],[12,"id","","",40,null],[12,"span","","",40,null],[12,"name","","",40,null],[3,"LifetimeDef","","A lifetime definition, eg `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"lifetime","","",41,null],[12,"bounds","","",41,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name; for instance:\nstd::cmp::PartialEq  .  It&#39;s represented as a sequence of identifiers,\nalong with a bunch of supporting information.",null,null],[12,"span","","",42,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",42,null],[12,"segments","","The segments in the path: the things separated by `::`.",42,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of\ntypes.",null,null],[12,"name","","The identifier portion of this path segment.",43,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",43,null],[4,"PathParameters","","",null,null],[13,"AngleBracketedParameters","","The `&lt;&#39;a, A,B,C&gt;` in `foo::bar::baz::&lt;&#39;a, A,B,C&gt;`",44,null],[13,"ParenthesizedParameters","","The `(A,B)` and `C` in `Foo(A,B) -&gt; C`",44,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",45,null],[12,"types","","The type parameters for this path segment, if present.",45,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.\nE.g., `Foo&lt;A=Bar&gt;`.",45,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"span","","Overall span",46,null],[12,"inputs","","`(A,B)`",46,null],[12,"output","","`C`",46,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe &quot;special&quot; built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",47,null],[13,"RegionTyParamBound","","",47,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",48,null],[13,"Maybe","","",48,null],[6,"TyParamBounds","","",null,null],[3,"TyParam","","",null,null],[12,"name","","",49,null],[12,"id","","",49,null],[12,"bounds","","",49,null],[12,"default","","",49,null],[12,"span","","",49,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",50,null],[12,"ty_params","","",50,null],[12,"where_clause","","",50,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",51,null],[12,"predicates","","",51,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",52,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",52,null],[13,"EqPredicate","","An equality predicate (unsupported)",52,null],[3,"WhereBoundPredicate","","A type bound, eg `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",null,null],[12,"span","","",53,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",53,null],[12,"bounded_ty","","The type being bounded",53,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",53,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",null,null],[12,"span","","",54,null],[12,"lifetime","","",54,null],[12,"bounds","","",54,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",55,null],[12,"span","","",55,null],[12,"path","","",55,null],[12,"ty","","",55,null],[6,"CrateConfig","","",null,null],[3,"Crate","","",null,null],[12,"module","","",56,null],[12,"attrs","","",56,null],[12,"config","","",56,null],[12,"span","","",56,null],[12,"exported_macros","","",56,null],[12,"items","","",56,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"name","","",57,null],[12,"attrs","","",57,null],[12,"id","","",57,null],[12,"span","","",57,null],[12,"imported_from","","",57,null],[12,"export","","",57,null],[12,"use_locally","","",57,null],[12,"allow_internal_unstable","","",57,null],[12,"body","","",57,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",58,null],[12,"expr","","An expression at the end of the block\nwithout a semicolon, if any",58,null],[12,"id","","",58,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",58,null],[12,"span","","",58,null],[3,"Pat","","",null,null],[12,"id","","",59,null],[12,"node","","",59,null],[12,"span","","",59,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"name","","The identifier for the field",60,null],[12,"pat","","The pattern the field is destructured to",60,null],[12,"is_shorthand","","",60,null],[4,"BindingMode","","",null,null],[13,"BindByRef","","",61,null],[13,"BindByValue","","",61,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",62,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable,\nor a unit struct/variant pattern, or a const pattern (in the last two cases\nthe third field must be `None`).",62,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\nThe `bool` is `true` in the presence of a `..`.",62,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, z)`.\n&quot;None&quot; means a `Variant(..)` pattern where we don&#39;t bind the fields to names.",62,null],[13,"Path","","A path pattern.\nSuch pattern can be resolved to a unit struct/variant or a constant.",62,null],[13,"QPath","","An associated const named using the qualified path `&lt;T&gt;::CONST` or\n`&lt;T as Trait&gt;::CONST`. Associated consts from inherent impls can be\nreferred to as simply `T::CONST`, in which case they will end up as\nPatKind::Path, and the resolver will have to sort that out.",62,null],[13,"Tup","","A tuple pattern `(a, b)`",62,null],[13,"Box","","A `box` pattern",62,null],[13,"Ref","","A reference pattern, e.g. `&amp;mut (a, b)`",62,null],[13,"Lit","","A literal",62,null],[13,"Range","","A range pattern, e.g. `1...2`",62,null],[13,"Vec","","`[a, b, ..i, y, z]` is represented as:\n`PatKind::Vec(box [a, b], Some(i), box [y, z])`",62,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",63,null],[13,"MutImmutable","","",63,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",64,null],[13,"BiSub","","The `-` operator (subtraction)",64,null],[13,"BiMul","","The `*` operator (multiplication)",64,null],[13,"BiDiv","","The `/` operator (division)",64,null],[13,"BiRem","","The `%` operator (modulus)",64,null],[13,"BiAnd","","The `&amp;&amp;` operator (logical and)",64,null],[13,"BiOr","","The `||` operator (logical or)",64,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",64,null],[13,"BiBitAnd","","The `&amp;` operator (bitwise and)",64,null],[13,"BiBitOr","","The `|` operator (bitwise or)",64,null],[13,"BiShl","","The `&lt;&lt;` operator (shift left)",64,null],[13,"BiShr","","The `&gt;&gt;` operator (shift right)",64,null],[13,"BiEq","","The `==` operator (equality)",64,null],[13,"BiLt","","The `&lt;` operator (less than)",64,null],[13,"BiLe","","The `&lt;=` operator (less than or equal to)",64,null],[13,"BiNe","","The `!=` operator (not equal to)",64,null],[13,"BiGe","","The `&gt;=` operator (greater than or equal to)",64,null],[13,"BiGt","","The `&gt;` operator (greater than)",64,null],[6,"BinOp","","",null,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",65,null],[13,"UnNot","","The `!` operator for logical inversion",65,null],[13,"UnNeg","","The `-` operator for negation",65,null],[6,"Stmt","","",null,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",66,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",66,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",66,null],[3,"Local","","Local represents a `let` statement, e.g., `let &lt;pat&gt;:&lt;ty&gt; = &lt;expr&gt;;`",null,null],[12,"pat","","",67,null],[12,"ty","","",67,null],[12,"init","","Initializer expression to set the value, if any",67,null],[12,"id","","",67,null],[12,"span","","",67,null],[12,"attrs","","",67,null],[6,"Decl","","",null,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",68,null],[13,"DeclItem","","An item binding:",68,null],[3,"Arm","","represents one arm of a &#39;match&#39;",null,null],[12,"attrs","","",69,null],[12,"pats","","",69,null],[12,"guard","","",69,null],[12,"body","","",69,null],[3,"Field","","",null,null],[12,"name","","",70,null],[12,"expr","","",70,null],[12,"span","","",70,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",71,null],[13,"UnsafeBlock","","",71,null],[13,"PushUnsafeBlock","","",71,null],[13,"PopUnsafeBlock","","",71,null],[13,"PushUnstableBlock","","",71,null],[13,"PopUnstableBlock","","",71,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",72,null],[13,"UserProvided","","",72,null],[3,"Expr","","An expression",null,null],[12,"id","","",23,null],[12,"node","","",23,null],[12,"span","","",23,null],[12,"attrs","","",23,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",73,null],[13,"ExprVec","","An array (`[a, b, c, d]`)",73,null],[13,"ExprCall","","A function call",73,null],[13,"ExprMethodCall","","A method call (`x.foo::&lt;Bar, Baz&gt;(a, b, c, d)`)",73,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",73,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",73,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",73,null],[13,"ExprLit","","A literal (For example: `1`, `&quot;foo&quot;`)",73,null],[13,"ExprCast","","A cast (`foo as f64`)",73,null],[13,"ExprType","","",73,null],[13,"ExprIf","","An `if` block, with an optional else block",73,null],[13,"ExprWhile","","A while loop, with an optional label",73,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",73,null],[13,"ExprMatch","","A `match` block, with a source that indicates whether or not it is\nthe result of a desugaring, and if so, which kind.",73,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`).",73,null],[13,"ExprBlock","","A block (`{ ... }`)",73,null],[13,"ExprAssign","","An assignment (`a = foo()`)",73,null],[13,"ExprAssignOp","","An assignment with an operator",73,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",73,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",73,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",73,null],[13,"ExprPath","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",73,null],[13,"ExprAddrOf","","A referencing operation (`&amp;a` or `&amp;mut a`)",73,null],[13,"ExprBreak","","A `break`, with an optional label to break",73,null],[13,"ExprAgain","","A `continue`, with an optional label",73,null],[13,"ExprRet","","A `return`, with an optional value to be returned",73,null],[13,"ExprInlineAsm","","Inline assembly (from `asm!`), with its outputs and inputs.",73,null],[13,"ExprStruct","","A struct literal expression.",73,null],[13,"ExprRepeat","","A vector literal constructed from one repeated element.",73,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",74,null],[12,"position","","",74,null],[4,"MatchSource","","",null,null],[13,"Normal","","",75,null],[13,"IfLetDesugar","","",75,null],[12,"contains_else_clause","rustc_typeck::hir::MatchSource","",75,null],[13,"WhileLetDesugar","rustc_typeck::hir","",75,null],[13,"ForLoopDesugar","","",75,null],[13,"TryDesugar","","",75,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",76,null],[13,"CaptureByRef","","",76,null],[3,"MutTy","","",null,null],[12,"ty","","",77,null],[12,"mutbl","","",77,null],[3,"MethodSig","","Represents a method&#39;s signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",78,null],[12,"constness","","",78,null],[12,"abi","","",78,null],[12,"decl","","",78,null],[12,"generics","","",78,null],[3,"TraitItem","","Represents an item declaration within a trait declaration,\npossibly including a default implementation. A trait item is\neither required (meaning it doesn&#39;t have an implementation, just a\nsignature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",22,null],[12,"name","","",22,null],[12,"attrs","","",22,null],[12,"node","","",22,null],[12,"span","","",22,null],[4,"TraitItem_","","",null,null],[13,"ConstTraitItem","","",79,null],[13,"MethodTraitItem","","",79,null],[13,"TypeTraitItem","","",79,null],[3,"ImplItem","","",null,null],[12,"id","","",80,null],[12,"name","","",80,null],[12,"vis","","",80,null],[12,"defaultness","","",80,null],[12,"attrs","","",80,null],[12,"node","","",80,null],[12,"span","","",80,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",81,null],[13,"Method","","",81,null],[13,"Type","","",81,null],[3,"TypeBinding","","",null,null],[12,"id","","",82,null],[12,"name","","",82,null],[12,"ty","","",82,null],[12,"span","","",82,null],[3,"Ty","","",null,null],[12,"id","","",83,null],[12,"node","","",83,null],[12,"span","","",83,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",84,null],[13,"TyUint","","",84,null],[13,"TyFloat","","",84,null],[13,"TyStr","","",84,null],[13,"TyBool","","",84,null],[13,"TyChar","","",84,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",85,null],[12,"abi","","",85,null],[12,"lifetimes","","",85,null],[12,"decl","","",85,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TyVec","","",86,null],[13,"TyFixedLengthVec","","A fixed length array (`[T; n]`)",86,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",86,null],[13,"TyRptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",86,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",86,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",86,null],[13,"TyPath","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;HirVec&lt;T&gt; as SomeTrait&gt;::SomeType`.",86,null],[13,"TyObjectSum","","Something like `A+B`. Note that `B` must always be a path.",86,null],[13,"TyPolyTraitRef","","A type like `for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a Bar&gt;`",86,null],[13,"TyTypeof","","Unused for now",86,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",86,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",87,null],[12,"is_rw","","",87,null],[12,"is_indirect","","",87,null],[3,"InlineAsm","","",null,null],[12,"asm","","",88,null],[12,"asm_str_style","","",88,null],[12,"outputs","","",88,null],[12,"inputs","","",88,null],[12,"clobbers","","",88,null],[12,"volatile","","",88,null],[12,"alignstack","","",88,null],[12,"dialect","","",88,null],[12,"expn_id","","",88,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"ty","","",89,null],[12,"pat","","",89,null],[12,"id","","",89,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",90,null],[13,"Region","","`&amp;&#39;lt self`, `&amp;&#39;lt mut self`",90,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",90,null],[6,"ExplicitSelf","","",null,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",91,null],[12,"output","","",91,null],[12,"variadic","","",91,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",92,null],[13,"Normal","","",92,null],[4,"Constness","","",null,null],[13,"Const","","",93,null],[13,"NotConst","","",93,null],[4,"Defaultness","","",null,null],[13,"Default","","",94,null],[13,"Final","","",94,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",95,null],[13,"Negative","","`impl !Trait for Type`",95,null],[4,"FunctionRetTy","","",null,null],[13,"NoReturn","","Functions with return type `!`that always\nraise an error or exit (i.e. never return to the caller)",96,null],[13,"DefaultReturn","","Return type is not specified.",96,null],[13,"Return","","Everything else",96,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",97,null],[12,"item_ids","","",97,null],[3,"ForeignMod","","",null,null],[12,"abi","","",98,null],[12,"items","","",98,null],[3,"EnumDef","","",null,null],[12,"variants","","",99,null],[3,"Variant_","","",null,null],[12,"name","","",100,null],[12,"attrs","","",100,null],[12,"data","","",100,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",100,null],[6,"Variant","","",null,null],[4,"PathListItem_","","",null,null],[13,"PathListIdent","","",101,null],[12,"name","rustc_typeck::hir::PathListItem_","",101,null],[12,"rename","","",101,null],[12,"id","","",101,null],[13,"PathListMod","rustc_typeck::hir","",101,null],[12,"rename","rustc_typeck::hir::PathListItem_","",101,null],[12,"id","","",101,null],[6,"PathListItem","rustc_typeck::hir","",null,null],[6,"ViewPath","","",null,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",102,null],[13,"ViewPathGlob","","`foo::bar::*`",102,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",102,null],[3,"TraitRef","","TraitRef&#39;s appear in impls.",null,null],[12,"path","","",103,null],[12,"ref_id","","",103,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",104,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",104,null],[12,"span","","",104,null],[4,"Visibility","","",null,null],[13,"Public","","",105,null],[13,"Crate","","",105,null],[13,"Restricted","","",105,null],[12,"path","rustc_typeck::hir::Visibility","",105,null],[12,"id","","",105,null],[13,"Inherited","rustc_typeck::hir","",105,null],[3,"StructField","","",null,null],[12,"span","","",106,null],[12,"name","","",106,null],[12,"vis","","",106,null],[12,"id","","",106,null],[12,"ty","","",106,null],[12,"attrs","","",106,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",107,null],[13,"Tuple","","",107,null],[13,"Unit","","",107,null],[3,"ItemId","","",null,null],[12,"id","","",108,null],[3,"Item","","An item",null,null],[12,"name","","",21,null],[12,"attrs","","",21,null],[12,"id","","",21,null],[12,"node","","",21,null],[12,"vis","","",21,null],[12,"span","","",21,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An`extern crate` item, with optional original crate name,",109,null],[13,"ItemUse","","A `use` or `pub use` item",109,null],[13,"ItemStatic","","A `static` item",109,null],[13,"ItemConst","","A `const` item",109,null],[13,"ItemFn","","A function declaration",109,null],[13,"ItemMod","","A module",109,null],[13,"ItemForeignMod","","An external module",109,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar&lt;u8&gt;`",109,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo&lt;A, B&gt; {C&lt;A&gt;, D&lt;B&gt;}`",109,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo&lt;A&gt; {x: A}`",109,null],[13,"ItemTrait","","Represents a Trait Declaration",109,null],[13,"ItemDefaultImpl","","",109,null],[13,"ItemImpl","","An implementation, eg `impl&lt;A&gt; Trait for Foo { .. }`",109,null],[3,"ForeignItem","","",null,null],[12,"name","","",110,null],[12,"attrs","","",110,null],[12,"node","","",110,null],[12,"id","","",110,null],[12,"span","","",110,null],[12,"vis","","",110,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",111,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",111,null],[3,"Freevar","","A free variable referred to in a function.",null,null],[12,"def","","The variable being accessed free.",112,null],[12,"span","","",112,null],[6,"FreevarMap","","",null,null],[6,"CaptureModeMap","","",null,null],[3,"TraitCandidate","","",null,null],[12,"def_id","","",113,null],[12,"import_id","","",113,null],[6,"TraitMap","","",null,null],[6,"GlobMap","","",null,null],[0,"lint","rustc_typeck","Lints, aka compiler warnings.",null,null],[3,"Lint","rustc_typeck::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",165,null],[12,"default_level","","Default level for the lint.",165,null],[12,"desc","","Description of the lint or the issue it detects.",165,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",511,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",512,null],[11,"check_crate","","",512,null],[11,"check_crate_post","","",512,null],[11,"check_mod","","",512,null],[11,"check_mod_post","","",512,null],[11,"check_foreign_item","","",512,null],[11,"check_foreign_item_post","","",512,null],[11,"check_item","","",512,null],[11,"check_item_post","","",512,null],[11,"check_local","","",512,null],[11,"check_block","","",512,null],[11,"check_block_post","","",512,null],[11,"check_stmt","","",512,null],[11,"check_arm","","",512,null],[11,"check_pat","","",512,null],[11,"check_decl","","",512,null],[11,"check_expr","","",512,null],[11,"check_expr_post","","",512,null],[11,"check_ty","","",512,null],[11,"check_generics","","",512,null],[11,"check_fn","","",512,null],[11,"check_fn_post","","",512,null],[11,"check_trait_item","","",512,null],[11,"check_trait_item_post","","",512,null],[11,"check_impl_item","","",512,null],[11,"check_impl_item_post","","",512,null],[11,"check_struct_def","","",512,null],[11,"check_struct_def_post","","",512,null],[11,"check_struct_field","","",512,null],[11,"check_variant","","",512,null],[11,"check_variant_post","","",512,null],[11,"check_lifetime","","",512,null],[11,"check_lifetime_def","","",512,null],[11,"check_explicit_self","","",512,null],[11,"check_path","","",512,null],[11,"check_path_list_item","","",512,null],[11,"check_attribute","","",512,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",512,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",512,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",513,null],[11,"check_crate","","",513,null],[11,"check_crate_post","","",513,null],[11,"check_mod","","",513,null],[11,"check_mod_post","","",513,null],[11,"check_foreign_item","","",513,null],[11,"check_foreign_item_post","","",513,null],[11,"check_item","","",513,null],[11,"check_item_post","","",513,null],[11,"check_local","","",513,null],[11,"check_block","","",513,null],[11,"check_block_post","","",513,null],[11,"check_stmt","","",513,null],[11,"check_arm","","",513,null],[11,"check_pat","","",513,null],[11,"check_decl","","",513,null],[11,"check_expr","","",513,null],[11,"check_expr_post","","",513,null],[11,"check_ty","","",513,null],[11,"check_generics","","",513,null],[11,"check_fn","","",513,null],[11,"check_fn_post","","",513,null],[11,"check_trait_item","","",513,null],[11,"check_trait_item_post","","",513,null],[11,"check_impl_item","","",513,null],[11,"check_impl_item_post","","",513,null],[11,"check_struct_def","","",513,null],[11,"check_struct_def_post","","",513,null],[11,"check_struct_field","","",513,null],[11,"check_variant","","",513,null],[11,"check_variant_post","","",513,null],[11,"check_lifetime","","",513,null],[11,"check_lifetime_def","","",513,null],[11,"check_explicit_self","","",513,null],[11,"check_path","","",513,null],[11,"check_path_list_item","","",513,null],[11,"check_attribute","","",513,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",513,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",513,null],[6,"EarlyLintPassObject","","",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",167,null],[13,"Warn","","",167,null],[13,"Deny","","",167,null],[13,"Forbid","","",167,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",168,null],[13,"Node","","Lint level was set by an attribute.",168,null],[13,"CommandLine","","Lint level was set by a command-line flag.",168,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_typeck::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"VARIANT_SIZE_DIFFERENCES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"UNSIZED_IN_TUPLE","","",null,null],[7,"OBJECT_UNSAFE_FRAGMENT","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler.",null,null],[5,"raw_emit_lint","rustc_typeck::lint","Emit a lint as a warning or an error (or not at all)\naccording to `level`.",null,null],[3,"GatherNodeLevels","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[8,"LintContext","","",null,null],[10,"sess","","",514,null],[10,"lints","","",514,null],[10,"mut_lints","","",514,null],[10,"level_stack","","",514,null],[10,"enter_attrs","","",514,null],[10,"exit_attrs","","",514,null],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",514,null],[11,"level_src","","",514,null],[11,"lookup_and_emit","","",514,null],[11,"lookup","","",514,null],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",514,null],[11,"struct_span_lint","","",514,null],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",514,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",514,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",514,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the\ncurrent lint context, call the provided function, then reset the\nlints in effect to their previous state.",514,null],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess.",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[5,"raw_struct_lint","","",null,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to\nHIR.",null,null],[12,"sess","","Type context we&#39;re checking in.",172,null],[12,"krate","","The crate being checked.",172,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we&#39;re checking in.",171,null],[12,"krate","","The crate being checked.",171,null],[12,"access_levels","","Items accessible from the crate being checked.",171,null],[5,"check_ast_crate","","",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call\nto `register_future_incompatible` in `librustc_lint/lib.rs` for\nguidelines.",null,null],[12,"id","","",515,null],[12,"reference","","",515,null],[0,"middle","rustc_typeck","",null,null],[0,"astconv_util","rustc_typeck::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_typeck::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor.",null,null],[10,"consume","","",516,null],[10,"matched_pat","","",516,null],[10,"consume_pat","","",516,null],[10,"borrow","","",516,null],[10,"decl_without_init","","",516,null],[10,"mutate","","",516,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",174,null],[13,"AddrOf","","",174,null],[13,"AutoRef","","",174,null],[13,"AutoUnsafe","","",174,null],[13,"RefBinding","","",174,null],[13,"OverloadedOperator","","",174,null],[13,"ClosureInvocation","","",174,null],[13,"ForLoop","","",174,null],[13,"MatchDiscriminant","","",174,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",175,null],[13,"Move","","",175,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",176,null],[13,"PatBindingMove","","",176,null],[13,"CaptureMove","","",176,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",177,null],[13,"BorrowingMatch","","",177,null],[13,"CopyingMatch","","",177,null],[13,"MovingMatch","","",177,null],[4,"MutateMode","","",null,null],[13,"Init","","",178,null],[13,"JustWrite","","",178,null],[13,"WriteAndRead","","",178,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_typeck::middle","",null,null],[4,"ConstVal","rustc_typeck::middle::const_val","",null,null],[13,"Float","","",180,null],[13,"Integral","","",180,null],[13,"Str","","",180,null],[13,"ByteStr","","",180,null],[13,"Bool","","",180,null],[13,"Struct","","",180,null],[13,"Tuple","","",180,null],[13,"Function","","",180,null],[13,"Array","","",180,null],[13,"Repeat","","",180,null],[13,"Char","","",180,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never\nhandle this case. Its sole purpose is to allow more errors to be reported instead of\ncausing a fatal error.",180,null],[0,"const_qualif","rustc_typeck::middle","",null,null],[3,"ConstQualif","rustc_typeck::middle::const_qualif","",null,null],[0,"cstore","rustc_typeck::middle","",null,null],[3,"LinkMeta","rustc_typeck::middle::cstore","",null,null],[12,"crate_name","","",182,null],[12,"crate_hash","","",182,null],[3,"CrateSource","","",null,null],[12,"dylib","","",183,null],[12,"rlib","","",183,null],[12,"cnum","","",183,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",184,null],[13,"RequireStatic","","",184,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",185,null],[13,"NativeFramework","","",185,null],[13,"NativeUnknown","","",185,null],[4,"DefLike","","",null,null],[13,"DlDef","","",186,null],[13,"DlImpl","","",186,null],[13,"DlField","","",186,null],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans.",null,null],[13,"Item","","",187,null],[13,"TraitItem","","",187,null],[13,"ImplItem","","",187,null],[13,"Foreign","","",187,null],[4,"InlinedItemRef","","A borrowed version of `hir::InlinedItem`.",null,null],[13,"Item","","",188,null],[13,"TraitItem","","",188,null],[13,"ImplItem","","",188,null],[13,"Foreign","","",188,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId.",null,null],[3,"ChildItem","","",null,null],[12,"def","","",189,null],[12,"name","","",189,null],[12,"vis","","",189,null],[4,"FoundAst","","",null,null],[13,"Found","","",517,null],[13,"FoundParent","","",517,null],[13,"NotFound","","",517,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused\nthis crate to be loaded; note that there could be multiple\nsuch ids",190,null],[12,"span","","span of the extern crate that caused this to be loaded",190,null],[12,"direct","","If true, then this crate is the crate named by the extern\ncrate referenced above. If false, then this crate is a dep\nof the crate.",190,null],[12,"path_len","","Number of links to reach the extern crate `def_id`\ndeclaration; used to select the extern crate with the shortest\npath",190,null],[8,"CrateStore","","A store of Rust crates, through with their metadata\ncan be accessed.",null,null],[10,"stability","","",518,null],[10,"deprecation","","",518,null],[10,"visibility","","",518,null],[10,"closure_kind","","",518,null],[10,"closure_ty","","",518,null],[10,"item_variances","","",518,null],[10,"repr_attrs","","",518,null],[10,"item_type","","",518,null],[10,"visible_parent_map","","",518,null],[10,"item_name","","",518,null],[10,"item_predicates","","",518,null],[10,"item_super_predicates","","",518,null],[10,"item_attrs","","",518,null],[10,"item_symbol","","",518,null],[10,"trait_def","","",518,null],[10,"adt_def","","",518,null],[10,"method_arg_names","","",518,null],[10,"inherent_implementations_for_type","","",518,null],[10,"implementations_of_trait","","",518,null],[10,"provided_trait_methods","","",518,null],[10,"trait_item_def_ids","","",518,null],[10,"impl_items","","",518,null],[10,"impl_trait_ref","","",518,null],[10,"impl_polarity","","",518,null],[10,"custom_coerce_unsized_kind","","",518,null],[10,"associated_consts","","",518,null],[10,"impl_parent","","",518,null],[10,"trait_of_item","","",518,null],[10,"impl_or_trait_item","","",518,null],[10,"is_const_fn","","",518,null],[10,"is_defaulted_trait","","",518,null],[10,"is_impl","","",518,null],[10,"is_default_impl","","",518,null],[10,"is_extern_item","","",518,null],[10,"is_static_method","","",518,null],[10,"is_statically_included_foreign_item","","",518,null],[10,"is_typedef","","",518,null],[10,"dylib_dependency_formats","","",518,null],[10,"lang_items","","",518,null],[10,"missing_lang_items","","",518,null],[10,"is_staged_api","","",518,null],[10,"is_explicitly_linked","","",518,null],[10,"is_allocator","","",518,null],[10,"is_panic_runtime","","",518,null],[10,"panic_strategy","","",518,null],[10,"extern_crate","","",518,null],[10,"crate_attrs","","",518,null],[10,"crate_name","","The name of the crate as it is referred to in source code of the current\ncrate.",518,null],[10,"original_crate_name","","The name of the crate as it is stored in the crate&#39;s metadata.",518,null],[10,"crate_hash","","",518,null],[10,"crate_disambiguator","","",518,null],[10,"crate_struct_field_attrs","","",518,null],[10,"plugin_registrar_fn","","",518,null],[10,"native_libraries","","",518,null],[10,"reachable_ids","","",518,null],[10,"def_key","","",518,null],[10,"relative_def_path","","",518,null],[10,"variant_kind","","",518,null],[10,"struct_ctor_def_id","","",518,null],[10,"tuple_struct_definition_if_ctor","","",518,null],[10,"struct_field_names","","",518,null],[10,"item_children","","",518,null],[10,"crate_top_level_items","","",518,null],[10,"maybe_get_item_ast","","",518,null],[10,"maybe_get_item_mir","","",518,null],[10,"is_item_mir_available","","",518,null],[10,"crates","","",518,null],[10,"used_libraries","","",518,null],[10,"used_link_args","","",518,null],[10,"metadata_filename","","",518,null],[10,"metadata_section_name","","",518,null],[10,"encode_type","","",518,null],[10,"used_crates","","",518,null],[10,"used_crate_source","","",518,null],[10,"extern_mod_stmt_cnum","","",518,null],[10,"encode_metadata","","",518,null],[10,"metadata_encoding_version","","",518,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates,\nfor test purposes.",null,null],[0,"tls","","Metadata encoding and decoding can make use of thread-local encoding and\ndecoding contexts. These allow implementers of serialize::Encodable and\nDecodable to access information and datastructures that would otherwise not\nbe available to them. For example, we can automatically translate def-id and\nspan information during decoding because the decoding context knows which\ncrate the data is decoded from. Or it allows to make ty::Ty decodable\nbecause the context has access to the TyCtxt that is needed for creating\nty::Ty instances.",null,null],[8,"EncodingContext","rustc_typeck::middle::cstore::tls","",null,null],[10,"tcx","","",519,null],[10,"encode_ty","","",519,null],[10,"encode_substs","","",519,null],[5,"enter_encoding_context","","Execute f after pushing the given EncodingContext onto the TLS stack.",null,{"inputs":[{"name":"encodingcontext"},{"name":"encoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder. This function will panic if the encoder passed in and the\ncontext encoder are not the same.",null,{"inputs":[{"name":"e"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[8,"DecodingContext","","",null,null],[10,"tcx","","",520,null],[10,"decode_ty","","",520,null],[10,"decode_substs","","",520,null],[10,"translate_def_id","","",520,null],[5,"enter_decoding_context","","Execute f after pushing the given DecodingContext onto the TLS stack.",null,{"inputs":[{"name":"decodingcontext"},{"name":"decoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder. This function will panic if the decoder passed in and the\ncontext decoder are not the same.",null,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"dataflow","rustc_typeck::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_typeck::middle::dataflow","",null,null],[13,"Entry","","",192,null],[13,"Exit","","",192,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&amp;`",521,null],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",522,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill\ntakes effect only when control flows directly through the node in\nquestion, or if the kill&#39;s effect is associated with any\ncontrol-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control\nflow goes over the node. A kill associated with the end of the\nscope of a variable declaration `let x;` is an example of a\n`ScopeEnd` kill.",194,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control\nflow goes through the node to completion. A kill associated\nwith an assignment statement `x = expr;` is an example of an\n`Execution` kill.",194,null],[0,"dead","rustc_typeck::middle","",null,null],[5,"check_crate","rustc_typeck::middle::dead","",null,null],[0,"dependency_format","rustc_typeck::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_typeck::middle::dependency_format","",null,null],[6,"Dependencies","","",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",195,null],[13,"IncludedFromDylib","","",195,null],[13,"Static","","",195,null],[13,"Dynamic","","",195,null],[5,"calculate","","",null,null],[0,"effect","rustc_typeck::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`.",null,null],[5,"check_crate","rustc_typeck::middle::effect","",null,null],[0,"entry","rustc_typeck::middle","",null,null],[5,"find_entry_point","rustc_typeck::middle::entry","",null,null],[0,"free_region","rustc_typeck::middle","This file handles the relationships between free regions --\nmeaning lifetime parameters. Ordinarily, free regions are\nunrelated to one another, but they can be related via implied or\nexplicit bounds.  In that case, we track the bounds using the\n`TransitiveRelation` type and use that to decide when one free\nregion outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_typeck::middle::free_region","",null,null],[0,"intrinsicck","rustc_typeck::middle","",null,null],[5,"check_crate","rustc_typeck::middle::intrinsicck","",null,null],[0,"lang_items","rustc_typeck::middle","",null,null],[4,"LangItem","rustc_typeck::middle::lang_items","",null,null],[13,"CharImplItem","","",197,null],[13,"StrImplItem","","",197,null],[13,"SliceImplItem","","",197,null],[13,"ConstPtrImplItem","","",197,null],[13,"MutPtrImplItem","","",197,null],[13,"I8ImplItem","","",197,null],[13,"I16ImplItem","","",197,null],[13,"I32ImplItem","","",197,null],[13,"I64ImplItem","","",197,null],[13,"IsizeImplItem","","",197,null],[13,"U8ImplItem","","",197,null],[13,"U16ImplItem","","",197,null],[13,"U32ImplItem","","",197,null],[13,"U64ImplItem","","",197,null],[13,"UsizeImplItem","","",197,null],[13,"F32ImplItem","","",197,null],[13,"F64ImplItem","","",197,null],[13,"SendTraitLangItem","","",197,null],[13,"SizedTraitLangItem","","",197,null],[13,"UnsizeTraitLangItem","","",197,null],[13,"CopyTraitLangItem","","",197,null],[13,"SyncTraitLangItem","","",197,null],[13,"DropTraitLangItem","","",197,null],[13,"CoerceUnsizedTraitLangItem","","",197,null],[13,"AddTraitLangItem","","",197,null],[13,"SubTraitLangItem","","",197,null],[13,"MulTraitLangItem","","",197,null],[13,"DivTraitLangItem","","",197,null],[13,"RemTraitLangItem","","",197,null],[13,"NegTraitLangItem","","",197,null],[13,"NotTraitLangItem","","",197,null],[13,"BitXorTraitLangItem","","",197,null],[13,"BitAndTraitLangItem","","",197,null],[13,"BitOrTraitLangItem","","",197,null],[13,"ShlTraitLangItem","","",197,null],[13,"ShrTraitLangItem","","",197,null],[13,"AddAssignTraitLangItem","","",197,null],[13,"SubAssignTraitLangItem","","",197,null],[13,"MulAssignTraitLangItem","","",197,null],[13,"DivAssignTraitLangItem","","",197,null],[13,"RemAssignTraitLangItem","","",197,null],[13,"BitXorAssignTraitLangItem","","",197,null],[13,"BitAndAssignTraitLangItem","","",197,null],[13,"BitOrAssignTraitLangItem","","",197,null],[13,"ShlAssignTraitLangItem","","",197,null],[13,"ShrAssignTraitLangItem","","",197,null],[13,"IndexTraitLangItem","","",197,null],[13,"IndexMutTraitLangItem","","",197,null],[13,"UnsafeCellTypeLangItem","","",197,null],[13,"DerefTraitLangItem","","",197,null],[13,"DerefMutTraitLangItem","","",197,null],[13,"FnTraitLangItem","","",197,null],[13,"FnMutTraitLangItem","","",197,null],[13,"FnOnceTraitLangItem","","",197,null],[13,"EqTraitLangItem","","",197,null],[13,"OrdTraitLangItem","","",197,null],[13,"StrEqFnLangItem","","",197,null],[13,"PanicFnLangItem","","",197,null],[13,"PanicBoundsCheckFnLangItem","","",197,null],[13,"PanicFmtLangItem","","",197,null],[13,"ExchangeMallocFnLangItem","","",197,null],[13,"ExchangeFreeFnLangItem","","",197,null],[13,"BoxFreeFnLangItem","","",197,null],[13,"StrDupUniqFnLangItem","","",197,null],[13,"StartFnLangItem","","",197,null],[13,"EhPersonalityLangItem","","",197,null],[13,"EhPersonalityCatchLangItem","","",197,null],[13,"EhUnwindResumeLangItem","","",197,null],[13,"MSVCTryFilterLangItem","","",197,null],[13,"OwnedBoxLangItem","","",197,null],[13,"PhantomDataItem","","",197,null],[13,"CovariantTypeItem","","",197,null],[13,"ContravariantTypeItem","","",197,null],[13,"InvariantTypeItem","","",197,null],[13,"CovariantLifetimeItem","","",197,null],[13,"ContravariantLifetimeItem","","",197,null],[13,"InvariantLifetimeItem","","",197,null],[13,"NoCopyItem","","",197,null],[13,"NonZeroItem","","",197,null],[13,"DebugTraitLangItem","","",197,null],[3,"LanguageItems","","",null,null],[12,"items","","",198,null],[12,"missing","","",198,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_typeck::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid.",null,null],[5,"check_crate","rustc_typeck::middle::liveness","",null,null],[0,"mem_categorization","rustc_typeck::middle","# Categorization",null,null],[4,"Categorization","rustc_typeck::middle::mem_categorization","",null,null],[13,"Rvalue","","",199,null],[13,"StaticItem","","",199,null],[13,"Upvar","","",199,null],[13,"Local","","",199,null],[13,"Deref","","",199,null],[13,"Interior","","",199,null],[13,"Downcast","","",199,null],[3,"Upvar","","",null,null],[12,"id","","",200,null],[12,"kind","","",200,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box&lt;T&gt;`",201,null],[13,"BorrowedPtr","","`&amp;T`",201,null],[13,"UnsafePtr","","`*T`",201,null],[13,"Implicit","","Implicit deref of the `&amp;T` that results from an overloaded index `[]`.",201,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",202,null],[13,"InteriorElement","","",202,null],[4,"FieldName","","",null,null],[13,"NamedField","","",203,null],[13,"PositionalField","","",203,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",204,null],[13,"Pattern","","",204,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",205,null],[13,"OtherElement","","",205,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",206,null],[13,"McDeclared","","",206,null],[13,"McInherited","","",206,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",207,null],[13,"NoteUpvarRef","","",207,null],[13,"NoteNone","","",207,null],[3,"cmt_","","",null,null],[12,"id","","",208,null],[12,"span","","",208,null],[12,"cat","","",208,null],[12,"mutbl","","",208,null],[12,"ty","","",208,null],[12,"note","","",208,null],[6,"cmt","","",null,null],[4,"deref_kind","","",null,null],[13,"deref_ptr","","",209,null],[13,"deref_interior","","",209,null],[8,"ast_node","","",null,null],[10,"id","","",523,null],[10,"span","","",523,null],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",210,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",211,null],[13,"NonAliasable","","",211,null],[13,"ImmutableUnique","","",211,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",212,null],[13,"AliasableClosure","","",212,null],[13,"AliasableOther","","",212,null],[13,"UnaliasableImmutable","","",212,null],[13,"AliasableStatic","","",212,null],[13,"AliasableStaticMut","","",212,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_typeck::middle","A pass that checks to make sure private fields and methods aren&#39;t used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_typeck::middle::privacy","",null,null],[13,"Reachable","","",213,null],[13,"Exported","","",213,null],[13,"Public","","",213,null],[3,"AccessLevels","","",null,null],[12,"map","","",214,null],[6,"ExternalExports","","",null,null],[0,"reachable","rustc_typeck::middle","",null,null],[5,"find_reachable","rustc_typeck::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_typeck::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized.",null,null],[3,"CodeExtent","rustc_typeck::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling\ninstead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values.",null,null],[13,"Misc","","",216,null],[13,"CallSiteScope","","",216,null],[12,"fn_id","rustc_typeck::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"ParameterScope","rustc_typeck::middle::region","",216,null],[12,"fn_id","rustc_typeck::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"DestructionScope","rustc_typeck::middle::region","",216,null],[13,"Remainder","","",216,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",217,null],[12,"body_id","","",217,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`.",null,null],[12,"block","","",218,null],[12,"first_statement_index","","",218,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[5,"resolve_inlined_item","","",null,null],[0,"recursion_limit","rustc_typeck::middle","",null,null],[5,"update_recursion_limit","rustc_typeck::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_typeck::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_typeck::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",221,null],[13,"DefEarlyBoundRegion","","",221,null],[13,"DefLateBoundRegion","","",221,null],[13,"DefFreeRegion","","",221,null],[6,"NamedRegionMap","","",null,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"hashmap"}],"output":{"name":"result"}}],[5,"early_bound_lifetimes","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"vec"}}],[0,"stability","rustc_typeck::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_typeck::middle::stability","",null,null],[13,"Unstable","","",222,null],[13,"Stable","","",222,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used.",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"hashmap"}}],[5,"check_item","","Helper for discovering nodes to check for stability",null,null],[5,"check_expr","","Helper for discovering nodes to check for stability",null,null],[5,"check_path","","",null,null],[5,"check_path_list_item","","",null,null],[5,"check_pat","","",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don&#39;t exist and error about them.",null,null],[0,"weak_lang_items","rustc_typeck::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_typeck::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"session","rustc_typeck","",null,null],[0,"config","rustc_typeck::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options.",null,null],[3,"Config","rustc_typeck::session::config","",null,null],[12,"target","","",524,null],[12,"int_type","","",524,null],[12,"uint_type","","",524,null],[4,"OptLevel","","",null,null],[13,"No","","",256,null],[13,"Less","","",256,null],[13,"Default","","",256,null],[13,"Aggressive","","",256,null],[13,"Size","","",256,null],[13,"SizeMin","","",256,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",257,null],[13,"LimitedDebugInfo","","",257,null],[13,"FullDebugInfo","","",257,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",258,null],[13,"Assembly","","",258,null],[13,"LlvmAssembly","","",258,null],[13,"Object","","",258,null],[13,"Exe","","",258,null],[13,"DepInfo","","",258,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",259,null],[13,"Json","","",259,null],[3,"Options","","",null,null],[12,"crate_types","","",260,null],[12,"gc","","",260,null],[12,"optimize","","",260,null],[12,"debug_assertions","","",260,null],[12,"debuginfo","","",260,null],[12,"lint_opts","","",260,null],[12,"lint_cap","","",260,null],[12,"describe_lints","","",260,null],[12,"output_types","","",260,null],[12,"search_paths","","",260,null],[12,"libs","","",260,null],[12,"maybe_sysroot","","",260,null],[12,"target_triple","","",260,null],[12,"cfg","","",260,null],[12,"test","","",260,null],[12,"parse_only","","",260,null],[12,"no_trans","","",260,null],[12,"error_format","","",260,null],[12,"treat_err_as_bug","","",260,null],[12,"continue_parse_after_error","","",260,null],[12,"mir_opt_level","","",260,null],[12,"incremental","","if Some, enable incremental compilation, using the given\ndirectory to store intermediate results",260,null],[12,"no_analysis","","",260,null],[12,"debugging_opts","","",260,null],[12,"prints","","",260,null],[12,"cg","","",260,null],[12,"externs","","",260,null],[12,"crate_name","","",260,null],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = &quot;name&quot;`. Default to &quot;std&quot;. Used by\nout-of-tree drivers.",260,null],[12,"unstable_features","","Indicates how the compiler should treat unstable features",260,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",261,null],[13,"Sysroot","","",261,null],[13,"CrateName","","",261,null],[13,"Cfg","","",261,null],[13,"TargetList","","",261,null],[4,"Input","","",null,null],[13,"File","","Load source from file",262,null],[13,"Str","","",262,null],[12,"name","rustc_typeck::session::config::Input","",262,null],[12,"input","","",262,null],[3,"OutputFilenames","rustc_typeck::session::config","",null,null],[12,"out_directory","","",263,null],[12,"out_filestem","","",263,null],[12,"single_output_file","","",263,null],[12,"extra","","",263,null],[12,"outputs","","",263,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",264,null],[13,"EntryStart","","",264,null],[13,"EntryNone","","",264,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",265,null],[13,"CrateTypeDylib","","",265,null],[13,"CrateTypeRlib","","",265,null],[13,"CrateTypeStaticlib","","",265,null],[4,"Passes","","",null,null],[13,"SomePasses","","",266,null],[13,"AllPasses","","",266,null],[4,"PanicStrategy","","",null,null],[13,"Unwind","","",267,null],[13,"Abort","","",267,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",268,null],[12,"linker","","",268,null],[12,"link_args","","",268,null],[12,"link_dead_code","","",268,null],[12,"lto","","",268,null],[12,"target_cpu","","",268,null],[12,"target_feature","","",268,null],[12,"passes","","",268,null],[12,"llvm_args","","",268,null],[12,"save_temps","","",268,null],[12,"rpath","","",268,null],[12,"no_prepopulate_passes","","",268,null],[12,"no_vectorize_loops","","",268,null],[12,"no_vectorize_slp","","",268,null],[12,"soft_float","","",268,null],[12,"prefer_dynamic","","",268,null],[12,"no_integrated_as","","",268,null],[12,"no_redzone","","",268,null],[12,"relocation_model","","",268,null],[12,"code_model","","",268,null],[12,"metadata","","",268,null],[12,"extra_filename","","",268,null],[12,"codegen_units","","",268,null],[12,"remark","","",268,null],[12,"no_stack_check","","",268,null],[12,"debuginfo","","",268,null],[12,"opt_level","","",268,null],[12,"debug_assertions","","",268,null],[12,"inline_threshold","","",268,null],[12,"panic","","",268,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",269,null],[12,"time_passes","","",269,null],[12,"count_llvm_insns","","",269,null],[12,"time_llvm_passes","","",269,null],[12,"input_stats","","",269,null],[12,"trans_stats","","",269,null],[12,"asm_comments","","",269,null],[12,"no_verify","","",269,null],[12,"borrowck_stats","","",269,null],[12,"no_landing_pads","","",269,null],[12,"debug_llvm","","",269,null],[12,"count_type_sizes","","",269,null],[12,"meta_stats","","",269,null],[12,"print_link_args","","",269,null],[12,"gc","","",269,null],[12,"print_llvm_passes","","",269,null],[12,"ast_json","","",269,null],[12,"ast_json_noexpand","","",269,null],[12,"ls","","",269,null],[12,"save_analysis","","",269,null],[12,"save_analysis_csv","","",269,null],[12,"print_move_fragments","","",269,null],[12,"flowgraph_print_loans","","",269,null],[12,"flowgraph_print_moves","","",269,null],[12,"flowgraph_print_assigns","","",269,null],[12,"flowgraph_print_all","","",269,null],[12,"print_region_graph","","",269,null],[12,"parse_only","","",269,null],[12,"no_trans","","",269,null],[12,"treat_err_as_bug","","",269,null],[12,"continue_parse_after_error","","",269,null],[12,"incremental","","",269,null],[12,"dump_dep_graph","","",269,null],[12,"query_dep_graph","","",269,null],[12,"no_analysis","","",269,null],[12,"extra_plugins","","",269,null],[12,"unstable_options","","",269,null],[12,"print_enum_sizes","","",269,null],[12,"force_overflow_checks","","",269,null],[12,"force_dropflag_checks","","",269,null],[12,"trace_macros","","",269,null],[12,"enable_nonzeroing_move_hints","","",269,null],[12,"keep_mtwt_tables","","",269,null],[12,"keep_ast","","",269,null],[12,"show_span","","",269,null],[12,"print_trans_items","","",269,null],[12,"mir_opt_level","","",269,null],[12,"dump_mir","","",269,null],[12,"orbit","","",269,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"append_configuration","","",null,null],[5,"build_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",270,null],[13,"UnstableButNotReally","","",270,null],[13,"Unstable","","",270,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",271,null],[12,"stability","","",271,null],[5,"rustc_short_optgroups","","Returns the &quot;short&quot; subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"build_session_options","","",null,{"inputs":[{"name":"matches"}],"output":{"name":"options"}}],[5,"get_unstable_features_setting","","",null,{"inputs":[],"output":{"name":"unstablefeatures"}}],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_typeck::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_typeck::session","",null,null],[4,"FileMatch","rustc_typeck::session::filesearch","",null,null],[13,"FileMatches","","",272,null],[13,"FileDoesntMatch","","",272,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",273,null],[12,"search_paths","","",273,null],[12,"triple","","",273,null],[12,"kind","","",273,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"rustlibdir","","",null,{"inputs":[],"output":{"name":"string"}}],[0,"search_paths","rustc_typeck::session","",null,null],[3,"SearchPaths","rustc_typeck::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",275,null],[13,"Crate","","",275,null],[13,"Dependency","","",275,null],[13,"Framework","","",275,null],[13,"ExternFlag","","",275,null],[13,"All","","",275,null],[3,"Session","rustc_typeck::session","",null,null],[12,"target","","",277,null],[12,"host","","",277,null],[12,"opts","","",277,null],[12,"cstore","","",277,null],[12,"parse_sess","","",277,null],[12,"entry_fn","","",277,null],[12,"entry_type","","",277,null],[12,"plugin_registrar_fn","","",277,null],[12,"default_sysroot","","",277,null],[12,"local_crate_source_file","","",277,null],[12,"working_dir","","",277,null],[12,"lint_store","","",277,null],[12,"lints","","",277,null],[12,"plugin_llvm_passes","","",277,null],[12,"mir_passes","","",277,null],[12,"plugin_attributes","","",277,null],[12,"crate_types","","",277,null],[12,"dependency_formats","","",277,null],[12,"crate_disambiguator","","",277,null],[12,"features","","",277,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",277,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime\ndependency if it didn&#39;t already find one, and this tracks what was\ninjected.",277,null],[12,"injected_panic_runtime","","",277,null],[12,"available_macros","","Names of all bang-style macros and syntax extensions\navailable in this crate",277,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of\nthe localized span for the macro body) to the\nmacro name and defintion span in the source crate.",277,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"early_error","","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[0,"util","rustc_typeck","",null,null],[0,"common","rustc_typeck::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_typeck::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[5,"loop_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[5,"block_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",525,null],[16,"Value","","",525,null],[10,"memoize","","If `key` is present in the map, return the valuee,\notherwise invoke `op` and store the value in the map.",525,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_typeck::util","",null,null],[5,"verbose","rustc_typeck::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[4,"Ns","","Namespace of the path given to parameterized to print.",null,null],[13,"Type","","",498,null],[13,"Value","","",498,null],[5,"parameterized","","",null,null],[0,"nodemap","rustc_typeck::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_typeck::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[11,"clone","rustc_data_structures::bitvec","",526,null],[11,"new","","",526,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"contains","","",526,null],[11,"insert","","Returns true if the bit has changed.",526,null],[11,"insert_all","","",526,null],[11,"grow","","",526,null],[11,"iter","","Iterates over indexes of set bits in a sorted order",526,null],[11,"next","","",527,null],[11,"from_iter","","",526,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",528,null],[11,"new","","",528,{"inputs":[{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",528,null],[11,"contains","","Do the bits from `source` contain `target`?",528,null],[11,"intersection","","Returns those indices that are reachable from both `a` and\n`b`. This is an O(n) operation where `n` is the number of\nelements (somewhat independent from the actual size of the\nintersection, in particular).",528,null],[11,"merge","","Add the bits from `read` to the bits from `write`,\nreturn true if anything changed.",528,null],[11,"reverse","rustc_data_structures::graph","",529,null],[11,"reverse","","",530,null],[11,"fmt","","",530,null],[11,"hash","","",531,null],[11,"fmt","","",531,null],[11,"eq","","",531,null],[11,"ne","","",531,null],[11,"clone","","",531,null],[11,"hash","","",532,null],[11,"fmt","","",532,null],[11,"eq","","",532,null],[11,"ne","","",532,null],[11,"clone","","",532,null],[11,"eq","","",533,null],[11,"ne","","",533,null],[11,"fmt","","",533,null],[11,"clone","","",533,null],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",531,null],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",532,null],[11,"new","","",534,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",534,null],[11,"len_nodes","","",534,null],[11,"all_edges","","",534,null],[11,"len_edges","","",534,null],[11,"next_node_index","","",534,null],[11,"add_node","","",534,null],[11,"mut_node_data","","",534,null],[11,"node_data","","",534,null],[11,"node","","",534,null],[11,"next_edge_index","","",534,null],[11,"add_edge","","",534,null],[11,"mut_edge_data","","",534,null],[11,"edge_data","","",534,null],[11,"edge","","",534,null],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",534,null],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",534,null],[11,"each_node","","Iterates over all edges defined in the graph.",534,null],[11,"each_edge","","Iterates over all edges defined in the graph",534,null],[11,"outgoing_edges","","",534,null],[11,"incoming_edges","","",534,null],[11,"adjacent_edges","","",534,null],[11,"successor_nodes","","",534,null],[11,"predecessor_nodes","","",534,null],[11,"iterate_until_fixed_point","","",534,null],[11,"depth_traverse","","",534,null],[11,"next","","",535,null],[11,"next","","",536,null],[11,"next","","",537,null],[11,"next","","",538,null],[11,"source","","",530,null],[11,"target","","",530,null],[11,"source_or_target","","",530,null],[11,"eq","rustc_data_structures::ivar","",539,null],[11,"ne","","",539,null],[11,"new","","",539,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",539,null],[11,"fulfill","","",539,null],[11,"is_fulfilled","","",539,null],[11,"unwrap","","",539,null],[11,"fmt","","",539,null],[11,"clone","","",539,null],[11,"fmt","rustc_data_structures::obligation_forest","",540,null],[11,"eq","","",541,null],[11,"ne","","",541,null],[11,"fmt","","",541,null],[11,"new","","",542,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not\nyet been fully resolved.",542,null],[11,"start_snapshot","","",542,null],[11,"commit_snapshot","","",542,null],[11,"rollback_snapshot","","",542,null],[11,"in_snapshot","","",542,null],[11,"register_obligation","","Registers an obligation",542,null],[11,"to_errors","","Convert all remaining obligations to the given error.",542,null],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",542,null],[11,"process_obligations","","Perform a pass through the obligation list. This must\nbe called in a loop until `outcome.stalled` is false.",542,null],[11,"new","rustc_data_structures::snapshot_vec","",543,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",543,null],[11,"len","","",543,null],[11,"push","","",543,null],[11,"get","","",543,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",543,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",543,null],[11,"start_snapshot","","",543,null],[11,"actions_since_snapshot","","",543,null],[11,"rollback_to","","",543,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",543,null],[11,"deref","","",543,null],[11,"deref_mut","","",543,null],[11,"index","","",543,null],[11,"index_mut","","",543,null],[11,"extend","","",543,null],[11,"clone","rustc_data_structures::transitive_relation","",544,null],[11,"new","","",544,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"add","","Indicate that `a &lt; b` (where `&lt;` is this relation)",544,null],[11,"contains","","Check whether `a &lt; target` (transitively)",544,null],[11,"postdom_upper_bound","","Picks what I am referring to as the &quot;postdominating&quot;\nupper-bound for `a` and `b`. This is usually the least upper\nbound, but in cases where there is no single least upper\nbound, it is the &quot;mutual immediate postdominator&quot;, if you\nimagine a graph where `a &lt; b` means `a -&gt; b`.",544,null],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",544,null],[11,"fmt","rustc_data_structures::unify","",545,null],[11,"clone","","",545,null],[11,"eq","","",545,null],[11,"ne","","",545,null],[11,"new","","",546,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a &quot;LIFO&quot; (stack) order.",546,null],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",546,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",546,null],[11,"new_key","","",546,null],[11,"union","","",546,null],[11,"find","","",546,null],[11,"find_value","","",546,null],[11,"unioned","","",546,null],[11,"unify_var_var","","",546,null],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",546,null],[11,"has_value","","",546,null],[11,"probe","","",546,null],[11,"unsolved_variables","","",546,null],[11,"default","rustc_data_structures::fnv","",547,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",547,null],[11,"finish","","",547,null],[11,"with_capacity","rustc_data_structures::veccell","",548,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",548,null],[11,"swap","","",548,null],[6,"FnvHashMap","rustc_typeck::util::nodemap","",null,null],[6,"FnvHashSet","","",null,null],[5,"FnvHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FnvHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[0,"num","rustc_typeck::util","",null,null],[8,"ToPrimitive","rustc_typeck::util::num","",null,null],[10,"to_i8","","",549,null],[10,"to_i16","","",549,null],[10,"to_i32","","",549,null],[10,"to_i64","","",549,null],[10,"to_u8","","",549,null],[10,"to_u16","","",549,null],[10,"to_u32","","",549,null],[10,"to_u64","","",549,null],[0,"fs","rustc_typeck::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_typeck::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[0,"sha2","rustc_typeck::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant.",null,null],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",550,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",550,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",550,null],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",550,null],[11,"close","","Close and remove the temporary directory",550,null],[11,"drop","","",550,null],[11,"fmt","rustc_back::target","",551,null],[11,"clone","","",551,null],[11,"fmt","","",552,null],[11,"clone","","",552,null],[11,"default","","Create a set of &quot;sane defaults&quot; for any target. This is still\nincomplete, and if used for compilation, will certainly not work.",552,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn &quot;System&quot; into the correct ABI for this target.",551,null],[11,"from_json","","Load a target descriptor from a JSON object.",551,{"inputs":[{"name":"json"}],"output":{"name":"target"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",551,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"drop","rustc_back::dynamic_lib","",553,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",553,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",553,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",553,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",553,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",553,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",553,null],[8,"Digest","rustc_typeck::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",554,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",554,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",554,null],[10,"output_bits","","Get the output size in bits.",554,null],[11,"input_str","","Convenience function that feeds a string into a digest.",554,null],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",554,null],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",554,null],[3,"Sha256","","The SHA-256 hash algorithm",null,null],[3,"TypeAndSubsts","rustc_typeck","",null,null],[12,"substs","","",555,null],[12,"ty","","",555,null],[3,"CrateCtxt","","",null,null],[12,"trait_map","","A mapping from method call sites to traits that have that method.",556,null],[12,"all_traits","","A vector of every trait accessible in the whole crate\n(i.e. including those from subcrates). This is used only for\nerror reporting, and so is lazily initialised and generally\nshouldn&#39;t taint the common path (hence the RefCell).",556,null],[12,"stack","","This stack is used to identify cycles in the user&#39;s source.\nNote that these cycles can cross multiple items.",556,null],[12,"tcx","","",556,null],[5,"emit_type_err","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"ty"},{"name":"ty"},{"name":"typeerror"},{"name":"str"}],"output":null}],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"traitmap"}],"output":{"name":"compileresult"}}],[0,"diagnostics","","",null,null],[0,"check","","",null,null],[3,"Inherited","rustc_typeck::check","closures defined within the function.  For example:",null,null],[3,"UnsafetyState","","",null,null],[12,"def","","",557,null],[12,"unsafety","","",557,null],[12,"unsafe_push_count","","",557,null],[3,"FnCtxt","","",null,null],[3,"InheritedBuilder","","Helper type of a temporary returned by ccx.inherited(...).\nNecessary because we can&#39;t write the following bound:\nF: for&lt;&#39;b, &#39;tcx&gt; where &#39;gcx: &#39;tcx FnOnce(Inherited&lt;&#39;b, &#39;gcx, &#39;tcx&gt;).",null,null],[4,"Expectation","","When type-checking an expression, we propagate downward\nwhatever type hint we are able in the form of an `Expectation`.",null,null],[13,"NoExpectation","","We know nothing about what type this expression should have.",558,null],[13,"ExpectHasType","","This expression should have the type given (or some subtype)",558,null],[13,"ExpectCastableToType","","This expression will be cast to the `Ty`",558,null],[13,"ExpectRvalueLikeUnsized","","This rvalue expression will be wrapped in `&amp;` or `Box` and coerced\nto `&amp;Ty` or `Box&lt;Ty&gt;`, respectively. `Ty` is `[A]` or `Trait`.",558,null],[4,"UnresolvedTypeAction","","Whether `autoderef` requires types to resolve.",null,null],[13,"Error","","Produce an error and return `TyError` whenever a type cannot\nbe resolved (i.e. it is `TyInfer`).",559,null],[13,"Ignore","","Go on without emitting any errors, and return the unresolved\ntype. Useful for probing, e.g. in coercions.",559,null],[5,"compare_impl_method","","Checks that a method from an impl conforms to the signature of\nthe same method as declared in the trait.",null,{"inputs":[{"name":"cratectxt"},{"name":"method"},{"name":"span"},{"name":"nodeid"},{"name":"method"},{"name":"traitref"}],"output":null}],[5,"compare_const_impl","","",null,{"inputs":[{"name":"cratectxt"},{"name":"associatedconst"},{"name":"span"},{"name":"associatedconst"},{"name":"traitref"}],"output":null}],[5,"check_wf_new","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_item_types","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_item_bodies","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_drop_impls","","",null,{"inputs":[{"name":"cratectxt"}],"output":{"name":"compileresult"}}],[5,"check_struct","","",null,{"inputs":[{"name":"cratectxt"},{"name":"nodeid"},{"name":"span"}],"output":null}],[5,"check_item_type","","",null,{"inputs":[{"name":"cratectxt"},{"name":"item"}],"output":null}],[5,"check_item_body","","",null,{"inputs":[{"name":"cratectxt"},{"name":"item"}],"output":null}],[5,"check_representable","","Checks whether a type can be represented in memory. In particular, it\nidentifies types that contain themselves without indirection through a\npointer, which would mean their size is unbounded.",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"nodeid"},{"name":"str"}],"output":{"name":"bool"}}],[5,"check_simd","","",null,{"inputs":[{"name":"tyctxt"},{"name":"span"},{"name":"nodeid"}],"output":null}],[5,"check_enum_variants","","",null,null],[5,"may_break","","",null,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"},{"name":"block"}],"output":{"name":"bool"}}],[5,"check_bounds_are_used","","",null,null],[0,"dropck","","",null,null],[5,"check_drop_impl","rustc_typeck::check::dropck","check_drop_impl confirms that the Drop implementation identfied by\n`drop_impl_did` is not any more specialized than the type it is\nattached to (Issue #8142).",null,{"inputs":[{"name":"cratectxt"},{"name":"defid"}],"output":{"name":"result"}}],[5,"check_safety_of_destructor_if_necessary","","check_safety_of_destructor_if_necessary confirms that the type\nexpression `typ` conforms to the &quot;Drop Check Rule&quot; from the Sound\nGeneric Drop (RFC 769).",null,{"inputs":[{"name":"regionctxt"},{"name":"ty"},{"name":"span"},{"name":"codeextent"}],"output":null}],[0,"_match","rustc_typeck::check","",null,null],[3,"PatCtxt","rustc_typeck::check::_match","",null,null],[12,"fcx","","",560,null],[12,"map","","",560,null],[11,"deref","","",560,null],[11,"check_pat","","",560,null],[11,"check_dereferencable","","",560,null],[11,"check_match","rustc_typeck::check","",561,null],[11,"check_pat_struct","rustc_typeck::check::_match","",560,null],[11,"check_struct_pat_fields","","`path` is the AST path item naming the type of this struct.\n`fields` is the field patterns of the struct pattern.\n`struct_fields` describes the type of each field of the struct.\n`struct_id` is the ID of the struct.\n`etc` is true if the pattern said &#39;...&#39; and false otherwise.",560,null],[0,"writeback","rustc_typeck::check","",null,null],[11,"resolve_type_vars_in_expr","","",561,null],[11,"resolve_type_vars_in_fn","","",561,null],[0,"regionck","","The region check is a final pass that runs over the AST after we have\ninferred the type constraints but before we have actually finalized\nthe types.  Its purpose is to embed a variety of region constraints.\nInserting these constraints as a separate pass is good because (1) it\nlocalizes the code that has to do with region inference and (2) often\nwe cannot know what constraints are needed until the basic types have\nbeen inferred.",null,null],[3,"RegionCtxt","rustc_typeck::check::regionck","",null,null],[12,"fcx","","",562,null],[3,"RepeatingScope","","",null,null],[4,"SubjectNode","","",null,null],[13,"Subject","","",563,null],[13,"None","","",563,null],[11,"regionck_expr","rustc_typeck::check","",561,null],[11,"regionck_item","","Region checking during the WF phase for items. `wf_tys` are the\ntypes from which we should derive implied bounds, if any.",561,null],[11,"regionck_fn","","",561,null],[11,"deref","rustc_typeck::check::regionck","",562,null],[11,"new","","",562,{"inputs":[{"name":"fnctxt"},{"name":"repeatingscope"},{"name":"nodeid"},{"name":"subjectnode"}],"output":{"name":"regionctxt"}}],[11,"resolve_type","","Try to resolve the type for the given node, returning t_err if an error results.  Note that\nwe never care about the details of the error, the same error will be detected and reported\nin the writeback phase.",562,null],[11,"resolve_expr_type_adjusted","","Try to resolve the type for the given node.",562,null],[11,"visit_fn","","",562,null],[11,"visit_arm","","",562,null],[11,"visit_local","","",562,null],[11,"visit_expr","","",562,null],[11,"mk_subregion_due_to_dereference","","",562,null],[11,"type_must_outlive","","Ensures that type is well-formed in `region`, which implies (among\nother things) that all borrowed data reachable via `ty` outlives\n`region`.",562,null],[0,"coercion","rustc_typeck::check","# Type Coercion",null,null],[11,"try_coerce","","Attempt to coerce an expression to a type, and return the\nadjusted type of the expression, if successful.\nAdjustments are only recorded if the coercion succeeded.\nThe expressions *must not* have any pre-existing adjustments.",561,null],[11,"try_find_coercion_lub","","Given some expressions, their known unified type and another expression,\ntries to unify the types, potentially inserting coercions on any of the\nprovided expressions and returns their LUB (aka &quot;common supertype&quot;).",561,null],[0,"demand","","",null,null],[11,"demand_suptype","","",561,null],[11,"demand_eqtype","","",561,null],[11,"demand_coerce","","",561,null],[11,"require_same_types","","",561,null],[0,"method","","Method lookup: the secret sauce of Rust. See `README.md`.",null,null],[3,"NoMatchData","rustc_typeck::check::method","",null,null],[12,"static_candidates","","",564,null],[12,"unsatisfied_predicates","","",564,null],[12,"out_of_scope_traits","","",564,null],[12,"mode","","",564,null],[4,"MethodError","","",null,null],[13,"NoMatch","","",565,null],[13,"Ambiguity","","",565,null],[13,"ClosureAmbiguity","","",565,null],[13,"PrivateMatch","","",565,null],[4,"CandidateSource","","",null,null],[13,"ImplSource","","",566,null],[13,"TraitSource","","",566,null],[11,"confirm_method","rustc_typeck::check","",561,null],[11,"probe_method","","",561,null],[11,"report_method_error","","",561,null],[6,"AllTraitsVec","rustc_typeck::check::method","",null,null],[11,"new","","",564,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"mode"}],"output":{"name":"self"}}],[11,"partial_cmp","","",566,null],[11,"lt","","",566,null],[11,"le","","",566,null],[11,"gt","","",566,null],[11,"ge","","",566,null],[11,"eq","","",566,null],[11,"ne","","",566,null],[11,"cmp","","",566,null],[11,"fmt","","",566,null],[11,"clone","","",566,null],[11,"method_exists","rustc_typeck::check","Determines whether the type `self_ty` supports a method name `method_name` or not.",561,null],[11,"lookup_method","","Performs method lookup. If lookup is successful, it will return the callee\nand store an appropriate adjustment for the self-expr. In some cases it may\nreport an error (e.g., invoking the `drop` method).",561,null],[11,"lookup_method_in_trait","","",561,null],[11,"lookup_method_in_trait_adjusted","","`lookup_in_trait_adjusted` is used for overloaded operators.\nIt does a very narrow slice of what the normal probe/confirm path does.\nIn particular, it doesn&#39;t really do any probing: it simply constructs\nan obligation for aparticular trait with the given self-type and checks\nwhether that trait is implemented.",561,null],[11,"resolve_ufcs","","",561,null],[11,"trait_item","","Find item with name `item_name` defined in `trait_def_id`\nand return it, or `None`, if no such item.",561,null],[11,"impl_item","","",561,null],[11,"closure_analyze_fn","","",561,null],[11,"closure_analyze_const","","",561,null],[11,"check_expr_closure","","",561,null],[11,"check_call","","",561,null],[11,"check_binop_assign","","Check a `a &lt;op&gt;= b`",561,null],[11,"check_binop","","Check a potentially overloaded binary operator.",561,null],[11,"check_user_unop","","",561,null],[11,"deref","","",567,null],[11,"fmt","","",558,null],[11,"clone","","",558,null],[11,"clone","","",557,null],[11,"function","","",557,{"inputs":[{"name":"unsafety"},{"name":"nodeid"}],"output":{"name":"unsafetystate"}}],[11,"recurse","","",557,null],[11,"clone","","",561,null],[11,"deref","","",561,null],[11,"inherited","rustc_typeck","",556,null],[11,"eq","rustc_typeck::check","",559,null],[11,"fmt","","",559,null],[11,"clone","","",559,null],[11,"new","","",561,{"inputs":[{"name":"inherited"},{"name":"fnoutput"},{"name":"nodeid"}],"output":{"name":"fnctxt"}}],[11,"param_env","","",561,null],[11,"sess","","",561,null],[11,"err_count_since_creation","","",561,null],[11,"tag","","",561,null],[11,"local_ty","","",561,null],[11,"write_ty","","",561,null],[11,"write_substs","","",561,null],[11,"write_autoderef_adjustment","","",561,null],[11,"write_adjustment","","",561,null],[11,"instantiate_type","","Instantiates the type in `did` with the generics in `path` and returns\nit (registering the necessary trait obligations along the way).",561,null],[11,"def_struct_variant","","Return the dict-like variant corresponding to a given `Def`.",561,null],[11,"write_nil","","",561,null],[11,"write_error","","",561,null],[11,"require_type_meets","","",561,null],[11,"require_type_is_sized","","",561,null],[11,"require_expr_have_sized_type","","",561,null],[11,"register_builtin_bound","","",561,null],[11,"register_predicate","","",561,null],[11,"to_ty","","",561,null],[11,"expr_ty","","",561,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",561,null],[11,"node_ty","","",561,null],[11,"item_substs","","",561,null],[11,"opt_node_ty_substs","","",561,null],[11,"register_region_obligation","","Registers an obligation for checking later, during regionck, that the type `ty` must\noutlive the region `r`.",561,null],[11,"register_wf_obligation","","Registers an obligation for checking later, during regionck, that the type `ty` must\noutlive the region `r`.",561,null],[11,"register_old_wf_obligation","","",561,null],[11,"add_wf_bounds","","Registers obligations that all types appearing in `substs` are well-formed.",561,null],[11,"add_obligations_for_parameters","","Given a fully substituted set of bounds (`generic_bounds`), and the values with which each\ntype/region parameter was instantiated (`substs`), creates and registers suitable\ntrait/region obligations.",561,null],[11,"field_ty","","",561,null],[11,"autoderef","","Executes an autoderef loop for the type `t`. At each step, invokes `should_stop`\nto decide whether to terminate the loop. Returns the final type and number of\nderefs that it performed.",561,null],[11,"check_expr_has_type","","",561,null],[11,"impl_self_ty","","",561,null],[11,"resolve_ty_and_def_ufcs","","",561,null],[11,"check_decl_initializer","","",561,null],[11,"check_decl_local","","",561,null],[11,"check_stmt","","",561,null],[11,"check_block_no_value","","",561,null],[11,"instantiate_path","","",561,null],[11,"structurally_resolved_type","","",561,null],[0,"check_unused","rustc_typeck","",null,null],[5,"check_crate","rustc_typeck::check_unused","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"collect","rustc_typeck","",null,null],[4,"AstConvRequest","rustc_typeck::collect","",null,null],[13,"GetItemTypeScheme","","",568,null],[13,"GetTraitDef","","",568,null],[13,"EnsureSuperPredicates","","",568,null],[13,"GetTypeParameterBounds","","",568,null],[5,"collect_item_types","","",null,{"inputs":[{"name":"cratectxt"}],"output":null}],[11,"eq","","",568,null],[11,"ne","","",568,null],[11,"clone","","",568,null],[0,"coherence","rustc_typeck","",null,null],[5,"check_coherence","rustc_typeck::coherence","",null,{"inputs":[{"name":"cratectxt"}],"output":null}],[0,"variance","rustc_typeck","Module for inferring the variance of type and lifetime\nparameters. See README.md for details.",null,null],[5,"infer_variance","rustc_typeck::variance","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[17,"DIAGNOSTICS","rustc_typeck","",null,null]],"paths":[[4,"DepNode"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFGEdgeData"],[3,"CFG"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[3,"DepGraphQuery"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefIndex"],[3,"DefId"],[4,"FnKind"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[3,"IdVisitor"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"FnLikeNode"],[3,"Item"],[3,"TraitItem"],[3,"Expr"],[4,"Code"],[3,"Definitions"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[4,"Node"],[4,"MapEntry"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"State"],[3,"NoAnn"],[3,"Svh"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[4,"SelfKind"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Bivariate"],[3,"CombineFields"],[3,"InferCtxt"],[4,"Result"],[3,"Equate"],[3,"TyCtxt"],[3,"TraitRef"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[3,"SameRegions"],[3,"RegionVarBindings"],[4,"VarValue"],[4,"Verify"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"IntVid"],[3,"RegionVidKey"],[3,"RegionVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[3,"TyVid"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"InferCtxtBuilder"],[3,"FnSig"],[4,"FnOutput"],[3,"ClosureSubsts"],[4,"LvalueTy"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LateContext"],[3,"EarlyContext"],[3,"GatherNodeLevels"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[3,"ChildItem"],[3,"ExternCrate"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[3,"DataFlowContext"],[4,"KillFrom"],[4,"Linkage"],[3,"FreeRegionMap"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[4,"deref_kind"],[3,"MemCategorizationContext"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[3,"CodeExtent"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[4,"Mutability"],[4,"BorrowKind"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[4,"TerminatorKind"],[3,"Statement"],[4,"StatementKind"],[4,"Lvalue"],[3,"Projection"],[4,"ProjectionElem"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[3,"ScopeData"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[3,"Constant"],[3,"TypedConstVal"],[4,"Literal"],[4,"LvalueContext"],[4,"MirSource"],[3,"Passes"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"TraitErrorKey"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[4,"ProjectionMode"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[3,"SelectionCache"],[4,"MethodMatchedData"],[3,"EvaluationCache"],[3,"SelectionContext"],[4,"MethodMatchResult"],[3,"Graph"],[4,"Node"],[4,"NodeItems"],[3,"Ancestors"],[3,"NodeItem"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"SpecializesCache"],[3,"Obligation"],[4,"Vtable"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[4,"SelectionError"],[3,"SupertraitDefIds"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[4,"AutoAdjustment"],[3,"AutoDerefRef"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[3,"TyS"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[3,"RegionFolder"],[4,"RootMode"],[3,"TargetDataLayout"],[4,"Endian"],[3,"Size"],[3,"Align"],[4,"Integer"],[4,"Primitive"],[3,"Struct"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[3,"TypeAndMut"],[4,"Abi"],[3,"ProjectionTy"],[3,"ProjectionPredicate"],[3,"ExistentialBounds"],[3,"BuiltinBounds"],[4,"Region"],[3,"Rc"],[3,"Box"],[3,"Substs"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"IntType"],[4,"CopyImplementationError"],[4,"Representability"],[3,"ParameterEnvironment"],[3,"TypeContents"],[3,"CtxtArenas"],[3,"Tables"],[4,"Option"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[4,"Predicate"],[3,"ItemSubsts"],[3,"ClosureTy"],[3,"P"],[3,"TraitTy"],[3,"ImplHeader"],[3,"TypeParameterDef"],[4,"ObjectLifetimeDefault"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ClosureUpvar"],[3,"TypeScheme"],[3,"FreeRegion"],[4,"BoundRegion"],[4,"TypeVariants"],[3,"TypeFlags"],[3,"BareFnTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"EarlyBoundRegion"],[3,"SkolemizedRegionVid"],[4,"InferTy"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[4,"BuiltinBound"],[3,"CrateAnalysis"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Visibility"],[3,"Method"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"ItemVariances"],[4,"Variance"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[4,"FragmentInfo"],[3,"UpvarId"],[4,"BorrowKind"],[4,"UpvarCapture"],[3,"UpvarBorrow"],[3,"AdtFlags"],[3,"AdtDefData"],[4,"AdtKind"],[4,"VariantKind"],[3,"VariantDefData"],[3,"FieldDefData"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"Sha256"],[8,"DepTrackingMapConfig"],[8,"Folder"],[8,"Visitor"],[8,"IdVisitingOperation"],[8,"Resolver"],[8,"MaybeFnLike"],[3,"FnParts"],[8,"FoldOps"],[8,"NodePrinter"],[4,"AnnNode"],[8,"PpAnn"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[8,"LintContext"],[3,"FutureIncompatibleInfo"],[8,"Delegate"],[4,"FoundAst"],[8,"CrateStore"],[8,"EncodingContext"],[8,"DecodingContext"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[8,"ast_node"],[3,"Config"],[8,"MemoizationMap"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"Outcome"],[3,"Error"],[3,"ObligationForest"],[3,"SnapshotVec"],[3,"TransitiveRelation"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[3,"VecCell"],[8,"ToPrimitive"],[3,"TempDir"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"],[8,"Digest"],[3,"TypeAndSubsts"],[3,"CrateCtxt"],[3,"UnsafetyState"],[4,"Expectation"],[4,"UnresolvedTypeAction"],[3,"PatCtxt"],[3,"FnCtxt"],[3,"RegionCtxt"],[4,"SubjectNode"],[3,"NoMatchData"],[4,"MethodError"],[4,"CandidateSource"],[3,"Inherited"],[4,"AstConvRequest"]]};
searchIndex["rustc_mir"] = {"doc":"Rust MIR: a lowered representation of Rust. Also: an experiment!","items":[[0,"diagnostics","rustc_mir","",null,null],[0,"build","","",null,null],[3,"Builder","rustc_mir::build","",null,null],[3,"ScopeAuxiliary","","For each scope, we track the extent (from the HIR) and a\nsingle-entry-multiple-exit subgraph that contains all the\nstatements/terminators within it.",null,null],[12,"extent","","extent of this scope from the MIR.",0,null],[12,"dom","","&quot;entry point&quot;: dominator of all nodes in the scope",0,null],[12,"postdoms","","&quot;exit points&quot;: mutual postdominators of all nodes in the scope",0,null],[3,"Location","","",null,null],[12,"block","","the location is within this block",1,null],[12,"statement_index","","the location is the start of the this statement; or, if `statement_index`\n== num-statements, then the start of the terminator.",1,null],[3,"ScopeAuxiliaryVec","","",null,null],[12,"vec","","",2,null],[3,"BlockAnd","","The `BlockAnd` &quot;monad&quot; packages up the new basic block along with a\nproduced value (sometimes just unit, of course). The `unpack!`\nmacro (and methods below) makes working with `BlockAnd` much more\nconvenient.",null,null],[5,"construct_fn","","the main entry point for building MIR for a function",null,null],[5,"construct_const","","",null,null],[11,"ast_block","","",3,null],[11,"as_constant","","Compile `expr`, yielding a compile-time constant. Assumes that\n`expr` is a valid compile-time constant!",3,null],[11,"as_lvalue","","Compile `expr`, yielding an lvalue that we can move from etc.",3,null],[11,"as_rvalue","","Compile `expr`, yielding an rvalue.",3,null],[11,"as_operand","","Compile `expr` into a value that can be used as an operand.\nIf `expr` is an lvalue like `x`, this will introduce a\ntemporary `tmp = x`, so that we capture the value of `x` at\nthis time.",3,null],[11,"as_temp","","Compile `expr` into a fresh temporary. This is used when building\nup rvalues so as to freeze the value that will be consumed.",3,null],[11,"into_expr","","Compile `expr`, storing the result into `destination`, which\nis assumed to be uninitialized.",3,null],[11,"stmt_expr","","",3,null],[11,"into","","",3,null],[11,"simplify_candidate","","",3,null],[11,"test","","Identifies what test is needed to decide if `match_pair` is applicable.",3,null],[11,"add_cases_to_switch","","",3,null],[11,"perform_test","","Generates the code to perform a test.",3,null],[11,"sort_candidate","","Given that we are performing `test` against `test_lvalue`,\nthis job sorts out what the status of `candidate` will be\nafter the test. The `resulting_candidates` vector stores, for\neach possible outcome of `test`, a vector of the candidates\nthat will result. This fn should add a (possibly modified)\nclone of candidate into `resulting_candidates` wherever\nappropriate.",3,null],[11,"field_match_pairs","","",3,null],[11,"prefix_suffix_slice","","When processing an array/slice pattern like `lv @ [x, y, ..s, z]`,\nthis function converts the prefix (`x`, `y`) and suffix (`z`) into\ndistinct match pairs:",3,null],[11,"match_expr","","",3,null],[11,"expr_into_pattern","","",3,null],[11,"lvalue_into_pattern","","",3,null],[11,"declare_bindings","","",3,null],[11,"temp","","Add a new temporary value of type `ty` storing the result of\nevaluating `expr`.",3,null],[11,"literal_operand","","",3,null],[11,"unit_rvalue","","",3,null],[11,"push_usize","","",3,null],[11,"in_loop_scope","","Start a loop scope, which tracks where `continue` and `break`\nshould branch to. See module comment for more details.",3,null],[11,"in_scope","","Convenience wrapper that pushes a scope and then executes `f`\nto build its contents, popping the scope afterwards.",3,null],[11,"push_scope","","Push a scope onto the stack. You can then build code in this\nscope and call `pop_scope` afterwards. Note that these two\ncalls must be paired; using `in_scope` as a convenience\nwrapper maybe preferable.",3,null],[11,"pop_scope","","Pops a scope, which should have extent `extent`, adding any\ndrops onto the end of `block` that are needed.  This must\nmatch 1-to-1 with `push_scope`.",3,null],[11,"exit_scope","","Branch out of `block` to `target`, exiting all scopes up to\nand including `extent`.  This will insert whatever drops are\nneeded, as well as tracking this exit for the SEME region. See\nmodule comment for details.",3,null],[11,"find_loop_scope","","Finds the loop scope for a given label. This is used for\nresolving `break` and `continue`.",3,null],[11,"innermost_scope_id","","",3,null],[11,"extent_of_innermost_scope","","",3,null],[11,"extent_of_return_scope","","Returns the extent of the scope which should be exited by a\nreturn.",3,null],[11,"schedule_drop","","Indicates that `lvalue` should be dropped on exit from\n`extent`.",3,null],[11,"schedule_box_free","","Schedule dropping of a not-yet-fully-initialised box.",3,null],[11,"diverge_cleanup","","Creates a path that performs all required cleanup for unwinding.",3,null],[11,"build_drop","","Utility function for *non*-scope code to build their own drops",3,null],[11,"panic_bounds_check","","",3,null],[11,"panic","","Create diverge cleanup and branch to it from `block`.",3,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[0,"graphviz","rustc_mir","",null,null],[5,"write_mir_graphviz","rustc_mir::graphviz","Write a graphviz DOT graph of a list of MIRs.",null,{"inputs":[{"name":"tyctxt"},{"name":"i"},{"name":"w"}],"output":{"name":"result"}}],[5,"write_node_label","","Write a graphviz HTML-styled label for the given basic block, with\nall necessary escaping already performed. (This is suitable for\nemitting directly, as is done in this module, or for use with the\nLabelText::HtmlStr from libgraphviz.)",null,{"inputs":[{"name":"basicblock"},{"name":"mir"},{"name":"w"},{"name":"u32"},{"name":"init"},{"name":"fini"}],"output":{"name":"result"}}],[0,"mir_map","rustc_mir","An experimental pass that scources for `#[rustc_mir]` attributes,\nbuilds the resulting MIR, and dumps it out into a file for inspection.",null,null],[5,"build_mir_for_crate","rustc_mir::mir_map","",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"mirmap"}}],[0,"pretty","rustc_mir","",null,null],[5,"dump_mir","rustc_mir::pretty","If the session is properly configured, dumps a human-readable\nrepresentation of the mir into:",null,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"display"},{"name":"mirsource"},{"name":"mir"},{"name":"option"}],"output":null}],[5,"write_mir_pretty","","Write out a human-readable textual representation for the given MIR.",null,{"inputs":[{"name":"tyctxt"},{"name":"i"},{"name":"write"}],"output":{"name":"result"}}],[5,"write_mir_fn","","",null,{"inputs":[{"name":"tyctxt"},{"name":"mirsource"},{"name":"mir"},{"name":"write"},{"name":"option"}],"output":{"name":"result"}}],[0,"transform","rustc_mir","",null,null],[0,"remove_dead_blocks","rustc_mir::transform","A pass that erases the contents of dead blocks. This pass must\nrun before any analysis passes because some of the dead blocks\ncan be ill-typed.",null,null],[3,"RemoveDeadBlocks","rustc_mir::transform::remove_dead_blocks","",null,null],[11,"run_pass","","",4,null],[0,"simplify_cfg","rustc_mir::transform","",null,null],[3,"SimplifyCfg","rustc_mir::transform::simplify_cfg","",null,null],[11,"new","","",5,{"inputs":[],"output":{"name":"simplifycfg"}}],[11,"run_pass","","",5,null],[0,"erase_regions","rustc_mir::transform","This pass erases all early-bound regions from the types occuring in the MIR.\nWe want to do this once just before trans, so trans does not have to take\ncare erasing regions all over the place.",null,null],[3,"EraseRegions","rustc_mir::transform::erase_regions","",null,null],[11,"run_pass","","",6,null],[0,"no_landing_pads","rustc_mir::transform","This pass removes the unwind branch of all the terminators when the no-landing-pads option is\nspecified.",null,null],[3,"NoLandingPads","rustc_mir::transform::no_landing_pads","",null,null],[11,"visit_terminator","","",7,null],[11,"run_pass","","",7,null],[0,"type_check","rustc_mir::transform","This pass type-checks the MIR to ensure it is not broken.",null,null],[3,"TypeChecker","rustc_mir::transform::type_check","",null,null],[3,"TypeckMir","","",null,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"run_pass","","",8,null],[11,"dep_node","","",8,null],[0,"break_cleanup_edges","rustc_mir::transform","",null,null],[3,"BreakCleanupEdges","rustc_mir::transform::break_cleanup_edges","",null,null],[11,"run_pass","","",9,null],[0,"promote_consts","rustc_mir::transform","A pass that promotes borrows of constant rvalues.",null,null],[4,"TempState","rustc_mir::transform::promote_consts","State of a temporary during collection and promotion.",null,null],[13,"Undefined","","No references to this temp.",10,null],[13,"Defined","","One direct assignment and any number of direct uses.\nA borrow of this temp is promotable if the assigned\nvalue is qualified as constant.",10,null],[12,"location","rustc_mir::transform::promote_consts::TempState","",10,null],[12,"uses","","",10,null],[13,"Unpromotable","rustc_mir::transform::promote_consts","Any other combination of assignments/uses.",10,null],[13,"PromotedOut","","This temp was part of an rvalue which got extracted\nduring promotion and needs cleanup.",10,null],[4,"Candidate","","A &quot;root candidate&quot; for promotion, which will become the\nreturned value in a promoted MIR, unless it&#39;s a subset\nof a larger candidate.",null,null],[13,"Ref","","Borrow of a constant temporary.",11,null],[13,"ShuffleIndices","","Array of indices found in the third argument of\na call to one of the simd_shuffleN intrinsics.",11,null],[5,"collect_temps","","",null,{"inputs":[{"name":"mir"},{"name":"reversepostorder"}],"output":{"name":"vec"}}],[5,"promote_candidates","","",null,{"inputs":[{"name":"mir"},{"name":"tyctxt"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"is_promotable","","",10,null],[0,"qualify_consts","rustc_mir::transform","A pass that qualifies constness of temporaries in constants,\nstatic initializers and functions and also drives promotion.",null,null],[3,"Qualif","rustc_mir::transform::qualify_consts","",null,null],[3,"QualifyAndPromoteConstants","","",null,null],[11,"hash","","",12,null],[11,"cmp","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[18,"RECURSIVE","rustc_mir::transform","",12,null],[18,"MUTABLE_INTERIOR","","",12,null],[18,"NEEDS_DROP","","",12,null],[18,"FN_ARGUMENT","","",12,null],[18,"STATIC","","",12,null],[18,"STATIC_REF","","",12,null],[18,"NOT_CONST","","",12,null],[18,"NOT_PROMOTABLE","","",12,null],[18,"NEVER_PROMOTE","","",12,null],[18,"CONST_ERROR","","",12,null],[11,"empty","rustc_mir::transform::qualify_consts","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"qualif"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"qualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",12,{"inputs":[{"name":"u8"}],"output":{"name":"qualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,null],[11,"is_all","","Returns `true` if all flags are currently set.",12,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,null],[11,"insert","","Inserts the specified flags in-place.",12,null],[11,"remove","","Removes the specified flags in-place.",12,null],[11,"toggle","","Toggles the specified flags in-place.",12,null],[11,"bitor","","Returns the union of the two sets of flags.",12,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,null],[11,"bitand","","Returns the intersection between the two sets of flags.",12,null],[11,"sub","","Returns the set difference of the two sets of flags.",12,null],[11,"not","","Returns the complement of this set of flags.",12,null],[11,"run_pass","","",13,null],[0,"traversal","rustc_mir","",null,null],[3,"Preorder","rustc_mir::traversal","Preorder traversal of a graph.",null,null],[3,"Postorder","","Postorder traversal of a graph.",null,null],[3,"ReversePostorder","","Reverse postorder traversal of a graph",null,null],[5,"preorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"preorder"}}],[5,"postorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"postorder"}}],[5,"reverse_postorder","","",null,{"inputs":[{"name":"mir"}],"output":{"name":"reversepostorder"}}],[11,"clone","","",14,null],[11,"new","","",14,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"preorder"}}],[11,"next","","",14,null],[11,"new","","",15,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"postorder"}}],[11,"next","","",15,null],[11,"clone","","",16,null],[11,"new","","",16,{"inputs":[{"name":"mir"},{"name":"basicblock"}],"output":{"name":"reversepostorder"}}],[11,"reset","","",16,null],[11,"next","","",16,null]],"paths":[[3,"ScopeAuxiliary"],[3,"Location"],[3,"ScopeAuxiliaryVec"],[3,"Builder"],[3,"RemoveDeadBlocks"],[3,"SimplifyCfg"],[3,"EraseRegions"],[3,"NoLandingPads"],[3,"TypeckMir"],[3,"BreakCleanupEdges"],[4,"TempState"],[4,"Candidate"],[3,"Qualif"],[3,"QualifyAndPromoteConstants"],[3,"Preorder"],[3,"Postorder"],[3,"ReversePostorder"]]};
searchIndex["rustc_const_eval"] = {"doc":"constant evaluation on the HIR and code to validate patterns/matches","items":[[3,"ConstEvalErr","rustc_const_eval","",null,null],[12,"span","","",0,null],[12,"kind","","",0,null],[4,"ErrKind","","",null,null],[13,"CannotCast","","",1,null],[13,"CannotCastTo","","",1,null],[13,"InvalidOpForInts","","",1,null],[13,"InvalidOpForBools","","",1,null],[13,"InvalidOpForFloats","","",1,null],[13,"InvalidOpForIntUint","","",1,null],[13,"InvalidOpForUintInt","","",1,null],[13,"NegateOn","","",1,null],[13,"NotOn","","",1,null],[13,"CallOn","","",1,null],[13,"DivideByZero","","",1,null],[13,"DivideWithOverflow","","",1,null],[13,"ModuloByZero","","",1,null],[13,"ModuloWithOverflow","","",1,null],[13,"ShiftLeftWithOverflow","","",1,null],[13,"ShiftRightWithOverflow","","",1,null],[13,"MissingStructField","","",1,null],[13,"NonConstPath","","",1,null],[13,"UnimplementedConstVal","","",1,null],[13,"UnresolvedPath","","",1,null],[13,"ExpectedConstTuple","","",1,null],[13,"ExpectedConstStruct","","",1,null],[13,"TupleIndexOutOfBounds","","",1,null],[13,"IndexedNonVec","","",1,null],[13,"IndexNegative","","",1,null],[13,"IndexNotInt","","",1,null],[13,"IndexOutOfBounds","","",1,null],[13,"RepeatCountNotNatural","","",1,null],[13,"RepeatCountNotInt","","",1,null],[13,"MiscBinaryOp","","",1,null],[13,"MiscCatchAll","","",1,null],[13,"IndexOpFeatureGated","","",1,null],[13,"Math","","",1,null],[13,"IntermediateUnsignedNegative","","",1,null],[13,"TypeMismatch","","Expected, Got",1,null],[13,"BadType","","",1,null],[13,"ErroneousReferencedConstant","","",1,null],[13,"CharCast","","",1,null],[4,"EvalHint","","Hint to determine how to evaluate constant expressions which\nmight not be type-checked.",null,null],[13,"ExprTypeChecked","","We have a type-checked expression.",2,null],[13,"UncheckedExprHint","","We have an expression which hasn&#39;t been type-checked, but we have\nan idea of what the type will be because of the context. For example,\nthe length of an array is always `usize`. (This is referred to as\na hint because it isn&#39;t guaranteed to be consistent with what\ntype-checking would compute.)",2,null],[13,"UncheckedExprNoHint","","We have an expression which has not yet been type-checked, and\nand we have no clue what the type will be.",2,null],[5,"lookup_const_by_id","","* `def_id` is the id of the constant.\n* `substs` is the monomorphized substitutions for the expression.",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"option"}],"output":{"name":"option"}}],[5,"lookup_const_fn_by_id","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"option"}}],[5,"const_expr_to_pat","","",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"},{"name":"nodeid"},{"name":"span"}],"output":{"name":"result"}}],[5,"eval_const_expr","","",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"}],"output":{"name":"constval"}}],[5,"eval_const_expr_partial","","Evaluate a constant expression in a context where the expression isn&#39;t\nguaranteed to be evaluatable. `ty_hint` is usually ExprTypeChecked,\nbut a few places need to evaluate constants during type-checking, like\ncomputing the length of an array. (See also the FIXME above EvalHint.)",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"},{"name":"evalhint"},{"name":"fnargmap"}],"output":{"name":"evalresult"}}],[5,"compare_const_vals","","",null,{"inputs":[{"name":"constval"},{"name":"constval"}],"output":{"name":"option"}}],[5,"compare_lit_exprs","","",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"},{"name":"expr"}],"output":{"name":"option"}}],[5,"eval_repeat_count","","Returns the repeat count for a repeating vector expression.",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"}],"output":{"name":"usize"}}],[0,"diagnostics","","",null,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"from","","",1,{"inputs":[{"name":"constmatherr"}],"output":{"name":"errkind"}}],[11,"description","","",0,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[0,"check_match","","",null,null],[3,"MatchCheckCtxt","rustc_const_eval::check_match","",null,null],[12,"tcx","","",3,null],[12,"param_env","","",3,null],[3,"StaticInliner","","",null,null],[12,"tcx","","",4,null],[12,"failed","","",4,null],[12,"renaming_map","","",4,null],[4,"Constructor","","",null,null],[13,"Single","","The constructor of all patterns that don&#39;t vary by constructor,\ne.g. struct patterns and fixed-length arrays.",5,null],[13,"Variant","","Enum variants.",5,null],[13,"ConstantValue","","Literal values.",5,null],[13,"ConstantRange","","Ranges of literal values (2..5).",5,null],[13,"Slice","","Array patterns of length n.",5,null],[13,"SliceWithSubslice","","Array patterns with a subslice.",5,null],[5,"check_crate","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"constructor_arity","","This computes the arity of a constructor. The arity of a constructor\nis how many subpattern patterns of that constructor should be expanded to.",null,{"inputs":[{"name":"matchcheckctxt"},{"name":"constructor"},{"name":"ty"}],"output":{"name":"usize"}}],[5,"specialize","","This is the main specialization step. It expands the first pattern in the given row\ninto `arity` patterns based on the constructor. For most patterns, the step is trivial,\nfor instance tuple patterns are flattened and box patterns expand into their inner pattern.",null,null],[17,"DUMMY_WILD_PAT","","",null,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"visit_expr","","",3,null],[11,"visit_local","","",3,null],[11,"visit_fn","","",3,null],[11,"new","","",4,{"inputs":[{"name":"tyctxt"},{"name":"option"}],"output":{"name":"staticinliner"}}],[11,"fold_pat","","",4,null],[6,"FnArgMap","rustc_const_eval","",null,null],[6,"EvalResult","","",null,null],[6,"CastResult","","",null,null],[17,"DIAGNOSTICS","","",null,null]],"paths":[[3,"ConstEvalErr"],[4,"ErrKind"],[4,"EvalHint"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[4,"Constructor"]]};
searchIndex["rustc_incremental"] = {"doc":"Support for serializing the dep-graph and reloading it.","items":[[5,"assert_dep_graph","rustc_incremental","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"load_dep_graph","","If we are in incremental mode, and a previous dep-graph exists,\nthen load up those nodes/edges that are still valid into the\ndep-graph for this session. (This is assumed to be running very\nearly in compilation, before we&#39;ve really done any work, but\nactually it doesn&#39;t matter all that much.) See `README.md` for\nmore general overview.",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[5,"save_dep_graph","","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[11,"calculate_krate_hash","rustc::ty::context","",0,null],[11,"calculate_item_hash","","",0,null],[8,"SvhCalculate","rustc_incremental","",null,null],[10,"calculate_krate_hash","","Calculate the SVH for an entire krate.",1,null],[10,"calculate_item_hash","","Calculate the SVH for a particular item.",1,null]],"paths":[[3,"TyCtxt"],[8,"SvhCalculate"]]};
searchIndex["rustc_save_analysis"] = {"doc":"","items":[[3,"CsvDumper","rustc_save_analysis","",null,null],[3,"JsonDumper","","",null,null],[3,"CrateData","","",null,null],[12,"name","","",0,null],[12,"number","","",0,null],[12,"span","","",0,null],[3,"CratePreludeData","","Data for the prelude of a crate.",null,null],[12,"crate_name","","",1,null],[12,"crate_root","","",1,null],[12,"external_crates","","",1,null],[12,"span","","",1,null],[3,"ExternalCrateData","","Data for external crates in the prelude of a crate.",null,null],[12,"name","","",2,null],[12,"num","","",2,null],[12,"file_name","","",2,null],[3,"EnumData","","Data for enum declarations.",null,null],[12,"id","","",3,null],[12,"name","","",3,null],[12,"value","","",3,null],[12,"qualname","","",3,null],[12,"span","","",3,null],[12,"scope","","",3,null],[3,"ExternCrateData","","Data for extern crates.",null,null],[12,"id","","",4,null],[12,"name","","",4,null],[12,"crate_num","","",4,null],[12,"location","","",4,null],[12,"span","","",4,null],[12,"scope","","",4,null],[3,"FunctionCallData","","Data about a function call.",null,null],[12,"span","","",5,null],[12,"scope","","",5,null],[12,"ref_id","","",5,null],[3,"FunctionData","","Data for all kinds of functions and methods.",null,null],[12,"id","","",6,null],[12,"name","","",6,null],[12,"qualname","","",6,null],[12,"declaration","","",6,null],[12,"span","","",6,null],[12,"scope","","",6,null],[12,"value","","",6,null],[3,"FunctionRefData","","Data about a function call.",null,null],[12,"span","","",7,null],[12,"scope","","",7,null],[12,"ref_id","","",7,null],[3,"ImplData","","",null,null],[12,"id","","",8,null],[12,"span","","",8,null],[12,"scope","","",8,null],[12,"trait_ref","","",8,null],[12,"self_ref","","",8,null],[3,"ImplData2","","",null,null],[12,"id","","",9,null],[12,"span","","",9,null],[12,"scope","","",9,null],[12,"trait_ref","","",9,null],[12,"self_ref","","",9,null],[3,"InheritanceData","","",null,null],[12,"span","","",10,null],[12,"base_id","","",10,null],[12,"deriv_id","","",10,null],[3,"MacroData","","Data about a macro declaration.",null,null],[12,"span","","",11,null],[12,"name","","",11,null],[12,"qualname","","",11,null],[3,"MacroUseData","","Data about a macro use.",null,null],[12,"span","","",12,null],[12,"name","","",12,null],[12,"qualname","","",12,null],[12,"callee_span","","",12,null],[12,"scope","","",12,null],[12,"imported","","",12,null],[3,"MethodCallData","","Data about a method call.",null,null],[12,"span","","",13,null],[12,"scope","","",13,null],[12,"ref_id","","",13,null],[12,"decl_id","","",13,null],[3,"MethodData","","Data for method declarations (methods with a body are treated as functions).",null,null],[12,"id","","",14,null],[12,"name","","",14,null],[12,"qualname","","",14,null],[12,"span","","",14,null],[12,"scope","","",14,null],[12,"value","","",14,null],[3,"ModData","","Data for modules.",null,null],[12,"id","","",15,null],[12,"name","","",15,null],[12,"qualname","","",15,null],[12,"span","","",15,null],[12,"scope","","",15,null],[12,"filename","","",15,null],[3,"ModRefData","","Data for a reference to a module.",null,null],[12,"span","","",16,null],[12,"scope","","",16,null],[12,"ref_id","","",16,null],[12,"qualname","","",16,null],[3,"StructData","","",null,null],[12,"span","","",17,null],[12,"name","","",17,null],[12,"id","","",17,null],[12,"ctor_id","","",17,null],[12,"qualname","","",17,null],[12,"scope","","",17,null],[12,"value","","",17,null],[3,"StructVariantData","","",null,null],[12,"span","","",18,null],[12,"name","","",18,null],[12,"id","","",18,null],[12,"qualname","","",18,null],[12,"type_value","","",18,null],[12,"value","","",18,null],[12,"scope","","",18,null],[3,"TraitData","","",null,null],[12,"span","","",19,null],[12,"id","","",19,null],[12,"name","","",19,null],[12,"qualname","","",19,null],[12,"scope","","",19,null],[12,"value","","",19,null],[3,"TupleVariantData","","",null,null],[12,"span","","",20,null],[12,"id","","",20,null],[12,"name","","",20,null],[12,"qualname","","",20,null],[12,"type_value","","",20,null],[12,"value","","",20,null],[12,"scope","","",20,null],[3,"TypeDefData","","Data for a typedef.",null,null],[12,"id","","",21,null],[12,"name","","",21,null],[12,"span","","",21,null],[12,"qualname","","",21,null],[12,"value","","",21,null],[3,"TypeRefData","","Data for a reference to a type or trait.",null,null],[12,"span","","",22,null],[12,"scope","","",22,null],[12,"ref_id","","",22,null],[12,"qualname","","",22,null],[3,"UseData","","",null,null],[12,"id","","",23,null],[12,"span","","",23,null],[12,"name","","",23,null],[12,"mod_id","","",23,null],[12,"scope","","",23,null],[3,"UseGlobData","","",null,null],[12,"id","","",24,null],[12,"span","","",24,null],[12,"names","","",24,null],[12,"scope","","",24,null],[3,"VariableData","","Data for local and global variables (consts and statics).",null,null],[12,"id","","",25,null],[12,"name","","",25,null],[12,"qualname","","",25,null],[12,"span","","",25,null],[12,"scope","","",25,null],[12,"value","","",25,null],[12,"type_value","","",25,null],[3,"VariableRefData","","Data for the use of some item (e.g., the use of a local variable, which\nwill refer to that variables declaration (by ref_id)).",null,null],[12,"name","","",26,null],[12,"span","","",26,null],[12,"scope","","",26,null],[12,"ref_id","","",26,null],[3,"DumpVisitor","","",null,null],[3,"SaveContext","","",null,null],[4,"Data","","Data for any entity in the Rust language. The actual data contained varies\nwith the kind of entity being queried. See the nested structs for details.",null,null],[13,"EnumData","","Data for Enums.",27,null],[13,"ExternCrateData","","Data for extern crates.",27,null],[13,"FunctionCallData","","Data about a function call.",27,null],[13,"FunctionData","","Data for all kinds of functions and methods.",27,null],[13,"FunctionRefData","","Data about a function ref.",27,null],[13,"ImplData","","Data for impls.",27,null],[13,"InheritanceData","","Data for trait inheritance.",27,null],[13,"MacroData","","Data about a macro declaration.",27,null],[13,"MacroUseData","","Data about a macro use.",27,null],[13,"MethodCallData","","Data about a method call.",27,null],[13,"MethodData","","Data for method declarations (methods with a body are treated as functions).",27,null],[13,"ModData","","Data for modules.",27,null],[13,"ModRefData","","Data for a reference to a module.",27,null],[13,"StructData","","Data for a struct declaration.",27,null],[13,"StructVariantDat","","Data for a struct variant.",27,null],[13,"TraitData","","Data for a trait declaration.",27,null],[13,"TupleVariantData","","Data for a tuple variant.",27,null],[13,"TypeDefData","","Data for a typedef.",27,null],[13,"TypeRefData","","Data for a reference to a type or trait.",27,null],[13,"UseData","","Data for a use statement.",27,null],[13,"UseGlobData","","Data for a global use statement.",27,null],[13,"VariableData","","Data for local and global variables (consts and statics), and fields.",27,null],[13,"VariableRefData","","Data for the use of some variable (e.g., the use of a local variable, which\nwill refere to that variables declaration).",27,null],[4,"Format","","",null,null],[13,"Csv","","",28,null],[13,"Json","","",28,null],[5,"process_crate","","",null,{"inputs":[{"name":"tyctxt"},{"name":"crate"},{"name":"crateanalysis"},{"name":"str"},{"name":"option"},{"name":"format"}],"output":null}],[5,"generated_code","","",null,{"inputs":[{"name":"span"}],"output":{"name":"bool"}}],[11,"new","","",29,{"inputs":[{"name":"w"}],"output":{"name":"csvdumper"}}],[11,"crate_prelude","","",29,null],[11,"enum_data","","",29,null],[11,"extern_crate","","",29,null],[11,"impl_data","","",29,null],[11,"inheritance","","",29,null],[11,"function","","",29,null],[11,"function_ref","","",29,null],[11,"function_call","","",29,null],[11,"method","","",29,null],[11,"method_call","","",29,null],[11,"macro_data","","",29,null],[11,"macro_use","","",29,null],[11,"mod_data","","",29,null],[11,"mod_ref","","",29,null],[11,"struct_data","","",29,null],[11,"struct_variant","","",29,null],[11,"trait_data","","",29,null],[11,"tuple_variant","","",29,null],[11,"type_ref","","",29,null],[11,"typedef","","",29,null],[11,"use_data","","",29,null],[11,"use_glob","","",29,null],[11,"variable","","",29,null],[11,"variable_ref","","",29,null],[11,"new","","",30,{"inputs":[{"name":"w"}],"output":{"name":"jsondumper"}}],[11,"drop","","",30,null],[11,"crate_prelude","","",30,null],[11,"extern_crate","","",30,null],[11,"use_data","","",30,null],[11,"use_glob","","",30,null],[11,"enum_data","","",30,null],[11,"tuple_variant","","",30,null],[11,"struct_variant","","",30,null],[11,"struct_data","","",30,null],[11,"trait_data","","",30,null],[11,"function","","",30,null],[11,"method","","",30,null],[11,"macro_data","","",30,null],[11,"mod_data","","",30,null],[11,"typedef","","",30,null],[11,"variable","","",30,null],[11,"function_ref","","",30,null],[11,"function_call","","",30,null],[11,"method_call","","",30,null],[11,"mod_ref","","",30,null],[11,"type_ref","","",30,null],[11,"variable_ref","","",30,null],[11,"macro_use","","",30,null],[11,"impl_data","","",30,null],[11,"inheritance","","",30,null],[11,"encode","","",27,null],[11,"fmt","","",27,null],[11,"encode","","",1,null],[11,"fmt","","",1,null],[11,"encode","","",2,null],[11,"fmt","","",2,null],[11,"encode","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"encode","","",4,null],[11,"fmt","","",4,null],[11,"encode","","",5,null],[11,"fmt","","",5,null],[11,"encode","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"encode","","",7,null],[11,"fmt","","",7,null],[11,"encode","","",8,null],[11,"fmt","","",8,null],[11,"encode","","",9,null],[11,"fmt","","",9,null],[11,"encode","","",10,null],[11,"fmt","","",10,null],[11,"encode","","",11,null],[11,"fmt","","",11,null],[11,"encode","","",12,null],[11,"fmt","","",12,null],[11,"encode","","",13,null],[11,"fmt","","",13,null],[11,"encode","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",14,null],[11,"encode","","",15,null],[11,"fmt","","",15,null],[11,"encode","","",16,null],[11,"fmt","","",16,null],[11,"encode","","",17,null],[11,"fmt","","",17,null],[11,"encode","","",18,null],[11,"fmt","","",18,null],[11,"encode","","",19,null],[11,"fmt","","",19,null],[11,"encode","","",20,null],[11,"fmt","","",20,null],[11,"encode","","",21,null],[11,"fmt","","",21,null],[11,"encode","","",22,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"encode","","",23,null],[11,"fmt","","",23,null],[11,"encode","","",24,null],[11,"fmt","","",24,null],[11,"encode","","",25,null],[11,"fmt","","",25,null],[11,"encode","","",26,null],[11,"fmt","","",26,null],[11,"new","","",31,{"inputs":[{"name":"tyctxt"},{"name":"savecontext"},{"name":"crateanalysis"},{"name":"d"}],"output":{"name":"dumpvisitor"}}],[11,"dump_crate_info","","",31,null],[11,"visit_item","","",31,null],[11,"visit_generics","","",31,null],[11,"visit_trait_item","","",31,null],[11,"visit_impl_item","","",31,null],[11,"visit_ty","","",31,null],[11,"visit_expr","","",31,null],[11,"visit_mac","","",31,null],[11,"visit_pat","","",31,null],[11,"visit_arm","","",31,null],[11,"visit_stmt","","",31,null],[11,"visit_local","","",31,null],[0,"external_data","","",null,null],[3,"SpanData","rustc_save_analysis::external_data","",null,null],[12,"file_name","","",32,null],[12,"byte_start","","",32,null],[12,"byte_end","","",32,null],[12,"line_start","","1-based.",32,null],[12,"line_end","","",32,null],[12,"column_start","","1-based, character offset.",32,null],[12,"column_end","","",32,null],[3,"CratePreludeData","","",null,null],[12,"crate_name","","",33,null],[12,"crate_root","","",33,null],[12,"external_crates","","",33,null],[12,"span","","",33,null],[3,"EnumData","","Data for enum declarations.",null,null],[12,"id","","",34,null],[12,"value","","",34,null],[12,"name","","",34,null],[12,"qualname","","",34,null],[12,"span","","",34,null],[12,"scope","","",34,null],[3,"ExternCrateData","","Data for extern crates.",null,null],[12,"id","","",35,null],[12,"name","","",35,null],[12,"crate_num","","",35,null],[12,"location","","",35,null],[12,"span","","",35,null],[12,"scope","","",35,null],[3,"FunctionCallData","","Data about a function call.",null,null],[12,"span","","",36,null],[12,"scope","","",36,null],[12,"ref_id","","",36,null],[3,"FunctionData","","Data for all kinds of functions and methods.",null,null],[12,"id","","",37,null],[12,"name","","",37,null],[12,"qualname","","",37,null],[12,"declaration","","",37,null],[12,"span","","",37,null],[12,"scope","","",37,null],[12,"value","","",37,null],[3,"FunctionRefData","","Data about a function call.",null,null],[12,"span","","",38,null],[12,"scope","","",38,null],[12,"ref_id","","",38,null],[3,"ImplData","","",null,null],[12,"id","","",39,null],[12,"span","","",39,null],[12,"scope","","",39,null],[12,"trait_ref","","",39,null],[12,"self_ref","","",39,null],[3,"InheritanceData","","",null,null],[12,"span","","",40,null],[12,"base_id","","",40,null],[12,"deriv_id","","",40,null],[3,"MacroData","","Data about a macro declaration.",null,null],[12,"span","","",41,null],[12,"name","","",41,null],[12,"qualname","","",41,null],[3,"MacroUseData","","Data about a macro use.",null,null],[12,"span","","",42,null],[12,"name","","",42,null],[12,"qualname","","",42,null],[12,"callee_span","","",42,null],[12,"scope","","",42,null],[3,"MethodCallData","","Data about a method call.",null,null],[12,"span","","",43,null],[12,"scope","","",43,null],[12,"ref_id","","",43,null],[12,"decl_id","","",43,null],[3,"MethodData","","Data for method declarations (methods with a body are treated as functions).",null,null],[12,"id","","",44,null],[12,"name","","",44,null],[12,"qualname","","",44,null],[12,"span","","",44,null],[12,"scope","","",44,null],[12,"value","","",44,null],[3,"ModData","","Data for modules.",null,null],[12,"id","","",45,null],[12,"name","","",45,null],[12,"qualname","","",45,null],[12,"span","","",45,null],[12,"scope","","",45,null],[12,"filename","","",45,null],[3,"ModRefData","","Data for a reference to a module.",null,null],[12,"span","","",46,null],[12,"scope","","",46,null],[12,"ref_id","","",46,null],[12,"qualname","","",46,null],[3,"StructData","","",null,null],[12,"span","","",47,null],[12,"name","","",47,null],[12,"id","","",47,null],[12,"ctor_id","","",47,null],[12,"qualname","","",47,null],[12,"scope","","",47,null],[12,"value","","",47,null],[3,"StructVariantData","","",null,null],[12,"span","","",48,null],[12,"name","","",48,null],[12,"id","","",48,null],[12,"qualname","","",48,null],[12,"type_value","","",48,null],[12,"value","","",48,null],[12,"scope","","",48,null],[3,"TraitData","","",null,null],[12,"span","","",49,null],[12,"name","","",49,null],[12,"id","","",49,null],[12,"qualname","","",49,null],[12,"scope","","",49,null],[12,"value","","",49,null],[3,"TupleVariantData","","",null,null],[12,"span","","",50,null],[12,"id","","",50,null],[12,"name","","",50,null],[12,"qualname","","",50,null],[12,"type_value","","",50,null],[12,"value","","",50,null],[12,"scope","","",50,null],[3,"TypeDefData","","Data for a typedef.",null,null],[12,"id","","",51,null],[12,"name","","",51,null],[12,"span","","",51,null],[12,"qualname","","",51,null],[12,"value","","",51,null],[3,"TypeRefData","","Data for a reference to a type or trait.",null,null],[12,"span","","",52,null],[12,"scope","","",52,null],[12,"ref_id","","",52,null],[12,"qualname","","",52,null],[3,"UseData","","",null,null],[12,"id","","",53,null],[12,"span","","",53,null],[12,"name","","",53,null],[12,"mod_id","","",53,null],[12,"scope","","",53,null],[3,"UseGlobData","","",null,null],[12,"id","","",54,null],[12,"span","","",54,null],[12,"names","","",54,null],[12,"scope","","",54,null],[3,"VariableData","","Data for local and global variables (consts and statics).",null,null],[12,"id","","",55,null],[12,"name","","",55,null],[12,"qualname","","",55,null],[12,"span","","",55,null],[12,"scope","","",55,null],[12,"value","","",55,null],[12,"type_value","","",55,null],[3,"VariableRefData","","Data for the use of some item (e.g., the use of a local variable, which\nwill refer to that variables declaration (by ref_id)).",null,null],[12,"name","","",56,null],[12,"span","","",56,null],[12,"scope","","",56,null],[12,"ref_id","","",56,null],[5,"null_def_id","","",null,{"inputs":[],"output":{"name":"defid"}}],[8,"Lower","","",null,null],[16,"Target","","",57,null],[10,"lower","","",57,null],[11,"encode","","",32,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"from_span","","",32,{"inputs":[{"name":"span"},{"name":"codemap"}],"output":{"name":"spandata"}}],[11,"encode","","",33,null],[11,"fmt","","",33,null],[11,"lower","rustc_save_analysis","",1,null],[11,"encode","rustc_save_analysis::external_data","",34,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"lower","rustc_save_analysis","",3,null],[11,"encode","rustc_save_analysis::external_data","",35,null],[11,"fmt","","",35,null],[11,"lower","rustc_save_analysis","",4,null],[11,"encode","rustc_save_analysis::external_data","",36,null],[11,"fmt","","",36,null],[11,"lower","rustc_save_analysis","",5,null],[11,"encode","rustc_save_analysis::external_data","",37,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"lower","rustc_save_analysis","",6,null],[11,"encode","rustc_save_analysis::external_data","",38,null],[11,"fmt","","",38,null],[11,"lower","rustc_save_analysis","",7,null],[11,"encode","rustc_save_analysis::external_data","",39,null],[11,"fmt","","",39,null],[11,"lower","rustc_save_analysis","",8,null],[11,"encode","rustc_save_analysis::external_data","",40,null],[11,"fmt","","",40,null],[11,"lower","rustc_save_analysis","",10,null],[11,"encode","rustc_save_analysis::external_data","",41,null],[11,"fmt","","",41,null],[11,"lower","rustc_save_analysis","",11,null],[11,"encode","rustc_save_analysis::external_data","",42,null],[11,"fmt","","",42,null],[11,"lower","rustc_save_analysis","",12,null],[11,"encode","rustc_save_analysis::external_data","",43,null],[11,"fmt","","",43,null],[11,"lower","rustc_save_analysis","",13,null],[11,"encode","rustc_save_analysis::external_data","",44,null],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"lower","rustc_save_analysis","",14,null],[11,"encode","rustc_save_analysis::external_data","",45,null],[11,"fmt","","",45,null],[11,"lower","rustc_save_analysis","",15,null],[11,"encode","rustc_save_analysis::external_data","",46,null],[11,"fmt","","",46,null],[11,"lower","rustc_save_analysis","",16,null],[11,"encode","rustc_save_analysis::external_data","",47,null],[11,"fmt","","",47,null],[11,"lower","rustc_save_analysis","",17,null],[11,"encode","rustc_save_analysis::external_data","",48,null],[11,"fmt","","",48,null],[11,"lower","rustc_save_analysis","",18,null],[11,"encode","rustc_save_analysis::external_data","",49,null],[11,"fmt","","",49,null],[11,"lower","rustc_save_analysis","",19,null],[11,"encode","rustc_save_analysis::external_data","",50,null],[11,"fmt","","",50,null],[11,"lower","rustc_save_analysis","",20,null],[11,"encode","rustc_save_analysis::external_data","",51,null],[11,"fmt","","",51,null],[11,"lower","rustc_save_analysis","",21,null],[11,"encode","rustc_save_analysis::external_data","",52,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"lower","rustc_save_analysis","",22,null],[11,"encode","rustc_save_analysis::external_data","",53,null],[11,"fmt","","",53,null],[11,"lower","rustc_save_analysis","",23,null],[11,"encode","rustc_save_analysis::external_data","",54,null],[11,"fmt","","",54,null],[11,"lower","rustc_save_analysis","",24,null],[11,"encode","rustc_save_analysis::external_data","",55,null],[11,"fmt","","",55,null],[11,"lower","rustc_save_analysis","",25,null],[11,"encode","rustc_save_analysis::external_data","",56,null],[11,"fmt","","",56,null],[11,"lower","rustc_save_analysis","",26,null],[0,"span_utils","","",null,null],[3,"SpanUtils","rustc_save_analysis::span_utils","",null,null],[12,"sess","","",58,null],[12,"err_count","","",58,null],[11,"clone","","",58,null],[11,"new","","",58,{"inputs":[{"name":"session"}],"output":{"name":"spanutils"}}],[11,"make_path_string","","",58,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"make_sub_span","","",58,null],[11,"snippet","","",58,null],[11,"retokenise_span","","",58,null],[11,"span_for_last_ident","","",58,null],[11,"span_for_first_ident","","",58,null],[11,"sub_span_for_meth_name","","",58,null],[11,"sub_span_for_type_name","","",58,null],[11,"spans_with_brackets","","",58,null],[11,"sub_span_before_token","","",58,null],[11,"sub_span_of_token","","",58,null],[11,"sub_span_after_keyword","","",58,null],[11,"sub_span_after_token","","",58,null],[11,"spans_for_path_segments","","",58,null],[11,"spans_for_ty_params","","",58,null],[11,"report_span_err","","",58,null],[11,"span_for_macro_def_name","","",58,null],[11,"span_for_macro_use_name","","",58,null],[11,"filter_generated","","Return true if the span is generated code, and\nit is not a subspan of the root callsite.",58,null],[0,"recorder","rustc_save_analysis","",null,null],[4,"Row","rustc_save_analysis::recorder","",null,null],[13,"TypeRef","","",59,null],[13,"ModRef","","",59,null],[13,"VarRef","","",59,null],[13,"FnRef","","",59,null],[11,"eq","","",59,null],[11,"fmt","","",59,null],[11,"clone","","",59,null],[8,"Dump","rustc_save_analysis","",null,null],[11,"crate_prelude","","",60,null],[11,"enum_data","","",60,null],[11,"extern_crate","","",60,null],[11,"impl_data","","",60,null],[11,"inheritance","","",60,null],[11,"function","","",60,null],[11,"function_ref","","",60,null],[11,"function_call","","",60,null],[11,"method","","",60,null],[11,"method_call","","",60,null],[11,"macro_data","","",60,null],[11,"macro_use","","",60,null],[11,"mod_data","","",60,null],[11,"mod_ref","","",60,null],[11,"struct_data","","",60,null],[11,"struct_variant","","",60,null],[11,"trait_data","","",60,null],[11,"tuple_variant","","",60,null],[11,"type_ref","","",60,null],[11,"typedef","","",60,null],[11,"use_data","","",60,null],[11,"use_glob","","",60,null],[11,"variable","","",60,null],[11,"variable_ref","","",60,null],[11,"new","","",61,{"inputs":[{"name":"tyctxt"}],"output":{"name":"savecontext"}}],[11,"from_span_utils","","",61,{"inputs":[{"name":"tyctxt"},{"name":"spanutils"}],"output":{"name":"savecontext"}}],[11,"get_external_crates","","",61,null],[11,"get_item_data","","",61,null],[11,"get_field_data","","",61,null],[11,"get_method_data","","",61,null],[11,"get_trait_ref_data","","",61,null],[11,"get_expr_data","","",61,null],[11,"get_path_data","","",61,null],[11,"get_field_ref_data","","",61,null],[11,"get_macro_use_data","","Attempt to return MacroUseData for any AST node.",61,null],[11,"get_data_for_id","","",61,null],[11,"enclosing_scope","","",61,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"crate_prelude","","",60,null],[11,"enum_data","","",60,null],[11,"extern_crate","","",60,null],[11,"impl_data","","",60,null],[11,"inheritance","","",60,null],[11,"function","","",60,null],[11,"function_ref","","",60,null],[11,"function_call","","",60,null],[11,"method","","",60,null],[11,"method_call","","",60,null],[11,"macro_data","","",60,null],[11,"macro_use","","",60,null],[11,"mod_data","","",60,null],[11,"mod_ref","","",60,null],[11,"struct_data","","",60,null],[11,"struct_variant","","",60,null],[11,"trait_data","","",60,null],[11,"tuple_variant","","",60,null],[11,"type_ref","","",60,null],[11,"typedef","","",60,null],[11,"use_data","","",60,null],[11,"use_glob","","",60,null],[11,"variable","","",60,null],[11,"variable_ref","","",60,null]],"paths":[[3,"CrateData"],[3,"CratePreludeData"],[3,"ExternalCrateData"],[3,"EnumData"],[3,"ExternCrateData"],[3,"FunctionCallData"],[3,"FunctionData"],[3,"FunctionRefData"],[3,"ImplData"],[3,"ImplData2"],[3,"InheritanceData"],[3,"MacroData"],[3,"MacroUseData"],[3,"MethodCallData"],[3,"MethodData"],[3,"ModData"],[3,"ModRefData"],[3,"StructData"],[3,"StructVariantData"],[3,"TraitData"],[3,"TupleVariantData"],[3,"TypeDefData"],[3,"TypeRefData"],[3,"UseData"],[3,"UseGlobData"],[3,"VariableData"],[3,"VariableRefData"],[4,"Data"],[4,"Format"],[3,"CsvDumper"],[3,"JsonDumper"],[3,"DumpVisitor"],[3,"SpanData"],[3,"CratePreludeData"],[3,"EnumData"],[3,"ExternCrateData"],[3,"FunctionCallData"],[3,"FunctionData"],[3,"FunctionRefData"],[3,"ImplData"],[3,"InheritanceData"],[3,"MacroData"],[3,"MacroUseData"],[3,"MethodCallData"],[3,"MethodData"],[3,"ModData"],[3,"ModRefData"],[3,"StructData"],[3,"StructVariantData"],[3,"TraitData"],[3,"TupleVariantData"],[3,"TypeDefData"],[3,"TypeRefData"],[3,"UseData"],[3,"UseGlobData"],[3,"VariableData"],[3,"VariableRefData"],[8,"Lower"],[3,"SpanUtils"],[4,"Row"],[8,"Dump"],[3,"SaveContext"]]};
searchIndex["rustc_metadata"] = {"doc":"","items":[[0,"middle","rustc_metadata","",null,null],[0,"astconv_util","rustc_metadata::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used.",null,null],[11,"graph_id","rustc::cfg::graphviz","",0,null],[11,"node_id","","",0,null],[11,"node_label","","",0,null],[11,"edge_label","","",0,null],[11,"nodes","","",0,null],[11,"edges","","",0,null],[11,"source","","",0,null],[11,"target","","",0,null],[11,"eq","rustc::cfg","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"id","","",1,null],[11,"fmt","","",2,null],[11,"new","","",3,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",3,null],[11,"decode","rustc::dep_graph::dep_node","",4,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",4,null],[11,"hash","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"from_label_string","","Used in testing",4,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",4,null],[11,"new","rustc::dep_graph::dep_tracking_map","",5,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",5,null],[11,"insert","","",5,null],[11,"contains_key","","",5,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",6,null],[11,"index","rustc::dep_graph::dep_tracking_map","",5,null],[11,"clone","rustc::dep_graph::graph","",7,null],[11,"new","","",7,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",7,null],[11,"query","","",7,null],[11,"in_ignore","","",7,null],[11,"in_task","","",7,null],[11,"with_ignore","","",7,null],[11,"with_task","","",7,null],[11,"read","","",7,null],[11,"write","","",7,null],[11,"new","rustc::dep_graph::query","",8,null],[11,"contains_node","","",8,null],[11,"nodes","","",8,null],[11,"edges","","",8,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",8,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",8,null],[11,"fmt","rustc::hir::def","",9,null],[11,"hash","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",10,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",10,null],[11,"new","","",10,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",11,null],[11,"var_id","","",9,null],[11,"def_id","","",9,null],[11,"variant_def_ids","","",9,null],[11,"kind_name","","",9,null],[11,"hash","rustc::hir::def_id","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"new","","",12,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",12,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",12,null],[11,"as_u32","","",12,null],[11,"hash","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"cmp","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"local","","",13,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",13,null],[11,"eq","rustc::hir::intravisit","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"attrs","","",14,null],[11,"fmt","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"clone","","",15,null],[11,"max","","",15,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",15,null],[11,"add","","",15,null],[11,"new","","",16,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",16,null],[11,"visit_id","","",16,null],[11,"new","","",17,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",17,null],[11,"visit_foreign_item","","",17,null],[11,"visit_item","","",17,null],[11,"visit_local","","",17,null],[11,"visit_block","","",17,null],[11,"visit_stmt","","",17,null],[11,"visit_pat","","",17,null],[11,"visit_expr","","",17,null],[11,"visit_ty","","",17,null],[11,"visit_generics","","",17,null],[11,"visit_fn","","",17,null],[11,"visit_struct_field","","",17,null],[11,"visit_variant_data","","",17,null],[11,"visit_trait_item","","",17,null],[11,"visit_impl_item","","",17,null],[11,"visit_lifetime","","",17,null],[11,"visit_lifetime_def","","",17,null],[11,"visit_trait_ref","","",17,null],[11,"resolve_generated_global_path","rustc::hir::lowering","",18,null],[11,"get_resolution","","",18,null],[11,"record_resolution","","",18,null],[11,"definitions","","",18,null],[11,"testing_context","","",19,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"loweringcontext"}}],[11,"lower_item","","",19,null],[11,"clone","rustc::hir::map::blocks","",20,null],[11,"is_fn_like","rustc::hir","",21,null],[11,"is_fn_like","","",22,null],[11,"is_fn_like","","",23,null],[11,"clone","rustc::hir::map::blocks","",24,null],[11,"id","","",24,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",24,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",20,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",20,null],[11,"body","","",20,null],[11,"decl","","",20,null],[11,"span","","",20,null],[11,"id","","",20,null],[11,"kind","","",20,null],[11,"clone","rustc::hir::map::definitions","",25,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"hash","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"fmt","","",26,null],[11,"clone","","",26,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"hash","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"hash","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"is_local","","",29,null],[11,"make","","",29,{"inputs":[{"name":"u32"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"hash","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"new","","",25,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",25,null],[11,"def_key","","",25,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",25,null],[11,"opt_def_index","","",25,null],[11,"opt_local_def_id","","",25,null],[11,"local_def_id","","",25,null],[11,"as_local_node_id","","",25,null],[11,"retrace_path","","",25,null],[11,"create_def_with_parent","","",25,null],[11,"as_interned_str","","",31,null],[11,"to_string","","",31,null],[11,"fmt","rustc::hir::map","",32,null],[11,"clone","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"new","","",34,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",34,null],[11,"clone","","",35,null],[11,"num_local_def_ids","","",35,null],[11,"def_key","","",35,null],[11,"def_path_from_id","","",35,null],[11,"def_path","","",35,null],[11,"retrace_path","","",35,null],[11,"local_def_id","","",35,null],[11,"opt_local_def_id","","",35,null],[11,"as_local_node_id","","",35,null],[11,"krate","","",35,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",35,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",35,null],[11,"get_if_local","","",35,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",35,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",35,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",35,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",35,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",35,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",35,null],[11,"get_parent_did","","",35,null],[11,"get_foreign_abi","","",35,null],[11,"expect_item","","",35,null],[11,"expect_trait_item","","",35,null],[11,"expect_struct","","",35,null],[11,"expect_variant","","",35,null],[11,"expect_foreign_item","","",35,null],[11,"expect_expr","","",35,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",35,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",35,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",35,null],[11,"opt_span","","",35,null],[11,"span","","",35,null],[11,"span_if_local","","",35,null],[11,"def_id_span","","",35,null],[11,"node_to_string","","",35,null],[11,"node_to_user_string","","",35,null],[11,"next","","",36,null],[11,"print_node","rustc::hir::print","",37,null],[11,"clone","","",38,null],[11,"writer","","",37,null],[11,"boxes","","",37,null],[11,"comments","","",37,null],[11,"cur_cmnt_and_lit","","",37,null],[11,"literals","","",37,null],[11,"new_from_input","","",37,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",37,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",37,null],[11,"nbsp","","",37,null],[11,"word_nbsp","","",37,null],[11,"head","","",37,null],[11,"bopen","","",37,null],[11,"bclose_","","",37,null],[11,"bclose_maybe_open","","",37,null],[11,"bclose","","",37,null],[11,"in_cbox","","",37,null],[11,"space_if_not_bol","","",37,null],[11,"break_offset_if_not_bol","","",37,null],[11,"synth_comment","","",37,null],[11,"commasep_cmnt","","",37,null],[11,"commasep_exprs","","",37,null],[11,"print_mod","","",37,null],[11,"print_foreign_mod","","",37,null],[11,"print_opt_lifetime","","",37,null],[11,"print_type","","",37,null],[11,"print_foreign_item","","",37,null],[11,"print_item_id","","",37,null],[11,"print_item","","Pretty-print an item",37,null],[11,"print_enum_def","","",37,null],[11,"print_variants","","",37,null],[11,"print_visibility","","",37,null],[11,"print_struct","","",37,null],[11,"print_variant","","",37,null],[11,"print_method_sig","","",37,null],[11,"print_trait_item","","",37,null],[11,"print_impl_item","","",37,null],[11,"print_stmt","","",37,null],[11,"print_block","","",37,null],[11,"print_block_unclosed","","",37,null],[11,"print_block_unclosed_indent","","",37,null],[11,"print_block_with_attrs","","",37,null],[11,"print_block_maybe_unclosed","","",37,null],[11,"print_if","","",37,null],[11,"print_if_let","","",37,null],[11,"print_expr_maybe_paren","","",37,null],[11,"print_expr","","",37,null],[11,"print_local_decl","","",37,null],[11,"print_decl","","",37,null],[11,"print_usize","","",37,null],[11,"print_name","","",37,null],[11,"print_for_decl","","",37,null],[11,"print_pat","","",37,null],[11,"print_fn","","",37,null],[11,"print_fn_args_and_ret","","",37,null],[11,"print_fn_block_args","","",37,null],[11,"print_capture_clause","","",37,null],[11,"print_bounds","","",37,null],[11,"print_lifetime","","",37,null],[11,"print_lifetime_def","","",37,null],[11,"print_generics","","",37,null],[11,"print_ty_param","","",37,null],[11,"print_where_clause","","",37,null],[11,"print_view_path","","",37,null],[11,"print_mutability","","",37,null],[11,"print_mt","","",37,null],[11,"print_arg","","",37,null],[11,"print_fn_output","","",37,null],[11,"print_ty_fn","","",37,null],[11,"maybe_print_trailing_comment","","",37,null],[11,"print_remaining_comments","","",37,null],[11,"print_opt_abi_and_extern_if_nondefault","","",37,null],[11,"print_extern_opt_abi","","",37,null],[11,"print_fn_header_info","","",37,null],[11,"print_unsafety","","",37,null],[11,"fmt","rustc::hir::svh","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"hash","","",39,null],[11,"clone","","",39,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",39,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",39,null],[11,"fmt","","",39,null],[11,"hash","rustc::hir","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"fmt","","",42,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",42,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"none","","",44,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",44,null],[11,"has_lifetimes","","",44,null],[11,"has_types","","",44,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",44,null],[11,"lifetimes","","",44,null],[11,"bindings","","",44,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"empty","","",50,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",50,null],[11,"is_type_parameterized","","",50,null],[11,"is_parameterized","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"item","","",56,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"walk","","",59,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"clone","","",64,null],[11,"as_str","","",64,null],[11,"is_lazy","","",64,null],[11,"is_shift","","",64,null],[11,"is_comparison","","",64,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",64,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"as_str","","",65,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",65,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"attrs","","",66,null],[11,"id","","",66,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"attrs","","",68,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",22,null],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",83,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"to_self","","",89,null],[11,"is_self","","",89,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"has_self","","",91,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"clone","","",92,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"is_final","","",94,null],[11,"is_default","","",94,null],[11,"fmt","","",92,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",95,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"clone","","",96,null],[11,"span","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"id","","",101,null],[11,"name","","",101,null],[11,"rename","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"is_positional","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"fields","","",107,null],[11,"id","","",107,null],[11,"is_struct","","",107,null],[11,"is_tuple","","",107,null],[11,"is_unit","","",107,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",21,null],[11,"hash","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",109,null],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"descriptive_variant","","",109,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",111,null],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"clone","","",111,null],[11,"descriptive_variant","","",111,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"clone","","",112,null],[11,"clone","","",113,null],[11,"new","rustc::infer::bivariate","",114,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",114,null],[11,"tcx","","",114,null],[11,"a_is_expected","","",114,null],[11,"relate_with_variance","","",114,null],[11,"tys","","",114,null],[11,"regions","","",114,null],[11,"binders","","",114,null],[11,"clone","rustc::infer::combine","",115,null],[11,"super_combine_tys","rustc::infer","",116,null],[11,"tcx","rustc::infer::combine","",115,null],[11,"switch_expected","","",115,null],[11,"equate","","",115,null],[11,"bivariate","","",115,null],[11,"sub","","",115,null],[11,"lub","","",115,null],[11,"glb","","",115,null],[11,"instantiate","","",115,null],[11,"compare","core::result","",117,null],[11,"new","rustc::infer::equate","",118,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",118,null],[11,"tag","","",118,null],[11,"tcx","","",118,null],[11,"a_is_expected","","",118,null],[11,"relate_with_variance","","",118,null],[11,"tys","","",118,null],[11,"regions","","",118,null],[11,"binders","","",118,null],[11,"note_and_explain_region","rustc::ty::context","",119,null],[11,"report_region_errors","rustc::infer","",116,null],[11,"report_and_explain_type_error","","",116,null],[11,"resolve","rustc::ty::sty","",120,null],[11,"resolve","","",121,null],[11,"new","rustc::infer::glb","",122,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",122,null],[11,"tag","","",122,null],[11,"tcx","","",122,null],[11,"a_is_expected","","",122,null],[11,"relate_with_variance","","",122,null],[11,"tys","","",122,null],[11,"regions","","",122,null],[11,"binders","","",122,null],[11,"infcx","","",122,null],[11,"relate_bound","","",122,null],[11,"higher_ranked_sub","rustc::infer::combine","",115,null],[11,"higher_ranked_lub","","",115,null],[11,"higher_ranked_glb","","",115,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",116,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",116,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",116,null],[11,"new","rustc::infer::lub","",123,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",123,null],[11,"tag","","",123,null],[11,"tcx","","",123,null],[11,"a_is_expected","","",123,null],[11,"relate_with_variance","","",123,null],[11,"tys","","",123,null],[11,"regions","","",123,null],[11,"binders","","",123,null],[11,"infcx","","",123,null],[11,"relate_bound","","",123,null],[11,"fmt","rustc::infer::region_inference","",124,null],[11,"hash","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"clone","","",124,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",126,null],[11,"hash","","",127,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"eq","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"contains","","",132,null],[11,"push","","",132,null],[11,"new","","",133,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",133,null],[11,"commit","","",133,null],[11,"rollback_to","","",133,null],[11,"num_vars","","",133,null],[11,"new_region_var","","",133,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",133,null],[11,"new_bound","","",133,null],[11,"add_given","","",133,null],[11,"make_eqregion","","",133,null],[11,"make_subregion","","",133,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",133,null],[11,"lub_regions","","",133,null],[11,"glb_regions","","",133,null],[11,"resolve_var","","",133,null],[11,"opportunistic_resolve_var","","",133,null],[11,"combine_vars","","",133,null],[11,"vars_created_since_snapshot","","",133,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",133,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"to_ty","","",125,null],[11,"must_hold","","",126,null],[11,"cannot_hold","","",126,null],[11,"or","","",126,null],[11,"and","","",126,null],[11,"new","rustc::infer::resolve","",137,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictyperesolver"}}],[11,"tcx","","",137,null],[11,"fold_ty","","",137,null],[11,"new","","",138,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictypeandregionresolver"}}],[11,"tcx","","",138,null],[11,"fold_ty","","",138,null],[11,"fold_region","","",138,null],[11,"new","rustc::infer::freshen","",139,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",139,null],[11,"fold_region","","",139,null],[11,"fold_ty","","",139,null],[11,"new","rustc::infer::sub","",140,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",140,null],[11,"tag","","",140,null],[11,"tcx","","",140,null],[11,"a_is_expected","","",140,null],[11,"with_cause","","",140,null],[11,"relate_with_variance","","",140,null],[11,"tys","","",140,null],[11,"regions","","",140,null],[11,"binders","","",140,null],[11,"hash","rustc::infer::type_variable","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"hash","","",142,null],[11,"eq","","",142,null],[11,"clone","","",142,null],[11,"new","","",143,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",143,null],[11,"var_diverges","","",143,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",143,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",143,null],[11,"new_var","","",143,null],[11,"root_var","","",143,null],[11,"probe","","",143,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",143,null],[11,"replace_if_possible","","",143,null],[11,"snapshot","","",143,null],[11,"rollback_to","","",143,null],[11,"commit","","",143,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",143,null],[11,"unsolved_variables","","",143,null],[11,"index","rustc::ty::sty","",144,null],[11,"from_index","","",144,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",144,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"fmt","rustc::infer::unify_key","",145,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"combine","","",145,null],[11,"index","rustc::ty::sty","",146,null],[11,"from_index","","",146,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",146,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","rustc::ty","",147,null],[11,"index","rustc::ty::sty","",148,null],[11,"from_index","","",148,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",148,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","syntax::ast","",149,null],[11,"index","rustc::ty::sty","",150,null],[11,"from_index","","",150,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",150,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"clone","rustc::infer","",151,null],[11,"borrow","","",151,null],[11,"borrow_mut","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",152,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",159,null],[11,"infer_ctxt","rustc::ty::context","",119,null],[11,"normalizing_infer_ctxt","","",119,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",119,null],[11,"enter","rustc::infer","",160,null],[11,"trans_normalize","rustc::ty::sty","",161,null],[11,"trans_normalize","","",162,null],[11,"trans_normalize","","",163,null],[11,"trans_normalize","","",121,null],[11,"trans_normalize","rustc::mir::tcx","",164,null],[11,"normalize_associated_type","rustc::ty::context","",119,null],[11,"drain_fulfillment_cx_or_panic","rustc::infer","",116,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",116,null],[11,"projection_mode","","",116,null],[11,"freshen","","",116,null],[11,"type_var_diverges","","",116,null],[11,"freshener","","",116,null],[11,"type_is_unconstrained_numeric","","",116,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",116,null],[11,"unsolved_variables","","",116,null],[11,"equate","","",116,null],[11,"sub","","",116,null],[11,"lub","","",116,null],[11,"glb","","",116,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",116,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",116,null],[11,"in_snapshot","","",116,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",116,null],[11,"probe","","Execute `f` then unroll any bindings it creates",116,null],[11,"add_given","","",116,null],[11,"sub_types","","",116,null],[11,"can_sub_types","","",116,null],[11,"eq_types","","",116,null],[11,"eq_trait_refs","","",116,null],[11,"eq_impl_headers","","",116,null],[11,"sub_poly_trait_refs","","",116,null],[11,"sub_regions","","",116,null],[11,"equality_predicate","","",116,null],[11,"region_outlives_predicate","","",116,null],[11,"next_ty_var_id","","",116,null],[11,"next_ty_var","","",116,null],[11,"next_ty_var_with_default","","",116,null],[11,"next_diverging_ty_var","","",116,null],[11,"next_ty_vars","","",116,null],[11,"next_int_var_id","","",116,null],[11,"next_float_var_id","","",116,null],[11,"next_region_var","","",116,null],[11,"region_vars_for_defs","","",116,null],[11,"type_vars_for_defs","","",116,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",116,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",116,null],[11,"fresh_bound_region","","",116,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",116,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",116,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",116,null],[11,"node_type","","",116,null],[11,"expr_ty","","",116,null],[11,"resolve_regions_and_report_errors","","",116,null],[11,"ty_to_string","","",116,null],[11,"tys_to_string","","",116,null],[11,"trait_ref_to_string","","",116,null],[11,"shallow_resolve","","",116,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",116,null],[11,"resolve_type_and_region_vars_if_possible","","",116,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",116,null],[11,"type_error_message_str","","",116,null],[11,"type_error_struct_str","","",116,null],[11,"type_error_message_str_with_expected","","",116,null],[11,"type_error_struct_str_with_expected","","",116,null],[11,"type_error_message","","",116,null],[11,"type_error_struct","","",116,null],[11,"report_mismatched_types","","",116,null],[11,"report_conflicting_default_types","","",116,null],[11,"replace_late_bound_regions_with_fresh_var","","",116,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",116,null],[11,"can_equate","","",116,null],[11,"node_ty","","",116,null],[11,"expr_ty_adjusted","","",116,null],[11,"type_moves_by_default","","",116,null],[11,"node_method_ty","","",116,null],[11,"node_method_id","","",116,null],[11,"adjustments","","",116,null],[11,"is_method_call","","",116,null],[11,"temporary_scope","","",116,null],[11,"upvar_capture","","",116,null],[11,"param_env","","",116,null],[11,"closure_kind","","",116,null],[11,"closure_type","","",116,null],[11,"span","","",154,null],[11,"types","","",154,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"tys"},{"name":"tys"}],"output":{"name":"typetrace"}}],[11,"dummy","","",154,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",154,null],[11,"span","","",152,null],[11,"span","","",155,null],[11,"span","","",158,null],[11,"fmt","rustc::lint","",165,null],[11,"clone","","",165,null],[11,"name_lower","","Get the lint&#39;s name, with ASCII letters converted to lowercase.",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"hash","","",166,null],[11,"of","","Get the `LintId` for a `Lint`.",166,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",166,null],[11,"fmt","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"eq","","",167,null],[11,"clone","","",167,null],[11,"as_str","","Convert a level to a lower-case string.",167,null],[11,"from_str","","Convert a lower-case string to a level.",167,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",168,null],[11,"ne","","",168,null],[11,"clone","","",168,null],[11,"clone","rustc::lint::builtin","",169,null],[11,"get_lints","","",169,null],[11,"new","rustc::lint::context","",170,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",170,null],[11,"get_lint_groups","","",170,null],[11,"register_early_pass","","",170,null],[11,"register_late_pass","","",170,null],[11,"register_future_incompatible","","",170,null],[11,"future_incompatible","","",170,null],[11,"register_group","","",170,null],[11,"register_renamed","","",170,null],[11,"register_removed","","",170,null],[11,"process_command_line","","",170,null],[11,"sess","","Get the overall compiler `Session` object.",171,null],[11,"lints","","",171,null],[11,"mut_lints","","",171,null],[11,"level_stack","","",171,null],[11,"enter_attrs","","",171,null],[11,"exit_attrs","","",171,null],[11,"sess","","Get the overall compiler `Session` object.",172,null],[11,"lints","","",172,null],[11,"mut_lints","","",172,null],[11,"level_stack","","",172,null],[11,"enter_attrs","","",172,null],[11,"exit_attrs","","",172,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",171,null],[11,"visit_item","","",171,null],[11,"visit_foreign_item","","",171,null],[11,"visit_pat","","",171,null],[11,"visit_expr","","",171,null],[11,"visit_stmt","","",171,null],[11,"visit_fn","","",171,null],[11,"visit_variant_data","","",171,null],[11,"visit_struct_field","","",171,null],[11,"visit_variant","","",171,null],[11,"visit_ty","","",171,null],[11,"visit_name","","",171,null],[11,"visit_mod","","",171,null],[11,"visit_local","","",171,null],[11,"visit_block","","",171,null],[11,"visit_arm","","",171,null],[11,"visit_decl","","",171,null],[11,"visit_expr_post","","",171,null],[11,"visit_generics","","",171,null],[11,"visit_trait_item","","",171,null],[11,"visit_impl_item","","",171,null],[11,"visit_lifetime","","",171,null],[11,"visit_lifetime_def","","",171,null],[11,"visit_path","","",171,null],[11,"visit_path_list_item","","",171,null],[11,"visit_attribute","","",171,null],[11,"visit_item","","",172,null],[11,"visit_foreign_item","","",172,null],[11,"visit_pat","","",172,null],[11,"visit_expr","","",172,null],[11,"visit_stmt","","",172,null],[11,"visit_fn","","",172,null],[11,"visit_variant_data","","",172,null],[11,"visit_struct_field","","",172,null],[11,"visit_variant","","",172,null],[11,"visit_ty","","",172,null],[11,"visit_ident","","",172,null],[11,"visit_mod","","",172,null],[11,"visit_local","","",172,null],[11,"visit_block","","",172,null],[11,"visit_arm","","",172,null],[11,"visit_decl","","",172,null],[11,"visit_expr_post","","",172,null],[11,"visit_generics","","",172,null],[11,"visit_trait_item","","",172,null],[11,"visit_impl_item","","",172,null],[11,"visit_lifetime","","",172,null],[11,"visit_lifetime_def","","",172,null],[11,"visit_explicit_self","","",172,null],[11,"visit_path","","",172,null],[11,"visit_path_list_item","","",172,null],[11,"visit_attribute","","",172,null],[11,"visit_id","","",171,null],[11,"get_lints","","",173,null],[11,"check_item","","",173,null],[11,"prohibit_type_params","rustc::ty::context","",119,null],[11,"prohibit_projection","","",119,null],[11,"prim_ty_to_ty","","",119,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",119,null],[11,"fmt","rustc::middle::expr_use_visitor","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[11,"fmt","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"clone","","",175,null],[11,"fmt","","",176,null],[11,"eq","","",176,null],[11,"clone","","",176,null],[11,"fmt","","",177,null],[11,"eq","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"eq","","",178,null],[11,"clone","","",178,null],[11,"new","","",179,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"walk_fn","","",179,null],[11,"consume_expr","","",179,null],[11,"walk_expr","","",179,null],[11,"decode","rustc::middle::const_val","",180,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",180,null],[11,"fmt","","",180,null],[11,"clone","","",180,null],[11,"hash","","",180,null],[11,"eq","","",180,null],[11,"description","","",180,null],[11,"hash","rustc::middle::const_qualif","",181,null],[11,"cmp","","",181,null],[11,"partial_cmp","","",181,null],[11,"lt","","",181,null],[11,"le","","",181,null],[11,"gt","","",181,null],[11,"ge","","",181,null],[11,"clone","","",181,null],[11,"eq","","",181,null],[11,"ne","","",181,null],[11,"decode","","",181,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,null],[18,"MUTABLE_MEM","rustc_metadata::middle","",181,null],[18,"NEEDS_DROP","","",181,null],[18,"PREFER_IN_PLACE","","",181,null],[18,"NON_ZERO_SIZED","","",181,null],[18,"HAS_STATIC_BORROWS","","",181,null],[18,"NOT_CONST","","",181,null],[18,"NON_STATIC_BORROWS","","",181,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",181,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",181,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",181,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",181,null],[11,"is_all","","Returns `true` if all flags are currently set.",181,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",181,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",181,null],[11,"insert","","Inserts the specified flags in-place.",181,null],[11,"remove","","Removes the specified flags in-place.",181,null],[11,"toggle","","Toggles the specified flags in-place.",181,null],[11,"bitor","","Returns the union of the two sets of flags.",181,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",181,null],[11,"bitand","","Returns the intersection between the two sets of flags.",181,null],[11,"sub","","Returns the set difference of the two sets of flags.",181,null],[11,"not","","Returns the complement of this set of flags.",181,null],[11,"fmt","rustc::middle::cstore","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",184,null],[11,"eq","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",185,null],[11,"clone","","",185,null],[11,"from_u32","","",185,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",187,null],[11,"hash","","",187,null],[11,"decode","","",187,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",188,null],[11,"hash","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"clone","","",188,null],[11,"clone","","",189,null],[11,"fmt","","",190,null],[11,"clone","","",190,null],[11,"visit","","",187,null],[11,"visit_ids","","",187,null],[11,"stability","","",191,null],[11,"deprecation","","",191,null],[11,"visibility","","",191,null],[11,"closure_kind","","",191,null],[11,"closure_ty","","",191,null],[11,"item_variances","","",191,null],[11,"repr_attrs","","",191,null],[11,"item_type","","",191,null],[11,"visible_parent_map","","",191,null],[11,"item_name","","",191,null],[11,"item_predicates","","",191,null],[11,"item_super_predicates","","",191,null],[11,"item_attrs","","",191,null],[11,"item_symbol","","",191,null],[11,"trait_def","","",191,null],[11,"adt_def","","",191,null],[11,"method_arg_names","","",191,null],[11,"inherent_implementations_for_type","","",191,null],[11,"implementations_of_trait","","",191,null],[11,"provided_trait_methods","","",191,null],[11,"trait_item_def_ids","","",191,null],[11,"impl_items","","",191,null],[11,"impl_trait_ref","","",191,null],[11,"impl_polarity","","",191,null],[11,"custom_coerce_unsized_kind","","",191,null],[11,"associated_consts","","",191,null],[11,"impl_parent","","",191,null],[11,"trait_of_item","","",191,null],[11,"impl_or_trait_item","","",191,null],[11,"is_const_fn","","",191,null],[11,"is_defaulted_trait","","",191,null],[11,"is_impl","","",191,null],[11,"is_default_impl","","",191,null],[11,"is_extern_item","","",191,null],[11,"is_static_method","","",191,null],[11,"is_statically_included_foreign_item","","",191,null],[11,"is_typedef","","",191,null],[11,"dylib_dependency_formats","","",191,null],[11,"lang_items","","",191,null],[11,"missing_lang_items","","",191,null],[11,"is_staged_api","","",191,null],[11,"is_explicitly_linked","","",191,null],[11,"is_allocator","","",191,null],[11,"is_panic_runtime","","",191,null],[11,"panic_strategy","","",191,null],[11,"extern_crate","","",191,null],[11,"crate_attrs","","",191,null],[11,"crate_name","","",191,null],[11,"original_crate_name","","",191,null],[11,"crate_hash","","",191,null],[11,"crate_disambiguator","","",191,null],[11,"crate_struct_field_attrs","","",191,null],[11,"plugin_registrar_fn","","",191,null],[11,"native_libraries","","",191,null],[11,"reachable_ids","","",191,null],[11,"def_key","","",191,null],[11,"relative_def_path","","",191,null],[11,"variant_kind","","",191,null],[11,"struct_ctor_def_id","","",191,null],[11,"tuple_struct_definition_if_ctor","","",191,null],[11,"struct_field_names","","",191,null],[11,"item_children","","",191,null],[11,"crate_top_level_items","","",191,null],[11,"maybe_get_item_ast","","",191,null],[11,"maybe_get_item_mir","","",191,null],[11,"is_item_mir_available","","",191,null],[11,"crates","","",191,null],[11,"used_libraries","","",191,null],[11,"used_link_args","","",191,null],[11,"metadata_filename","","",191,null],[11,"metadata_section_name","","",191,null],[11,"encode_type","","",191,null],[11,"used_crates","","",191,null],[11,"used_crate_source","","",191,null],[11,"extern_mod_stmt_cnum","","",191,null],[11,"encode_metadata","","",191,null],[11,"metadata_encoding_version","","",191,null],[11,"fmt","rustc::middle::dataflow","",192,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"pre","","",193,null],[11,"fmt","","",194,null],[11,"eq","","",194,null],[11,"clone","","",194,null],[11,"new","","",193,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",193,null],[11,"add_kill","","Indicates that `id` kills `bit`",193,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",193,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",193,null],[11,"propagate","","Performs the data flow analysis.",193,null],[11,"fmt","rustc::middle::dependency_format","",195,null],[11,"eq","","",195,null],[11,"clone","","",195,null],[11,"clone","rustc::middle::free_region","",196,null],[11,"new","","",196,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",196,null],[11,"relate_free_regions_from_predicates","","",196,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",196,null],[11,"lub_free_regions","","",196,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",196,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",196,null],[11,"hash","rustc::middle::lang_items","",197,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"from_u32","","",197,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",198,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",198,null],[11,"item_name","","",198,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",198,null],[11,"require_owned_box","","",198,null],[11,"from_builtin_kind","","",198,null],[11,"to_builtin_kind","","",198,null],[11,"fn_trait_kind","","",198,null],[11,"char_impl","","",198,null],[11,"str_impl","","",198,null],[11,"slice_impl","","",198,null],[11,"const_ptr_impl","","",198,null],[11,"mut_ptr_impl","","",198,null],[11,"i8_impl","","",198,null],[11,"i16_impl","","",198,null],[11,"i32_impl","","",198,null],[11,"i64_impl","","",198,null],[11,"isize_impl","","",198,null],[11,"u8_impl","","",198,null],[11,"u16_impl","","",198,null],[11,"u32_impl","","",198,null],[11,"u64_impl","","",198,null],[11,"usize_impl","","",198,null],[11,"f32_impl","","",198,null],[11,"f64_impl","","",198,null],[11,"send_trait","","",198,null],[11,"sized_trait","","",198,null],[11,"unsize_trait","","",198,null],[11,"copy_trait","","",198,null],[11,"sync_trait","","",198,null],[11,"drop_trait","","",198,null],[11,"coerce_unsized_trait","","",198,null],[11,"add_trait","","",198,null],[11,"sub_trait","","",198,null],[11,"mul_trait","","",198,null],[11,"div_trait","","",198,null],[11,"rem_trait","","",198,null],[11,"neg_trait","","",198,null],[11,"not_trait","","",198,null],[11,"bitxor_trait","","",198,null],[11,"bitand_trait","","",198,null],[11,"bitor_trait","","",198,null],[11,"shl_trait","","",198,null],[11,"shr_trait","","",198,null],[11,"add_assign_trait","","",198,null],[11,"sub_assign_trait","","",198,null],[11,"mul_assign_trait","","",198,null],[11,"div_assign_trait","","",198,null],[11,"rem_assign_trait","","",198,null],[11,"bitxor_assign_trait","","",198,null],[11,"bitand_assign_trait","","",198,null],[11,"bitor_assign_trait","","",198,null],[11,"shl_assign_trait","","",198,null],[11,"shr_assign_trait","","",198,null],[11,"index_trait","","",198,null],[11,"index_mut_trait","","",198,null],[11,"unsafe_cell_type","","",198,null],[11,"deref_trait","","",198,null],[11,"deref_mut_trait","","",198,null],[11,"fn_trait","","",198,null],[11,"fn_mut_trait","","",198,null],[11,"fn_once_trait","","",198,null],[11,"eq_trait","","",198,null],[11,"ord_trait","","",198,null],[11,"str_eq_fn","","",198,null],[11,"panic_fn","","",198,null],[11,"panic_bounds_check_fn","","",198,null],[11,"panic_fmt","","",198,null],[11,"exchange_malloc_fn","","",198,null],[11,"exchange_free_fn","","",198,null],[11,"box_free_fn","","",198,null],[11,"strdup_uniq_fn","","",198,null],[11,"start_fn","","",198,null],[11,"eh_personality","","",198,null],[11,"eh_personality_catch","","",198,null],[11,"eh_unwind_resume","","",198,null],[11,"msvc_try_filter","","",198,null],[11,"owned_box","","",198,null],[11,"phantom_data","","",198,null],[11,"covariant_type","","",198,null],[11,"contravariant_type","","",198,null],[11,"invariant_type","","",198,null],[11,"covariant_lifetime","","",198,null],[11,"contravariant_lifetime","","",198,null],[11,"invariant_lifetime","","",198,null],[11,"no_copy_bound","","",198,null],[11,"non_zero","","",198,null],[11,"debug_trait","","",198,null],[11,"eq","rustc::middle::mem_categorization","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"clone","","",200,null],[11,"hash","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"hash","","",202,null],[11,"eq","","",202,null],[11,"ne","","",202,null],[11,"clone","","",202,null],[11,"fmt","","",203,null],[11,"hash","","",203,null],[11,"eq","","",203,null],[11,"ne","","",203,null],[11,"clone","","",203,null],[11,"fmt","","",204,null],[11,"hash","","",204,null],[11,"eq","","",204,null],[11,"clone","","",204,null],[11,"fmt","","",205,null],[11,"hash","","",205,null],[11,"eq","","",205,null],[11,"clone","","",205,null],[11,"fmt","","",206,null],[11,"hash","","",206,null],[11,"eq","","",206,null],[11,"clone","","",206,null],[11,"fmt","","",207,null],[11,"eq","","",207,null],[11,"ne","","",207,null],[11,"clone","","",207,null],[11,"eq","","",208,null],[11,"ne","","",208,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"id","rustc::hir","",23,null],[11,"span","","",23,null],[11,"id","","",59,null],[11,"span","","",59,null],[11,"clone","rustc::middle::mem_categorization","",210,null],[11,"from_mutbl","","",206,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",206,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",206,null],[11,"is_mutable","","",206,null],[11,"is_immutable","","",206,null],[11,"to_user_str","","",206,null],[11,"new","","",210,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",210,null],[11,"cat_expr_autoderefd","","",210,null],[11,"cat_expr_unadjusted","","",210,null],[11,"cat_def","","",210,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",210,null],[11,"cat_rvalue_node","","",210,null],[11,"cat_rvalue","","",210,null],[11,"cat_field","","",210,null],[11,"cat_tup_field","","",210,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",210,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",210,null],[11,"cat_imm_interior","","",210,null],[11,"cat_downcast","","",210,null],[11,"cat_pattern","","",210,null],[11,"fmt","","",211,null],[11,"clone","","",211,null],[11,"fmt","","",212,null],[11,"clone","","",212,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",208,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",208,null],[11,"upvar","","",208,null],[11,"descriptive_string","","",208,null],[11,"fmt","","",208,null],[11,"fmt","","",199,null],[11,"fmt","","",201,null],[11,"fmt","","",202,null],[11,"fmt","","",200,null],[11,"fmt","","",200,null],[11,"cmp","rustc::middle::privacy","",213,null],[11,"partial_cmp","","",213,null],[11,"eq","","",213,null],[11,"fmt","","",213,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"is_reachable","","",214,null],[11,"is_exported","","",214,null],[11,"is_public","","",214,null],[11,"default","","",214,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"fmt","","",214,null],[11,"decode","rustc::middle::region","",215,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",215,null],[11,"hash","","",215,null],[11,"cmp","","",215,null],[11,"partial_cmp","","",215,null],[11,"lt","","",215,null],[11,"le","","",215,null],[11,"gt","","",215,null],[11,"ge","","",215,null],[11,"eq","","",215,null],[11,"ne","","",215,null],[11,"clone","","",215,null],[11,"fmt","","",215,null],[11,"fmt","","",216,null],[11,"hash","","",216,null],[11,"cmp","","",216,null],[11,"partial_cmp","","",216,null],[11,"lt","","",216,null],[11,"le","","",216,null],[11,"gt","","",216,null],[11,"ge","","",216,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"clone","","",216,null],[11,"fmt","","",217,null],[11,"decode","","",217,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",217,null],[11,"hash","","",217,null],[11,"cmp","","",217,null],[11,"partial_cmp","","",217,null],[11,"lt","","",217,null],[11,"le","","",217,null],[11,"gt","","",217,null],[11,"ge","","",217,null],[11,"eq","","",217,null],[11,"ne","","",217,null],[11,"clone","","",217,null],[11,"to_code_extent","","",217,null],[11,"fmt","","",218,null],[11,"decode","","",218,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",218,null],[11,"hash","","",218,null],[11,"cmp","","",218,null],[11,"partial_cmp","","",218,null],[11,"lt","","",218,null],[11,"le","","",218,null],[11,"gt","","",218,null],[11,"ge","","",218,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"clone","","",218,null],[11,"node_id","","Returns a node id associated with this scope.",216,null],[11,"node_id","","",215,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",215,null],[11,"clone","","",219,null],[11,"fmt","","",219,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",220,null],[11,"lookup_code_extent","","",220,null],[11,"node_extent","","",220,null],[11,"item_extent","","",220,null],[11,"call_site_extent","","",220,null],[11,"opt_destruction_extent","","",220,null],[11,"intern_code_extent","","",220,null],[11,"intern_node","","",220,null],[11,"code_extent_data","","",220,null],[11,"each_encl_scope","","",220,null],[11,"each_var_scope","","",220,null],[11,"each_rvalue_scope","","",220,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",220,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",220,null],[11,"var_region","","Returns the lifetime of the variable `id`.",220,null],[11,"scopes_intersect","","",220,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",220,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",220,null],[11,"fmt","rustc::middle::resolve_lifetime","",221,null],[11,"decode","","",221,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",221,null],[11,"hash","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"hash","rustc::middle::stability","",222,null],[11,"fmt","","",222,null],[11,"clone","","",222,null],[11,"partial_cmp","","",222,null],[11,"eq","","",222,null],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",222,null],[11,"from_attr_level","","",222,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"build","","Construct the stability index for a crate being compiled.",223,null],[11,"new","","",223,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"lookup_stability","rustc::ty::context","Lookup the stability for a node, loading external crate\nmetadata as necessary.",119,null],[11,"lookup_deprecation","","",119,null],[11,"decode","rustc::mir::repr","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",224,null],[11,"clone","","",224,null],[11,"all_basic_blocks","","",224,null],[11,"basic_block_data","","",224,null],[11,"basic_block_data_mut","","",224,null],[11,"index","","",224,null],[11,"index_mut","","",224,null],[11,"decode","","",225,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",225,null],[11,"eq","","",225,null],[11,"fmt","","",225,null],[11,"clone","","",225,null],[11,"decode","","",226,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",226,null],[11,"eq","","",226,null],[11,"fmt","","",226,null],[11,"clone","","",226,null],[11,"decode","","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"decode","","",228,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",228,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"decode","","",229,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"decode","","",230,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",230,null],[11,"fmt","","",230,null],[11,"clone","","",230,null],[11,"decode","","",231,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",231,null],[11,"hash","","",231,null],[11,"eq","","",231,null],[11,"ne","","",231,null],[11,"clone","","",231,null],[11,"new","","",231,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",231,null],[11,"fmt","","",231,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"fmt","","",232,null],[11,"clone","","",232,null],[11,"decode","","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",233,null],[11,"fmt","","",233,null],[11,"clone","","",233,null],[11,"decode","","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",234,null],[11,"clone","","",234,null],[11,"successors","","",233,null],[11,"successors_mut","","",233,null],[11,"successors","","",234,null],[11,"successors_mut","","",234,null],[11,"new","","",232,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",232,null],[11,"terminator_mut","","",232,null],[11,"fmt","","",234,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",234,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",234,null],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",235,null],[11,"clone","","",235,null],[11,"decode","","",236,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",236,null],[11,"fmt","","",236,null],[11,"clone","","",236,null],[11,"fmt","","",235,null],[11,"decode","","",237,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"clone","","",237,null],[11,"decode","","",238,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",238,null],[11,"hash","","",238,null],[11,"eq","","",238,null],[11,"ne","","",238,null],[11,"fmt","","",238,null],[11,"clone","","",238,null],[11,"decode","","",239,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",239,null],[11,"hash","","",239,null],[11,"eq","","",239,null],[11,"ne","","",239,null],[11,"fmt","","",239,null],[11,"clone","","",239,null],[11,"decode","","",240,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",240,null],[11,"hash","","",240,null],[11,"eq","","",240,null],[11,"ne","","",240,null],[11,"fmt","","",240,null],[11,"clone","","",240,null],[11,"new","","",240,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",240,null],[11,"field","","",237,null],[11,"deref","","",237,null],[11,"index","","",237,null],[11,"elem","","",237,null],[11,"fmt","","",237,null],[11,"index","collections::vec","",241,null],[11,"index_mut","","",241,null],[11,"decode","rustc::mir::repr","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",242,null],[11,"eq","","",242,null],[11,"ne","","",242,null],[11,"hash","","",242,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"new","","",242,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",242,null],[11,"decode","","",243,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",243,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"decode","","",244,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",244,null],[11,"eq","","",244,null],[11,"ne","","",244,null],[11,"clone","","",244,null],[11,"fmt","","",244,null],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",245,null],[11,"clone","","",245,null],[11,"decode","","",246,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",246,null],[11,"eq","","",246,null],[11,"fmt","","",246,null],[11,"clone","","",246,null],[11,"decode","","",247,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",247,null],[11,"eq","","",247,null],[11,"ne","","",247,null],[11,"fmt","","",247,null],[11,"clone","","",247,null],[11,"decode","","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",248,null],[11,"eq","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"decode","","",249,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",249,null],[11,"eq","","",249,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"fmt","","",245,null],[11,"decode","","",250,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",250,null],[11,"hash","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"clone","","",251,null],[11,"fmt","","",251,null],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",252,null],[11,"hash","","",252,null],[11,"eq","","",252,null],[11,"ne","","",252,null],[11,"clone","","",252,null],[11,"fmt","","",250,null],[11,"fmt","","",252,null],[11,"fmt","rustc::mir::tcx","",164,null],[11,"clone","","",164,null],[11,"from_ty","","",164,{"inputs":[{"name":"tys"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",164,null],[11,"projection_ty","","",164,null],[11,"super_fold_with","","",164,null],[11,"super_visit_with","","",164,null],[11,"operand_ty","rustc::mir::repr","",224,null],[11,"binop_ty","","",224,null],[11,"lvalue_ty","","",224,null],[11,"rvalue_ty","","",224,null],[11,"to_mutbl_lossy","","",226,null],[11,"to_hir_binop","","",248,null],[11,"fmt","rustc::mir::visit","",253,null],[11,"clone","","",253,null],[11,"clone","rustc::mir::transform","",254,null],[11,"from_node","","",254,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"mirsource"}}],[11,"item_id","","",254,null],[11,"new","","",255,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",255,null],[11,"push_pass","","Pushes a built-in pass.",255,null],[11,"extend","","",255,null],[11,"eq","rustc::session::config","",256,null],[11,"clone","","",256,null],[11,"eq","","",257,null],[11,"clone","","",257,null],[11,"hash","","",258,null],[11,"eq","","",258,null],[11,"clone","","",258,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"fmt","","",259,null],[11,"clone","","",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",260,null],[11,"eq","","",261,null],[11,"clone","","",261,null],[11,"filestem","","",262,null],[11,"clone","","",263,null],[11,"path","","",263,null],[11,"temp_path","","",263,null],[11,"with_extension","","",263,null],[11,"filestem","","",263,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",260,null],[11,"eq","","",264,null],[11,"clone","","",264,null],[11,"fmt","","",265,null],[11,"hash","","",265,null],[11,"cmp","","",265,null],[11,"clone","","",265,null],[11,"partial_cmp","","",265,null],[11,"eq","","",265,null],[11,"clone","","",266,null],[11,"is_empty","","",266,null],[11,"eq","","",267,null],[11,"clone","","",267,null],[11,"desc","","",267,null],[11,"clone","","",268,null],[11,"clone","","",269,null],[11,"fmt","","",270,null],[11,"eq","","",270,null],[11,"clone","","",270,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"clone","","",271,null],[11,"is_stable","","",271,null],[11,"stable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",265,null],[11,"clone","rustc::session::filesearch","",272,null],[11,"for_each_lib_search_path","","",273,null],[11,"get_lib_path","","",273,null],[11,"search","","",273,null],[11,"new","","",273,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",273,null],[11,"get_tools_search_paths","","",273,null],[11,"fmt","rustc::session::search_paths","",274,null],[11,"clone","","",274,null],[11,"fmt","","",275,null],[11,"clone","","",275,null],[11,"eq","","",275,null],[11,"new","","",274,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",274,null],[11,"iter","","",274,null],[11,"next","","",276,null],[11,"struct_span_warn","rustc::session","",277,null],[11,"struct_span_warn_with_code","","",277,null],[11,"struct_warn","","",277,null],[11,"struct_span_err","","",277,null],[11,"struct_span_err_with_code","","",277,null],[11,"struct_err","","",277,null],[11,"struct_span_fatal","","",277,null],[11,"struct_span_fatal_with_code","","",277,null],[11,"struct_fatal","","",277,null],[11,"span_fatal","","",277,null],[11,"span_fatal_with_code","","",277,null],[11,"fatal","","",277,null],[11,"span_err_or_warn","","",277,null],[11,"span_err","","",277,null],[11,"span_err_with_code","","",277,null],[11,"err","","",277,null],[11,"err_count","","",277,null],[11,"has_errors","","",277,null],[11,"abort_if_errors","","",277,null],[11,"track_errors","","",277,null],[11,"span_warn","","",277,null],[11,"span_warn_with_code","","",277,null],[11,"warn","","",277,null],[11,"opt_span_warn","","",277,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",277,null],[11,"note_without_error","","",277,null],[11,"span_note_without_error","","",277,null],[11,"span_unimpl","","",277,null],[11,"unimpl","","",277,null],[11,"add_lint","","",277,null],[11,"reserve_node_ids","","",277,null],[11,"diagnostic","","",277,null],[11,"codemap","","",277,null],[11,"verbose","","",277,null],[11,"time_passes","","",277,null],[11,"count_llvm_insns","","",277,null],[11,"count_type_sizes","","",277,null],[11,"time_llvm_passes","","",277,null],[11,"trans_stats","","",277,null],[11,"meta_stats","","",277,null],[11,"asm_comments","","",277,null],[11,"no_verify","","",277,null],[11,"borrowck_stats","","",277,null],[11,"print_llvm_passes","","",277,null],[11,"lto","","",277,null],[11,"no_landing_pads","","",277,null],[11,"unstable_options","","",277,null],[11,"print_enum_sizes","","",277,null],[11,"nonzeroing_move_hints","","",277,null],[11,"sysroot","","",277,null],[11,"target_filesearch","","",277,null],[11,"host_filesearch","","",277,null],[11,"next_node_id","","",277,null],[11,"peek_node_id","","",277,null],[11,"diagnostic","","",277,null],[11,"hash","rustc::traits::error_reporting","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"fmt","","",278,null],[11,"report_fulfillment_errors","rustc::infer","",116,null],[11,"report_fulfillment_errors_as_warnings","","",116,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",116,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",116,null],[11,"report_selection_error","","",116,null],[11,"recursive_type_with_infinite_size_error","rustc::ty::context","",119,null],[11,"report_object_safety_error","","",119,null],[11,"clone","rustc::traits::fulfill","",279,null],[11,"new","","Creates a new fulfillment context.",280,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",280,null],[11,"register_builtin_bound","","",280,null],[11,"register_region_obligation","","",280,null],[11,"register_predicate_obligation","","",280,null],[11,"register_rfc1592_obligation","","",280,null],[11,"region_obligations","","",280,null],[11,"select_rfc1592_obligations","","",280,null],[11,"select_all_or_error","","",280,null],[11,"select_where_possible","","",280,null],[11,"pending_obligations","","",280,null],[11,"new","","",281,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",281,null],[11,"check_duplicate_trait","","",281,null],[11,"eq","rustc::traits::project","",282,null],[11,"clone","","",282,null],[11,"fmt","","",282,null],[11,"is_topmost","","",282,null],[11,"is_any_final","","",282,null],[11,"is_any","","",282,null],[11,"clone","","",283,null],[11,"clone","","",284,null],[11,"with","","",284,null],[11,"hash","rustc::traits::object_safety","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"fmt","","",285,null],[11,"clone","","",285,null],[11,"hash","","",286,null],[11,"eq","","",286,null],[11,"fmt","","",286,null],[11,"clone","","",286,null],[11,"is_object_safe","rustc::ty::context","",119,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",119,null],[11,"object_safety_violations","","",119,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",119,null],[11,"clone","rustc::traits::select","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"clone","","",289,null],[11,"new","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",290,null],[11,"tcx","","",290,null],[11,"param_env","","",290,null],[11,"closure_typer","","",290,null],[11,"projection_mode","","",290,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",290,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",290,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",290,null],[11,"new","","",287,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",289,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",291,null],[11,"new","rustc::traits::specialize::specialization_graph","",292,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",292,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",292,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",292,null],[11,"clone","","",293,null],[11,"fmt","","",293,null],[11,"is_from_trait","","",293,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",293,null],[11,"def_id","","",293,null],[11,"next","","",294,null],[11,"next","","",295,null],[11,"map","","",296,null],[11,"next","","",297,null],[11,"next","","",298,null],[11,"next","","",299,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",295,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",295,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",295,null],[11,"new","rustc::traits::specialize","",300,{"inputs":[],"output":{"name":"specializescache"}}],[11,"check","","",300,null],[11,"insert","","",300,null],[11,"fmt","rustc::traits::project","",284,null],[11,"fmt","rustc::traits::fulfill","",279,null],[11,"fmt","rustc::traits","",301,null],[11,"fmt","","",302,null],[11,"fmt","","",303,null],[11,"fmt","","",304,null],[11,"fmt","","",305,null],[11,"fmt","","",306,null],[11,"fmt","","",307,null],[11,"fmt","","",308,null],[11,"fmt","","",309,null],[11,"fmt","","",310,null],[11,"fmt","rustc::traits::project","",283,null],[11,"lift_to_tcx","rustc::traits","",311,null],[11,"lift_to_tcx","","",302,null],[11,"super_fold_with","","",301,null],[11,"super_visit_with","","",301,null],[11,"super_fold_with","","",303,null],[11,"super_visit_with","","",303,null],[11,"super_fold_with","","",304,null],[11,"super_visit_with","","",304,null],[11,"super_fold_with","","",306,null],[11,"super_visit_with","","",306,null],[11,"super_fold_with","","",305,null],[11,"super_visit_with","","",305,null],[11,"super_fold_with","","",307,null],[11,"super_visit_with","","",307,null],[11,"super_fold_with","","",308,null],[11,"super_visit_with","","",308,null],[11,"super_fold_with","","",302,null],[11,"super_visit_with","","",302,null],[11,"super_fold_with","rustc::traits::project","",284,null],[11,"super_visit_with","","",284,null],[11,"next","rustc::traits::util","",312,null],[11,"trait_ref_for_builtin_bound","rustc::ty::context","",119,null],[11,"predicate_for_trait_def","","",119,null],[11,"predicate_for_builtin_bound","","",119,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",119,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",119,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",119,null],[11,"closure_trait_ref_and_return_type","","",119,null],[11,"eq","rustc::traits","",301,null],[11,"ne","","",301,null],[11,"clone","","",301,null],[11,"eq","","",313,null],[11,"ne","","",313,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"eq","","",314,null],[11,"ne","","",314,null],[11,"fmt","","",314,null],[11,"clone","","",314,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"fmt","","",315,null],[11,"clone","","",315,null],[11,"fmt","","",311,null],[11,"clone","","",311,null],[11,"clone","","",310,null],[11,"clone","","",302,null],[11,"eq","","",303,null],[11,"ne","","",303,null],[11,"clone","","",303,null],[11,"eq","","",304,null],[11,"ne","","",304,null],[11,"clone","","",304,null],[11,"clone","","",306,null],[11,"clone","","",305,null],[11,"clone","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"ne","","",308,null],[11,"clone","","",308,null],[11,"new","","",301,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",301,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",301,null],[11,"new","","",313,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",313,{"inputs":[{"name":"span"},{"name":"u32"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",313,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",302,null],[11,"map","","",302,null],[11,"clone","rustc::ty::adjustment","",316,null],[11,"clone","","",317,null],[11,"is_identity","","",316,null],[11,"is_identity","","",317,null],[11,"fmt","","",318,null],[11,"eq","","",318,null],[11,"ne","","",318,null],[11,"clone","","",318,null],[11,"fmt","","",319,null],[11,"decode","","",319,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",319,null],[11,"clone","","",319,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",320,null],[11,"adjust_for_autoderef","","",320,null],[11,"adjust_for_autoref","","",320,null],[11,"eq","rustc::ty::cast","",321,null],[11,"ne","","",321,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"fmt","","",322,null],[11,"clone","","",322,null],[11,"decode","","",323,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"from_ty","","",322,{"inputs":[{"name":"tys"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::error","",324,null],[11,"clone","","",324,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"fmt","","",326,null],[11,"hash","","",326,null],[11,"eq","","",326,null],[11,"decode","","",326,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",326,null],[11,"clone","","",326,null],[11,"fmt","","",325,null],[11,"note_and_explain_type_err","rustc::ty::context","",119,null],[11,"hash","rustc::ty::fast_reject","",327,null],[11,"eq","","",327,null],[11,"ne","","",327,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"tcx","rustc::ty::fold","",328,null],[11,"fold_ty","","",328,null],[11,"collect_regions","rustc::ty::context","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",119,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",119,null],[11,"new","rustc::ty::fold","",329,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",329,null],[11,"fold_binder","","",329,null],[11,"fold_region","","",329,null],[11,"replace_late_bound_regions","rustc::ty::context","",119,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",119,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",119,null],[11,"no_late_bound_regions","","",119,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",119,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",119,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",119,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",119,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",119,null],[11,"item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",119,null],[11,"node_path_str","","Returns a string identifying this local node-id.",119,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",119,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",119,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",119,null],[11,"push_item_path","","",119,null],[11,"fmt","rustc::ty::item_path","",330,null],[11,"default","rustc::ty::layout","",331,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",331,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",331,null],[11,"ptr_sized_integer","","",331,null],[11,"clone","","",332,null],[11,"fmt","","",333,null],[11,"hash","","",333,null],[11,"cmp","","",333,null],[11,"partial_cmp","","",333,null],[11,"lt","","",333,null],[11,"le","","",333,null],[11,"gt","","",333,null],[11,"ge","","",333,null],[11,"eq","","",333,null],[11,"ne","","",333,null],[11,"clone","","",333,null],[11,"from_bits","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",333,null],[11,"bits","","",333,null],[11,"abi_align","","",333,null],[11,"checked_add","","",333,null],[11,"checked_mul","","",333,null],[11,"fmt","","",334,null],[11,"hash","","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"clone","","",334,null],[11,"from_bits","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",334,null],[11,"pref","","",334,null],[11,"min","","",334,null],[11,"max","","",334,null],[11,"fmt","","",335,null],[11,"hash","","",335,null],[11,"cmp","","",335,null],[11,"partial_cmp","","",335,null],[11,"eq","","",335,null],[11,"clone","","",335,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",335,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",335,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",335,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",335,null],[11,"fmt","","",336,null],[11,"hash","","",336,null],[11,"eq","","",336,null],[11,"ne","","",336,null],[11,"clone","","",336,null],[11,"size","","",336,null],[11,"align","","",336,null],[11,"fmt","","",337,null],[11,"hash","","",337,null],[11,"eq","","",337,null],[11,"ne","","",337,null],[11,"new","","",337,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",337,null],[11,"min_size","","Get the size without trailing alignment padding.",337,null],[11,"stride","","Get the size with trailing aligment padding.",337,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",337,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"tys"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",338,null],[11,"eq","","",338,null],[11,"ne","","",338,null],[11,"fmt","","",338,null],[11,"fmt","","",339,null],[11,"clone","","",339,null],[11,"fmt","","",339,null],[11,"compute_uncached","","",338,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",338,null],[11,"size","","",338,null],[11,"align","","",338,null],[11,"fmt","","",340,null],[11,"clone","","",340,null],[11,"compute","","",340,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",340,null],[11,"new","rustc::ty::_match","",341,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",341,null],[11,"tcx","","",341,null],[11,"a_is_expected","","",341,null],[11,"relate_with_variance","","",341,null],[11,"regions","","",341,null],[11,"tys","","",341,null],[11,"binders","","",341,null],[11,"to_dep_node","rustc::ty::maps","",342,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",343,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",344,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",345,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",346,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",347,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",348,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",349,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",350,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",351,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",352,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",353,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",354,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",355,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"fmt","rustc::ty::outlives","",356,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",116,null],[11,"fmt","rustc::ty::relate","",357,null],[11,"clone","","",357,null],[11,"relate","rustc::ty::sty","",358,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"result"}}],[11,"relate","","",161,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"result"}}],[11,"relate","rustc::hir","",92,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"relate","syntax::abi","",359,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",360,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",361,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"result"}}],[11,"relate","collections::vec","",241,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",362,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"result"}}],[11,"relate","","",363,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"result"}}],[11,"relate","","",120,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"relate","","",163,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"result"}}],[11,"relate","","",364,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"result"}}],[11,"relate","","",121,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"result"}}],[11,"relate","alloc::rc","",365,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"relate","alloc::boxed","",366,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"result"}}],[11,"hash","rustc::ty::subst","",367,null],[11,"eq","","",367,null],[11,"ne","","",367,null],[11,"clone","","",367,null],[11,"new","","",367,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",367,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",367,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"tys"}],"output":{"name":"substs"}}],[11,"empty","","",367,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",367,null],[11,"type_for_def","","",367,null],[11,"self_ty","","",367,null],[11,"with_self_ty","","",367,null],[11,"erase_regions","","",367,null],[11,"with_method","","",367,null],[11,"with_method_from","","",367,null],[11,"with_method_from_subst","","",367,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",367,null],[11,"encode","","",367,null],[11,"decode","","",367,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",368,null],[11,"decode","","",368,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",368,null],[11,"hash","","",368,null],[11,"clone","","",368,null],[11,"eq","","",368,null],[11,"cmp","","",368,null],[11,"partial_cmp","","",368,null],[11,"all","","",368,null],[11,"to_uint","","",368,null],[11,"from_uint","","",368,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",369,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",369,null],[11,"hash","","",369,null],[11,"clone","","",369,null],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"fmt","","",369,null],[11,"empty","","",369,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",369,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",369,null],[11,"extend","","Appends `values` to the vector associated with `space`.",369,null],[11,"pop","","",369,null],[11,"truncate","","",369,null],[11,"replace","","",369,null],[11,"get_self","","",369,null],[11,"len","","",369,null],[11,"is_empty_in","","",369,null],[11,"get_slice","","",369,null],[11,"get_mut_slice","","",369,null],[11,"opt_get","","",369,null],[11,"get","","",369,null],[11,"iter","","",369,null],[11,"into_iter","","",369,null],[11,"iter_enumerated","","",369,null],[11,"as_slice","","",369,null],[11,"into_vec","","",369,null],[11,"all_vecs","","",369,null],[11,"all","","",369,null],[11,"any","","",369,null],[11,"is_empty","","",369,null],[11,"map","","",369,null],[11,"map_enumerated","","",369,null],[11,"split","","",369,null],[11,"with_slice","","",369,null],[11,"clone","","",370,null],[11,"next","","",370,null],[11,"size_hint","","",370,null],[11,"into_iter","","",369,null],[11,"new","rustc::ty::trait_def","",371,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",371,null],[11,"object_safety","","",371,null],[11,"set_object_safety","","",371,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",371,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",371,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",371,null],[11,"ancestors","","",371,null],[11,"for_each_impl","","",371,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",371,null],[11,"hash","","",372,null],[11,"cmp","","",372,null],[11,"partial_cmp","","",372,null],[11,"lt","","",372,null],[11,"le","","",372,null],[11,"gt","","",372,null],[11,"ge","","",372,null],[11,"clone","","",372,null],[11,"eq","","",372,null],[11,"ne","","",372,null],[18,"NO_TRAIT_FLAGS","rustc_metadata::middle","",372,null],[18,"HAS_DEFAULT_IMPL","","",372,null],[18,"IS_OBJECT_SAFE","","",372,null],[18,"OBJECT_SAFETY_VALID","","",372,null],[18,"IMPLS_VALID","","",372,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",372,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",372,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",372,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",372,null],[11,"is_all","","Returns `true` if all flags are currently set.",372,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",372,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",372,null],[11,"insert","","Inserts the specified flags in-place.",372,null],[11,"remove","","Removes the specified flags in-place.",372,null],[11,"toggle","","Toggles the specified flags in-place.",372,null],[11,"bitor","","Returns the union of the two sets of flags.",372,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",372,null],[11,"bitand","","Returns the intersection between the two sets of flags.",372,null],[11,"sub","","Returns the set difference of the two sets of flags.",372,null],[11,"not","","Returns the complement of this set of flags.",372,null],[11,"new","rustc::ty::walk","",373,{"inputs":[{"name":"tys"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",373,null],[11,"next","","",373,null],[11,"fmt","rustc::ty::wf","",374,null],[11,"to_ty","syntax::attr","",375,null],[11,"initial_discriminant","","",375,null],[11,"assert_ty_matches","","",375,null],[11,"disr_incr","","",375,null],[11,"clone","rustc::ty::util","",376,null],[11,"fmt","","",377,null],[11,"eq","","",377,null],[11,"cmp","","",377,null],[11,"partial_cmp","","",377,null],[11,"clone","","",377,null],[11,"can_type_implement_copy","rustc::ty","",378,null],[11,"pat_contains_ref_binding","rustc::ty::context","",119,null],[11,"arm_contains_ref_binding","","",119,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",119,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",119,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",119,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",119,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",119,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",119,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",119,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",119,null],[11,"moves_by_default","rustc::ty","",320,null],[11,"is_sized","","",320,null],[11,"layout","","",320,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",320,null],[11,"clone","rustc::ty::contents","",379,null],[11,"when","","",379,null],[11,"intersects","","",379,null],[11,"owns_owned","","",379,null],[11,"interior_param","","",379,null],[11,"interior_unsafe","","",379,null],[11,"needs_drop","","",379,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",379,null],[11,"union","","",379,null],[11,"has_dtor","","",379,null],[11,"bitor","","",379,null],[11,"bitand","","",379,null],[11,"sub","","",379,null],[11,"fmt","","",379,null],[11,"type_contents","rustc::ty","",320,null],[11,"new","rustc::ty::context","",380,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",381,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",119,null],[11,"deref","","",119,null],[11,"crate_name","","",119,null],[11,"crate_disambiguator","","",119,null],[11,"type_parameter_def","","",119,null],[11,"node_types","","",119,null],[11,"node_type_insert","","",119,null],[11,"intern_trait_def","","",119,null],[11,"alloc_trait_def","","",119,null],[11,"intern_adt_def","","",119,null],[11,"intern_stability","","",119,null],[11,"intern_layout","","",119,null],[11,"store_free_region_map","","",119,null],[11,"free_region_map","","",119,null],[11,"lift","","",119,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",119,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",119,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"hashmap"},{"name":"map"},{"name":"hashmap"},{"name":"hashset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",119,null],[11,"mk_type_list","","",119,null],[11,"mk_substs","","",119,null],[11,"mk_bare_fn","","",119,null],[11,"mk_region","","",119,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",119,null],[11,"mk_ty","","",119,null],[11,"mk_mach_int","","",119,null],[11,"mk_mach_uint","","",119,null],[11,"mk_mach_float","","",119,null],[11,"mk_str","","",119,null],[11,"mk_static_str","","",119,null],[11,"mk_enum","","",119,null],[11,"mk_box","","",119,null],[11,"mk_ptr","","",119,null],[11,"mk_ref","","",119,null],[11,"mk_mut_ref","","",119,null],[11,"mk_imm_ref","","",119,null],[11,"mk_mut_ptr","","",119,null],[11,"mk_imm_ptr","","",119,null],[11,"mk_nil_ptr","","",119,null],[11,"mk_array","","",119,null],[11,"mk_slice","","",119,null],[11,"mk_tup","","",119,null],[11,"mk_nil","","",119,null],[11,"mk_bool","","",119,null],[11,"mk_fn_def","","",119,null],[11,"mk_fn_ptr","","",119,null],[11,"mk_trait","","",119,null],[11,"mk_projection","","",119,null],[11,"mk_struct","","",119,null],[11,"mk_closure","","",119,null],[11,"mk_closure_from_closure_substs","","",119,null],[11,"mk_var","","",119,null],[11,"mk_int_var","","",119,null],[11,"mk_float_var","","",119,null],[11,"mk_infer","","",119,null],[11,"mk_param","","",119,null],[11,"mk_self_type","","",119,null],[11,"mk_param_from_def","","",119,null],[11,"trait_items","","",119,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",119,null],[11,"lift_to_tcx","core::option","",382,null],[11,"lift_to_tcx","core::result","",117,null],[11,"lift_to_tcx","collections::vec","",241,null],[11,"lift_to_tcx","rustc::ty::sty","",364,null],[11,"lift_to_tcx","","",120,null],[11,"lift_to_tcx","rustc::ty","",383,null],[11,"lift_to_tcx","","",384,null],[11,"lift_to_tcx","","",385,null],[11,"lift_to_tcx","","",361,null],[11,"lift_to_tcx","","",386,null],[11,"lift_to_tcx","rustc::ty::sty","",121,null],[11,"lift_to_tcx","","",163,null],[11,"lift_to_tcx","rustc::ty","",387,null],[11,"lift_to_tcx","rustc::ty::adjustment","",318,null],[11,"lift_to_tcx","rustc::ty::sty","",162,null],[11,"lift_to_tcx","","",161,null],[11,"lift_to_tcx","","",388,null],[11,"lift_to_tcx","rustc::ty::error","",324,null],[11,"lift_to_tcx","rustc::infer::type_variable","",141,null],[11,"lift_to_tcx","rustc::ty::error","",325,null],[11,"super_fold_with","rustc::hir","",92,null],[11,"super_visit_with","","",92,null],[11,"super_fold_with","syntax::abi","",359,null],[11,"super_visit_with","","",359,null],[11,"super_fold_with","core::option","",382,null],[11,"super_visit_with","","",382,null],[11,"super_fold_with","alloc::rc","",365,null],[11,"super_visit_with","","",365,null],[11,"super_fold_with","alloc::boxed","",366,null],[11,"super_visit_with","","",366,null],[11,"super_fold_with","collections::vec","",241,null],[11,"super_visit_with","","",241,null],[11,"super_fold_with","rustc::ty::sty","",121,null],[11,"fold_with","","",121,null],[11,"super_visit_with","","",121,null],[11,"visit_with","","",121,null],[11,"super_fold_with","syntax::ptr","",389,null],[11,"super_visit_with","","",389,null],[11,"super_fold_with","rustc::ty::subst","",369,null],[11,"super_visit_with","","",369,null],[11,"super_fold_with","rustc::ty::sty","",390,null],[11,"super_visit_with","","",390,null],[11,"super_fold_with","","",388,null],[11,"fold_with","","",388,null],[11,"super_visit_with","","",388,null],[11,"super_fold_with","","",358,null],[11,"fold_with","","",358,null],[11,"super_visit_with","","",358,null],[11,"super_fold_with","","",162,null],[11,"fold_with","","",162,null],[11,"super_visit_with","","",162,null],[11,"super_fold_with","","",161,null],[11,"fold_with","","",161,null],[11,"super_visit_with","","",161,null],[11,"super_fold_with","","",120,null],[11,"fold_with","","",120,null],[11,"super_visit_with","","",120,null],[11,"super_fold_with","rustc::ty","",391,null],[11,"fold_with","","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","rustc::ty::sty","",364,null],[11,"fold_with","","",364,null],[11,"super_visit_with","","",364,null],[11,"visit_with","","",364,null],[11,"super_fold_with","","",163,null],[11,"super_visit_with","","",163,null],[11,"super_fold_with","rustc::ty","",387,null],[11,"super_visit_with","","",387,null],[11,"super_fold_with","rustc::ty::adjustment","",318,null],[11,"fold_with","","",318,null],[11,"super_visit_with","","",318,null],[11,"super_fold_with","rustc::ty::sty","",363,null],[11,"super_visit_with","","",363,null],[11,"super_fold_with","","",362,null],[11,"fold_with","","",362,null],[11,"super_visit_with","","",362,null],[11,"super_fold_with","rustc::ty","",392,null],[11,"super_visit_with","","",392,null],[11,"super_fold_with","","",393,null],[11,"super_visit_with","","",393,null],[11,"super_fold_with","","",394,null],[11,"super_visit_with","","",394,null],[11,"super_fold_with","","",395,null],[11,"super_visit_with","","",395,null],[11,"super_fold_with","","",396,null],[11,"super_visit_with","","",396,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","","",361,null],[11,"super_visit_with","","",361,null],[11,"super_fold_with","rustc::ty::sty","",360,null],[11,"super_visit_with","","",360,null],[11,"super_fold_with","rustc::ty","",397,null],[11,"super_visit_with","","",397,null],[11,"super_fold_with","","",384,null],[11,"super_visit_with","","",384,null],[11,"super_fold_with","","",383,null],[11,"super_visit_with","","",383,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",398,null],[11,"super_visit_with","","",398,null],[11,"super_fold_with","","",378,null],[11,"super_visit_with","","",378,null],[11,"super_fold_with","","",399,null],[11,"super_visit_with","","",399,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"hash","","",358,null],[11,"eq","","",358,null],[11,"ne","","",358,null],[11,"clone","","",358,null],[11,"decode","","",400,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",400,null],[11,"hash","","",400,null],[11,"cmp","","",400,null],[11,"partial_cmp","","",400,null],[11,"lt","","",400,null],[11,"le","","",400,null],[11,"gt","","",400,null],[11,"ge","","",400,null],[11,"eq","","",400,null],[11,"ne","","",400,null],[11,"clone","","",400,null],[11,"decode","","",401,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",401,null],[11,"hash","","",401,null],[11,"cmp","","",401,null],[11,"partial_cmp","","",401,null],[11,"lt","","",401,null],[11,"le","","",401,null],[11,"gt","","",401,null],[11,"ge","","",401,null],[11,"eq","","",401,null],[11,"ne","","",401,null],[11,"clone","","",401,null],[11,"fmt","","",402,null],[11,"hash","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"clone","","",402,null],[11,"fmt","","",163,null],[11,"hash","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"encode","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",390,null],[11,"eq","","",390,null],[11,"ne","","",390,null],[11,"clone","","",390,null],[11,"principal_def_id","","",390,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",390,null],[11,"projection_bounds_with_self_ty","","",390,null],[11,"hash","","",120,null],[11,"eq","","",120,null],[11,"ne","","",120,null],[11,"clone","","",120,null],[11,"self_ty","","",121,null],[11,"def_id","","",121,null],[11,"substs","","",121,null],[11,"input_types","","",121,null],[11,"to_poly_trait_predicate","","",121,null],[11,"fmt","","",121,null],[11,"hash","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",121,null],[11,"as_ref","","",121,null],[11,"map_bound_ref","","",121,null],[11,"map_bound","","",121,null],[11,"fmt","rustc::ty","",403,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"hash","","",360,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"clone","","",360,null],[11,"sort_key","","",360,null],[11,"fmt","","",404,null],[11,"hash","","",404,null],[11,"eq","","",404,null],[11,"ne","","",404,null],[11,"clone","","",404,null],[11,"hash","","",388,null],[11,"eq","","",388,null],[11,"ne","","",388,null],[11,"clone","","",388,null],[11,"decode","","",162,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,null],[11,"fmt","","",162,null],[11,"hash","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"clone","","",162,null],[11,"diverges","","",162,null],[11,"unwrap","","",162,null],[11,"unwrap_or","","",162,null],[11,"diverges","","",121,null],[11,"hash","","",161,null],[11,"eq","","",161,null],[11,"ne","","",161,null],[11,"clone","","",161,null],[11,"inputs","","",121,null],[11,"input","","",121,null],[11,"output","","",121,null],[11,"variadic","","",121,null],[11,"hash","","",405,null],[11,"eq","","",405,null],[11,"ne","","",405,null],[11,"clone","","",405,null],[11,"new","","",405,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",405,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",405,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",405,null],[11,"is_self","","",405,null],[11,"fmt","","",406,null],[11,"decode","","",406,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",406,null],[11,"hash","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",406,null],[11,"decode","","",364,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",364,null],[11,"hash","","",364,null],[11,"eq","","",364,null],[11,"ne","","",364,null],[11,"clone","","",364,null],[11,"fmt","","",407,null],[11,"decode","","",407,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",407,null],[11,"hash","","",407,null],[11,"eq","","",407,null],[11,"ne","","",407,null],[11,"clone","","",407,null],[11,"hash","","",150,null],[11,"eq","","",150,null],[11,"ne","","",150,null],[11,"clone","","",150,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"hash","","",148,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"hash","","",146,null],[11,"decode","","",146,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"decode","","",408,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",408,null],[11,"hash","","",408,null],[11,"eq","","",408,null],[11,"ne","","",408,null],[11,"clone","","",408,null],[11,"hash","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"clone","","",409,null],[11,"clone","","",362,null],[11,"hash","","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"new","","",362,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"existentialbounds"}}],[11,"fmt","","",363,null],[11,"hash","","",363,null],[11,"eq","","",363,null],[11,"ne","","",363,null],[11,"clone","","",363,null],[11,"empty","","",363,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",363,null],[11,"to_predicates","","",363,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",410,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",410,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",410,null],[11,"clear","","",410,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",410,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",410,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",410,null],[11,"union","","Returns the union of both `EnumSets`.",410,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",410,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",410,null],[11,"remove","","Removes an enum from the EnumSet",410,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",410,null],[11,"iter","","Returns an iterator over an `EnumSet`.",410,null],[11,"clone","collections::binary_heap","",411,null],[11,"clone_from","","",411,null],[11,"default","","",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",411,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",411,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",411,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",411,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",411,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",411,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",411,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",411,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",411,null],[11,"push","","Pushes an item onto the binary heap.",411,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",411,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",411,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",411,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",411,null],[11,"len","","Returns the length of the binary heap.",411,null],[11,"is_empty","","Checks if the binary heap is empty.",411,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",411,null],[11,"clear","","Drops all items from the binary heap.",411,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",411,null],[11,"clone","","",412,null],[11,"next","","",412,null],[11,"size_hint","","",412,null],[11,"next_back","","",412,null],[11,"clone","","",413,null],[11,"next","","",413,null],[11,"size_hint","","",413,null],[11,"next_back","","",413,null],[11,"next","","",414,null],[11,"size_hint","","",414,null],[11,"next_back","","",414,null],[11,"from","","",411,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",411,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",411,null],[11,"extend","","",411,null],[11,"extend","","",411,null],[11,"drop","collections::btree::map","",415,null],[11,"clone","","",415,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",415,null],[11,"get","","Returns a reference to the value corresponding to the key.",415,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",415,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",415,null],[11,"insert","","Inserts a key-value pair into the map.",415,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",415,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",415,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",415,null],[11,"next","","",416,null],[11,"size_hint","","",416,null],[11,"next_back","","",416,null],[11,"len","","",416,null],[11,"clone","","",416,null],[11,"next","","",417,null],[11,"size_hint","","",417,null],[11,"next_back","","",417,null],[11,"len","","",417,null],[11,"into_iter","","",415,null],[11,"drop","","",418,null],[11,"next","","",418,null],[11,"size_hint","","",418,null],[11,"next_back","","",418,null],[11,"len","","",418,null],[11,"next","","",419,null],[11,"size_hint","","",419,null],[11,"next_back","","",419,null],[11,"len","","",419,null],[11,"clone","","",419,null],[11,"next","","",420,null],[11,"size_hint","","",420,null],[11,"next_back","","",420,null],[11,"len","","",420,null],[11,"clone","","",420,null],[11,"next","","",421,null],[11,"next","","",422,null],[11,"size_hint","","",422,null],[11,"next_back","","",422,null],[11,"len","","",422,null],[11,"next_back","","",421,null],[11,"clone","","",421,null],[11,"next","","",423,null],[11,"next_back","","",423,null],[11,"from_iter","","",415,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",415,null],[11,"extend","","",415,null],[11,"hash","","",415,null],[11,"default","","",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",415,null],[11,"partial_cmp","","",415,null],[11,"cmp","","",415,null],[11,"fmt","","",415,null],[11,"index","","",415,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",415,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",415,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",415,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",415,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",415,null],[11,"len","","Returns the number of elements in the map.",415,null],[11,"is_empty","","Returns true if the map contains no elements.",415,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",424,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",424,null],[11,"key","","Returns a reference to this entry&#39;s key.",424,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",425,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",425,null],[11,"key","","Gets a reference to the key in the entry.",426,null],[11,"get","","Gets a reference to the value in the entry.",426,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",426,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",426,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",426,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",426,null],[11,"partial_cmp","collections::btree::set","",427,null],[11,"lt","","",427,null],[11,"le","","",427,null],[11,"gt","","",427,null],[11,"ge","","",427,null],[11,"cmp","","",427,null],[11,"eq","","",427,null],[11,"ne","","",427,null],[11,"hash","","",427,null],[11,"clone","","",427,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",427,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",427,null],[11,"difference","","Visits the values representing the difference, in ascending order.",427,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",427,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",427,null],[11,"union","","Visits the values representing the union, in ascending order.",427,null],[11,"len","","Returns the number of elements in the set.",427,null],[11,"is_empty","","Returns true if the set contains no elements.",427,null],[11,"clear","","Clears the set, removing all values.",427,null],[11,"contains","","Returns `true` if the set contains a value.",427,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",427,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",427,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",427,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",427,null],[11,"insert","","Adds a value to the set.",427,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",427,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",427,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",427,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",427,null],[11,"from_iter","","",427,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",427,null],[11,"extend","","",427,null],[11,"extend","","",427,null],[11,"default","","",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",427,null],[11,"clone","","",428,null],[11,"next","","",428,null],[11,"size_hint","","",428,null],[11,"next_back","","",428,null],[11,"len","","",428,null],[11,"next","","",429,null],[11,"size_hint","","",429,null],[11,"next_back","","",429,null],[11,"len","","",429,null],[11,"clone","","",430,null],[11,"next","","",430,null],[11,"next_back","","",430,null],[11,"clone","","",431,null],[11,"next","","",431,null],[11,"size_hint","","",431,null],[11,"clone","","",432,null],[11,"next","","",432,null],[11,"size_hint","","",432,null],[11,"clone","","",433,null],[11,"next","","",433,null],[11,"size_hint","","",433,null],[11,"clone","","",434,null],[11,"next","","",434,null],[11,"size_hint","","",434,null],[11,"borrow","collections::borrow","",435,null],[11,"clone","","",435,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",435,null],[11,"into_owned","","Extracts the owned data.",435,null],[11,"deref","","",435,null],[11,"cmp","","",435,null],[11,"eq","","",435,null],[11,"partial_cmp","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"hash","","",435,null],[11,"as_ref","","",435,null],[11,"hash","collections::enum_set","",410,null],[11,"cmp","","",410,null],[11,"partial_cmp","","",410,null],[11,"lt","","",410,null],[11,"le","","",410,null],[11,"gt","","",410,null],[11,"ge","","",410,null],[11,"eq","","",410,null],[11,"ne","","",410,null],[11,"clone","","",410,null],[11,"fmt","","",410,null],[11,"sub","","",410,null],[11,"bitor","","",410,null],[11,"bitand","","",410,null],[11,"bitxor","","",410,null],[11,"clone","","",436,null],[11,"next","","",436,null],[11,"size_hint","","",436,null],[11,"from_iter","","",410,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",410,null],[11,"extend","","",410,null],[11,"clone","collections::linked_list","",437,null],[11,"clone","","",438,null],[11,"default","","",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",439,null],[11,"iter","","Provides a forward iterator.",439,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",439,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",439,null],[11,"len","","Returns the length of the `LinkedList`.",439,null],[11,"clear","","Removes all elements from the `LinkedList`.",439,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",439,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",439,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",439,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",439,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",439,null],[11,"push_front","","Adds an element first in the list.",439,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",439,null],[11,"push_back","","Appends an element to the back of a list",439,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",439,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",439,null],[11,"front_place","","Returns a place for insertion at the front of the list.",439,null],[11,"back_place","","Returns a place for insertion at the back of the list.",439,null],[11,"drop","","",439,null],[11,"next","","",437,null],[11,"size_hint","","",437,null],[11,"next_back","","",437,null],[11,"next","","",440,null],[11,"size_hint","","",440,null],[11,"next_back","","",440,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",440,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",440,null],[11,"next","","",438,null],[11,"size_hint","","",438,null],[11,"next_back","","",438,null],[11,"from_iter","","",439,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",439,null],[11,"extend","","",439,null],[11,"extend","","",439,null],[11,"eq","","",439,null],[11,"ne","","",439,null],[11,"partial_cmp","","",439,null],[11,"cmp","","",439,null],[11,"clone","","",439,null],[11,"fmt","","",439,null],[11,"hash","","",439,null],[11,"make_place","","",441,null],[11,"pointer","","",441,null],[11,"finalize","","",441,null],[11,"make_place","","",442,null],[11,"pointer","","",442,null],[11,"finalize","","",442,null],[11,"start","core::ops","",443,null],[11,"end","","",444,null],[11,"start","","",445,null],[11,"end","","",445,null],[11,"borrow","collections::vec","",241,null],[11,"borrow_mut","","",241,null],[11,"clone","collections::str","",446,null],[11,"next","","",446,null],[11,"size_hint","","",446,null],[11,"borrow","collections::string","",447,null],[11,"fmt","core::str::pattern","",448,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"clone","","",448,null],[11,"fmt","","",449,null],[11,"clone","","",449,null],[11,"haystack","","",449,null],[11,"next","","",449,null],[11,"next_match","","",449,null],[11,"next_reject","","",449,null],[11,"next_back","","",449,null],[11,"next_match_back","","",449,null],[11,"next_reject_back","","",449,null],[11,"fmt","","",450,null],[11,"clone","","",450,null],[11,"haystack","","",450,null],[11,"next","","",450,null],[11,"next_match","","",450,null],[11,"next_reject","","",450,null],[11,"next_back","","",450,null],[11,"next_match_back","","",450,null],[11,"next_reject_back","","",450,null],[11,"clone","","",451,null],[11,"fmt","","",451,null],[11,"haystack","","",451,null],[11,"next","","",451,null],[11,"next_match","","",451,null],[11,"next_reject","","",451,null],[11,"next_back","","",451,null],[11,"next_match_back","","",451,null],[11,"next_reject_back","","",451,null],[11,"fmt","","",452,null],[11,"clone","","",452,null],[11,"haystack","","",452,null],[11,"next","","",452,null],[11,"next_match","","",452,null],[11,"next_back","","",452,null],[11,"next_match_back","","",452,null],[11,"cmp","collections::string","",447,null],[11,"partial_cmp","","",447,null],[11,"lt","","",447,null],[11,"le","","",447,null],[11,"gt","","",447,null],[11,"ge","","",447,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"new","","Creates a new empty `String`.",447,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",447,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",447,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",447,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",447,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",447,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",447,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",447,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",447,null],[11,"as_str","","Extracts a string slice containing the entire string.",447,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",447,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",447,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",447,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",447,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",447,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",447,null],[11,"push","","Appends the given `char` to the end of this `String`.",447,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",447,null],[11,"truncate","","Shortens this `String` to the specified length.",447,null],[11,"pop","","Removes the last character from the string buffer and returns it.",447,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",447,null],[11,"insert","","Inserts a character into this `String` at a byte position.",447,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",447,null],[11,"len","","Returns the length of this `String`, in bytes.",447,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",447,null],[11,"clear","","Truncates this `String`, removing all contents.",447,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",447,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",447,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",453,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",453,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"clone","","",447,null],[11,"clone_from","","",447,null],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::string","",447,null],[11,"ne","","",447,null],[11,"default","","",447,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",447,null],[11,"fmt","","",447,null],[11,"hash","","",447,null],[11,"add","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"deref","","",447,null],[11,"deref_mut","","",447,null],[11,"from_str","","",447,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",455,null],[11,"fmt","","",455,null],[11,"fmt","","",455,null],[11,"eq","","",455,null],[11,"as_ref","","",447,null],[11,"as_ref","","",447,null],[11,"from","","",447,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",435,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",435,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",447,null],[11,"write_str","","",447,null],[11,"write_char","","",447,null],[11,"drop","","",456,null],[11,"next","","",456,null],[11,"size_hint","","",456,null],[11,"next_back","","",456,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",241,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",241,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",241,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",241,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",241,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",241,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",241,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",241,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",241,null],[11,"as_slice","","Extracts a slice containing the entire vector.",241,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",241,null],[11,"set_len","","Sets the length of a vector.",241,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",241,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",241,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",241,null],[11,"retain","","Retains only the elements specified by the predicate.",241,null],[11,"push","","Appends an element to the back of a collection.",241,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",241,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",241,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",241,null],[11,"clear","","Clears the vector, removing all values.",241,null],[11,"len","","Returns the number of elements in the vector.",241,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",241,null],[11,"split_off","","Splits the collection into two at the given index.",241,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",241,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",241,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",241,null],[11,"clone","","",241,null],[11,"clone_from","","",241,null],[11,"hash","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"deref","","",241,null],[11,"deref_mut","","",241,null],[11,"from_iter","","",241,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",241,null],[11,"extend","","",241,null],[11,"extend","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::vec","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"partial_cmp","","",241,null],[11,"cmp","","",241,null],[11,"drop","","",241,null],[11,"default","","",241,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"from","","",241,null],[11,"from","","",241,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",435,null],[11,"from","","",435,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",435,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",457,null],[11,"size_hint","","",457,null],[11,"count","","",457,null],[11,"next_back","","",457,null],[11,"clone","","",457,null],[11,"drop","","",457,null],[11,"next","","",458,null],[11,"size_hint","","",458,null],[11,"next_back","","",458,null],[11,"drop","","",458,null],[11,"clone","collections::vec_deque","",459,null],[11,"drop","","",459,null],[11,"default","","",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",459,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",459,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",459,null],[11,"swap","","Swaps elements at indices `i` and `j`.",459,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",459,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",459,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",459,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",459,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",459,null],[11,"iter","","Returns a front-to-back iterator.",459,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",459,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"len","","Returns the number of elements in the `VecDeque`.",459,null],[11,"is_empty","","Returns true if the buffer contains no elements",459,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",459,null],[11,"clear","","Clears the buffer, removing all values.",459,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",459,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",459,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",459,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",459,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",459,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",459,null],[11,"push_front","","Inserts an element first in the sequence.",459,null],[11,"push_back","","Appends an element to the back of a buffer",459,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",459,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",459,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",459,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",459,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",459,null],[11,"split_off","","Splits the collection into two at the given index.",459,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",459,null],[11,"retain","","Retains only the elements specified by the predicate.",459,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",459,null],[11,"clone","","",460,null],[11,"next","","",460,null],[11,"size_hint","","",460,null],[11,"next_back","","",460,null],[11,"next","","",461,null],[11,"size_hint","","",461,null],[11,"next_back","","",461,null],[11,"clone","","",462,null],[11,"next","","",462,null],[11,"size_hint","","",462,null],[11,"next_back","","",462,null],[11,"drop","","",463,null],[11,"next","","",463,null],[11,"size_hint","","",463,null],[11,"next_back","","",463,null],[11,"eq","","",459,null],[11,"partial_cmp","","",459,null],[11,"cmp","","",459,null],[11,"hash","","",459,null],[11,"index","","",459,null],[11,"index_mut","","",459,null],[11,"from_iter","","",459,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",459,null],[11,"extend","","",459,null],[11,"extend","","",459,null],[11,"fmt","","",459,null],[11,"from","","",459,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",464,null],[11,"ne","","",464,null],[11,"hash","","",464,null],[11,"fmt","","",464,null],[11,"clone","","",464,null],[11,"clone","alloc::boxed","",465,null],[11,"pointer","","",466,null],[11,"make_place","","",466,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",466,null],[11,"finalize","","",366,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",465,null],[11,"drop","","",466,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",366,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",366,null],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",366,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",366,null],[11,"clone","","",366,null],[11,"eq","","",366,null],[11,"ne","","",366,null],[11,"partial_cmp","","",366,null],[11,"lt","","",366,null],[11,"le","","",366,null],[11,"ge","","",366,null],[11,"gt","","",366,null],[11,"cmp","","",366,null],[11,"hash","","",366,null],[11,"from","","",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"deref","","",366,null],[11,"deref_mut","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"call_once","","",366,null],[11,"call_once","","",366,null],[11,"clone","","",366,null],[11,"borrow","","",366,null],[11,"borrow_mut","","",366,null],[11,"as_ref","","",366,null],[11,"as_mut","","",366,null],[11,"deref","rustc::ty::sty","",363,null],[11,"deref_mut","","",363,null],[11,"fmt","","",467,null],[11,"hash","","",467,null],[11,"decode","","",467,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",467,null],[11,"encode","","",467,null],[11,"clone","","",467,null],[11,"to_usize","","",467,null],[11,"from_usize","","",467,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","rustc::ty::context","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",119,null],[11,"new","rustc::ty::sty","",406,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",406,null],[11,"is_bound","","",364,null],[11,"needs_infer","","",364,null],[11,"escapes_depth","","",364,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",364,null],[11,"as_opt_param_ty","rustc::ty","",320,null],[11,"is_nil","","",320,null],[11,"is_empty","","",320,null],[11,"is_primitive","","",320,null],[11,"is_ty_var","","",320,null],[11,"is_phantom_data","","",320,null],[11,"is_bool","","",320,null],[11,"is_param","","",320,null],[11,"is_self","","",320,null],[11,"is_slice","","",320,null],[11,"is_structural","","",320,null],[11,"is_simd","","",320,null],[11,"sequence_element_type","","",320,null],[11,"simd_type","","",320,null],[11,"simd_size","","",320,null],[11,"is_region_ptr","","",320,null],[11,"is_unsafe_ptr","","",320,null],[11,"is_unique","","",320,null],[11,"is_scalar","","",320,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",320,null],[11,"is_trait","","",320,null],[11,"is_integral","","",320,null],[11,"is_fresh","","",320,null],[11,"is_uint","","",320,null],[11,"is_char","","",320,null],[11,"is_fp","","",320,null],[11,"is_numeric","","",320,null],[11,"is_signed","","",320,null],[11,"is_machine","","",320,null],[11,"has_concrete_skeleton","","",320,null],[11,"builtin_deref","","",320,null],[11,"builtin_index","","",320,null],[11,"fn_sig","","",320,null],[11,"fn_abi","","Returns the ABI of the given function.",320,null],[11,"fn_args","","",320,null],[11,"fn_ret","","",320,null],[11,"is_fn","","",320,null],[11,"ty_to_def_id","","",320,null],[11,"ty_adt_def","","",320,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",320,null],[11,"clone","","",468,null],[11,"clone","","",469,null],[11,"is_present","","",469,null],[11,"has_drop_flag","","",469,null],[11,"fmt","","",470,null],[11,"eq","","",470,null],[11,"ne","","",470,null],[11,"clone","","",470,null],[11,"id","","",470,null],[11,"fmt","","",391,null],[11,"hash","","",391,null],[11,"eq","","",391,null],[11,"ne","","",391,null],[11,"clone","","",391,null],[11,"with_fresh_ty_vars","","",391,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",471,null],[11,"def","","",471,null],[11,"def_id","","",471,null],[11,"name","","",471,null],[11,"vis","","",471,null],[11,"container","","",471,null],[11,"as_opt_method","","",471,null],[11,"fmt","","",472,null],[11,"clone","","",472,null],[11,"def_id","","",472,null],[11,"eq","","",473,null],[11,"ne","","",473,null],[11,"fmt","","",473,null],[11,"clone","","",473,null],[11,"is_descendant_of","rustc::hir::map","",35,null],[11,"from_hir","rustc::ty","",473,{"inputs":[{"name":"visibility"},{"name":"u32"},{"name":"tyctxt"}],"output":{"name":"visibility"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",473,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",473,null],[11,"fmt","","",474,null],[11,"clone","","",474,null],[11,"new","","",474,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",474,null],[11,"eq","","",474,null],[11,"hash","","",474,null],[11,"fmt","","",475,null],[11,"clone","","",475,null],[11,"fmt","","",476,null],[11,"clone","","",476,null],[11,"encode","","",477,null],[11,"decode","","",477,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",477,null],[11,"ne","","",477,null],[11,"clone","","",477,null],[11,"encode","","",478,null],[11,"decode","","",478,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",478,null],[11,"clone","","",478,null],[11,"fmt","","",479,null],[11,"clone","","",479,null],[11,"fmt","","",480,null],[11,"hash","","",480,null],[11,"eq","","",480,null],[11,"ne","","",480,null],[11,"clone","","",480,null],[11,"expr","","",480,{"inputs":[{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",480,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",481,null],[11,"eq","","",481,null],[11,"ne","","",481,null],[11,"clone","","",481,null],[11,"fmt","","",482,null],[11,"clone","","",482,null],[11,"hash","","",403,null],[11,"cmp","","",403,null],[11,"partial_cmp","","",403,null],[11,"lt","","",403,null],[11,"le","","",403,null],[11,"gt","","",403,null],[11,"ge","","",403,null],[11,"clone","","",403,null],[11,"eq","","",403,null],[11,"ne","","",403,null],[18,"HAS_PARAMS","rustc_metadata::middle","",403,null],[18,"HAS_SELF","","",403,null],[18,"HAS_TY_INFER","","",403,null],[18,"HAS_RE_INFER","","",403,null],[18,"HAS_RE_EARLY_BOUND","","",403,null],[18,"HAS_FREE_REGIONS","","",403,null],[18,"HAS_TY_ERR","","",403,null],[18,"HAS_PROJECTION","","",403,null],[18,"HAS_TY_CLOSURE","","",403,null],[18,"HAS_LOCAL_NAMES","","",403,null],[18,"KEEP_IN_LOCAL_TCX","","",403,null],[18,"NEEDS_SUBST","","",403,null],[18,"NOMINAL_FLAGS","","",403,null],[18,"SIZEDNESS_CACHED","","",403,null],[18,"IS_SIZED","","",403,null],[18,"MOVENESS_CACHED","","",403,null],[18,"MOVES_BY_DEFAULT","","",403,null],[11,"empty","rustc::ty","Returns an empty set of flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",403,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",403,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",403,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",403,null],[11,"is_all","","Returns `true` if all flags are currently set.",403,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",403,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",403,null],[11,"insert","","Inserts the specified flags in-place.",403,null],[11,"remove","","Removes the specified flags in-place.",403,null],[11,"toggle","","Toggles the specified flags in-place.",403,null],[11,"bitor","","Returns the union of the two sets of flags.",403,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",403,null],[11,"bitand","","Returns the intersection between the two sets of flags.",403,null],[11,"sub","","Returns the set difference of the two sets of flags.",403,null],[11,"not","","Returns the complement of this set of flags.",403,null],[11,"eq","","",320,null],[11,"hash","","",320,null],[11,"hash","","",483,null],[11,"eq","","",483,null],[11,"ne","","",483,null],[11,"clone","","",483,null],[11,"decode","","",484,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",484,null],[11,"fmt","","",484,null],[11,"hash","","",484,null],[11,"eq","","",484,null],[11,"clone","","",484,null],[11,"fmt","","",485,null],[11,"clone","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[11,"clone","","",486,null],[11,"eq","","",486,null],[11,"ne","","",486,null],[11,"clone","","",398,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"clone","","",147,null],[11,"clone","","",393,null],[11,"clone","","",392,null],[11,"clone","","",394,null],[11,"to_early_bound_region","","",394,null],[11,"to_bound_region","","",394,null],[11,"fmt","","",395,null],[11,"clone","","",395,null],[11,"empty","","",395,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",395,null],[11,"has_type_params","","",395,null],[11,"has_region_params","","",395,null],[11,"clone","","",396,null],[11,"empty","","",396,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",396,null],[11,"instantiate_supertrait","","",396,null],[11,"hash","","",386,null],[11,"eq","","",386,null],[11,"ne","","",386,null],[11,"clone","","",386,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",386,null],[11,"hash","","",383,null],[11,"eq","","",383,null],[11,"ne","","",383,null],[11,"clone","","",383,null],[11,"def_id","","",383,null],[11,"input_types","","",383,null],[11,"self_ty","","",383,null],[11,"def_id","rustc::ty::sty","",121,null],[11,"dep_node","","",121,null],[11,"fmt","rustc::ty","",384,null],[11,"hash","","",384,null],[11,"eq","","",384,null],[11,"ne","","",384,null],[11,"clone","","",384,null],[11,"fmt","","",385,null],[11,"hash","","",385,null],[11,"eq","","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"hash","","",361,null],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"clone","","",361,null],[11,"item_name","rustc::ty::sty","",121,null],[11,"sort_key","","",121,null],[11,"to_poly_trait_ref","","",120,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_predicate","","",120,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",121,null],[11,"walk_tys","rustc::ty","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",386,null],[11,"to_opt_poly_trait_ref","","",386,null],[11,"clone","","",397,null],[11,"empty","","",397,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",397,null],[11,"new","rustc::ty::sty","",120,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",120,null],[11,"input_types","","",120,null],[11,"clone","rustc::ty","",378,null],[11,"with_caller_bounds","","",378,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",378,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",399,null],[11,"clone","","",399,null],[11,"hash","","",487,null],[11,"cmp","","",487,null],[11,"partial_cmp","","",487,null],[11,"lt","","",487,null],[11,"le","","",487,null],[11,"gt","","",487,null],[11,"ge","","",487,null],[11,"clone","","",487,null],[11,"eq","","",487,null],[11,"ne","","",487,null],[18,"NO_ADT_FLAGS","rustc_metadata::middle","",487,null],[18,"IS_ENUM","","",487,null],[18,"IS_DTORCK","","",487,null],[18,"IS_DTORCK_VALID","","",487,null],[18,"IS_PHANTOM_DATA","","",487,null],[18,"IS_SIMD","","",487,null],[18,"IS_FUNDAMENTAL","","",487,null],[18,"IS_NO_DROP_FLAG","","",487,null],[11,"empty","rustc::ty","Returns an empty set of flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",487,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",487,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",487,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",487,null],[11,"is_all","","Returns `true` if all flags are currently set.",487,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",487,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",487,null],[11,"insert","","Inserts the specified flags in-place.",487,null],[11,"remove","","Removes the specified flags in-place.",487,null],[11,"toggle","","Toggles the specified flags in-place.",487,null],[11,"bitor","","Returns the union of the two sets of flags.",487,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",487,null],[11,"bitand","","Returns the intersection between the two sets of flags.",487,null],[11,"sub","","Returns the set difference of the two sets of flags.",487,null],[11,"not","","Returns the complement of this set of flags.",487,null],[11,"eq","","",488,null],[11,"hash","","",488,null],[11,"eq","","",489,null],[11,"fmt","","",489,null],[11,"clone","","",489,null],[11,"decode","","",490,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",490,null],[11,"fmt","","",490,null],[11,"hash","","",490,null],[11,"eq","","",490,null],[11,"clone","","",490,null],[11,"from_variant_data","","",490,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantkind"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",488,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",488,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",488,null],[11,"is_simd","","",488,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",488,null],[11,"has_dtor","","Returns whether this type has a destructor.",488,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",488,null],[11,"type_scheme","","",488,null],[11,"predicates","","",488,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",488,null],[11,"is_empty","","",488,null],[11,"is_univariant","","",488,null],[11,"is_payloadfree","","",488,null],[11,"variant_with_id","","",488,null],[11,"variant_index_with_id","","",488,null],[11,"variant_of_def","","",488,null],[11,"destructor","","",488,null],[11,"set_destructor","","",488,null],[11,"dtor_kind","","",488,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",488,null],[11,"kind","","",491,null],[11,"is_tuple_struct","","",491,null],[11,"find_field_named","","",491,null],[11,"index_of_field_named","","",491,null],[11,"field_named","","",491,null],[11,"new","","",492,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"fielddefdata"}}],[11,"ty","","",492,null],[11,"unsubst_ty","","",492,null],[11,"fulfill_ty","","",492,null],[11,"clone","","",387,null],[11,"decode","","",493,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",493,null],[11,"fmt","","",493,null],[11,"hash","","",493,null],[11,"eq","","",493,null],[11,"cmp","","",493,null],[11,"partial_cmp","","",493,null],[11,"clone","","",493,null],[11,"trait_did","","",493,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",493,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",320,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",320,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",320,null],[11,"is_noop","","",387,null],[11,"eq","","",494,null],[11,"fmt","","",494,null],[11,"clone","","",494,null],[11,"from_mutbl","","",494,{"inputs":[{"name":"mutability"}],"output":{"name":"lvaluepreference"}}],[11,"from_mutbl","","",484,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",484,null],[11,"to_user_str","","",484,null],[11,"node_id_to_type","rustc::ty::context","",119,null],[11,"node_id_to_type_opt","","",119,null],[11,"node_id_item_substs","","",119,null],[11,"pat_ty","","",119,null],[11,"pat_ty_opt","","",119,null],[11,"expr_ty","","",119,null],[11,"expr_ty_opt","","",119,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",119,null],[11,"expr_ty_adjusted_opt","","",119,null],[11,"expr_span","","",119,null],[11,"local_var_name_str","","",119,null],[11,"resolve_expr","","",119,null],[11,"expr_is_lval","","",119,null],[11,"provided_trait_methods","","",119,null],[11,"associated_consts","","",119,null],[11,"trait_impl_polarity","","",119,null],[11,"custom_coerce_unsized_kind","","",119,null],[11,"impl_or_trait_item","","",119,null],[11,"trait_item_def_ids","","",119,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",119,null],[11,"is_impl","","Returns whether this DefId refers to an impl",119,null],[11,"trait_ref_to_def_id","","",119,null],[11,"def_key","","",119,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",119,null],[11,"item_name","","",119,null],[11,"register_item_type","","",119,null],[11,"lookup_item_type","","",119,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",119,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",119,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",119,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",119,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",119,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",119,null],[11,"get_attrs","","Get the attributes of a definition.",119,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",119,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",119,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",119,null],[11,"item_variances","","",119,null],[11,"trait_has_default_impl","","",119,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",119,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",119,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",119,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",119,null],[11,"closure_kind","","",119,null],[11,"closure_type","","",119,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",119,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",119,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",119,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",119,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",119,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",119,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",119,null],[11,"is_method_call","","",119,null],[11,"is_overloaded_autoderef","","",119,null],[11,"upvar_capture","","",119,null],[11,"visit_all_items_in_krate","","",119,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",119,null],[11,"fmt","rustc::ty","",495,null],[11,"eq","","",495,null],[11,"ne","","",495,null],[11,"clone","","",495,null],[11,"with_freevars","rustc::ty::context","",119,null],[11,"fmt","rustc::util::common","",496,null],[11,"clone","","",496,null],[11,"drop","","",497,null],[11,"memoize","core::cell","",6,null],[11,"eq","rustc::util::ppaux","",498,null],[11,"clone","","",498,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",392,null],[11,"fmt","","",394,null],[11,"fmt","","",320,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"fmt","rustc::ty::subst","",367,null],[11,"fmt","rustc::ty","",387,null],[11,"fmt","rustc::ty::sty","",120,null],[11,"fmt","rustc::ty::trait_def","",371,null],[11,"fmt","rustc::ty","",488,null],[11,"fmt","rustc::ty::adjustment","",316,null],[11,"fmt","","",317,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",386,null],[11,"fmt","rustc::ty::sty","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",364,null],[11,"fmt","","",388,null],[11,"fmt","rustc::ty","",398,null],[11,"fmt","","",378,null],[11,"fmt","","",393,null],[11,"fmt","rustc::ty::sty","",364,null],[11,"fmt","","",400,null],[11,"fmt","rustc::ty","",478,null],[11,"fmt","","",477,null],[11,"fmt","","",396,null],[11,"fmt","","",397,null],[11,"fmt","","",471,null],[11,"fmt","rustc::ty::sty","",161,null],[11,"fmt","","",362,null],[11,"fmt","","",363,null],[11,"fmt","","",150,null],[11,"fmt","","",144,null],[11,"fmt","","",148,null],[11,"fmt","","",146,null],[11,"fmt","","",161,null],[11,"fmt","","",409,null],[11,"fmt","rustc::ty","",147,null],[11,"fmt","rustc::ty::sty","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",121,null],[11,"fmt","","",120,null],[11,"fmt","","",402,null],[11,"fmt","rustc::ty","",320,null],[11,"fmt","","",483,null],[11,"fmt","","",486,null],[11,"fmt","rustc::ty::sty","",409,null],[11,"fmt","rustc::ty","",495,null],[11,"fmt","rustc::ty::sty","",405,null],[11,"fmt","","",405,null],[11,"fmt","rustc::ty","",385,null],[11,"fmt","","",384,null],[11,"fmt","","",383,null],[11,"fmt","","",383,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"fmt","rustc::ty","",493,null],[11,"fmt","","",386,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",499,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",499,null],[11,"result","","",499,null],[11,"reset","","",499,null],[11,"output_bits","","",499,null],[8,"Delegate","rustc_metadata::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor.",null,null],[10,"consume","","",500,null],[10,"matched_pat","","",500,null],[10,"consume_pat","","",500,null],[10,"borrow","","",500,null],[10,"decl_without_init","","",500,null],[10,"mutate","","",500,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",174,null],[13,"AddrOf","","",174,null],[13,"AutoRef","","",174,null],[13,"AutoUnsafe","","",174,null],[13,"RefBinding","","",174,null],[13,"OverloadedOperator","","",174,null],[13,"ClosureInvocation","","",174,null],[13,"ForLoop","","",174,null],[13,"MatchDiscriminant","","",174,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",175,null],[13,"Move","","",175,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",176,null],[13,"PatBindingMove","","",176,null],[13,"CaptureMove","","",176,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",177,null],[13,"BorrowingMatch","","",177,null],[13,"CopyingMatch","","",177,null],[13,"MovingMatch","","",177,null],[4,"MutateMode","","",null,null],[13,"Init","","",178,null],[13,"JustWrite","","",178,null],[13,"WriteAndRead","","",178,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_metadata::middle","",null,null],[4,"ConstVal","rustc_metadata::middle::const_val","",null,null],[13,"Float","","",180,null],[13,"Integral","","",180,null],[13,"Str","","",180,null],[13,"ByteStr","","",180,null],[13,"Bool","","",180,null],[13,"Struct","","",180,null],[13,"Tuple","","",180,null],[13,"Function","","",180,null],[13,"Array","","",180,null],[13,"Repeat","","",180,null],[13,"Char","","",180,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never\nhandle this case. Its sole purpose is to allow more errors to be reported instead of\ncausing a fatal error.",180,null],[0,"const_qualif","rustc_metadata::middle","",null,null],[3,"ConstQualif","rustc_metadata::middle::const_qualif","",null,null],[0,"cstore","rustc_metadata::middle","",null,null],[3,"LinkMeta","rustc_metadata::middle::cstore","",null,null],[12,"crate_name","","",182,null],[12,"crate_hash","","",182,null],[3,"CrateSource","","",null,null],[12,"dylib","","",183,null],[12,"rlib","","",183,null],[12,"cnum","","",183,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",184,null],[13,"RequireStatic","","",184,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",185,null],[13,"NativeFramework","","",185,null],[13,"NativeUnknown","","",185,null],[4,"DefLike","","",null,null],[13,"DlDef","","",186,null],[13,"DlImpl","","",186,null],[13,"DlField","","",186,null],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans.",null,null],[13,"Item","","",187,null],[13,"TraitItem","","",187,null],[13,"ImplItem","","",187,null],[13,"Foreign","","",187,null],[4,"InlinedItemRef","","A borrowed version of `hir::InlinedItem`.",null,null],[13,"Item","","",188,null],[13,"TraitItem","","",188,null],[13,"ImplItem","","",188,null],[13,"Foreign","","",188,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId.",null,null],[3,"ChildItem","","",null,null],[12,"def","","",189,null],[12,"name","","",189,null],[12,"vis","","",189,null],[4,"FoundAst","","",null,null],[13,"Found","","",501,null],[13,"FoundParent","","",501,null],[13,"NotFound","","",501,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused\nthis crate to be loaded; note that there could be multiple\nsuch ids",190,null],[12,"span","","span of the extern crate that caused this to be loaded",190,null],[12,"direct","","If true, then this crate is the crate named by the extern\ncrate referenced above. If false, then this crate is a dep\nof the crate.",190,null],[12,"path_len","","Number of links to reach the extern crate `def_id`\ndeclaration; used to select the extern crate with the shortest\npath",190,null],[8,"CrateStore","","A store of Rust crates, through with their metadata\ncan be accessed.",null,null],[10,"stability","","",502,null],[10,"deprecation","","",502,null],[10,"visibility","","",502,null],[10,"closure_kind","","",502,null],[10,"closure_ty","","",502,null],[10,"item_variances","","",502,null],[10,"repr_attrs","","",502,null],[10,"item_type","","",502,null],[10,"visible_parent_map","","",502,null],[10,"item_name","","",502,null],[10,"item_predicates","","",502,null],[10,"item_super_predicates","","",502,null],[10,"item_attrs","","",502,null],[10,"item_symbol","","",502,null],[10,"trait_def","","",502,null],[10,"adt_def","","",502,null],[10,"method_arg_names","","",502,null],[10,"inherent_implementations_for_type","","",502,null],[10,"implementations_of_trait","","",502,null],[10,"provided_trait_methods","","",502,null],[10,"trait_item_def_ids","","",502,null],[10,"impl_items","","",502,null],[10,"impl_trait_ref","","",502,null],[10,"impl_polarity","","",502,null],[10,"custom_coerce_unsized_kind","","",502,null],[10,"associated_consts","","",502,null],[10,"impl_parent","","",502,null],[10,"trait_of_item","","",502,null],[10,"impl_or_trait_item","","",502,null],[10,"is_const_fn","","",502,null],[10,"is_defaulted_trait","","",502,null],[10,"is_impl","","",502,null],[10,"is_default_impl","","",502,null],[10,"is_extern_item","","",502,null],[10,"is_static_method","","",502,null],[10,"is_statically_included_foreign_item","","",502,null],[10,"is_typedef","","",502,null],[10,"dylib_dependency_formats","","",502,null],[10,"lang_items","","",502,null],[10,"missing_lang_items","","",502,null],[10,"is_staged_api","","",502,null],[10,"is_explicitly_linked","","",502,null],[10,"is_allocator","","",502,null],[10,"is_panic_runtime","","",502,null],[10,"panic_strategy","","",502,null],[10,"extern_crate","","",502,null],[10,"crate_attrs","","",502,null],[10,"crate_name","","The name of the crate as it is referred to in source code of the current\ncrate.",502,null],[10,"original_crate_name","","The name of the crate as it is stored in the crate&#39;s metadata.",502,null],[10,"crate_hash","","",502,null],[10,"crate_disambiguator","","",502,null],[10,"crate_struct_field_attrs","","",502,null],[10,"plugin_registrar_fn","","",502,null],[10,"native_libraries","","",502,null],[10,"reachable_ids","","",502,null],[10,"def_key","","",502,null],[10,"relative_def_path","","",502,null],[10,"variant_kind","","",502,null],[10,"struct_ctor_def_id","","",502,null],[10,"tuple_struct_definition_if_ctor","","",502,null],[10,"struct_field_names","","",502,null],[10,"item_children","","",502,null],[10,"crate_top_level_items","","",502,null],[10,"maybe_get_item_ast","","",502,null],[10,"maybe_get_item_mir","","",502,null],[10,"is_item_mir_available","","",502,null],[10,"crates","","",502,null],[10,"used_libraries","","",502,null],[10,"used_link_args","","",502,null],[10,"metadata_filename","","",502,null],[10,"metadata_section_name","","",502,null],[10,"encode_type","","",502,null],[10,"used_crates","","",502,null],[10,"used_crate_source","","",502,null],[10,"extern_mod_stmt_cnum","","",502,null],[10,"encode_metadata","","",502,null],[10,"metadata_encoding_version","","",502,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates,\nfor test purposes.",null,null],[0,"tls","","Metadata encoding and decoding can make use of thread-local encoding and\ndecoding contexts. These allow implementers of serialize::Encodable and\nDecodable to access information and datastructures that would otherwise not\nbe available to them. For example, we can automatically translate def-id and\nspan information during decoding because the decoding context knows which\ncrate the data is decoded from. Or it allows to make ty::Ty decodable\nbecause the context has access to the TyCtxt that is needed for creating\nty::Ty instances.",null,null],[8,"EncodingContext","rustc_metadata::middle::cstore::tls","",null,null],[10,"tcx","","",503,null],[10,"encode_ty","","",503,null],[10,"encode_substs","","",503,null],[5,"enter_encoding_context","","Execute f after pushing the given EncodingContext onto the TLS stack.",null,{"inputs":[{"name":"encodingcontext"},{"name":"encoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder. This function will panic if the encoder passed in and the\ncontext encoder are not the same.",null,{"inputs":[{"name":"e"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[8,"DecodingContext","","",null,null],[10,"tcx","","",504,null],[10,"decode_ty","","",504,null],[10,"decode_substs","","",504,null],[10,"translate_def_id","","",504,null],[5,"enter_decoding_context","","Execute f after pushing the given DecodingContext onto the TLS stack.",null,{"inputs":[{"name":"decodingcontext"},{"name":"decoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder. This function will panic if the decoder passed in and the\ncontext decoder are not the same.",null,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"dataflow","rustc_metadata::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_metadata::middle::dataflow","",null,null],[13,"Entry","","",192,null],[13,"Exit","","",192,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&amp;`",505,null],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",506,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill\ntakes effect only when control flows directly through the node in\nquestion, or if the kill&#39;s effect is associated with any\ncontrol-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control\nflow goes over the node. A kill associated with the end of the\nscope of a variable declaration `let x;` is an example of a\n`ScopeEnd` kill.",194,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control\nflow goes through the node to completion. A kill associated\nwith an assignment statement `x = expr;` is an example of an\n`Execution` kill.",194,null],[0,"dead","rustc_metadata::middle","",null,null],[5,"check_crate","rustc_metadata::middle::dead","",null,null],[0,"dependency_format","rustc_metadata::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_metadata::middle::dependency_format","",null,null],[6,"Dependencies","","",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",195,null],[13,"IncludedFromDylib","","",195,null],[13,"Static","","",195,null],[13,"Dynamic","","",195,null],[5,"calculate","","",null,null],[0,"effect","rustc_metadata::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`.",null,null],[5,"check_crate","rustc_metadata::middle::effect","",null,null],[0,"entry","rustc_metadata::middle","",null,null],[5,"find_entry_point","rustc_metadata::middle::entry","",null,null],[0,"free_region","rustc_metadata::middle","This file handles the relationships between free regions --\nmeaning lifetime parameters. Ordinarily, free regions are\nunrelated to one another, but they can be related via implied or\nexplicit bounds.  In that case, we track the bounds using the\n`TransitiveRelation` type and use that to decide when one free\nregion outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_metadata::middle::free_region","",null,null],[0,"intrinsicck","rustc_metadata::middle","",null,null],[5,"check_crate","rustc_metadata::middle::intrinsicck","",null,null],[0,"lang_items","rustc_metadata::middle","",null,null],[4,"LangItem","rustc_metadata::middle::lang_items","",null,null],[13,"CharImplItem","","",197,null],[13,"StrImplItem","","",197,null],[13,"SliceImplItem","","",197,null],[13,"ConstPtrImplItem","","",197,null],[13,"MutPtrImplItem","","",197,null],[13,"I8ImplItem","","",197,null],[13,"I16ImplItem","","",197,null],[13,"I32ImplItem","","",197,null],[13,"I64ImplItem","","",197,null],[13,"IsizeImplItem","","",197,null],[13,"U8ImplItem","","",197,null],[13,"U16ImplItem","","",197,null],[13,"U32ImplItem","","",197,null],[13,"U64ImplItem","","",197,null],[13,"UsizeImplItem","","",197,null],[13,"F32ImplItem","","",197,null],[13,"F64ImplItem","","",197,null],[13,"SendTraitLangItem","","",197,null],[13,"SizedTraitLangItem","","",197,null],[13,"UnsizeTraitLangItem","","",197,null],[13,"CopyTraitLangItem","","",197,null],[13,"SyncTraitLangItem","","",197,null],[13,"DropTraitLangItem","","",197,null],[13,"CoerceUnsizedTraitLangItem","","",197,null],[13,"AddTraitLangItem","","",197,null],[13,"SubTraitLangItem","","",197,null],[13,"MulTraitLangItem","","",197,null],[13,"DivTraitLangItem","","",197,null],[13,"RemTraitLangItem","","",197,null],[13,"NegTraitLangItem","","",197,null],[13,"NotTraitLangItem","","",197,null],[13,"BitXorTraitLangItem","","",197,null],[13,"BitAndTraitLangItem","","",197,null],[13,"BitOrTraitLangItem","","",197,null],[13,"ShlTraitLangItem","","",197,null],[13,"ShrTraitLangItem","","",197,null],[13,"AddAssignTraitLangItem","","",197,null],[13,"SubAssignTraitLangItem","","",197,null],[13,"MulAssignTraitLangItem","","",197,null],[13,"DivAssignTraitLangItem","","",197,null],[13,"RemAssignTraitLangItem","","",197,null],[13,"BitXorAssignTraitLangItem","","",197,null],[13,"BitAndAssignTraitLangItem","","",197,null],[13,"BitOrAssignTraitLangItem","","",197,null],[13,"ShlAssignTraitLangItem","","",197,null],[13,"ShrAssignTraitLangItem","","",197,null],[13,"IndexTraitLangItem","","",197,null],[13,"IndexMutTraitLangItem","","",197,null],[13,"UnsafeCellTypeLangItem","","",197,null],[13,"DerefTraitLangItem","","",197,null],[13,"DerefMutTraitLangItem","","",197,null],[13,"FnTraitLangItem","","",197,null],[13,"FnMutTraitLangItem","","",197,null],[13,"FnOnceTraitLangItem","","",197,null],[13,"EqTraitLangItem","","",197,null],[13,"OrdTraitLangItem","","",197,null],[13,"StrEqFnLangItem","","",197,null],[13,"PanicFnLangItem","","",197,null],[13,"PanicBoundsCheckFnLangItem","","",197,null],[13,"PanicFmtLangItem","","",197,null],[13,"ExchangeMallocFnLangItem","","",197,null],[13,"ExchangeFreeFnLangItem","","",197,null],[13,"BoxFreeFnLangItem","","",197,null],[13,"StrDupUniqFnLangItem","","",197,null],[13,"StartFnLangItem","","",197,null],[13,"EhPersonalityLangItem","","",197,null],[13,"EhPersonalityCatchLangItem","","",197,null],[13,"EhUnwindResumeLangItem","","",197,null],[13,"MSVCTryFilterLangItem","","",197,null],[13,"OwnedBoxLangItem","","",197,null],[13,"PhantomDataItem","","",197,null],[13,"CovariantTypeItem","","",197,null],[13,"ContravariantTypeItem","","",197,null],[13,"InvariantTypeItem","","",197,null],[13,"CovariantLifetimeItem","","",197,null],[13,"ContravariantLifetimeItem","","",197,null],[13,"InvariantLifetimeItem","","",197,null],[13,"NoCopyItem","","",197,null],[13,"NonZeroItem","","",197,null],[13,"DebugTraitLangItem","","",197,null],[3,"LanguageItems","","",null,null],[12,"items","","",198,null],[12,"missing","","",198,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_metadata::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid.",null,null],[5,"check_crate","rustc_metadata::middle::liveness","",null,null],[0,"mem_categorization","rustc_metadata::middle","# Categorization",null,null],[4,"Categorization","rustc_metadata::middle::mem_categorization","",null,null],[13,"Rvalue","","",199,null],[13,"StaticItem","","",199,null],[13,"Upvar","","",199,null],[13,"Local","","",199,null],[13,"Deref","","",199,null],[13,"Interior","","",199,null],[13,"Downcast","","",199,null],[3,"Upvar","","",null,null],[12,"id","","",200,null],[12,"kind","","",200,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box&lt;T&gt;`",201,null],[13,"BorrowedPtr","","`&amp;T`",201,null],[13,"UnsafePtr","","`*T`",201,null],[13,"Implicit","","Implicit deref of the `&amp;T` that results from an overloaded index `[]`.",201,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",202,null],[13,"InteriorElement","","",202,null],[4,"FieldName","","",null,null],[13,"NamedField","","",203,null],[13,"PositionalField","","",203,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",204,null],[13,"Pattern","","",204,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",205,null],[13,"OtherElement","","",205,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",206,null],[13,"McDeclared","","",206,null],[13,"McInherited","","",206,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",207,null],[13,"NoteUpvarRef","","",207,null],[13,"NoteNone","","",207,null],[3,"cmt_","","",null,null],[12,"id","","",208,null],[12,"span","","",208,null],[12,"cat","","",208,null],[12,"mutbl","","",208,null],[12,"ty","","",208,null],[12,"note","","",208,null],[6,"cmt","","",null,null],[4,"deref_kind","","",null,null],[13,"deref_ptr","","",209,null],[13,"deref_interior","","",209,null],[8,"ast_node","","",null,null],[10,"id","","",507,null],[10,"span","","",507,null],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",210,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",211,null],[13,"NonAliasable","","",211,null],[13,"ImmutableUnique","","",211,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",212,null],[13,"AliasableClosure","","",212,null],[13,"AliasableOther","","",212,null],[13,"UnaliasableImmutable","","",212,null],[13,"AliasableStatic","","",212,null],[13,"AliasableStaticMut","","",212,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_metadata::middle","A pass that checks to make sure private fields and methods aren&#39;t used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_metadata::middle::privacy","",null,null],[13,"Reachable","","",213,null],[13,"Exported","","",213,null],[13,"Public","","",213,null],[3,"AccessLevels","","",null,null],[12,"map","","",214,null],[6,"ExternalExports","","",null,null],[0,"reachable","rustc_metadata::middle","",null,null],[5,"find_reachable","rustc_metadata::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_metadata::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized.",null,null],[3,"CodeExtent","rustc_metadata::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling\ninstead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values.",null,null],[13,"Misc","","",216,null],[13,"CallSiteScope","","",216,null],[12,"fn_id","rustc_metadata::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"ParameterScope","rustc_metadata::middle::region","",216,null],[12,"fn_id","rustc_metadata::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"DestructionScope","rustc_metadata::middle::region","",216,null],[13,"Remainder","","",216,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",217,null],[12,"body_id","","",217,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`.",null,null],[12,"block","","",218,null],[12,"first_statement_index","","",218,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[5,"resolve_inlined_item","","",null,null],[0,"recursion_limit","rustc_metadata::middle","",null,null],[5,"update_recursion_limit","rustc_metadata::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_metadata::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_metadata::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",221,null],[13,"DefEarlyBoundRegion","","",221,null],[13,"DefLateBoundRegion","","",221,null],[13,"DefFreeRegion","","",221,null],[6,"NamedRegionMap","","",null,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"hashmap"}],"output":{"name":"result"}}],[5,"early_bound_lifetimes","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"vec"}}],[0,"stability","rustc_metadata::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_metadata::middle::stability","",null,null],[13,"Unstable","","",222,null],[13,"Stable","","",222,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used.",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"hashmap"}}],[5,"check_item","","Helper for discovering nodes to check for stability",null,null],[5,"check_expr","","Helper for discovering nodes to check for stability",null,null],[5,"check_path","","",null,null],[5,"check_path_list_item","","",null,null],[5,"check_pat","","",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don&#39;t exist and error about them.",null,null],[0,"weak_lang_items","rustc_metadata::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_metadata::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"diagnostics","rustc_metadata","",null,null],[0,"astencode","","",null,null],[5,"encode_inlined_item","rustc_metadata::astencode","",null,{"inputs":[{"name":"encodecontext"},{"name":"encoder"},{"name":"inlineditemref"}],"output":null}],[5,"decode_inlined_item","","Decodes an item from its AST in the cdata&#39;s metadata and adds it to the\nast-map.",null,{"inputs":[{"name":"crate_metadata"},{"name":"tyctxt"},{"name":"defpath"},{"name":"defid"},{"name":"doc"},{"name":"defid"}],"output":{"name":"inlineditem"}}],[5,"encode_cast_kind","","",null,{"inputs":[{"name":"encoder"},{"name":"castkind"}],"output":null}],[0,"common","rustc_metadata","",null,null],[4,"astencode_tag","rustc_metadata::common","",null,null],[13,"tag_ast","","",508,null],[13,"tag_tree","","",508,null],[13,"tag_mir","","",508,null],[13,"tag_table","","",508,null],[13,"tag_table_def","","",508,null],[13,"tag_table_node_type","","",508,null],[13,"tag_table_item_subst","","",508,null],[13,"tag_table_freevars","","",508,null],[13,"tag_table_method_map","","",508,null],[13,"tag_table_adjustments","","",508,null],[13,"tag_table_upvar_capture_map","","",508,null],[13,"tag_table_const_qualif","","",508,null],[13,"tag_table_cast_kinds","","",508,null],[5,"rustc_version","","",null,{"inputs":[],"output":{"name":"string"}}],[17,"tag_items","","",null,null],[17,"tag_paths_data_name","","",null,null],[17,"tag_def_id","","",null,null],[17,"tag_items_data","","",null,null],[17,"tag_items_data_item","","",null,null],[17,"tag_items_data_item_family","","",null,null],[17,"tag_items_data_item_type","","",null,null],[17,"tag_items_data_item_symbol","","",null,null],[17,"tag_items_data_item_variant","","",null,null],[17,"tag_items_data_parent_item","","",null,null],[17,"tag_items_data_item_is_tuple_struct_ctor","","",null,null],[17,"tag_items_closure_kind","","",null,null],[17,"tag_items_closure_ty","","",null,null],[17,"tag_def_key","","",null,null],[17,"tag_index","","",null,null],[17,"tag_xref_index","","",null,null],[17,"tag_xref_data","","",null,null],[17,"tag_meta_item_name_value","","",null,null],[17,"tag_meta_item_name","","",null,null],[17,"tag_meta_item_value","","",null,null],[17,"tag_attributes","","",null,null],[17,"tag_attribute","","",null,null],[17,"tag_meta_item_word","","",null,null],[17,"tag_meta_item_list","","",null,null],[17,"tag_crate_deps","","",null,null],[17,"tag_crate_dep","","",null,null],[17,"tag_crate_hash","","",null,null],[17,"tag_crate_crate_name","","",null,null],[17,"tag_crate_disambiguator","","",null,null],[17,"tag_crate_dep_crate_name","","",null,null],[17,"tag_crate_dep_hash","","",null,null],[17,"tag_crate_dep_explicitly_linked","","",null,null],[17,"tag_item_trait_item","","",null,null],[17,"tag_item_trait_ref","","",null,null],[17,"tag_disr_val","","",null,null],[17,"tag_item_field","","",null,null],[17,"tag_item_variances","","",null,null],[17,"tag_item_impl_item","","",null,null],[17,"tag_item_trait_method_explicit_self","","",null,null],[17,"tag_items_data_item_reexport","","",null,null],[17,"tag_items_data_item_reexport_def_id","","",null,null],[17,"tag_items_data_item_reexport_name","","",null,null],[17,"tag_item_trait_item_sort","","",null,null],[17,"tag_crate_triple","","",null,null],[17,"tag_dylib_dependency_formats","","",null,null],[17,"tag_lang_items","","",null,null],[17,"tag_lang_items_item","","",null,null],[17,"tag_lang_items_item_id","","",null,null],[17,"tag_lang_items_item_index","","",null,null],[17,"tag_lang_items_missing","","",null,null],[17,"tag_item_unnamed_field","","",null,null],[17,"tag_items_data_item_visibility","","",null,null],[17,"tag_items_data_item_inherent_impl","","",null,null],[17,"tag_mod_child","","",null,null],[17,"tag_misc_info","","",null,null],[17,"tag_misc_info_crate_items","","",null,null],[17,"tag_impls","","",null,null],[17,"tag_impls_trait","","",null,null],[17,"tag_impls_trait_impl","","",null,null],[17,"tag_native_libraries","","",null,null],[17,"tag_native_libraries_lib","","",null,null],[17,"tag_native_libraries_name","","",null,null],[17,"tag_native_libraries_kind","","",null,null],[17,"tag_plugin_registrar_fn","","",null,null],[17,"tag_method_argument_names","","",null,null],[17,"tag_method_argument_name","","",null,null],[17,"tag_reachable_ids","","",null,null],[17,"tag_reachable_id","","",null,null],[17,"tag_items_data_item_stability","","",null,null],[17,"tag_items_data_item_repr","","",null,null],[17,"tag_struct_fields","","",null,null],[17,"tag_struct_field","","",null,null],[17,"tag_items_data_item_struct_ctor","","",null,null],[17,"tag_attribute_is_sugared_doc","","",null,null],[17,"tag_items_data_region","","",null,null],[17,"tag_region_param_def","","",null,null],[17,"tag_region_param_def_ident","","",null,null],[17,"tag_region_param_def_def_id","","",null,null],[17,"tag_region_param_def_space","","",null,null],[17,"tag_region_param_def_index","","",null,null],[17,"tag_type_param_def","","",null,null],[17,"tag_item_generics","","",null,null],[17,"tag_method_ty_generics","","",null,null],[17,"tag_type_predicate","","",null,null],[17,"tag_self_predicate","","",null,null],[17,"tag_fn_predicate","","",null,null],[17,"tag_unsafety","","",null,null],[17,"tag_associated_type_names","","",null,null],[17,"tag_associated_type_name","","",null,null],[17,"tag_polarity","","",null,null],[17,"tag_macro_defs","","",null,null],[17,"tag_macro_def","","",null,null],[17,"tag_macro_def_body","","",null,null],[17,"tag_macro_def_span_lo","","",null,null],[17,"tag_macro_def_span_hi","","",null,null],[17,"tag_paren_sugar","","",null,null],[17,"tag_codemap","","",null,null],[17,"tag_codemap_filemap","","",null,null],[17,"tag_item_super_predicates","","",null,null],[17,"tag_defaulted_trait","","",null,null],[17,"tag_impl_coerce_unsized_kind","","",null,null],[17,"tag_items_data_item_constness","","",null,null],[17,"tag_items_data_item_deprecation","","",null,null],[17,"tag_items_data_item_defaultness","","",null,null],[17,"tag_items_data_parent_impl","","",null,null],[17,"tag_rustc_version","","",null,null],[17,"tag_panic_strategy","","",null,null],[11,"eq","","",508,null],[11,"clone","","",508,null],[11,"from_u32","","",508,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[0,"def_key","rustc_metadata","",null,null],[3,"DefKey","rustc_metadata::def_key","",null,null],[12,"parent","","",509,null],[12,"disambiguated_data","","",509,null],[3,"DisambiguatedDefPathData","","",null,null],[12,"data","","",510,null],[12,"disambiguator","","",510,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","",511,null],[13,"Misc","","",511,null],[13,"Impl","","",511,null],[13,"TypeNs","","",511,null],[13,"ValueNs","","",511,null],[13,"Module","","",511,null],[13,"MacroDef","","",511,null],[13,"ClosureExpr","","",511,null],[13,"TypeParam","","",511,null],[13,"LifetimeDef","","",511,null],[13,"EnumVariant","","",511,null],[13,"Field","","",511,null],[13,"StructCtor","","",511,null],[13,"Initializer","","",511,null],[13,"Binding","","",511,null],[5,"simplify_def_key","","",null,{"inputs":[{"name":"defkey"}],"output":{"name":"defkey"}}],[5,"recover_def_key","","",null,{"inputs":[{"name":"defkey"},{"name":"option"}],"output":{"name":"defkey"}}],[11,"decode","","",509,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",509,null],[11,"decode","","",510,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",510,null],[11,"decode","","",511,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",511,null],[0,"tyencode","rustc_metadata","",null,null],[3,"ctxt","rustc_metadata::tyencode","",null,null],[12,"diag","","",512,null],[12,"ds","","",512,null],[12,"tcx","","",512,null],[12,"abbrevs","","",512,null],[3,"ty_abbrev","","",null,null],[5,"enc_ty","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"ty"}],"output":null}],[5,"enc_substs","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"substs"}],"output":null}],[5,"enc_region","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"region"}],"output":null}],[5,"enc_trait_ref","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"traitref"}],"output":null}],[5,"enc_bare_fn_ty","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"barefnty"}],"output":null}],[5,"enc_closure_ty","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"closurety"}],"output":null}],[5,"enc_builtin_bounds","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"builtinbounds"}],"output":null}],[5,"enc_existential_bounds","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"existentialbounds"}],"output":null}],[5,"enc_type_param_def","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"typeparameterdef"}],"output":null}],[5,"enc_region_param_def","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"regionparameterdef"}],"output":null}],[5,"enc_predicate","","",null,{"inputs":[{"name":"cursor"},{"name":"ctxt"},{"name":"predicate"}],"output":null}],[6,"abbrev_map","","",null,null],[0,"tydecode","rustc_metadata","",null,null],[3,"TyDecoder","rustc_metadata::tydecode","",null,null],[6,"DefIdConvert","","",null,null],[11,"with_doc","","",513,{"inputs":[{"name":"tyctxt"},{"name":"cratenum"},{"name":"doc"},{"name":"defidconvert"}],"output":{"name":"tydecoder"}}],[11,"new","","",513,null],[11,"position","","",513,null],[11,"parse_substs","","",513,null],[11,"parse_region","","",513,null],[11,"parse_trait_ref","","",513,null],[11,"parse_ty","","",513,null],[11,"parse_closure_ty","","",513,null],[11,"parse_bare_fn_ty","","",513,null],[11,"parse_predicate","","",513,null],[11,"parse_type_param_def","","",513,null],[11,"parse_region_param_def","","",513,null],[11,"parse_existential_bounds","","",513,null],[0,"encoder","rustc_metadata","",null,null],[3,"EncodeContext","rustc_metadata::encoder","",null,null],[12,"diag","","",514,null],[12,"tcx","","",514,null],[12,"reexports","","",514,null],[12,"item_symbols","","",514,null],[12,"link_meta","","",514,null],[12,"cstore","","",514,null],[12,"type_abbrevs","","",514,null],[12,"reachable","","",514,null],[12,"mir_map","","",514,null],[4,"XRef","","&quot;interned&quot; entries referenced by id",null,null],[13,"Predicate","","",515,null],[5,"def_to_u64","","",null,{"inputs":[{"name":"defid"}],"output":{"name":"u64"}}],[5,"def_to_string","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"string"}}],[5,"encode_metadata","","",null,{"inputs":[{"name":"encodecontext"},{"name":"crate"}],"output":{"name":"vec"}}],[5,"encoded_ty","","",null,null],[17,"metadata_encoding_version","","",null,null],[11,"hash","","",515,null],[11,"eq","","",515,null],[11,"ne","","",515,null],[0,"decoder","rustc_metadata","",null,null],[3,"CrateDep","rustc_metadata::decoder","",null,null],[12,"cnum","","",516,null],[12,"name","","",516,null],[12,"hash","","",516,null],[12,"explicitly_linked","","",516,null],[5,"load_index","","",null,null],[5,"crate_rustc_version","","",null,null],[5,"load_xrefs","","",null,null],[5,"item_type","","",null,{"inputs":[{"name":"defid"},{"name":"doc"},{"name":"tyctxt"},{"name":"cmd"}],"output":{"name":"ty"}}],[5,"get_trait_def","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"traitdef"}}],[5,"get_adt_def","","",null,{"inputs":[{"name":"identinterner"},{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"adtdefmaster"}}],[5,"get_predicates","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[5,"get_super_predicates","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"genericpredicates"}}],[5,"get_type","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"typescheme"}}],[5,"get_stability","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_deprecation","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_visibility","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"visibility"}}],[5,"get_parent_impl","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_repr_attrs","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"vec"}}],[5,"get_impl_polarity","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_custom_coerce_unsized_kind","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_impl_trait","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[5,"get_symbol","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"string"}}],[5,"get_symbol_from_buf","","If you have a crate_metadata, call get_symbol instead",null,null],[5,"each_lang_item","","Iterates over the language items in the given crate.",null,{"inputs":[{"name":"cmd"},{"name":"f"}],"output":{"name":"bool"}}],[5,"each_child_of_item","","Iterates over each child of the given item.",null,{"inputs":[{"name":"rc"},{"name":"cmd"},{"name":"defindex"},{"name":"g"},{"name":"f"}],"output":null}],[5,"each_top_level_item_of_crate","","Iterates over all the top-level crate items.",null,{"inputs":[{"name":"rc"},{"name":"cmd"},{"name":"g"},{"name":"f"}],"output":null}],[5,"get_item_name","","",null,{"inputs":[{"name":"identinterner"},{"name":"cmd"},{"name":"defindex"}],"output":{"name":"name"}}],[5,"maybe_get_item_ast","","",null,{"inputs":[{"name":"cmd"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"foundast"}}],[5,"is_item_mir_available","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"maybe_get_item_mir","","",null,{"inputs":[{"name":"cmd"},{"name":"tyctxt"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_impl_items","","Returns the def IDs of all the items in the given implementation.",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"vec"}}],[5,"get_trait_name","","",null,{"inputs":[{"name":"rc"},{"name":"cmd"},{"name":"defindex"}],"output":{"name":"name"}}],[5,"is_static_method","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"get_impl_or_trait_item","","",null,{"inputs":[{"name":"rc"},{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[5,"get_trait_item_def_ids","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"vec"}}],[5,"get_item_variances","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"itemvariances"}}],[5,"get_provided_trait_methods","","",null,{"inputs":[{"name":"rc"},{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"vec"}}],[5,"get_associated_consts","","",null,{"inputs":[{"name":"rc"},{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"vec"}}],[5,"get_variant_kind","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_struct_ctor_def_id","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_tuple_struct_definition_if_ctor","","If node_id is the constructor of a tuple struct, retrieve the NodeId of\nthe actual type definition, otherwise, return None",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"option"}}],[5,"get_item_attrs","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"vec"}}],[5,"get_struct_field_attrs","","",null,{"inputs":[{"name":"cmd"}],"output":{"name":"fnvhashmap"}}],[5,"get_struct_field_names","","",null,{"inputs":[{"name":"identinterner"},{"name":"cmd"},{"name":"defindex"}],"output":{"name":"vec"}}],[5,"get_crate_attributes","","",null,null],[5,"get_crate_deps","","",null,null],[5,"maybe_get_crate_hash","","",null,null],[5,"get_crate_hash","","",null,null],[5,"maybe_get_crate_name","","",null,null],[5,"get_crate_disambiguator","","",null,null],[5,"get_crate_triple","","",null,null],[5,"get_crate_name","","",null,null],[5,"list_crate_metadata","","",null,null],[5,"translate_def_id","","",null,{"inputs":[{"name":"cmd"},{"name":"defid"}],"output":{"name":"defid"}}],[5,"translate_span","","Translates a `Span` from an extern crate to the corresponding `Span`\nwithin the local crate&#39;s codemap.",null,{"inputs":[{"name":"cmd"},{"name":"codemap"},{"name":"cell"},{"name":"span"}],"output":{"name":"span"}}],[5,"each_inherent_implementation_for_type","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"f"}],"output":null}],[5,"each_implementation_for_trait","","",null,{"inputs":[{"name":"cmd"},{"name":"defid"},{"name":"f"}],"output":null}],[5,"get_trait_of_item","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"option"}}],[5,"get_native_libraries","","",null,{"inputs":[{"name":"cmd"}],"output":{"name":"vec"}}],[5,"get_plugin_registrar_fn","","",null,null],[5,"each_exported_macro","","",null,null],[5,"get_macro_span","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"span"}}],[5,"get_dylib_dependency_formats","","",null,{"inputs":[{"name":"cmd"}],"output":{"name":"vec"}}],[5,"get_missing_lang_items","","",null,{"inputs":[{"name":"cmd"}],"output":{"name":"vec"}}],[5,"get_method_arg_names","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"vec"}}],[5,"get_reachable_ids","","",null,{"inputs":[{"name":"cmd"}],"output":{"name":"vec"}}],[5,"is_typedef","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"is_const_fn","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"is_extern_item","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"bool"}}],[5,"is_impl","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"is_defaulted_trait","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"is_default_impl","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"bool"}}],[5,"get_imported_filemaps","","",null,null],[5,"closure_kind","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"closurekind"}}],[5,"closure_ty","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"},{"name":"tyctxt"}],"output":{"name":"closurety"}}],[5,"def_key","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"defkey"}}],[5,"def_path","","",null,{"inputs":[{"name":"cmd"},{"name":"defindex"}],"output":{"name":"defpath"}}],[5,"get_panic_strategy","","",null,null],[6,"Cmd","","",null,null],[11,"clone","","",516,null],[0,"creader","rustc_metadata","Validates all used crates and extern libraries and loads their metadata",null,null],[3,"CrateReader","rustc_metadata::creader","",null,null],[5,"read_local_crates","","Traverses an AST, reading all the information about use&#39;d crates and extern\nlibraries necessary for later resolving, typechecking, linking, etc.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"definitions"},{"name":"crate"},{"name":"str"},{"name":"depgraph"}],"output":null}],[5,"import_codemap","","Imports the codemap from an external crate into the codemap of the crate\ncurrently being compiled (the &quot;local crate&quot;).",null,{"inputs":[{"name":"codemap"},{"name":"metadatablob"}],"output":{"name":"vec"}}],[11,"new","","",517,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"str"}],"output":{"name":"cratereader"}}],[11,"read_exported_macros","","Read exported macros.",517,null],[11,"find_plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",517,null],[0,"csearch","rustc_metadata","",null,null],[0,"cstore","","",null,null],[4,"NativeLibraryKind","rustc_metadata::cstore","",null,null],[13,"NativeStatic","","",185,null],[13,"NativeFramework","","",185,null],[13,"NativeUnknown","","",185,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",184,null],[13,"RequireStatic","","",184,null],[3,"CrateSource","","",null,null],[12,"dylib","","",183,null],[12,"rlib","","",183,null],[12,"cnum","","",183,null],[3,"LinkMeta","","",null,null],[12,"crate_name","","",182,null],[12,"crate_hash","","",182,null],[3,"ImportedFileMap","","Holds information about a codemap::FileMap imported from another crate.\nSee creader::import_codemap() for more information.",null,null],[12,"original_start_pos","","This FileMap&#39;s byte-offset within the codemap of its original crate",518,null],[12,"original_end_pos","","The end of this FileMap within the codemap of its original crate",518,null],[12,"translated_filemap","","The imported FileMap&#39;s representation within the local codemap",518,null],[3,"crate_metadata","","",null,null],[12,"name","","",519,null],[12,"extern_crate","","Information about the extern crate that caused this crate to\nbe loaded. If this is `None`, then the crate was injected\n(e.g., by the allocator)",519,null],[12,"data","","",519,null],[12,"cnum_map","","",519,null],[12,"cnum","","",519,null],[12,"codemap_import_info","","",519,null],[12,"staged_api","","",519,null],[12,"index","","",519,null],[12,"xref_index","","",519,null],[12,"explicitly_linked","","Flag if this crate is required by an rlib version of this crate, or in\nother words whether it was explicitly linked to. An example of a crate\nwhere this is false is when an allocator crate is injected into the\ndependency list, and therefore isn&#39;t actually needed to link an rlib.",519,null],[3,"CStore","","",null,null],[12,"intr","","",520,null],[12,"visible_parent_map","","",520,null],[4,"MetadataBlob","","",null,null],[13,"MetadataVec","","",521,null],[13,"MetadataArchive","","",521,null],[6,"cnum_map","","",null,null],[11,"new","","",520,{"inputs":[{"name":"rc"}],"output":{"name":"cstore"}}],[11,"next_crate_num","","",520,null],[11,"get_crate_data","","",520,null],[11,"get_crate_hash","","",520,null],[11,"set_crate_data","","",520,null],[11,"iter_crate_data","","",520,null],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",520,null],[11,"add_used_crate_source","","",520,null],[11,"opt_used_crate_source","","",520,null],[11,"reset","","",520,null],[11,"do_get_used_crates","","",520,null],[11,"add_used_library","","",520,null],[11,"get_used_libraries","","",520,null],[11,"add_used_link_args","","",520,null],[11,"get_used_link_args","","",520,null],[11,"add_extern_mod_stmt_cnum","","",520,null],[11,"add_statically_included_foreign_item","","",520,null],[11,"do_is_statically_included_foreign_item","","",520,null],[11,"do_extern_mod_stmt_cnum","","",520,null],[11,"data","","",519,null],[11,"name","","",519,null],[11,"hash","","",519,null],[11,"disambiguator","","",519,null],[11,"imported_filemaps","","",519,null],[11,"is_allocator","","",519,null],[11,"needs_allocator","","",519,null],[11,"is_panic_runtime","","",519,null],[11,"needs_panic_runtime","","",519,null],[11,"panic_strategy","","",519,null],[11,"as_slice","","",521,null],[0,"index","rustc_metadata","",null,null],[3,"Index","rustc_metadata::index","As part of the metadata, we generate an index that stores, for\neach DefIndex, the position of the corresponding RBML document (if\nany).  This is just a big `[u32]` slice, where an entry of\n`u32::MAX` indicates that there is no RBML document. This little\nstruct just stores the offsets within the metadata of the start\nand end of this slice. These are actually part of an RBML\ndocument, but for looking things up in the metadata, we just\ndiscard the RBML positioning and jump directly to the data.",null,null],[3,"IndexData","","While we are generating the metadata, we also track the position\nof each DefIndex. It is not required that all definitions appear\nin the metadata, nor that they are serialized in order, and\ntherefore we first allocate the vector here and fill it with\n`u32::MAX`. Whenever an index is visited, we fill in the\nappropriate spot by calling `record_position`. We should never\nvisit the same index twice.",null,null],[3,"DenseIndex","","A dense index with integer keys. Different API from IndexData (should\nthese be merged?)",null,null],[5,"write_dense_index","","",null,{"inputs":[{"name":"vec"},{"name":"cursor"}],"output":null}],[11,"from_rbml","","Given the RBML doc representing the index, save the offests\nfor later.",522,{"inputs":[{"name":"doc"}],"output":{"name":"index"}}],[11,"lookup_item","","Given the metadata, extract out the offset of a particular\nDefIndex (if any).",522,null],[11,"new","","",523,{"inputs":[{"name":"usize"}],"output":{"name":"indexdata"}}],[11,"record","","",523,null],[11,"record_index","","",523,null],[11,"write_index","","",523,null],[11,"lookup","","",524,null],[11,"from_buf","","",524,null],[0,"loader","rustc_metadata","Finds crate binaries and loads their metadata",null,null],[3,"CrateMismatch","rustc_metadata::loader","",null,null],[3,"Context","","",null,null],[12,"sess","","",525,null],[12,"span","","",525,null],[12,"ident","","",525,null],[12,"crate_name","","",525,null],[12,"hash","","",525,null],[12,"target","","",525,null],[12,"triple","","",525,null],[12,"filesearch","","",525,null],[12,"root","","",525,null],[12,"rejected_via_hash","","",525,null],[12,"rejected_via_triple","","",525,null],[12,"rejected_via_kind","","",525,null],[12,"should_match_name","","",525,null],[3,"Library","","",null,null],[12,"dylib","","",526,null],[12,"rlib","","",526,null],[12,"metadata","","",526,null],[3,"ArchiveMetadata","","",null,null],[3,"CratePaths","","",null,null],[12,"ident","","",527,null],[12,"dylib","","",527,null],[12,"rlib","","",527,null],[5,"note_crate_name","","",null,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":null}],[5,"meta_section_name","","",null,{"inputs":[{"name":"target"}],"output":{"name":"str"}}],[5,"read_meta_section_name","","",null,{"inputs":[{"name":"target"}],"output":{"name":"str"}}],[5,"list_file_metadata","","",null,{"inputs":[{"name":"target"},{"name":"path"},{"name":"write"}],"output":{"name":"result"}}],[17,"METADATA_FILENAME","","",null,null],[11,"maybe_load_library_crate","","",525,null],[11,"load_library_crate","","",525,null],[11,"report_load_errs","","",525,null],[11,"as_slice","","",528,null],[0,"macro_import","rustc_metadata","Used by `rustc` when loading a crate with exported macros.",null,null],[5,"call_bad_macro_reexport","rustc_metadata::macro_import","",null,{"inputs":[{"name":"session"},{"name":"span"}],"output":null}],[5,"read_macro_defs","","Read exported macros.",null,{"inputs":[{"name":"session"},{"name":"cstore"},{"name":"crate"},{"name":"str"}],"output":{"name":"vec"}}],[6,"MacroSelection","","",null,null],[0,"tls_context","rustc_metadata","",null,null],[3,"DecodingContext","rustc_metadata::tls_context","",null,null],[12,"crate_metadata","","",529,null],[12,"tcx","","",529,null],[11,"tcx","rustc_metadata::encoder","",514,null],[11,"encode_ty","","",514,null],[11,"encode_substs","","",514,null],[11,"tcx","rustc_metadata::tls_context","",529,null],[11,"decode_ty","","",529,null],[11,"decode_substs","","",529,null],[11,"translate_def_id","","",529,null],[11,"ty_str_ctxt","rustc_metadata::encoder","",514,null],[11,"stability","rustc_metadata::cstore","",520,null],[11,"deprecation","","",520,null],[11,"visibility","","",520,null],[11,"closure_kind","","",520,null],[11,"closure_ty","","",520,null],[11,"item_variances","","",520,null],[11,"repr_attrs","","",520,null],[11,"item_type","","",520,null],[11,"item_predicates","","",520,null],[11,"item_super_predicates","","",520,null],[11,"item_attrs","","",520,null],[11,"item_symbol","","",520,null],[11,"trait_def","","",520,null],[11,"adt_def","","",520,null],[11,"method_arg_names","","",520,null],[11,"item_name","","",520,null],[11,"inherent_implementations_for_type","","",520,null],[11,"implementations_of_trait","","",520,null],[11,"provided_trait_methods","","",520,null],[11,"trait_item_def_ids","","",520,null],[11,"impl_items","","",520,null],[11,"impl_polarity","","",520,null],[11,"impl_trait_ref","","",520,null],[11,"custom_coerce_unsized_kind","","",520,null],[11,"associated_consts","","",520,null],[11,"impl_parent","","",520,null],[11,"trait_of_item","","",520,null],[11,"impl_or_trait_item","","",520,null],[11,"is_const_fn","","",520,null],[11,"is_defaulted_trait","","",520,null],[11,"is_impl","","",520,null],[11,"is_default_impl","","",520,null],[11,"is_extern_item","","",520,null],[11,"is_static_method","","",520,null],[11,"is_statically_included_foreign_item","","",520,null],[11,"is_typedef","","",520,null],[11,"dylib_dependency_formats","","",520,null],[11,"lang_items","","",520,null],[11,"missing_lang_items","","",520,null],[11,"is_staged_api","","",520,null],[11,"is_explicitly_linked","","",520,null],[11,"is_allocator","","",520,null],[11,"is_panic_runtime","","",520,null],[11,"panic_strategy","","",520,null],[11,"crate_attrs","","",520,null],[11,"crate_name","","",520,null],[11,"original_crate_name","","",520,null],[11,"extern_crate","","",520,null],[11,"crate_hash","","",520,null],[11,"crate_disambiguator","","",520,null],[11,"crate_struct_field_attrs","","",520,null],[11,"plugin_registrar_fn","","",520,null],[11,"native_libraries","","",520,null],[11,"reachable_ids","","",520,null],[11,"def_key","","Returns the `DefKey` for a given `DefId`. This indicates the\nparent `DefId` as well as some idea of what kind of data the\n`DefId` refers to.",520,null],[11,"relative_def_path","","",520,null],[11,"variant_kind","","",520,null],[11,"struct_ctor_def_id","","",520,null],[11,"tuple_struct_definition_if_ctor","","",520,null],[11,"struct_field_names","","",520,null],[11,"item_children","","",520,null],[11,"crate_top_level_items","","",520,null],[11,"maybe_get_item_ast","","",520,null],[11,"maybe_get_item_mir","","",520,null],[11,"is_item_mir_available","","",520,null],[11,"crates","","",520,null],[11,"used_libraries","","",520,null],[11,"used_link_args","","",520,null],[11,"metadata_filename","","",520,null],[11,"metadata_section_name","","",520,null],[11,"encode_type","","",520,null],[11,"used_crates","","",520,null],[11,"used_crate_source","","",520,null],[11,"extern_mod_stmt_cnum","","",520,null],[11,"encode_metadata","","",520,null],[11,"metadata_encoding_version","","",520,null],[11,"visible_parent_map","","Returns a map from a sufficiently visible external item (i.e. an external item that is\nvisible from at least one local module) to a sufficiently visible parent (considering\nmodules that re-export the external item to be parents).",520,null]],"paths":[[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFGEdgeData"],[3,"CFG"],[4,"DepNode"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[3,"DepGraphQuery"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefIndex"],[3,"DefId"],[4,"FnKind"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[3,"IdVisitor"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"FnLikeNode"],[3,"Item"],[3,"TraitItem"],[3,"Expr"],[4,"Code"],[3,"Definitions"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[4,"Node"],[4,"MapEntry"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"State"],[3,"NoAnn"],[3,"Svh"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[4,"SelfKind"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Bivariate"],[3,"CombineFields"],[3,"InferCtxt"],[4,"Result"],[3,"Equate"],[3,"TyCtxt"],[3,"TraitRef"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[3,"SameRegions"],[3,"RegionVarBindings"],[4,"VarValue"],[4,"Verify"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"IntVid"],[3,"RegionVidKey"],[3,"RegionVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[3,"TyVid"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"InferCtxtBuilder"],[3,"FnSig"],[4,"FnOutput"],[3,"ClosureSubsts"],[4,"LvalueTy"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LateContext"],[3,"EarlyContext"],[3,"GatherNodeLevels"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[3,"ChildItem"],[3,"ExternCrate"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[3,"DataFlowContext"],[4,"KillFrom"],[4,"Linkage"],[3,"FreeRegionMap"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[4,"deref_kind"],[3,"MemCategorizationContext"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[3,"CodeExtent"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[4,"Mutability"],[4,"BorrowKind"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[4,"TerminatorKind"],[3,"Statement"],[4,"StatementKind"],[4,"Lvalue"],[3,"Projection"],[4,"ProjectionElem"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[3,"ScopeData"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[3,"Constant"],[3,"TypedConstVal"],[4,"Literal"],[4,"LvalueContext"],[4,"MirSource"],[3,"Passes"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"TraitErrorKey"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[4,"ProjectionMode"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[3,"SelectionCache"],[4,"MethodMatchedData"],[3,"EvaluationCache"],[3,"SelectionContext"],[4,"MethodMatchResult"],[3,"Graph"],[4,"Node"],[4,"NodeItems"],[3,"Ancestors"],[3,"NodeItem"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"SpecializesCache"],[3,"Obligation"],[4,"Vtable"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[4,"SelectionError"],[3,"SupertraitDefIds"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[4,"AutoAdjustment"],[3,"AutoDerefRef"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[3,"TyS"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[3,"RegionFolder"],[4,"RootMode"],[3,"TargetDataLayout"],[4,"Endian"],[3,"Size"],[3,"Align"],[4,"Integer"],[4,"Primitive"],[3,"Struct"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[3,"TypeAndMut"],[4,"Abi"],[3,"ProjectionTy"],[3,"ProjectionPredicate"],[3,"ExistentialBounds"],[3,"BuiltinBounds"],[4,"Region"],[3,"Rc"],[3,"Box"],[3,"Substs"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"IntType"],[4,"CopyImplementationError"],[4,"Representability"],[3,"ParameterEnvironment"],[3,"TypeContents"],[3,"CtxtArenas"],[3,"Tables"],[4,"Option"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[4,"Predicate"],[3,"ItemSubsts"],[3,"ClosureTy"],[3,"P"],[3,"TraitTy"],[3,"ImplHeader"],[3,"TypeParameterDef"],[4,"ObjectLifetimeDefault"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ClosureUpvar"],[3,"TypeScheme"],[3,"FreeRegion"],[4,"BoundRegion"],[4,"TypeVariants"],[3,"TypeFlags"],[3,"BareFnTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"EarlyBoundRegion"],[3,"SkolemizedRegionVid"],[4,"InferTy"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[4,"BuiltinBound"],[3,"CrateAnalysis"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Visibility"],[3,"Method"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"ItemVariances"],[4,"Variance"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[4,"FragmentInfo"],[3,"UpvarId"],[4,"BorrowKind"],[4,"UpvarCapture"],[3,"UpvarBorrow"],[3,"AdtFlags"],[3,"AdtDefData"],[4,"AdtKind"],[4,"VariantKind"],[3,"VariantDefData"],[3,"FieldDefData"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"Sha256"],[8,"Delegate"],[4,"FoundAst"],[8,"CrateStore"],[8,"EncodingContext"],[8,"DecodingContext"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[8,"ast_node"],[4,"astencode_tag"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[4,"DefPathData"],[3,"ctxt"],[3,"TyDecoder"],[3,"EncodeContext"],[4,"XRef"],[3,"CrateDep"],[3,"CrateReader"],[3,"ImportedFileMap"],[3,"crate_metadata"],[3,"CStore"],[4,"MetadataBlob"],[3,"Index"],[3,"IndexData"],[3,"DenseIndex"],[3,"Context"],[3,"Library"],[3,"CratePaths"],[3,"ArchiveMetadata"],[3,"DecodingContext"]]};
searchIndex["rustc_passes"] = {"doc":"Various checks","items":[[0,"diagnostics","rustc_passes","",null,null],[0,"consts","","",null,null],[5,"check_crate","rustc_passes::consts","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"loops","rustc_passes","",null,null],[5,"check_crate","rustc_passes::loops","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"no_asm","rustc_passes","",null,null],[5,"check_crate","rustc_passes::no_asm","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"rvalues","rustc_passes","",null,null],[5,"check_crate","rustc_passes::rvalues","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"static_recursion","rustc_passes","",null,null],[5,"check_crate","rustc_passes::static_recursion","",null,{"inputs":[{"name":"session"},{"name":"defmap"},{"name":"map"}],"output":{"name":"compileresult"}}]],"paths":[]};
searchIndex["rustc_lint"] = {"doc":"Lints in the Rust compiler.","items":[[0,"lint","rustc_lint","Lints, aka compiler warnings.",null,null],[11,"name_lower","rustc::lint","Get the lint&#39;s name, with ASCII letters converted to lowercase.",0,null],[11,"graph_id","rustc::cfg::graphviz","",1,null],[11,"node_id","","",1,null],[11,"node_label","","",1,null],[11,"edge_label","","",1,null],[11,"nodes","","",1,null],[11,"edges","","",1,null],[11,"source","","",1,null],[11,"target","","",1,null],[11,"eq","rustc::cfg","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"id","","",2,null],[11,"fmt","","",3,null],[11,"new","","",4,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",4,null],[11,"decode","rustc::dep_graph::dep_node","",5,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"from_label_string","","Used in testing",5,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",5,null],[11,"new","rustc::dep_graph::dep_tracking_map","",6,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",6,null],[11,"insert","","",6,null],[11,"contains_key","","",6,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",7,null],[11,"index","rustc::dep_graph::dep_tracking_map","",6,null],[11,"clone","rustc::dep_graph::graph","",8,null],[11,"new","","",8,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",8,null],[11,"query","","",8,null],[11,"in_ignore","","",8,null],[11,"in_task","","",8,null],[11,"with_ignore","","",8,null],[11,"with_task","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"new","rustc::dep_graph::query","",9,null],[11,"contains_node","","",9,null],[11,"nodes","","",9,null],[11,"edges","","",9,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",9,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",9,null],[11,"fmt","rustc::hir::def","",10,null],[11,"hash","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"clone","","",11,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",11,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",11,null],[11,"new","","",11,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",12,null],[11,"var_id","","",10,null],[11,"def_id","","",10,null],[11,"variant_def_ids","","",10,null],[11,"kind_name","","",10,null],[11,"hash","rustc::hir::def_id","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"cmp","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"new","","",13,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",13,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",13,null],[11,"as_u32","","",13,null],[11,"hash","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"partial_cmp","","",14,null],[11,"lt","","",14,null],[11,"le","","",14,null],[11,"gt","","",14,null],[11,"ge","","",14,null],[11,"cmp","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"local","","",14,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",14,null],[11,"eq","rustc::hir::intravisit","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"attrs","","",15,null],[11,"fmt","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,null],[11,"clone","","",16,null],[11,"max","","",16,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",16,null],[11,"add","","",16,null],[11,"new","","",17,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",17,null],[11,"visit_id","","",17,null],[11,"new","","",18,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",18,null],[11,"visit_foreign_item","","",18,null],[11,"visit_item","","",18,null],[11,"visit_local","","",18,null],[11,"visit_block","","",18,null],[11,"visit_stmt","","",18,null],[11,"visit_pat","","",18,null],[11,"visit_expr","","",18,null],[11,"visit_ty","","",18,null],[11,"visit_generics","","",18,null],[11,"visit_fn","","",18,null],[11,"visit_struct_field","","",18,null],[11,"visit_variant_data","","",18,null],[11,"visit_trait_item","","",18,null],[11,"visit_impl_item","","",18,null],[11,"visit_lifetime","","",18,null],[11,"visit_lifetime_def","","",18,null],[11,"visit_trait_ref","","",18,null],[11,"resolve_generated_global_path","rustc::hir::lowering","",19,null],[11,"get_resolution","","",19,null],[11,"record_resolution","","",19,null],[11,"definitions","","",19,null],[11,"testing_context","","",20,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"loweringcontext"}}],[11,"lower_item","","",20,null],[11,"clone","rustc::hir::map::blocks","",21,null],[11,"is_fn_like","rustc::hir","",22,null],[11,"is_fn_like","","",23,null],[11,"is_fn_like","","",24,null],[11,"clone","rustc::hir::map::blocks","",25,null],[11,"id","","",25,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",25,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",21,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",21,null],[11,"body","","",21,null],[11,"decl","","",21,null],[11,"span","","",21,null],[11,"id","","",21,null],[11,"kind","","",21,null],[11,"clone","rustc::hir::map::definitions","",26,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"hash","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",27,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,null],[11,"hash","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"clone","","",29,null],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"hash","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",30,null],[11,"is_local","","",30,null],[11,"make","","",30,{"inputs":[{"name":"u32"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"hash","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,null],[11,"hash","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",32,null],[11,"clone","","",32,null],[11,"new","","",26,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",26,null],[11,"def_key","","",26,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",26,null],[11,"opt_def_index","","",26,null],[11,"opt_local_def_id","","",26,null],[11,"local_def_id","","",26,null],[11,"as_local_node_id","","",26,null],[11,"retrace_path","","",26,null],[11,"create_def_with_parent","","",26,null],[11,"as_interned_str","","",32,null],[11,"to_string","","",32,null],[11,"fmt","rustc::hir::map","",33,null],[11,"clone","","",33,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"new","","",35,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",35,null],[11,"clone","","",36,null],[11,"num_local_def_ids","","",36,null],[11,"def_key","","",36,null],[11,"def_path_from_id","","",36,null],[11,"def_path","","",36,null],[11,"retrace_path","","",36,null],[11,"local_def_id","","",36,null],[11,"opt_local_def_id","","",36,null],[11,"as_local_node_id","","",36,null],[11,"krate","","",36,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",36,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",36,null],[11,"get_if_local","","",36,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",36,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",36,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",36,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",36,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",36,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",36,null],[11,"get_parent_did","","",36,null],[11,"get_foreign_abi","","",36,null],[11,"expect_item","","",36,null],[11,"expect_trait_item","","",36,null],[11,"expect_struct","","",36,null],[11,"expect_variant","","",36,null],[11,"expect_foreign_item","","",36,null],[11,"expect_expr","","",36,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",36,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",36,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",36,null],[11,"opt_span","","",36,null],[11,"span","","",36,null],[11,"span_if_local","","",36,null],[11,"def_id_span","","",36,null],[11,"node_to_string","","",36,null],[11,"node_to_user_string","","",36,null],[11,"next","","",37,null],[11,"print_node","rustc::hir::print","",38,null],[11,"clone","","",39,null],[11,"writer","","",38,null],[11,"boxes","","",38,null],[11,"comments","","",38,null],[11,"cur_cmnt_and_lit","","",38,null],[11,"literals","","",38,null],[11,"new_from_input","","",38,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",38,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",38,null],[11,"nbsp","","",38,null],[11,"word_nbsp","","",38,null],[11,"head","","",38,null],[11,"bopen","","",38,null],[11,"bclose_","","",38,null],[11,"bclose_maybe_open","","",38,null],[11,"bclose","","",38,null],[11,"in_cbox","","",38,null],[11,"space_if_not_bol","","",38,null],[11,"break_offset_if_not_bol","","",38,null],[11,"synth_comment","","",38,null],[11,"commasep_cmnt","","",38,null],[11,"commasep_exprs","","",38,null],[11,"print_mod","","",38,null],[11,"print_foreign_mod","","",38,null],[11,"print_opt_lifetime","","",38,null],[11,"print_type","","",38,null],[11,"print_foreign_item","","",38,null],[11,"print_item_id","","",38,null],[11,"print_item","","Pretty-print an item",38,null],[11,"print_enum_def","","",38,null],[11,"print_variants","","",38,null],[11,"print_visibility","","",38,null],[11,"print_struct","","",38,null],[11,"print_variant","","",38,null],[11,"print_method_sig","","",38,null],[11,"print_trait_item","","",38,null],[11,"print_impl_item","","",38,null],[11,"print_stmt","","",38,null],[11,"print_block","","",38,null],[11,"print_block_unclosed","","",38,null],[11,"print_block_unclosed_indent","","",38,null],[11,"print_block_with_attrs","","",38,null],[11,"print_block_maybe_unclosed","","",38,null],[11,"print_if","","",38,null],[11,"print_if_let","","",38,null],[11,"print_expr_maybe_paren","","",38,null],[11,"print_expr","","",38,null],[11,"print_local_decl","","",38,null],[11,"print_decl","","",38,null],[11,"print_usize","","",38,null],[11,"print_name","","",38,null],[11,"print_for_decl","","",38,null],[11,"print_pat","","",38,null],[11,"print_fn","","",38,null],[11,"print_fn_args_and_ret","","",38,null],[11,"print_fn_block_args","","",38,null],[11,"print_capture_clause","","",38,null],[11,"print_bounds","","",38,null],[11,"print_lifetime","","",38,null],[11,"print_lifetime_def","","",38,null],[11,"print_generics","","",38,null],[11,"print_ty_param","","",38,null],[11,"print_where_clause","","",38,null],[11,"print_view_path","","",38,null],[11,"print_mutability","","",38,null],[11,"print_mt","","",38,null],[11,"print_arg","","",38,null],[11,"print_fn_output","","",38,null],[11,"print_ty_fn","","",38,null],[11,"maybe_print_trailing_comment","","",38,null],[11,"print_remaining_comments","","",38,null],[11,"print_opt_abi_and_extern_if_nondefault","","",38,null],[11,"print_extern_opt_abi","","",38,null],[11,"print_fn_header_info","","",38,null],[11,"print_unsafety","","",38,null],[11,"fmt","rustc::hir::svh","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"hash","","",40,null],[11,"clone","","",40,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",40,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",40,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",40,null],[11,"fmt","","",40,null],[11,"hash","rustc::hir","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"fmt","","",42,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"fmt","","",43,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",43,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"none","","",45,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",45,null],[11,"has_lifetimes","","",45,null],[11,"has_types","","",45,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",45,null],[11,"lifetimes","","",45,null],[11,"bindings","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"empty","","",51,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",51,null],[11,"is_type_parameterized","","",51,null],[11,"is_parameterized","","",51,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"item","","",57,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",57,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"walk","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"clone","","",65,null],[11,"as_str","","",65,null],[11,"is_lazy","","",65,null],[11,"is_shift","","",65,null],[11,"is_comparison","","",65,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",65,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"clone","","",66,null],[11,"as_str","","",66,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",66,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"attrs","","",67,null],[11,"id","","",67,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"attrs","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"clone","","",73,null],[11,"hash","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",23,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"to_self","","",90,null],[11,"is_self","","",90,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"clone","","",92,null],[11,"has_self","","",92,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"eq","","",95,null],[11,"clone","","",95,null],[11,"is_final","","",95,null],[11,"is_default","","",95,null],[11,"fmt","","",93,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"clone","","",97,null],[11,"span","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"clone","","",102,null],[11,"id","","",102,null],[11,"name","","",102,null],[11,"rename","","",102,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"clone","","",105,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"is_positional","","",107,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"clone","","",108,null],[11,"fields","","",108,null],[11,"id","","",108,null],[11,"is_struct","","",108,null],[11,"is_tuple","","",108,null],[11,"is_unit","","",108,null],[11,"fmt","","",109,null],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"eq","","",109,null],[11,"ne","","",109,null],[11,"clone","","",109,null],[11,"fmt","","",22,null],[11,"hash","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"descriptive_variant","","",110,null],[11,"fmt","","",111,null],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"clone","","",111,null],[11,"fmt","","",112,null],[11,"hash","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"clone","","",112,null],[11,"descriptive_variant","","",112,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"clone","","",113,null],[11,"clone","","",114,null],[11,"new","rustc::infer::bivariate","",115,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",115,null],[11,"tcx","","",115,null],[11,"a_is_expected","","",115,null],[11,"relate_with_variance","","",115,null],[11,"tys","","",115,null],[11,"regions","","",115,null],[11,"binders","","",115,null],[11,"clone","rustc::infer::combine","",116,null],[11,"super_combine_tys","rustc::infer","",117,null],[11,"tcx","rustc::infer::combine","",116,null],[11,"switch_expected","","",116,null],[11,"equate","","",116,null],[11,"bivariate","","",116,null],[11,"sub","","",116,null],[11,"lub","","",116,null],[11,"glb","","",116,null],[11,"instantiate","","",116,null],[11,"compare","core::result","",118,null],[11,"new","rustc::infer::equate","",119,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",119,null],[11,"tag","","",119,null],[11,"tcx","","",119,null],[11,"a_is_expected","","",119,null],[11,"relate_with_variance","","",119,null],[11,"tys","","",119,null],[11,"regions","","",119,null],[11,"binders","","",119,null],[11,"note_and_explain_region","rustc::ty::context","",120,null],[11,"report_region_errors","rustc::infer","",117,null],[11,"report_and_explain_type_error","","",117,null],[11,"resolve","rustc::ty::sty","",121,null],[11,"resolve","","",122,null],[11,"new","rustc::infer::glb","",123,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",123,null],[11,"tag","","",123,null],[11,"tcx","","",123,null],[11,"a_is_expected","","",123,null],[11,"relate_with_variance","","",123,null],[11,"tys","","",123,null],[11,"regions","","",123,null],[11,"binders","","",123,null],[11,"infcx","","",123,null],[11,"relate_bound","","",123,null],[11,"higher_ranked_sub","rustc::infer::combine","",116,null],[11,"higher_ranked_lub","","",116,null],[11,"higher_ranked_glb","","",116,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",117,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",117,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",117,null],[11,"new","rustc::infer::lub","",124,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",124,null],[11,"tag","","",124,null],[11,"tcx","","",124,null],[11,"a_is_expected","","",124,null],[11,"relate_with_variance","","",124,null],[11,"tys","","",124,null],[11,"regions","","",124,null],[11,"binders","","",124,null],[11,"infcx","","",124,null],[11,"relate_bound","","",124,null],[11,"fmt","rustc::infer::region_inference","",125,null],[11,"hash","","",125,null],[11,"eq","","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"fmt","","",127,null],[11,"hash","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"clone","","",129,null],[11,"eq","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"contains","","",133,null],[11,"push","","",133,null],[11,"new","","",134,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",134,null],[11,"commit","","",134,null],[11,"rollback_to","","",134,null],[11,"num_vars","","",134,null],[11,"new_region_var","","",134,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",134,null],[11,"new_bound","","",134,null],[11,"add_given","","",134,null],[11,"make_eqregion","","",134,null],[11,"make_subregion","","",134,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",134,null],[11,"lub_regions","","",134,null],[11,"glb_regions","","",134,null],[11,"resolve_var","","",134,null],[11,"opportunistic_resolve_var","","",134,null],[11,"combine_vars","","",134,null],[11,"vars_created_since_snapshot","","",134,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",134,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",134,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"fmt","","",126,null],[11,"fmt","","",126,null],[11,"to_ty","","",126,null],[11,"must_hold","","",127,null],[11,"cannot_hold","","",127,null],[11,"or","","",127,null],[11,"and","","",127,null],[11,"new","rustc::infer::resolve","",138,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictyperesolver"}}],[11,"tcx","","",138,null],[11,"fold_ty","","",138,null],[11,"new","","",139,{"inputs":[{"name":"inferctxt"}],"output":{"name":"opportunistictypeandregionresolver"}}],[11,"tcx","","",139,null],[11,"fold_ty","","",139,null],[11,"fold_region","","",139,null],[11,"new","rustc::infer::freshen","",140,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",140,null],[11,"fold_region","","",140,null],[11,"fold_ty","","",140,null],[11,"new","rustc::infer::sub","",141,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",141,null],[11,"tag","","",141,null],[11,"tcx","","",141,null],[11,"a_is_expected","","",141,null],[11,"with_cause","","",141,null],[11,"relate_with_variance","","",141,null],[11,"tys","","",141,null],[11,"regions","","",141,null],[11,"binders","","",141,null],[11,"hash","rustc::infer::type_variable","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"fmt","","",143,null],[11,"hash","","",143,null],[11,"eq","","",143,null],[11,"clone","","",143,null],[11,"new","","",144,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",144,null],[11,"var_diverges","","",144,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",144,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",144,null],[11,"new_var","","",144,null],[11,"root_var","","",144,null],[11,"probe","","",144,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",144,null],[11,"replace_if_possible","","",144,null],[11,"snapshot","","",144,null],[11,"rollback_to","","",144,null],[11,"commit","","",144,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",144,null],[11,"unsolved_variables","","",144,null],[11,"index","rustc::ty::sty","",145,null],[11,"from_index","","",145,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",145,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"fmt","rustc::infer::unify_key","",146,null],[11,"clone","","",146,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"combine","","",146,null],[11,"index","rustc::ty::sty","",147,null],[11,"from_index","","",147,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",147,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","rustc::ty","",148,null],[11,"index","rustc::ty::sty","",149,null],[11,"from_index","","",149,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",149,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","syntax::ast","",150,null],[11,"index","rustc::ty::sty","",151,null],[11,"from_index","","",151,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",151,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"clone","rustc::infer","",152,null],[11,"borrow","","",152,null],[11,"borrow_mut","","",152,null],[11,"fmt","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",153,null],[11,"fmt","","",154,null],[11,"clone","","",154,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",160,null],[11,"infer_ctxt","rustc::ty::context","",120,null],[11,"normalizing_infer_ctxt","","",120,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",120,null],[11,"enter","rustc::infer","",161,null],[11,"trans_normalize","rustc::ty::sty","",162,null],[11,"trans_normalize","","",163,null],[11,"trans_normalize","","",164,null],[11,"trans_normalize","","",122,null],[11,"trans_normalize","rustc::mir::tcx","",165,null],[11,"normalize_associated_type","rustc::ty::context","",120,null],[11,"drain_fulfillment_cx_or_panic","rustc::infer","",117,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",117,null],[11,"projection_mode","","",117,null],[11,"freshen","","",117,null],[11,"type_var_diverges","","",117,null],[11,"freshener","","",117,null],[11,"type_is_unconstrained_numeric","","",117,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",117,null],[11,"unsolved_variables","","",117,null],[11,"equate","","",117,null],[11,"sub","","",117,null],[11,"lub","","",117,null],[11,"glb","","",117,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",117,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",117,null],[11,"in_snapshot","","",117,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",117,null],[11,"probe","","Execute `f` then unroll any bindings it creates",117,null],[11,"add_given","","",117,null],[11,"sub_types","","",117,null],[11,"can_sub_types","","",117,null],[11,"eq_types","","",117,null],[11,"eq_trait_refs","","",117,null],[11,"eq_impl_headers","","",117,null],[11,"sub_poly_trait_refs","","",117,null],[11,"sub_regions","","",117,null],[11,"equality_predicate","","",117,null],[11,"region_outlives_predicate","","",117,null],[11,"next_ty_var_id","","",117,null],[11,"next_ty_var","","",117,null],[11,"next_ty_var_with_default","","",117,null],[11,"next_diverging_ty_var","","",117,null],[11,"next_ty_vars","","",117,null],[11,"next_int_var_id","","",117,null],[11,"next_float_var_id","","",117,null],[11,"next_region_var","","",117,null],[11,"region_vars_for_defs","","",117,null],[11,"type_vars_for_defs","","",117,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",117,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",117,null],[11,"fresh_bound_region","","",117,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",117,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",117,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",117,null],[11,"node_type","","",117,null],[11,"expr_ty","","",117,null],[11,"resolve_regions_and_report_errors","","",117,null],[11,"ty_to_string","","",117,null],[11,"tys_to_string","","",117,null],[11,"trait_ref_to_string","","",117,null],[11,"shallow_resolve","","",117,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",117,null],[11,"resolve_type_and_region_vars_if_possible","","",117,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",117,null],[11,"type_error_message_str","","",117,null],[11,"type_error_struct_str","","",117,null],[11,"type_error_message_str_with_expected","","",117,null],[11,"type_error_struct_str_with_expected","","",117,null],[11,"type_error_message","","",117,null],[11,"type_error_struct","","",117,null],[11,"report_mismatched_types","","",117,null],[11,"report_conflicting_default_types","","",117,null],[11,"replace_late_bound_regions_with_fresh_var","","",117,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",117,null],[11,"can_equate","","",117,null],[11,"node_ty","","",117,null],[11,"expr_ty_adjusted","","",117,null],[11,"type_moves_by_default","","",117,null],[11,"node_method_ty","","",117,null],[11,"node_method_id","","",117,null],[11,"adjustments","","",117,null],[11,"is_method_call","","",117,null],[11,"temporary_scope","","",117,null],[11,"upvar_capture","","",117,null],[11,"param_env","","",117,null],[11,"closure_kind","","",117,null],[11,"closure_type","","",117,null],[11,"span","","",155,null],[11,"types","","",155,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"tys"},{"name":"tys"}],"output":{"name":"typetrace"}}],[11,"dummy","","",155,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",155,null],[11,"span","","",153,null],[11,"span","","",156,null],[11,"span","","",159,null],[11,"fmt","rustc::lint","",0,null],[11,"clone","","",0,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"hash","","",166,null],[11,"of","","Get the `LintId` for a `Lint`.",166,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",166,null],[11,"fmt","","",167,null],[11,"cmp","","",167,null],[11,"partial_cmp","","",167,null],[11,"eq","","",167,null],[11,"clone","","",167,null],[11,"as_str","","Convert a level to a lower-case string.",167,null],[11,"from_str","","Convert a lower-case string to a level.",167,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",168,null],[11,"ne","","",168,null],[11,"clone","","",168,null],[11,"clone","rustc::lint::builtin","",169,null],[11,"get_lints","","",169,null],[11,"new","rustc::lint::context","",170,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",170,null],[11,"get_lint_groups","","",170,null],[11,"register_early_pass","","",170,null],[11,"register_late_pass","","",170,null],[11,"register_future_incompatible","","",170,null],[11,"future_incompatible","","",170,null],[11,"register_group","","",170,null],[11,"register_renamed","","",170,null],[11,"register_removed","","",170,null],[11,"process_command_line","","",170,null],[11,"sess","","Get the overall compiler `Session` object.",171,null],[11,"lints","","",171,null],[11,"mut_lints","","",171,null],[11,"level_stack","","",171,null],[11,"enter_attrs","","",171,null],[11,"exit_attrs","","",171,null],[11,"sess","","Get the overall compiler `Session` object.",172,null],[11,"lints","","",172,null],[11,"mut_lints","","",172,null],[11,"level_stack","","",172,null],[11,"enter_attrs","","",172,null],[11,"exit_attrs","","",172,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",171,null],[11,"visit_item","","",171,null],[11,"visit_foreign_item","","",171,null],[11,"visit_pat","","",171,null],[11,"visit_expr","","",171,null],[11,"visit_stmt","","",171,null],[11,"visit_fn","","",171,null],[11,"visit_variant_data","","",171,null],[11,"visit_struct_field","","",171,null],[11,"visit_variant","","",171,null],[11,"visit_ty","","",171,null],[11,"visit_name","","",171,null],[11,"visit_mod","","",171,null],[11,"visit_local","","",171,null],[11,"visit_block","","",171,null],[11,"visit_arm","","",171,null],[11,"visit_decl","","",171,null],[11,"visit_expr_post","","",171,null],[11,"visit_generics","","",171,null],[11,"visit_trait_item","","",171,null],[11,"visit_impl_item","","",171,null],[11,"visit_lifetime","","",171,null],[11,"visit_lifetime_def","","",171,null],[11,"visit_path","","",171,null],[11,"visit_path_list_item","","",171,null],[11,"visit_attribute","","",171,null],[11,"visit_item","","",172,null],[11,"visit_foreign_item","","",172,null],[11,"visit_pat","","",172,null],[11,"visit_expr","","",172,null],[11,"visit_stmt","","",172,null],[11,"visit_fn","","",172,null],[11,"visit_variant_data","","",172,null],[11,"visit_struct_field","","",172,null],[11,"visit_variant","","",172,null],[11,"visit_ty","","",172,null],[11,"visit_ident","","",172,null],[11,"visit_mod","","",172,null],[11,"visit_local","","",172,null],[11,"visit_block","","",172,null],[11,"visit_arm","","",172,null],[11,"visit_decl","","",172,null],[11,"visit_expr_post","","",172,null],[11,"visit_generics","","",172,null],[11,"visit_trait_item","","",172,null],[11,"visit_impl_item","","",172,null],[11,"visit_lifetime","","",172,null],[11,"visit_lifetime_def","","",172,null],[11,"visit_explicit_self","","",172,null],[11,"visit_path","","",172,null],[11,"visit_path_list_item","","",172,null],[11,"visit_attribute","","",172,null],[11,"visit_id","","",171,null],[11,"get_lints","","",173,null],[11,"check_item","","",173,null],[11,"prohibit_type_params","rustc::ty::context","",120,null],[11,"prohibit_projection","","",120,null],[11,"prim_ty_to_ty","","",120,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",120,null],[11,"fmt","rustc::middle::expr_use_visitor","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[11,"fmt","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"clone","","",175,null],[11,"fmt","","",176,null],[11,"eq","","",176,null],[11,"clone","","",176,null],[11,"fmt","","",177,null],[11,"eq","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"eq","","",178,null],[11,"clone","","",178,null],[11,"new","","",179,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"exprusevisitor"}}],[11,"walk_fn","","",179,null],[11,"consume_expr","","",179,null],[11,"walk_expr","","",179,null],[11,"decode","rustc::middle::const_val","",180,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",180,null],[11,"fmt","","",180,null],[11,"clone","","",180,null],[11,"hash","","",180,null],[11,"eq","","",180,null],[11,"description","","",180,null],[11,"hash","rustc::middle::const_qualif","",181,null],[11,"cmp","","",181,null],[11,"partial_cmp","","",181,null],[11,"lt","","",181,null],[11,"le","","",181,null],[11,"gt","","",181,null],[11,"ge","","",181,null],[11,"clone","","",181,null],[11,"eq","","",181,null],[11,"ne","","",181,null],[11,"decode","","",181,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,null],[18,"MUTABLE_MEM","rustc_lint","",181,null],[18,"NEEDS_DROP","","",181,null],[18,"PREFER_IN_PLACE","","",181,null],[18,"NON_ZERO_SIZED","","",181,null],[18,"HAS_STATIC_BORROWS","","",181,null],[18,"NOT_CONST","","",181,null],[18,"NON_STATIC_BORROWS","","",181,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",181,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",181,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",181,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",181,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",181,null],[11,"is_all","","Returns `true` if all flags are currently set.",181,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",181,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",181,null],[11,"insert","","Inserts the specified flags in-place.",181,null],[11,"remove","","Removes the specified flags in-place.",181,null],[11,"toggle","","Toggles the specified flags in-place.",181,null],[11,"bitor","","Returns the union of the two sets of flags.",181,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",181,null],[11,"bitand","","Returns the intersection between the two sets of flags.",181,null],[11,"sub","","Returns the set difference of the two sets of flags.",181,null],[11,"not","","Returns the complement of this set of flags.",181,null],[11,"fmt","rustc::middle::cstore","",182,null],[11,"clone","","",182,null],[11,"fmt","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",184,null],[11,"eq","","",184,null],[11,"fmt","","",184,null],[11,"eq","","",185,null],[11,"clone","","",185,null],[11,"from_u32","","",185,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",187,null],[11,"hash","","",187,null],[11,"decode","","",187,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,null],[11,"eq","","",187,null],[11,"ne","","",187,null],[11,"clone","","",187,null],[11,"fmt","","",188,null],[11,"hash","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"clone","","",188,null],[11,"clone","","",189,null],[11,"fmt","","",190,null],[11,"clone","","",190,null],[11,"visit","","",187,null],[11,"visit_ids","","",187,null],[11,"stability","","",191,null],[11,"deprecation","","",191,null],[11,"visibility","","",191,null],[11,"closure_kind","","",191,null],[11,"closure_ty","","",191,null],[11,"item_variances","","",191,null],[11,"repr_attrs","","",191,null],[11,"item_type","","",191,null],[11,"visible_parent_map","","",191,null],[11,"item_name","","",191,null],[11,"item_predicates","","",191,null],[11,"item_super_predicates","","",191,null],[11,"item_attrs","","",191,null],[11,"item_symbol","","",191,null],[11,"trait_def","","",191,null],[11,"adt_def","","",191,null],[11,"method_arg_names","","",191,null],[11,"inherent_implementations_for_type","","",191,null],[11,"implementations_of_trait","","",191,null],[11,"provided_trait_methods","","",191,null],[11,"trait_item_def_ids","","",191,null],[11,"impl_items","","",191,null],[11,"impl_trait_ref","","",191,null],[11,"impl_polarity","","",191,null],[11,"custom_coerce_unsized_kind","","",191,null],[11,"associated_consts","","",191,null],[11,"impl_parent","","",191,null],[11,"trait_of_item","","",191,null],[11,"impl_or_trait_item","","",191,null],[11,"is_const_fn","","",191,null],[11,"is_defaulted_trait","","",191,null],[11,"is_impl","","",191,null],[11,"is_default_impl","","",191,null],[11,"is_extern_item","","",191,null],[11,"is_static_method","","",191,null],[11,"is_statically_included_foreign_item","","",191,null],[11,"is_typedef","","",191,null],[11,"dylib_dependency_formats","","",191,null],[11,"lang_items","","",191,null],[11,"missing_lang_items","","",191,null],[11,"is_staged_api","","",191,null],[11,"is_explicitly_linked","","",191,null],[11,"is_allocator","","",191,null],[11,"is_panic_runtime","","",191,null],[11,"panic_strategy","","",191,null],[11,"extern_crate","","",191,null],[11,"crate_attrs","","",191,null],[11,"crate_name","","",191,null],[11,"original_crate_name","","",191,null],[11,"crate_hash","","",191,null],[11,"crate_disambiguator","","",191,null],[11,"crate_struct_field_attrs","","",191,null],[11,"plugin_registrar_fn","","",191,null],[11,"native_libraries","","",191,null],[11,"reachable_ids","","",191,null],[11,"def_key","","",191,null],[11,"relative_def_path","","",191,null],[11,"variant_kind","","",191,null],[11,"struct_ctor_def_id","","",191,null],[11,"tuple_struct_definition_if_ctor","","",191,null],[11,"struct_field_names","","",191,null],[11,"item_children","","",191,null],[11,"crate_top_level_items","","",191,null],[11,"maybe_get_item_ast","","",191,null],[11,"maybe_get_item_mir","","",191,null],[11,"is_item_mir_available","","",191,null],[11,"crates","","",191,null],[11,"used_libraries","","",191,null],[11,"used_link_args","","",191,null],[11,"metadata_filename","","",191,null],[11,"metadata_section_name","","",191,null],[11,"encode_type","","",191,null],[11,"used_crates","","",191,null],[11,"used_crate_source","","",191,null],[11,"extern_mod_stmt_cnum","","",191,null],[11,"encode_metadata","","",191,null],[11,"metadata_encoding_version","","",191,null],[11,"fmt","rustc::middle::dataflow","",192,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"pre","","",193,null],[11,"fmt","","",194,null],[11,"eq","","",194,null],[11,"clone","","",194,null],[11,"new","","",193,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",193,null],[11,"add_kill","","Indicates that `id` kills `bit`",193,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",193,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",193,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",193,null],[11,"propagate","","Performs the data flow analysis.",193,null],[11,"fmt","rustc::middle::dependency_format","",195,null],[11,"eq","","",195,null],[11,"clone","","",195,null],[11,"clone","rustc::middle::free_region","",196,null],[11,"new","","",196,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",196,null],[11,"relate_free_regions_from_predicates","","",196,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",196,null],[11,"lub_free_regions","","",196,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",196,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",196,null],[11,"hash","rustc::middle::lang_items","",197,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"from_u32","","",197,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",198,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",198,null],[11,"item_name","","",198,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",198,null],[11,"require_owned_box","","",198,null],[11,"from_builtin_kind","","",198,null],[11,"to_builtin_kind","","",198,null],[11,"fn_trait_kind","","",198,null],[11,"char_impl","","",198,null],[11,"str_impl","","",198,null],[11,"slice_impl","","",198,null],[11,"const_ptr_impl","","",198,null],[11,"mut_ptr_impl","","",198,null],[11,"i8_impl","","",198,null],[11,"i16_impl","","",198,null],[11,"i32_impl","","",198,null],[11,"i64_impl","","",198,null],[11,"isize_impl","","",198,null],[11,"u8_impl","","",198,null],[11,"u16_impl","","",198,null],[11,"u32_impl","","",198,null],[11,"u64_impl","","",198,null],[11,"usize_impl","","",198,null],[11,"f32_impl","","",198,null],[11,"f64_impl","","",198,null],[11,"send_trait","","",198,null],[11,"sized_trait","","",198,null],[11,"unsize_trait","","",198,null],[11,"copy_trait","","",198,null],[11,"sync_trait","","",198,null],[11,"drop_trait","","",198,null],[11,"coerce_unsized_trait","","",198,null],[11,"add_trait","","",198,null],[11,"sub_trait","","",198,null],[11,"mul_trait","","",198,null],[11,"div_trait","","",198,null],[11,"rem_trait","","",198,null],[11,"neg_trait","","",198,null],[11,"not_trait","","",198,null],[11,"bitxor_trait","","",198,null],[11,"bitand_trait","","",198,null],[11,"bitor_trait","","",198,null],[11,"shl_trait","","",198,null],[11,"shr_trait","","",198,null],[11,"add_assign_trait","","",198,null],[11,"sub_assign_trait","","",198,null],[11,"mul_assign_trait","","",198,null],[11,"div_assign_trait","","",198,null],[11,"rem_assign_trait","","",198,null],[11,"bitxor_assign_trait","","",198,null],[11,"bitand_assign_trait","","",198,null],[11,"bitor_assign_trait","","",198,null],[11,"shl_assign_trait","","",198,null],[11,"shr_assign_trait","","",198,null],[11,"index_trait","","",198,null],[11,"index_mut_trait","","",198,null],[11,"unsafe_cell_type","","",198,null],[11,"deref_trait","","",198,null],[11,"deref_mut_trait","","",198,null],[11,"fn_trait","","",198,null],[11,"fn_mut_trait","","",198,null],[11,"fn_once_trait","","",198,null],[11,"eq_trait","","",198,null],[11,"ord_trait","","",198,null],[11,"str_eq_fn","","",198,null],[11,"panic_fn","","",198,null],[11,"panic_bounds_check_fn","","",198,null],[11,"panic_fmt","","",198,null],[11,"exchange_malloc_fn","","",198,null],[11,"exchange_free_fn","","",198,null],[11,"box_free_fn","","",198,null],[11,"strdup_uniq_fn","","",198,null],[11,"start_fn","","",198,null],[11,"eh_personality","","",198,null],[11,"eh_personality_catch","","",198,null],[11,"eh_unwind_resume","","",198,null],[11,"msvc_try_filter","","",198,null],[11,"owned_box","","",198,null],[11,"phantom_data","","",198,null],[11,"covariant_type","","",198,null],[11,"contravariant_type","","",198,null],[11,"invariant_type","","",198,null],[11,"covariant_lifetime","","",198,null],[11,"contravariant_lifetime","","",198,null],[11,"invariant_lifetime","","",198,null],[11,"no_copy_bound","","",198,null],[11,"non_zero","","",198,null],[11,"debug_trait","","",198,null],[11,"eq","rustc::middle::mem_categorization","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"clone","","",200,null],[11,"hash","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"hash","","",202,null],[11,"eq","","",202,null],[11,"ne","","",202,null],[11,"clone","","",202,null],[11,"fmt","","",203,null],[11,"hash","","",203,null],[11,"eq","","",203,null],[11,"ne","","",203,null],[11,"clone","","",203,null],[11,"fmt","","",204,null],[11,"hash","","",204,null],[11,"eq","","",204,null],[11,"clone","","",204,null],[11,"fmt","","",205,null],[11,"hash","","",205,null],[11,"eq","","",205,null],[11,"clone","","",205,null],[11,"fmt","","",206,null],[11,"hash","","",206,null],[11,"eq","","",206,null],[11,"clone","","",206,null],[11,"fmt","","",207,null],[11,"eq","","",207,null],[11,"ne","","",207,null],[11,"clone","","",207,null],[11,"eq","","",208,null],[11,"ne","","",208,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"id","rustc::hir","",24,null],[11,"span","","",24,null],[11,"id","","",60,null],[11,"span","","",60,null],[11,"clone","rustc::middle::mem_categorization","",210,null],[11,"from_mutbl","","",206,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",206,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",206,null],[11,"is_mutable","","",206,null],[11,"is_immutable","","",206,null],[11,"to_user_str","","",206,null],[11,"new","","",210,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",210,null],[11,"cat_expr_autoderefd","","",210,null],[11,"cat_expr_unadjusted","","",210,null],[11,"cat_def","","",210,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",210,null],[11,"cat_rvalue_node","","",210,null],[11,"cat_rvalue","","",210,null],[11,"cat_field","","",210,null],[11,"cat_tup_field","","",210,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",210,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",210,null],[11,"cat_imm_interior","","",210,null],[11,"cat_downcast","","",210,null],[11,"cat_pattern","","",210,null],[11,"fmt","","",211,null],[11,"clone","","",211,null],[11,"fmt","","",212,null],[11,"clone","","",212,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",208,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",208,null],[11,"upvar","","",208,null],[11,"descriptive_string","","",208,null],[11,"fmt","","",208,null],[11,"fmt","","",199,null],[11,"fmt","","",201,null],[11,"fmt","","",202,null],[11,"fmt","","",200,null],[11,"fmt","","",200,null],[11,"cmp","rustc::middle::privacy","",213,null],[11,"partial_cmp","","",213,null],[11,"eq","","",213,null],[11,"fmt","","",213,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"is_reachable","","",214,null],[11,"is_exported","","",214,null],[11,"is_public","","",214,null],[11,"default","","",214,{"inputs":[],"output":{"name":"accesslevels"}}],[11,"fmt","","",214,null],[11,"decode","rustc::middle::region","",215,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",215,null],[11,"hash","","",215,null],[11,"cmp","","",215,null],[11,"partial_cmp","","",215,null],[11,"lt","","",215,null],[11,"le","","",215,null],[11,"gt","","",215,null],[11,"ge","","",215,null],[11,"eq","","",215,null],[11,"ne","","",215,null],[11,"clone","","",215,null],[11,"fmt","","",215,null],[11,"fmt","","",216,null],[11,"hash","","",216,null],[11,"cmp","","",216,null],[11,"partial_cmp","","",216,null],[11,"lt","","",216,null],[11,"le","","",216,null],[11,"gt","","",216,null],[11,"ge","","",216,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"clone","","",216,null],[11,"fmt","","",217,null],[11,"decode","","",217,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",217,null],[11,"hash","","",217,null],[11,"cmp","","",217,null],[11,"partial_cmp","","",217,null],[11,"lt","","",217,null],[11,"le","","",217,null],[11,"gt","","",217,null],[11,"ge","","",217,null],[11,"eq","","",217,null],[11,"ne","","",217,null],[11,"clone","","",217,null],[11,"to_code_extent","","",217,null],[11,"fmt","","",218,null],[11,"decode","","",218,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",218,null],[11,"hash","","",218,null],[11,"cmp","","",218,null],[11,"partial_cmp","","",218,null],[11,"lt","","",218,null],[11,"le","","",218,null],[11,"gt","","",218,null],[11,"ge","","",218,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"clone","","",218,null],[11,"node_id","","Returns a node id associated with this scope.",216,null],[11,"node_id","","",215,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",215,null],[11,"clone","","",219,null],[11,"fmt","","",219,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",220,null],[11,"lookup_code_extent","","",220,null],[11,"node_extent","","",220,null],[11,"item_extent","","",220,null],[11,"call_site_extent","","",220,null],[11,"opt_destruction_extent","","",220,null],[11,"intern_code_extent","","",220,null],[11,"intern_node","","",220,null],[11,"code_extent_data","","",220,null],[11,"each_encl_scope","","",220,null],[11,"each_var_scope","","",220,null],[11,"each_rvalue_scope","","",220,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",220,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",220,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",220,null],[11,"var_region","","Returns the lifetime of the variable `id`.",220,null],[11,"scopes_intersect","","",220,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",220,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",220,null],[11,"fmt","rustc::middle::resolve_lifetime","",221,null],[11,"decode","","",221,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",221,null],[11,"hash","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"hash","rustc::middle::stability","",222,null],[11,"fmt","","",222,null],[11,"clone","","",222,null],[11,"partial_cmp","","",222,null],[11,"eq","","",222,null],[11,"decode","","",222,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",222,null],[11,"from_attr_level","","",222,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"build","","Construct the stability index for a crate being compiled.",223,null],[11,"new","","",223,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[11,"lookup_stability","rustc::ty::context","Lookup the stability for a node, loading external crate\nmetadata as necessary.",120,null],[11,"lookup_deprecation","","",120,null],[11,"decode","rustc::mir::repr","",224,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",224,null],[11,"clone","","",224,null],[11,"all_basic_blocks","","",224,null],[11,"basic_block_data","","",224,null],[11,"basic_block_data_mut","","",224,null],[11,"index","","",224,null],[11,"index_mut","","",224,null],[11,"decode","","",225,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",225,null],[11,"eq","","",225,null],[11,"fmt","","",225,null],[11,"clone","","",225,null],[11,"decode","","",226,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",226,null],[11,"eq","","",226,null],[11,"fmt","","",226,null],[11,"clone","","",226,null],[11,"decode","","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",227,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"decode","","",228,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",228,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"decode","","",229,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",229,null],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"decode","","",230,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",230,null],[11,"fmt","","",230,null],[11,"clone","","",230,null],[11,"decode","","",231,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",231,null],[11,"hash","","",231,null],[11,"eq","","",231,null],[11,"ne","","",231,null],[11,"clone","","",231,null],[11,"new","","",231,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",231,null],[11,"fmt","","",231,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"fmt","","",232,null],[11,"clone","","",232,null],[11,"decode","","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",233,null],[11,"fmt","","",233,null],[11,"clone","","",233,null],[11,"decode","","",234,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",234,null],[11,"clone","","",234,null],[11,"successors","","",233,null],[11,"successors_mut","","",233,null],[11,"successors","","",234,null],[11,"successors_mut","","",234,null],[11,"new","","",232,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",232,null],[11,"terminator_mut","","",232,null],[11,"fmt","","",234,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",234,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",234,null],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",235,null],[11,"clone","","",235,null],[11,"decode","","",236,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",236,null],[11,"fmt","","",236,null],[11,"clone","","",236,null],[11,"fmt","","",235,null],[11,"decode","","",237,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",237,null],[11,"eq","","",237,null],[11,"ne","","",237,null],[11,"clone","","",237,null],[11,"decode","","",238,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",238,null],[11,"hash","","",238,null],[11,"eq","","",238,null],[11,"ne","","",238,null],[11,"fmt","","",238,null],[11,"clone","","",238,null],[11,"decode","","",239,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",239,null],[11,"hash","","",239,null],[11,"eq","","",239,null],[11,"ne","","",239,null],[11,"fmt","","",239,null],[11,"clone","","",239,null],[11,"decode","","",240,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",240,null],[11,"hash","","",240,null],[11,"eq","","",240,null],[11,"ne","","",240,null],[11,"fmt","","",240,null],[11,"clone","","",240,null],[11,"new","","",240,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",240,null],[11,"field","","",237,null],[11,"deref","","",237,null],[11,"index","","",237,null],[11,"elem","","",237,null],[11,"fmt","","",237,null],[11,"index","collections::vec","",241,null],[11,"index_mut","","",241,null],[11,"decode","rustc::mir::repr","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",242,null],[11,"eq","","",242,null],[11,"ne","","",242,null],[11,"hash","","",242,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"new","","",242,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",242,null],[11,"decode","","",243,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",243,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"decode","","",244,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",244,null],[11,"eq","","",244,null],[11,"ne","","",244,null],[11,"clone","","",244,null],[11,"fmt","","",244,null],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",245,null],[11,"clone","","",245,null],[11,"decode","","",246,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",246,null],[11,"eq","","",246,null],[11,"fmt","","",246,null],[11,"clone","","",246,null],[11,"decode","","",247,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",247,null],[11,"eq","","",247,null],[11,"ne","","",247,null],[11,"fmt","","",247,null],[11,"clone","","",247,null],[11,"decode","","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",248,null],[11,"eq","","",248,null],[11,"fmt","","",248,null],[11,"clone","","",248,null],[11,"decode","","",249,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",249,null],[11,"eq","","",249,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"fmt","","",245,null],[11,"decode","","",250,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",250,null],[11,"hash","","",250,null],[11,"eq","","",250,null],[11,"ne","","",250,null],[11,"clone","","",250,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"clone","","",251,null],[11,"fmt","","",251,null],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",252,null],[11,"hash","","",252,null],[11,"eq","","",252,null],[11,"ne","","",252,null],[11,"clone","","",252,null],[11,"fmt","","",250,null],[11,"fmt","","",252,null],[11,"fmt","rustc::mir::tcx","",165,null],[11,"clone","","",165,null],[11,"from_ty","","",165,{"inputs":[{"name":"tys"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",165,null],[11,"projection_ty","","",165,null],[11,"super_fold_with","","",165,null],[11,"super_visit_with","","",165,null],[11,"operand_ty","rustc::mir::repr","",224,null],[11,"binop_ty","","",224,null],[11,"lvalue_ty","","",224,null],[11,"rvalue_ty","","",224,null],[11,"to_mutbl_lossy","","",226,null],[11,"to_hir_binop","","",248,null],[11,"fmt","rustc::mir::visit","",253,null],[11,"clone","","",253,null],[11,"clone","rustc::mir::transform","",254,null],[11,"from_node","","",254,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"mirsource"}}],[11,"item_id","","",254,null],[11,"new","","",255,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",255,null],[11,"push_pass","","Pushes a built-in pass.",255,null],[11,"extend","","",255,null],[11,"eq","rustc::session::config","",256,null],[11,"clone","","",256,null],[11,"eq","","",257,null],[11,"clone","","",257,null],[11,"hash","","",258,null],[11,"eq","","",258,null],[11,"clone","","",258,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"fmt","","",259,null],[11,"clone","","",259,null],[11,"default","","",259,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",260,null],[11,"eq","","",261,null],[11,"clone","","",261,null],[11,"filestem","","",262,null],[11,"clone","","",263,null],[11,"path","","",263,null],[11,"temp_path","","",263,null],[11,"with_extension","","",263,null],[11,"filestem","","",263,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",260,null],[11,"eq","","",264,null],[11,"clone","","",264,null],[11,"fmt","","",265,null],[11,"hash","","",265,null],[11,"cmp","","",265,null],[11,"clone","","",265,null],[11,"partial_cmp","","",265,null],[11,"eq","","",265,null],[11,"clone","","",266,null],[11,"is_empty","","",266,null],[11,"eq","","",267,null],[11,"clone","","",267,null],[11,"desc","","",267,null],[11,"clone","","",268,null],[11,"clone","","",269,null],[11,"fmt","","",270,null],[11,"eq","","",270,null],[11,"clone","","",270,null],[11,"eq","","",271,null],[11,"ne","","",271,null],[11,"clone","","",271,null],[11,"is_stable","","",271,null],[11,"stable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",271,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",265,null],[11,"clone","rustc::session::filesearch","",272,null],[11,"for_each_lib_search_path","","",273,null],[11,"get_lib_path","","",273,null],[11,"search","","",273,null],[11,"new","","",273,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",273,null],[11,"get_tools_search_paths","","",273,null],[11,"fmt","rustc::session::search_paths","",274,null],[11,"clone","","",274,null],[11,"fmt","","",275,null],[11,"clone","","",275,null],[11,"eq","","",275,null],[11,"new","","",274,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",274,null],[11,"iter","","",274,null],[11,"next","","",276,null],[11,"struct_span_warn","rustc::session","",277,null],[11,"struct_span_warn_with_code","","",277,null],[11,"struct_warn","","",277,null],[11,"struct_span_err","","",277,null],[11,"struct_span_err_with_code","","",277,null],[11,"struct_err","","",277,null],[11,"struct_span_fatal","","",277,null],[11,"struct_span_fatal_with_code","","",277,null],[11,"struct_fatal","","",277,null],[11,"span_fatal","","",277,null],[11,"span_fatal_with_code","","",277,null],[11,"fatal","","",277,null],[11,"span_err_or_warn","","",277,null],[11,"span_err","","",277,null],[11,"span_err_with_code","","",277,null],[11,"err","","",277,null],[11,"err_count","","",277,null],[11,"has_errors","","",277,null],[11,"abort_if_errors","","",277,null],[11,"track_errors","","",277,null],[11,"span_warn","","",277,null],[11,"span_warn_with_code","","",277,null],[11,"warn","","",277,null],[11,"opt_span_warn","","",277,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",277,null],[11,"note_without_error","","",277,null],[11,"span_note_without_error","","",277,null],[11,"span_unimpl","","",277,null],[11,"unimpl","","",277,null],[11,"add_lint","","",277,null],[11,"reserve_node_ids","","",277,null],[11,"diagnostic","","",277,null],[11,"codemap","","",277,null],[11,"verbose","","",277,null],[11,"time_passes","","",277,null],[11,"count_llvm_insns","","",277,null],[11,"count_type_sizes","","",277,null],[11,"time_llvm_passes","","",277,null],[11,"trans_stats","","",277,null],[11,"meta_stats","","",277,null],[11,"asm_comments","","",277,null],[11,"no_verify","","",277,null],[11,"borrowck_stats","","",277,null],[11,"print_llvm_passes","","",277,null],[11,"lto","","",277,null],[11,"no_landing_pads","","",277,null],[11,"unstable_options","","",277,null],[11,"print_enum_sizes","","",277,null],[11,"nonzeroing_move_hints","","",277,null],[11,"sysroot","","",277,null],[11,"target_filesearch","","",277,null],[11,"host_filesearch","","",277,null],[11,"next_node_id","","",277,null],[11,"peek_node_id","","",277,null],[11,"diagnostic","","",277,null],[11,"hash","rustc::traits::error_reporting","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"fmt","","",278,null],[11,"report_fulfillment_errors","rustc::infer","",117,null],[11,"report_fulfillment_errors_as_warnings","","",117,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",117,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",117,null],[11,"report_selection_error","","",117,null],[11,"recursive_type_with_infinite_size_error","rustc::ty::context","",120,null],[11,"report_object_safety_error","","",120,null],[11,"clone","rustc::traits::fulfill","",279,null],[11,"new","","Creates a new fulfillment context.",280,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",280,null],[11,"register_builtin_bound","","",280,null],[11,"register_region_obligation","","",280,null],[11,"register_predicate_obligation","","",280,null],[11,"register_rfc1592_obligation","","",280,null],[11,"region_obligations","","",280,null],[11,"select_rfc1592_obligations","","",280,null],[11,"select_all_or_error","","",280,null],[11,"select_where_possible","","",280,null],[11,"pending_obligations","","",280,null],[11,"new","","",281,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",281,null],[11,"check_duplicate_trait","","",281,null],[11,"eq","rustc::traits::project","",282,null],[11,"clone","","",282,null],[11,"fmt","","",282,null],[11,"is_topmost","","",282,null],[11,"is_any_final","","",282,null],[11,"is_any","","",282,null],[11,"clone","","",283,null],[11,"clone","","",284,null],[11,"with","","",284,null],[11,"hash","rustc::traits::object_safety","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"fmt","","",285,null],[11,"clone","","",285,null],[11,"hash","","",286,null],[11,"eq","","",286,null],[11,"fmt","","",286,null],[11,"clone","","",286,null],[11,"is_object_safe","rustc::ty::context","",120,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",120,null],[11,"object_safety_violations","","",120,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",120,null],[11,"clone","rustc::traits::select","",287,null],[11,"fmt","","",288,null],[11,"clone","","",288,null],[11,"clone","","",289,null],[11,"new","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",290,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",290,null],[11,"tcx","","",290,null],[11,"param_env","","",290,null],[11,"closure_typer","","",290,null],[11,"projection_mode","","",290,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",290,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",290,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",290,null],[11,"new","","",287,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",289,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",291,null],[11,"new","rustc::traits::specialize::specialization_graph","",292,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",292,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",292,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",292,null],[11,"clone","","",293,null],[11,"fmt","","",293,null],[11,"is_from_trait","","",293,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",293,null],[11,"def_id","","",293,null],[11,"next","","",294,null],[11,"next","","",295,null],[11,"map","","",296,null],[11,"next","","",297,null],[11,"next","","",298,null],[11,"next","","",299,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",295,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",295,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",295,null],[11,"new","rustc::traits::specialize","",300,{"inputs":[],"output":{"name":"specializescache"}}],[11,"check","","",300,null],[11,"insert","","",300,null],[11,"fmt","rustc::traits::project","",284,null],[11,"fmt","rustc::traits::fulfill","",279,null],[11,"fmt","rustc::traits","",301,null],[11,"fmt","","",302,null],[11,"fmt","","",303,null],[11,"fmt","","",304,null],[11,"fmt","","",305,null],[11,"fmt","","",306,null],[11,"fmt","","",307,null],[11,"fmt","","",308,null],[11,"fmt","","",309,null],[11,"fmt","","",310,null],[11,"fmt","rustc::traits::project","",283,null],[11,"lift_to_tcx","rustc::traits","",311,null],[11,"lift_to_tcx","","",302,null],[11,"super_fold_with","","",301,null],[11,"super_visit_with","","",301,null],[11,"super_fold_with","","",303,null],[11,"super_visit_with","","",303,null],[11,"super_fold_with","","",304,null],[11,"super_visit_with","","",304,null],[11,"super_fold_with","","",306,null],[11,"super_visit_with","","",306,null],[11,"super_fold_with","","",305,null],[11,"super_visit_with","","",305,null],[11,"super_fold_with","","",307,null],[11,"super_visit_with","","",307,null],[11,"super_fold_with","","",308,null],[11,"super_visit_with","","",308,null],[11,"super_fold_with","","",302,null],[11,"super_visit_with","","",302,null],[11,"super_fold_with","rustc::traits::project","",284,null],[11,"super_visit_with","","",284,null],[11,"next","rustc::traits::util","",312,null],[11,"trait_ref_for_builtin_bound","rustc::ty::context","",120,null],[11,"predicate_for_trait_def","","",120,null],[11,"predicate_for_builtin_bound","","",120,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",120,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",120,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",120,null],[11,"closure_trait_ref_and_return_type","","",120,null],[11,"eq","rustc::traits","",301,null],[11,"ne","","",301,null],[11,"clone","","",301,null],[11,"eq","","",313,null],[11,"ne","","",313,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"eq","","",314,null],[11,"ne","","",314,null],[11,"fmt","","",314,null],[11,"clone","","",314,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"fmt","","",315,null],[11,"clone","","",315,null],[11,"fmt","","",311,null],[11,"clone","","",311,null],[11,"clone","","",310,null],[11,"clone","","",302,null],[11,"eq","","",303,null],[11,"ne","","",303,null],[11,"clone","","",303,null],[11,"eq","","",304,null],[11,"ne","","",304,null],[11,"clone","","",304,null],[11,"clone","","",306,null],[11,"clone","","",305,null],[11,"clone","","",307,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"eq","","",308,null],[11,"ne","","",308,null],[11,"clone","","",308,null],[11,"new","","",301,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",301,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",301,null],[11,"new","","",313,{"inputs":[{"name":"span"},{"name":"u32"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",313,{"inputs":[{"name":"span"},{"name":"u32"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",313,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",302,null],[11,"map","","",302,null],[11,"clone","rustc::ty::adjustment","",316,null],[11,"clone","","",317,null],[11,"is_identity","","",316,null],[11,"is_identity","","",317,null],[11,"fmt","","",318,null],[11,"eq","","",318,null],[11,"ne","","",318,null],[11,"clone","","",318,null],[11,"fmt","","",319,null],[11,"decode","","",319,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",319,null],[11,"clone","","",319,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",320,null],[11,"adjust_for_autoderef","","",320,null],[11,"adjust_for_autoref","","",320,null],[11,"eq","rustc::ty::cast","",321,null],[11,"ne","","",321,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"fmt","","",322,null],[11,"clone","","",322,null],[11,"decode","","",323,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",323,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"from_ty","","",322,{"inputs":[{"name":"tys"}],"output":{"name":"option"}}],[11,"fmt","rustc::ty::error","",324,null],[11,"clone","","",324,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"fmt","","",326,null],[11,"hash","","",326,null],[11,"eq","","",326,null],[11,"decode","","",326,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",326,null],[11,"clone","","",326,null],[11,"fmt","","",325,null],[11,"note_and_explain_type_err","rustc::ty::context","",120,null],[11,"hash","rustc::ty::fast_reject","",327,null],[11,"eq","","",327,null],[11,"ne","","",327,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"tcx","rustc::ty::fold","",328,null],[11,"fold_ty","","",328,null],[11,"collect_regions","rustc::ty::context","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",120,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",120,null],[11,"new","rustc::ty::fold","",329,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",329,null],[11,"fold_binder","","",329,null],[11,"fold_region","","",329,null],[11,"replace_late_bound_regions","rustc::ty::context","",120,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",120,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",120,null],[11,"no_late_bound_regions","","",120,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",120,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",120,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",120,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",120,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",120,null],[11,"item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",120,null],[11,"node_path_str","","Returns a string identifying this local node-id.",120,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",120,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",120,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",120,null],[11,"push_item_path","","",120,null],[11,"fmt","rustc::ty::item_path","",330,null],[11,"default","rustc::ty::layout","",331,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",331,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",331,null],[11,"ptr_sized_integer","","",331,null],[11,"clone","","",332,null],[11,"fmt","","",333,null],[11,"hash","","",333,null],[11,"cmp","","",333,null],[11,"partial_cmp","","",333,null],[11,"lt","","",333,null],[11,"le","","",333,null],[11,"gt","","",333,null],[11,"ge","","",333,null],[11,"eq","","",333,null],[11,"ne","","",333,null],[11,"clone","","",333,null],[11,"from_bits","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",333,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",333,null],[11,"bits","","",333,null],[11,"abi_align","","",333,null],[11,"checked_add","","",333,null],[11,"checked_mul","","",333,null],[11,"fmt","","",334,null],[11,"hash","","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"clone","","",334,null],[11,"from_bits","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",334,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",334,null],[11,"pref","","",334,null],[11,"min","","",334,null],[11,"max","","",334,null],[11,"fmt","","",335,null],[11,"hash","","",335,null],[11,"cmp","","",335,null],[11,"partial_cmp","","",335,null],[11,"eq","","",335,null],[11,"clone","","",335,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",335,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",335,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",335,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",335,null],[11,"fmt","","",336,null],[11,"hash","","",336,null],[11,"eq","","",336,null],[11,"ne","","",336,null],[11,"clone","","",336,null],[11,"size","","",336,null],[11,"align","","",336,null],[11,"fmt","","",337,null],[11,"hash","","",337,null],[11,"eq","","",337,null],[11,"ne","","",337,null],[11,"new","","",337,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",337,null],[11,"min_size","","Get the size without trailing alignment padding.",337,null],[11,"stride","","Get the size with trailing aligment padding.",337,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",337,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"tys"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",337,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",338,null],[11,"eq","","",338,null],[11,"ne","","",338,null],[11,"fmt","","",338,null],[11,"fmt","","",339,null],[11,"clone","","",339,null],[11,"fmt","","",339,null],[11,"compute_uncached","","",338,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",338,null],[11,"size","","",338,null],[11,"align","","",338,null],[11,"fmt","","",340,null],[11,"clone","","",340,null],[11,"compute","","",340,{"inputs":[{"name":"tys"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",340,null],[11,"new","rustc::ty::_match","",341,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",341,null],[11,"tcx","","",341,null],[11,"a_is_expected","","",341,null],[11,"relate_with_variance","","",341,null],[11,"regions","","",341,null],[11,"tys","","",341,null],[11,"binders","","",341,null],[11,"to_dep_node","rustc::ty::maps","",342,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",343,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",344,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",345,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",346,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",347,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",348,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",349,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",350,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",351,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",352,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",353,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",354,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",355,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"fmt","rustc::ty::outlives","",356,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",117,null],[11,"fmt","rustc::ty::relate","",357,null],[11,"clone","","",357,null],[11,"relate","rustc::ty::sty","",358,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"result"}}],[11,"relate","","",162,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"result"}}],[11,"relate","rustc::hir","",93,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"result"}}],[11,"relate","syntax::abi","",359,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",360,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"result"}}],[11,"relate","rustc::ty","",361,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"result"}}],[11,"relate","collections::vec","",241,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"relate","rustc::ty::sty","",362,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"result"}}],[11,"relate","","",363,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"result"}}],[11,"relate","","",121,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"result"}}],[11,"relate","","",164,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"result"}}],[11,"relate","","",364,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"result"}}],[11,"relate","","",122,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"result"}}],[11,"relate","alloc::rc","",365,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"relate","alloc::boxed","",366,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"result"}}],[11,"hash","rustc::ty::subst","",367,null],[11,"eq","","",367,null],[11,"ne","","",367,null],[11,"clone","","",367,null],[11,"new","","",367,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",367,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",367,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"tys"}],"output":{"name":"substs"}}],[11,"empty","","",367,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",367,null],[11,"type_for_def","","",367,null],[11,"self_ty","","",367,null],[11,"with_self_ty","","",367,null],[11,"erase_regions","","",367,null],[11,"with_method","","",367,null],[11,"with_method_from","","",367,null],[11,"with_method_from_subst","","",367,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",367,null],[11,"encode","","",367,null],[11,"decode","","",367,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",368,null],[11,"decode","","",368,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",368,null],[11,"hash","","",368,null],[11,"clone","","",368,null],[11,"eq","","",368,null],[11,"cmp","","",368,null],[11,"partial_cmp","","",368,null],[11,"all","","",368,null],[11,"to_uint","","",368,null],[11,"from_uint","","",368,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",369,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",369,null],[11,"hash","","",369,null],[11,"clone","","",369,null],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"fmt","","",369,null],[11,"empty","","",369,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",369,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",369,null],[11,"extend","","Appends `values` to the vector associated with `space`.",369,null],[11,"pop","","",369,null],[11,"truncate","","",369,null],[11,"replace","","",369,null],[11,"get_self","","",369,null],[11,"len","","",369,null],[11,"is_empty_in","","",369,null],[11,"get_slice","","",369,null],[11,"get_mut_slice","","",369,null],[11,"opt_get","","",369,null],[11,"get","","",369,null],[11,"iter","","",369,null],[11,"into_iter","","",369,null],[11,"iter_enumerated","","",369,null],[11,"as_slice","","",369,null],[11,"into_vec","","",369,null],[11,"all_vecs","","",369,null],[11,"all","","",369,null],[11,"any","","",369,null],[11,"is_empty","","",369,null],[11,"map","","",369,null],[11,"map_enumerated","","",369,null],[11,"split","","",369,null],[11,"with_slice","","",369,null],[11,"clone","","",370,null],[11,"next","","",370,null],[11,"size_hint","","",370,null],[11,"into_iter","","",369,null],[11,"new","rustc::ty::trait_def","",371,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",371,null],[11,"object_safety","","",371,null],[11,"set_object_safety","","",371,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",371,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",371,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",371,null],[11,"ancestors","","",371,null],[11,"for_each_impl","","",371,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",371,null],[11,"hash","","",372,null],[11,"cmp","","",372,null],[11,"partial_cmp","","",372,null],[11,"lt","","",372,null],[11,"le","","",372,null],[11,"gt","","",372,null],[11,"ge","","",372,null],[11,"clone","","",372,null],[11,"eq","","",372,null],[11,"ne","","",372,null],[18,"NO_TRAIT_FLAGS","rustc_lint","",372,null],[18,"HAS_DEFAULT_IMPL","","",372,null],[18,"IS_OBJECT_SAFE","","",372,null],[18,"OBJECT_SAFETY_VALID","","",372,null],[18,"IMPLS_VALID","","",372,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",372,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",372,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",372,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",372,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",372,null],[11,"is_all","","Returns `true` if all flags are currently set.",372,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",372,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",372,null],[11,"insert","","Inserts the specified flags in-place.",372,null],[11,"remove","","Removes the specified flags in-place.",372,null],[11,"toggle","","Toggles the specified flags in-place.",372,null],[11,"bitor","","Returns the union of the two sets of flags.",372,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",372,null],[11,"bitand","","Returns the intersection between the two sets of flags.",372,null],[11,"sub","","Returns the set difference of the two sets of flags.",372,null],[11,"not","","Returns the complement of this set of flags.",372,null],[11,"new","rustc::ty::walk","",373,{"inputs":[{"name":"tys"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",373,null],[11,"next","","",373,null],[11,"fmt","rustc::ty::wf","",374,null],[11,"to_ty","syntax::attr","",375,null],[11,"initial_discriminant","","",375,null],[11,"assert_ty_matches","","",375,null],[11,"disr_incr","","",375,null],[11,"clone","rustc::ty::util","",376,null],[11,"fmt","","",377,null],[11,"eq","","",377,null],[11,"cmp","","",377,null],[11,"partial_cmp","","",377,null],[11,"clone","","",377,null],[11,"can_type_implement_copy","rustc::ty","",378,null],[11,"pat_contains_ref_binding","rustc::ty::context","",120,null],[11,"arm_contains_ref_binding","","",120,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",120,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",120,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",120,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",120,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",120,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",120,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",120,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",120,null],[11,"moves_by_default","rustc::ty","",320,null],[11,"is_sized","","",320,null],[11,"layout","","",320,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",320,null],[11,"clone","rustc::ty::contents","",379,null],[11,"when","","",379,null],[11,"intersects","","",379,null],[11,"owns_owned","","",379,null],[11,"interior_param","","",379,null],[11,"interior_unsafe","","",379,null],[11,"needs_drop","","",379,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",379,null],[11,"union","","",379,null],[11,"has_dtor","","",379,null],[11,"bitor","","",379,null],[11,"bitand","","",379,null],[11,"sub","","",379,null],[11,"fmt","","",379,null],[11,"type_contents","rustc::ty","",320,null],[11,"new","rustc::ty::context","",380,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",381,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",120,null],[11,"deref","","",120,null],[11,"crate_name","","",120,null],[11,"crate_disambiguator","","",120,null],[11,"type_parameter_def","","",120,null],[11,"node_types","","",120,null],[11,"node_type_insert","","",120,null],[11,"intern_trait_def","","",120,null],[11,"alloc_trait_def","","",120,null],[11,"intern_adt_def","","",120,null],[11,"intern_stability","","",120,null],[11,"intern_layout","","",120,null],[11,"store_free_region_map","","",120,null],[11,"free_region_map","","",120,null],[11,"lift","","",120,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",120,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",120,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"hashmap"},{"name":"map"},{"name":"hashmap"},{"name":"hashset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",120,null],[11,"mk_type_list","","",120,null],[11,"mk_substs","","",120,null],[11,"mk_bare_fn","","",120,null],[11,"mk_region","","",120,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",120,null],[11,"mk_ty","","",120,null],[11,"mk_mach_int","","",120,null],[11,"mk_mach_uint","","",120,null],[11,"mk_mach_float","","",120,null],[11,"mk_str","","",120,null],[11,"mk_static_str","","",120,null],[11,"mk_enum","","",120,null],[11,"mk_box","","",120,null],[11,"mk_ptr","","",120,null],[11,"mk_ref","","",120,null],[11,"mk_mut_ref","","",120,null],[11,"mk_imm_ref","","",120,null],[11,"mk_mut_ptr","","",120,null],[11,"mk_imm_ptr","","",120,null],[11,"mk_nil_ptr","","",120,null],[11,"mk_array","","",120,null],[11,"mk_slice","","",120,null],[11,"mk_tup","","",120,null],[11,"mk_nil","","",120,null],[11,"mk_bool","","",120,null],[11,"mk_fn_def","","",120,null],[11,"mk_fn_ptr","","",120,null],[11,"mk_trait","","",120,null],[11,"mk_projection","","",120,null],[11,"mk_struct","","",120,null],[11,"mk_closure","","",120,null],[11,"mk_closure_from_closure_substs","","",120,null],[11,"mk_var","","",120,null],[11,"mk_int_var","","",120,null],[11,"mk_float_var","","",120,null],[11,"mk_infer","","",120,null],[11,"mk_param","","",120,null],[11,"mk_self_type","","",120,null],[11,"mk_param_from_def","","",120,null],[11,"trait_items","","",120,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",120,null],[11,"lift_to_tcx","core::option","",382,null],[11,"lift_to_tcx","core::result","",118,null],[11,"lift_to_tcx","collections::vec","",241,null],[11,"lift_to_tcx","rustc::ty::sty","",364,null],[11,"lift_to_tcx","","",121,null],[11,"lift_to_tcx","rustc::ty","",383,null],[11,"lift_to_tcx","","",384,null],[11,"lift_to_tcx","","",385,null],[11,"lift_to_tcx","","",361,null],[11,"lift_to_tcx","","",386,null],[11,"lift_to_tcx","rustc::ty::sty","",122,null],[11,"lift_to_tcx","","",164,null],[11,"lift_to_tcx","rustc::ty","",387,null],[11,"lift_to_tcx","rustc::ty::adjustment","",318,null],[11,"lift_to_tcx","rustc::ty::sty","",163,null],[11,"lift_to_tcx","","",162,null],[11,"lift_to_tcx","","",388,null],[11,"lift_to_tcx","rustc::ty::error","",324,null],[11,"lift_to_tcx","rustc::infer::type_variable","",142,null],[11,"lift_to_tcx","rustc::ty::error","",325,null],[11,"super_fold_with","rustc::hir","",93,null],[11,"super_visit_with","","",93,null],[11,"super_fold_with","syntax::abi","",359,null],[11,"super_visit_with","","",359,null],[11,"super_fold_with","core::option","",382,null],[11,"super_visit_with","","",382,null],[11,"super_fold_with","alloc::rc","",365,null],[11,"super_visit_with","","",365,null],[11,"super_fold_with","alloc::boxed","",366,null],[11,"super_visit_with","","",366,null],[11,"super_fold_with","collections::vec","",241,null],[11,"super_visit_with","","",241,null],[11,"super_fold_with","rustc::ty::sty","",122,null],[11,"fold_with","","",122,null],[11,"super_visit_with","","",122,null],[11,"visit_with","","",122,null],[11,"super_fold_with","syntax::ptr","",389,null],[11,"super_visit_with","","",389,null],[11,"super_fold_with","rustc::ty::subst","",369,null],[11,"super_visit_with","","",369,null],[11,"super_fold_with","rustc::ty::sty","",390,null],[11,"super_visit_with","","",390,null],[11,"super_fold_with","","",388,null],[11,"fold_with","","",388,null],[11,"super_visit_with","","",388,null],[11,"super_fold_with","","",358,null],[11,"fold_with","","",358,null],[11,"super_visit_with","","",358,null],[11,"super_fold_with","","",163,null],[11,"fold_with","","",163,null],[11,"super_visit_with","","",163,null],[11,"super_fold_with","","",162,null],[11,"fold_with","","",162,null],[11,"super_visit_with","","",162,null],[11,"super_fold_with","","",121,null],[11,"fold_with","","",121,null],[11,"super_visit_with","","",121,null],[11,"super_fold_with","rustc::ty","",391,null],[11,"fold_with","","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","rustc::ty::sty","",364,null],[11,"fold_with","","",364,null],[11,"super_visit_with","","",364,null],[11,"visit_with","","",364,null],[11,"super_fold_with","","",164,null],[11,"super_visit_with","","",164,null],[11,"super_fold_with","rustc::ty","",387,null],[11,"super_visit_with","","",387,null],[11,"super_fold_with","rustc::ty::adjustment","",318,null],[11,"fold_with","","",318,null],[11,"super_visit_with","","",318,null],[11,"super_fold_with","rustc::ty::sty","",363,null],[11,"super_visit_with","","",363,null],[11,"super_fold_with","","",362,null],[11,"fold_with","","",362,null],[11,"super_visit_with","","",362,null],[11,"super_fold_with","rustc::ty","",392,null],[11,"super_visit_with","","",392,null],[11,"super_fold_with","","",393,null],[11,"super_visit_with","","",393,null],[11,"super_fold_with","","",394,null],[11,"super_visit_with","","",394,null],[11,"super_fold_with","","",395,null],[11,"super_visit_with","","",395,null],[11,"super_fold_with","","",396,null],[11,"super_visit_with","","",396,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","","",361,null],[11,"super_visit_with","","",361,null],[11,"super_fold_with","rustc::ty::sty","",360,null],[11,"super_visit_with","","",360,null],[11,"super_fold_with","rustc::ty","",397,null],[11,"super_visit_with","","",397,null],[11,"super_fold_with","","",384,null],[11,"super_visit_with","","",384,null],[11,"super_fold_with","","",383,null],[11,"super_visit_with","","",383,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",398,null],[11,"super_visit_with","","",398,null],[11,"super_fold_with","","",378,null],[11,"super_visit_with","","",378,null],[11,"super_fold_with","","",399,null],[11,"super_visit_with","","",399,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"hash","","",358,null],[11,"eq","","",358,null],[11,"ne","","",358,null],[11,"clone","","",358,null],[11,"decode","","",400,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",400,null],[11,"hash","","",400,null],[11,"cmp","","",400,null],[11,"partial_cmp","","",400,null],[11,"lt","","",400,null],[11,"le","","",400,null],[11,"gt","","",400,null],[11,"ge","","",400,null],[11,"eq","","",400,null],[11,"ne","","",400,null],[11,"clone","","",400,null],[11,"decode","","",401,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",401,null],[11,"hash","","",401,null],[11,"cmp","","",401,null],[11,"partial_cmp","","",401,null],[11,"lt","","",401,null],[11,"le","","",401,null],[11,"gt","","",401,null],[11,"ge","","",401,null],[11,"eq","","",401,null],[11,"ne","","",401,null],[11,"clone","","",401,null],[11,"fmt","","",402,null],[11,"hash","","",402,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"clone","","",402,null],[11,"fmt","","",164,null],[11,"hash","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"clone","","",164,null],[11,"encode","","",164,null],[11,"decode","","",164,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",390,null],[11,"eq","","",390,null],[11,"ne","","",390,null],[11,"clone","","",390,null],[11,"principal_def_id","","",390,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",390,null],[11,"projection_bounds_with_self_ty","","",390,null],[11,"hash","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"self_ty","","",122,null],[11,"def_id","","",122,null],[11,"substs","","",122,null],[11,"input_types","","",122,null],[11,"to_poly_trait_predicate","","",122,null],[11,"fmt","","",122,null],[11,"hash","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"clone","","",122,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",122,null],[11,"as_ref","","",122,null],[11,"map_bound_ref","","",122,null],[11,"map_bound","","",122,null],[11,"fmt","rustc::ty","",403,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"hash","","",360,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"clone","","",360,null],[11,"sort_key","","",360,null],[11,"fmt","","",404,null],[11,"hash","","",404,null],[11,"eq","","",404,null],[11,"ne","","",404,null],[11,"clone","","",404,null],[11,"hash","","",388,null],[11,"eq","","",388,null],[11,"ne","","",388,null],[11,"clone","","",388,null],[11,"decode","","",163,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",163,null],[11,"fmt","","",163,null],[11,"hash","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"diverges","","",163,null],[11,"unwrap","","",163,null],[11,"unwrap_or","","",163,null],[11,"diverges","","",122,null],[11,"hash","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"clone","","",162,null],[11,"inputs","","",122,null],[11,"input","","",122,null],[11,"output","","",122,null],[11,"variadic","","",122,null],[11,"hash","","",405,null],[11,"eq","","",405,null],[11,"ne","","",405,null],[11,"clone","","",405,null],[11,"new","","",405,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",405,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",405,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",405,null],[11,"is_self","","",405,null],[11,"fmt","","",406,null],[11,"decode","","",406,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",406,null],[11,"hash","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",406,null],[11,"decode","","",364,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",364,null],[11,"hash","","",364,null],[11,"eq","","",364,null],[11,"ne","","",364,null],[11,"clone","","",364,null],[11,"fmt","","",407,null],[11,"decode","","",407,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",407,null],[11,"hash","","",407,null],[11,"eq","","",407,null],[11,"ne","","",407,null],[11,"clone","","",407,null],[11,"hash","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"clone","","",151,null],[11,"hash","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"hash","","",149,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"clone","","",149,null],[11,"hash","","",147,null],[11,"decode","","",147,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"clone","","",147,null],[11,"decode","","",408,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",408,null],[11,"hash","","",408,null],[11,"eq","","",408,null],[11,"ne","","",408,null],[11,"clone","","",408,null],[11,"hash","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"clone","","",409,null],[11,"clone","","",362,null],[11,"hash","","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"new","","",362,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"existentialbounds"}}],[11,"fmt","","",363,null],[11,"hash","","",363,null],[11,"eq","","",363,null],[11,"ne","","",363,null],[11,"clone","","",363,null],[11,"empty","","",363,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",363,null],[11,"to_predicates","","",363,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",410,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",410,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",410,null],[11,"clear","","",410,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",410,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",410,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",410,null],[11,"union","","Returns the union of both `EnumSets`.",410,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",410,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",410,null],[11,"remove","","Removes an enum from the EnumSet",410,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",410,null],[11,"iter","","Returns an iterator over an `EnumSet`.",410,null],[11,"clone","collections::binary_heap","",411,null],[11,"clone_from","","",411,null],[11,"default","","",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",411,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",411,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",411,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",411,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",411,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",411,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",411,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",411,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",411,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",411,null],[11,"push","","Pushes an item onto the binary heap.",411,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",411,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",411,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",411,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",411,null],[11,"len","","Returns the length of the binary heap.",411,null],[11,"is_empty","","Checks if the binary heap is empty.",411,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",411,null],[11,"clear","","Drops all items from the binary heap.",411,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",411,null],[11,"clone","","",412,null],[11,"next","","",412,null],[11,"size_hint","","",412,null],[11,"next_back","","",412,null],[11,"clone","","",413,null],[11,"next","","",413,null],[11,"size_hint","","",413,null],[11,"next_back","","",413,null],[11,"next","","",414,null],[11,"size_hint","","",414,null],[11,"next_back","","",414,null],[11,"from","","",411,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",411,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",411,null],[11,"extend","","",411,null],[11,"extend","","",411,null],[11,"drop","collections::btree::map","",415,null],[11,"clone","","",415,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",415,null],[11,"get","","Returns a reference to the value corresponding to the key.",415,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",415,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",415,null],[11,"insert","","Inserts a key-value pair into the map.",415,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",415,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",415,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",415,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",415,null],[11,"next","","",416,null],[11,"size_hint","","",416,null],[11,"next_back","","",416,null],[11,"len","","",416,null],[11,"clone","","",416,null],[11,"next","","",417,null],[11,"size_hint","","",417,null],[11,"next_back","","",417,null],[11,"len","","",417,null],[11,"into_iter","","",415,null],[11,"drop","","",418,null],[11,"next","","",418,null],[11,"size_hint","","",418,null],[11,"next_back","","",418,null],[11,"len","","",418,null],[11,"next","","",419,null],[11,"size_hint","","",419,null],[11,"next_back","","",419,null],[11,"len","","",419,null],[11,"clone","","",419,null],[11,"next","","",420,null],[11,"size_hint","","",420,null],[11,"next_back","","",420,null],[11,"len","","",420,null],[11,"clone","","",420,null],[11,"next","","",421,null],[11,"next","","",422,null],[11,"size_hint","","",422,null],[11,"next_back","","",422,null],[11,"len","","",422,null],[11,"next_back","","",421,null],[11,"clone","","",421,null],[11,"next","","",423,null],[11,"next_back","","",423,null],[11,"from_iter","","",415,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",415,null],[11,"extend","","",415,null],[11,"hash","","",415,null],[11,"default","","",415,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",415,null],[11,"partial_cmp","","",415,null],[11,"cmp","","",415,null],[11,"fmt","","",415,null],[11,"index","","",415,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",415,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",415,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",415,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",415,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",415,null],[11,"len","","Returns the number of elements in the map.",415,null],[11,"is_empty","","Returns true if the map contains no elements.",415,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",424,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",424,null],[11,"key","","Returns a reference to this entry&#39;s key.",424,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",425,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",425,null],[11,"key","","Gets a reference to the key in the entry.",426,null],[11,"get","","Gets a reference to the value in the entry.",426,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",426,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",426,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",426,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",426,null],[11,"partial_cmp","collections::btree::set","",427,null],[11,"lt","","",427,null],[11,"le","","",427,null],[11,"gt","","",427,null],[11,"ge","","",427,null],[11,"cmp","","",427,null],[11,"eq","","",427,null],[11,"ne","","",427,null],[11,"hash","","",427,null],[11,"clone","","",427,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",427,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",427,null],[11,"difference","","Visits the values representing the difference, in ascending order.",427,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",427,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",427,null],[11,"union","","Visits the values representing the union, in ascending order.",427,null],[11,"len","","Returns the number of elements in the set.",427,null],[11,"is_empty","","Returns true if the set contains no elements.",427,null],[11,"clear","","Clears the set, removing all values.",427,null],[11,"contains","","Returns `true` if the set contains a value.",427,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",427,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",427,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",427,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",427,null],[11,"insert","","Adds a value to the set.",427,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",427,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",427,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",427,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",427,null],[11,"from_iter","","",427,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",427,null],[11,"extend","","",427,null],[11,"extend","","",427,null],[11,"default","","",427,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",427,null],[11,"clone","","",428,null],[11,"next","","",428,null],[11,"size_hint","","",428,null],[11,"next_back","","",428,null],[11,"len","","",428,null],[11,"next","","",429,null],[11,"size_hint","","",429,null],[11,"next_back","","",429,null],[11,"len","","",429,null],[11,"clone","","",430,null],[11,"next","","",430,null],[11,"next_back","","",430,null],[11,"clone","","",431,null],[11,"next","","",431,null],[11,"size_hint","","",431,null],[11,"clone","","",432,null],[11,"next","","",432,null],[11,"size_hint","","",432,null],[11,"clone","","",433,null],[11,"next","","",433,null],[11,"size_hint","","",433,null],[11,"clone","","",434,null],[11,"next","","",434,null],[11,"size_hint","","",434,null],[11,"borrow","collections::borrow","",435,null],[11,"clone","","",435,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",435,null],[11,"into_owned","","Extracts the owned data.",435,null],[11,"deref","","",435,null],[11,"cmp","","",435,null],[11,"eq","","",435,null],[11,"partial_cmp","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"hash","","",435,null],[11,"as_ref","","",435,null],[11,"hash","collections::enum_set","",410,null],[11,"cmp","","",410,null],[11,"partial_cmp","","",410,null],[11,"lt","","",410,null],[11,"le","","",410,null],[11,"gt","","",410,null],[11,"ge","","",410,null],[11,"eq","","",410,null],[11,"ne","","",410,null],[11,"clone","","",410,null],[11,"fmt","","",410,null],[11,"sub","","",410,null],[11,"bitor","","",410,null],[11,"bitand","","",410,null],[11,"bitxor","","",410,null],[11,"clone","","",436,null],[11,"next","","",436,null],[11,"size_hint","","",436,null],[11,"from_iter","","",410,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",410,null],[11,"extend","","",410,null],[11,"clone","collections::linked_list","",437,null],[11,"clone","","",438,null],[11,"default","","",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",439,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",439,null],[11,"iter","","Provides a forward iterator.",439,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",439,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",439,null],[11,"len","","Returns the length of the `LinkedList`.",439,null],[11,"clear","","Removes all elements from the `LinkedList`.",439,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",439,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",439,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",439,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",439,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",439,null],[11,"push_front","","Adds an element first in the list.",439,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",439,null],[11,"push_back","","Appends an element to the back of a list",439,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",439,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",439,null],[11,"front_place","","Returns a place for insertion at the front of the list.",439,null],[11,"back_place","","Returns a place for insertion at the back of the list.",439,null],[11,"drop","","",439,null],[11,"next","","",437,null],[11,"size_hint","","",437,null],[11,"next_back","","",437,null],[11,"next","","",440,null],[11,"size_hint","","",440,null],[11,"next_back","","",440,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",440,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",440,null],[11,"next","","",438,null],[11,"size_hint","","",438,null],[11,"next_back","","",438,null],[11,"from_iter","","",439,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",439,null],[11,"extend","","",439,null],[11,"extend","","",439,null],[11,"eq","","",439,null],[11,"ne","","",439,null],[11,"partial_cmp","","",439,null],[11,"cmp","","",439,null],[11,"clone","","",439,null],[11,"fmt","","",439,null],[11,"hash","","",439,null],[11,"make_place","","",441,null],[11,"pointer","","",441,null],[11,"finalize","","",441,null],[11,"make_place","","",442,null],[11,"pointer","","",442,null],[11,"finalize","","",442,null],[11,"start","core::ops","",443,null],[11,"end","","",444,null],[11,"start","","",445,null],[11,"end","","",445,null],[11,"borrow","collections::vec","",241,null],[11,"borrow_mut","","",241,null],[11,"clone","collections::str","",446,null],[11,"next","","",446,null],[11,"size_hint","","",446,null],[11,"borrow","collections::string","",447,null],[11,"fmt","core::str::pattern","",448,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"clone","","",448,null],[11,"fmt","","",449,null],[11,"clone","","",449,null],[11,"haystack","","",449,null],[11,"next","","",449,null],[11,"next_match","","",449,null],[11,"next_reject","","",449,null],[11,"next_back","","",449,null],[11,"next_match_back","","",449,null],[11,"next_reject_back","","",449,null],[11,"fmt","","",450,null],[11,"clone","","",450,null],[11,"haystack","","",450,null],[11,"next","","",450,null],[11,"next_match","","",450,null],[11,"next_reject","","",450,null],[11,"next_back","","",450,null],[11,"next_match_back","","",450,null],[11,"next_reject_back","","",450,null],[11,"clone","","",451,null],[11,"fmt","","",451,null],[11,"haystack","","",451,null],[11,"next","","",451,null],[11,"next_match","","",451,null],[11,"next_reject","","",451,null],[11,"next_back","","",451,null],[11,"next_match_back","","",451,null],[11,"next_reject_back","","",451,null],[11,"fmt","","",452,null],[11,"clone","","",452,null],[11,"haystack","","",452,null],[11,"next","","",452,null],[11,"next_match","","",452,null],[11,"next_back","","",452,null],[11,"next_match_back","","",452,null],[11,"cmp","collections::string","",447,null],[11,"partial_cmp","","",447,null],[11,"lt","","",447,null],[11,"le","","",447,null],[11,"gt","","",447,null],[11,"ge","","",447,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"new","","Creates a new empty `String`.",447,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",447,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",447,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",447,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",447,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",447,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",447,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",447,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",447,null],[11,"as_str","","Extracts a string slice containing the entire string.",447,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",447,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",447,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",447,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",447,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",447,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",447,null],[11,"push","","Appends the given `char` to the end of this `String`.",447,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",447,null],[11,"truncate","","Shortens this `String` to the specified length.",447,null],[11,"pop","","Removes the last character from the string buffer and returns it.",447,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",447,null],[11,"insert","","Inserts a character into this `String` at a byte position.",447,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",447,null],[11,"len","","Returns the length of this `String`, in bytes.",447,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",447,null],[11,"clear","","Truncates this `String`, removing all contents.",447,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",447,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",447,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",453,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",453,null],[11,"fmt","","",453,null],[11,"fmt","","",454,null],[11,"clone","","",447,null],[11,"clone_from","","",447,null],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",447,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"extend","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::string","",447,null],[11,"ne","","",447,null],[11,"default","","",447,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",447,null],[11,"fmt","","",447,null],[11,"hash","","",447,null],[11,"add","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"index_mut","","",447,null],[11,"deref","","",447,null],[11,"deref_mut","","",447,null],[11,"from_str","","",447,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",455,null],[11,"fmt","","",455,null],[11,"fmt","","",455,null],[11,"eq","","",455,null],[11,"as_ref","","",447,null],[11,"as_ref","","",447,null],[11,"from","","",447,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",435,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",435,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",447,null],[11,"write_str","","",447,null],[11,"write_char","","",447,null],[11,"drop","","",456,null],[11,"next","","",456,null],[11,"size_hint","","",456,null],[11,"next_back","","",456,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",241,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",241,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",241,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",241,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",241,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",241,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",241,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",241,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",241,null],[11,"as_slice","","Extracts a slice containing the entire vector.",241,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",241,null],[11,"set_len","","Sets the length of a vector.",241,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",241,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",241,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",241,null],[11,"retain","","Retains only the elements specified by the predicate.",241,null],[11,"push","","Appends an element to the back of a collection.",241,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",241,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",241,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",241,null],[11,"clear","","Clears the vector, removing all values.",241,null],[11,"len","","Returns the number of elements in the vector.",241,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",241,null],[11,"split_off","","Splits the collection into two at the given index.",241,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",241,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",241,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",241,null],[11,"clone","","",241,null],[11,"clone_from","","",241,null],[11,"hash","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"index_mut","","",241,null],[11,"deref","","",241,null],[11,"deref_mut","","",241,null],[11,"from_iter","","",241,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",241,null],[11,"extend","","",241,null],[11,"extend","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","collections::borrow","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","collections::vec","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"partial_cmp","","",241,null],[11,"cmp","","",241,null],[11,"drop","","",241,null],[11,"default","","",241,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"as_ref","","",241,null],[11,"as_mut","","",241,null],[11,"from","","",241,null],[11,"from","","",241,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",435,null],[11,"from","","",435,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",435,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",457,null],[11,"size_hint","","",457,null],[11,"count","","",457,null],[11,"next_back","","",457,null],[11,"clone","","",457,null],[11,"drop","","",457,null],[11,"next","","",458,null],[11,"size_hint","","",458,null],[11,"next_back","","",458,null],[11,"drop","","",458,null],[11,"clone","collections::vec_deque","",459,null],[11,"drop","","",459,null],[11,"default","","",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",459,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",459,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",459,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",459,null],[11,"swap","","Swaps elements at indices `i` and `j`.",459,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",459,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",459,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",459,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",459,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",459,null],[11,"iter","","Returns a front-to-back iterator.",459,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",459,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",459,null],[11,"len","","Returns the number of elements in the `VecDeque`.",459,null],[11,"is_empty","","Returns true if the buffer contains no elements",459,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",459,null],[11,"clear","","Clears the buffer, removing all values.",459,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",459,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",459,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",459,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",459,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",459,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",459,null],[11,"push_front","","Inserts an element first in the sequence.",459,null],[11,"push_back","","Appends an element to the back of a buffer",459,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",459,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",459,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",459,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",459,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",459,null],[11,"split_off","","Splits the collection into two at the given index.",459,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",459,null],[11,"retain","","Retains only the elements specified by the predicate.",459,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",459,null],[11,"clone","","",460,null],[11,"next","","",460,null],[11,"size_hint","","",460,null],[11,"next_back","","",460,null],[11,"next","","",461,null],[11,"size_hint","","",461,null],[11,"next_back","","",461,null],[11,"clone","","",462,null],[11,"next","","",462,null],[11,"size_hint","","",462,null],[11,"next_back","","",462,null],[11,"drop","","",463,null],[11,"next","","",463,null],[11,"size_hint","","",463,null],[11,"next_back","","",463,null],[11,"eq","","",459,null],[11,"partial_cmp","","",459,null],[11,"cmp","","",459,null],[11,"hash","","",459,null],[11,"index","","",459,null],[11,"index_mut","","",459,null],[11,"from_iter","","",459,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",459,null],[11,"extend","","",459,null],[11,"extend","","",459,null],[11,"fmt","","",459,null],[11,"from","","",459,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",241,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",464,null],[11,"ne","","",464,null],[11,"hash","","",464,null],[11,"fmt","","",464,null],[11,"clone","","",464,null],[11,"clone","alloc::boxed","",465,null],[11,"pointer","","",466,null],[11,"make_place","","",466,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",466,null],[11,"finalize","","",366,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",465,null],[11,"drop","","",466,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",366,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",366,null],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",366,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",366,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",366,null],[11,"clone","","",366,null],[11,"eq","","",366,null],[11,"ne","","",366,null],[11,"partial_cmp","","",366,null],[11,"lt","","",366,null],[11,"le","","",366,null],[11,"ge","","",366,null],[11,"gt","","",366,null],[11,"cmp","","",366,null],[11,"hash","","",366,null],[11,"from","","",366,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"fmt","","",366,null],[11,"deref","","",366,null],[11,"deref_mut","","",366,null],[11,"next","","",366,null],[11,"size_hint","","",366,null],[11,"next_back","","",366,null],[11,"call_once","","",366,null],[11,"call_once","","",366,null],[11,"clone","","",366,null],[11,"borrow","","",366,null],[11,"borrow_mut","","",366,null],[11,"as_ref","","",366,null],[11,"as_mut","","",366,null],[11,"deref","rustc::ty::sty","",363,null],[11,"deref_mut","","",363,null],[11,"fmt","","",467,null],[11,"hash","","",467,null],[11,"decode","","",467,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",467,null],[11,"encode","","",467,null],[11,"clone","","",467,null],[11,"to_usize","","",467,null],[11,"from_usize","","",467,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","rustc::ty::context","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",120,null],[11,"new","rustc::ty::sty","",406,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",406,null],[11,"is_bound","","",364,null],[11,"needs_infer","","",364,null],[11,"escapes_depth","","",364,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",364,null],[11,"as_opt_param_ty","rustc::ty","",320,null],[11,"is_nil","","",320,null],[11,"is_empty","","",320,null],[11,"is_primitive","","",320,null],[11,"is_ty_var","","",320,null],[11,"is_phantom_data","","",320,null],[11,"is_bool","","",320,null],[11,"is_param","","",320,null],[11,"is_self","","",320,null],[11,"is_slice","","",320,null],[11,"is_structural","","",320,null],[11,"is_simd","","",320,null],[11,"sequence_element_type","","",320,null],[11,"simd_type","","",320,null],[11,"simd_size","","",320,null],[11,"is_region_ptr","","",320,null],[11,"is_unsafe_ptr","","",320,null],[11,"is_unique","","",320,null],[11,"is_scalar","","",320,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",320,null],[11,"is_trait","","",320,null],[11,"is_integral","","",320,null],[11,"is_fresh","","",320,null],[11,"is_uint","","",320,null],[11,"is_char","","",320,null],[11,"is_fp","","",320,null],[11,"is_numeric","","",320,null],[11,"is_signed","","",320,null],[11,"is_machine","","",320,null],[11,"has_concrete_skeleton","","",320,null],[11,"builtin_deref","","",320,null],[11,"builtin_index","","",320,null],[11,"fn_sig","","",320,null],[11,"fn_abi","","Returns the ABI of the given function.",320,null],[11,"fn_args","","",320,null],[11,"fn_ret","","",320,null],[11,"is_fn","","",320,null],[11,"ty_to_def_id","","",320,null],[11,"ty_adt_def","","",320,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",320,null],[11,"clone","","",468,null],[11,"clone","","",469,null],[11,"is_present","","",469,null],[11,"has_drop_flag","","",469,null],[11,"fmt","","",470,null],[11,"eq","","",470,null],[11,"ne","","",470,null],[11,"clone","","",470,null],[11,"id","","",470,null],[11,"fmt","","",391,null],[11,"hash","","",391,null],[11,"eq","","",391,null],[11,"ne","","",391,null],[11,"clone","","",391,null],[11,"with_fresh_ty_vars","","",391,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",471,null],[11,"def","","",471,null],[11,"def_id","","",471,null],[11,"name","","",471,null],[11,"vis","","",471,null],[11,"container","","",471,null],[11,"as_opt_method","","",471,null],[11,"fmt","","",472,null],[11,"clone","","",472,null],[11,"def_id","","",472,null],[11,"eq","","",473,null],[11,"ne","","",473,null],[11,"fmt","","",473,null],[11,"clone","","",473,null],[11,"is_descendant_of","rustc::hir::map","",36,null],[11,"from_hir","rustc::ty","",473,{"inputs":[{"name":"visibility"},{"name":"u32"},{"name":"tyctxt"}],"output":{"name":"visibility"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",473,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",473,null],[11,"fmt","","",474,null],[11,"clone","","",474,null],[11,"new","","",474,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",474,null],[11,"eq","","",474,null],[11,"hash","","",474,null],[11,"fmt","","",475,null],[11,"clone","","",475,null],[11,"fmt","","",476,null],[11,"clone","","",476,null],[11,"encode","","",477,null],[11,"decode","","",477,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",477,null],[11,"ne","","",477,null],[11,"clone","","",477,null],[11,"encode","","",478,null],[11,"decode","","",478,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",478,null],[11,"clone","","",478,null],[11,"fmt","","",479,null],[11,"clone","","",479,null],[11,"fmt","","",480,null],[11,"hash","","",480,null],[11,"eq","","",480,null],[11,"ne","","",480,null],[11,"clone","","",480,null],[11,"expr","","",480,{"inputs":[{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",480,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",481,null],[11,"eq","","",481,null],[11,"ne","","",481,null],[11,"clone","","",481,null],[11,"fmt","","",482,null],[11,"clone","","",482,null],[11,"hash","","",403,null],[11,"cmp","","",403,null],[11,"partial_cmp","","",403,null],[11,"lt","","",403,null],[11,"le","","",403,null],[11,"gt","","",403,null],[11,"ge","","",403,null],[11,"clone","","",403,null],[11,"eq","","",403,null],[11,"ne","","",403,null],[18,"HAS_PARAMS","rustc_lint","",403,null],[18,"HAS_SELF","","",403,null],[18,"HAS_TY_INFER","","",403,null],[18,"HAS_RE_INFER","","",403,null],[18,"HAS_RE_EARLY_BOUND","","",403,null],[18,"HAS_FREE_REGIONS","","",403,null],[18,"HAS_TY_ERR","","",403,null],[18,"HAS_PROJECTION","","",403,null],[18,"HAS_TY_CLOSURE","","",403,null],[18,"HAS_LOCAL_NAMES","","",403,null],[18,"KEEP_IN_LOCAL_TCX","","",403,null],[18,"NEEDS_SUBST","","",403,null],[18,"NOMINAL_FLAGS","","",403,null],[18,"SIZEDNESS_CACHED","","",403,null],[18,"IS_SIZED","","",403,null],[18,"MOVENESS_CACHED","","",403,null],[18,"MOVES_BY_DEFAULT","","",403,null],[11,"empty","rustc::ty","Returns an empty set of flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",403,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",403,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",403,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",403,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",403,null],[11,"is_all","","Returns `true` if all flags are currently set.",403,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",403,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",403,null],[11,"insert","","Inserts the specified flags in-place.",403,null],[11,"remove","","Removes the specified flags in-place.",403,null],[11,"toggle","","Toggles the specified flags in-place.",403,null],[11,"bitor","","Returns the union of the two sets of flags.",403,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",403,null],[11,"bitand","","Returns the intersection between the two sets of flags.",403,null],[11,"sub","","Returns the set difference of the two sets of flags.",403,null],[11,"not","","Returns the complement of this set of flags.",403,null],[11,"eq","","",320,null],[11,"hash","","",320,null],[11,"hash","","",483,null],[11,"eq","","",483,null],[11,"ne","","",483,null],[11,"clone","","",483,null],[11,"decode","","",484,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",484,null],[11,"fmt","","",484,null],[11,"hash","","",484,null],[11,"eq","","",484,null],[11,"clone","","",484,null],[11,"fmt","","",485,null],[11,"clone","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[11,"clone","","",486,null],[11,"eq","","",486,null],[11,"ne","","",486,null],[11,"clone","","",398,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"clone","","",393,null],[11,"clone","","",392,null],[11,"clone","","",394,null],[11,"to_early_bound_region","","",394,null],[11,"to_bound_region","","",394,null],[11,"fmt","","",395,null],[11,"clone","","",395,null],[11,"empty","","",395,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",395,null],[11,"has_type_params","","",395,null],[11,"has_region_params","","",395,null],[11,"clone","","",396,null],[11,"empty","","",396,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",396,null],[11,"instantiate_supertrait","","",396,null],[11,"hash","","",386,null],[11,"eq","","",386,null],[11,"ne","","",386,null],[11,"clone","","",386,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",386,null],[11,"hash","","",383,null],[11,"eq","","",383,null],[11,"ne","","",383,null],[11,"clone","","",383,null],[11,"def_id","","",383,null],[11,"input_types","","",383,null],[11,"self_ty","","",383,null],[11,"def_id","rustc::ty::sty","",122,null],[11,"dep_node","","",122,null],[11,"fmt","rustc::ty","",384,null],[11,"hash","","",384,null],[11,"eq","","",384,null],[11,"ne","","",384,null],[11,"clone","","",384,null],[11,"fmt","","",385,null],[11,"hash","","",385,null],[11,"eq","","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"hash","","",361,null],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"clone","","",361,null],[11,"item_name","rustc::ty::sty","",122,null],[11,"sort_key","","",122,null],[11,"to_poly_trait_ref","","",121,null],[11,"to_poly_trait_ref","","",122,null],[11,"to_poly_trait_ref","","",122,null],[11,"to_predicate","","",121,null],[11,"to_predicate","","",122,null],[11,"to_predicate","","",122,null],[11,"to_predicate","","",122,null],[11,"to_predicate","","",122,null],[11,"to_predicate","","",122,null],[11,"walk_tys","rustc::ty","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",386,null],[11,"to_opt_poly_trait_ref","","",386,null],[11,"clone","","",397,null],[11,"empty","","",397,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",397,null],[11,"new","rustc::ty::sty","",121,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",121,null],[11,"input_types","","",121,null],[11,"clone","rustc::ty","",378,null],[11,"with_caller_bounds","","",378,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",378,{"inputs":[{"name":"tyctxt"},{"name":"u32"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",399,null],[11,"clone","","",399,null],[11,"hash","","",487,null],[11,"cmp","","",487,null],[11,"partial_cmp","","",487,null],[11,"lt","","",487,null],[11,"le","","",487,null],[11,"gt","","",487,null],[11,"ge","","",487,null],[11,"clone","","",487,null],[11,"eq","","",487,null],[11,"ne","","",487,null],[18,"NO_ADT_FLAGS","rustc_lint","",487,null],[18,"IS_ENUM","","",487,null],[18,"IS_DTORCK","","",487,null],[18,"IS_DTORCK_VALID","","",487,null],[18,"IS_PHANTOM_DATA","","",487,null],[18,"IS_SIMD","","",487,null],[18,"IS_FUNDAMENTAL","","",487,null],[18,"IS_NO_DROP_FLAG","","",487,null],[11,"empty","rustc::ty","Returns an empty set of flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",487,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",487,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",487,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",487,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",487,null],[11,"is_all","","Returns `true` if all flags are currently set.",487,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",487,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",487,null],[11,"insert","","Inserts the specified flags in-place.",487,null],[11,"remove","","Removes the specified flags in-place.",487,null],[11,"toggle","","Toggles the specified flags in-place.",487,null],[11,"bitor","","Returns the union of the two sets of flags.",487,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",487,null],[11,"bitand","","Returns the intersection between the two sets of flags.",487,null],[11,"sub","","Returns the set difference of the two sets of flags.",487,null],[11,"not","","Returns the complement of this set of flags.",487,null],[11,"eq","","",488,null],[11,"hash","","",488,null],[11,"eq","","",489,null],[11,"fmt","","",489,null],[11,"clone","","",489,null],[11,"decode","","",490,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",490,null],[11,"fmt","","",490,null],[11,"hash","","",490,null],[11,"eq","","",490,null],[11,"clone","","",490,null],[11,"from_variant_data","","",490,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantkind"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",488,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",488,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",488,null],[11,"is_simd","","",488,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",488,null],[11,"has_dtor","","Returns whether this type has a destructor.",488,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",488,null],[11,"type_scheme","","",488,null],[11,"predicates","","",488,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",488,null],[11,"is_empty","","",488,null],[11,"is_univariant","","",488,null],[11,"is_payloadfree","","",488,null],[11,"variant_with_id","","",488,null],[11,"variant_index_with_id","","",488,null],[11,"variant_of_def","","",488,null],[11,"destructor","","",488,null],[11,"set_destructor","","",488,null],[11,"dtor_kind","","",488,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",488,null],[11,"kind","","",491,null],[11,"is_tuple_struct","","",491,null],[11,"find_field_named","","",491,null],[11,"index_of_field_named","","",491,null],[11,"field_named","","",491,null],[11,"new","","",492,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"fielddefdata"}}],[11,"ty","","",492,null],[11,"unsubst_ty","","",492,null],[11,"fulfill_ty","","",492,null],[11,"clone","","",387,null],[11,"decode","","",493,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",493,null],[11,"fmt","","",493,null],[11,"hash","","",493,null],[11,"eq","","",493,null],[11,"cmp","","",493,null],[11,"partial_cmp","","",493,null],[11,"clone","","",493,null],[11,"trait_did","","",493,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",493,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",320,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",320,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",320,null],[11,"is_noop","","",387,null],[11,"eq","","",494,null],[11,"fmt","","",494,null],[11,"clone","","",494,null],[11,"from_mutbl","","",494,{"inputs":[{"name":"mutability"}],"output":{"name":"lvaluepreference"}}],[11,"from_mutbl","","",484,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",484,null],[11,"to_user_str","","",484,null],[11,"node_id_to_type","rustc::ty::context","",120,null],[11,"node_id_to_type_opt","","",120,null],[11,"node_id_item_substs","","",120,null],[11,"pat_ty","","",120,null],[11,"pat_ty_opt","","",120,null],[11,"expr_ty","","",120,null],[11,"expr_ty_opt","","",120,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",120,null],[11,"expr_ty_adjusted_opt","","",120,null],[11,"expr_span","","",120,null],[11,"local_var_name_str","","",120,null],[11,"resolve_expr","","",120,null],[11,"expr_is_lval","","",120,null],[11,"provided_trait_methods","","",120,null],[11,"associated_consts","","",120,null],[11,"trait_impl_polarity","","",120,null],[11,"custom_coerce_unsized_kind","","",120,null],[11,"impl_or_trait_item","","",120,null],[11,"trait_item_def_ids","","",120,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",120,null],[11,"is_impl","","Returns whether this DefId refers to an impl",120,null],[11,"trait_ref_to_def_id","","",120,null],[11,"def_key","","",120,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",120,null],[11,"item_name","","",120,null],[11,"register_item_type","","",120,null],[11,"lookup_item_type","","",120,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",120,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",120,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",120,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",120,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",120,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",120,null],[11,"get_attrs","","Get the attributes of a definition.",120,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",120,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",120,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",120,null],[11,"item_variances","","",120,null],[11,"trait_has_default_impl","","",120,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",120,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",120,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",120,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",120,null],[11,"closure_kind","","",120,null],[11,"closure_type","","",120,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",120,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",120,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",120,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",120,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",120,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",120,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",120,null],[11,"is_method_call","","",120,null],[11,"is_overloaded_autoderef","","",120,null],[11,"upvar_capture","","",120,null],[11,"visit_all_items_in_krate","","",120,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",120,null],[11,"fmt","rustc::ty","",495,null],[11,"eq","","",495,null],[11,"ne","","",495,null],[11,"clone","","",495,null],[11,"with_freevars","rustc::ty::context","",120,null],[11,"fmt","rustc::util::common","",496,null],[11,"clone","","",496,null],[11,"drop","","",497,null],[11,"memoize","core::cell","",7,null],[11,"eq","rustc::util::ppaux","",498,null],[11,"clone","","",498,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",392,null],[11,"fmt","","",394,null],[11,"fmt","","",320,null],[11,"fmt","rustc::ty::sty","",358,null],[11,"fmt","rustc::ty::subst","",367,null],[11,"fmt","rustc::ty","",387,null],[11,"fmt","rustc::ty::sty","",121,null],[11,"fmt","rustc::ty::trait_def","",371,null],[11,"fmt","rustc::ty","",488,null],[11,"fmt","rustc::ty::adjustment","",316,null],[11,"fmt","","",317,null],[11,"fmt","rustc::ty::sty","",390,null],[11,"fmt","rustc::ty","",386,null],[11,"fmt","rustc::ty::sty","",401,null],[11,"fmt","","",401,null],[11,"fmt","","",364,null],[11,"fmt","","",388,null],[11,"fmt","rustc::ty","",398,null],[11,"fmt","","",378,null],[11,"fmt","","",393,null],[11,"fmt","rustc::ty::sty","",364,null],[11,"fmt","","",400,null],[11,"fmt","rustc::ty","",478,null],[11,"fmt","","",477,null],[11,"fmt","","",396,null],[11,"fmt","","",397,null],[11,"fmt","","",471,null],[11,"fmt","rustc::ty::sty","",162,null],[11,"fmt","","",362,null],[11,"fmt","","",363,null],[11,"fmt","","",151,null],[11,"fmt","","",145,null],[11,"fmt","","",149,null],[11,"fmt","","",147,null],[11,"fmt","","",162,null],[11,"fmt","","",409,null],[11,"fmt","rustc::ty","",148,null],[11,"fmt","rustc::ty::sty","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",122,null],[11,"fmt","","",121,null],[11,"fmt","","",402,null],[11,"fmt","rustc::ty","",320,null],[11,"fmt","","",483,null],[11,"fmt","","",486,null],[11,"fmt","rustc::ty::sty","",409,null],[11,"fmt","rustc::ty","",495,null],[11,"fmt","rustc::ty::sty","",405,null],[11,"fmt","","",405,null],[11,"fmt","rustc::ty","",385,null],[11,"fmt","","",384,null],[11,"fmt","","",383,null],[11,"fmt","","",383,null],[11,"fmt","","",361,null],[11,"fmt","","",361,null],[11,"fmt","rustc::ty::sty","",360,null],[11,"fmt","rustc::ty","",493,null],[11,"fmt","","",386,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",499,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",499,null],[11,"result","","",499,null],[11,"reset","","",499,null],[11,"output_bits","","",499,null],[3,"Lint","rustc_lint::lint","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",0,null],[12,"default_level","","Default level for the lint.",0,null],[12,"desc","","Description of the lint or the issue it detects.",0,null],[6,"LintArray","","",null,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",500,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",501,null],[11,"check_crate","","",501,null],[11,"check_crate_post","","",501,null],[11,"check_mod","","",501,null],[11,"check_mod_post","","",501,null],[11,"check_foreign_item","","",501,null],[11,"check_foreign_item_post","","",501,null],[11,"check_item","","",501,null],[11,"check_item_post","","",501,null],[11,"check_local","","",501,null],[11,"check_block","","",501,null],[11,"check_block_post","","",501,null],[11,"check_stmt","","",501,null],[11,"check_arm","","",501,null],[11,"check_pat","","",501,null],[11,"check_decl","","",501,null],[11,"check_expr","","",501,null],[11,"check_expr_post","","",501,null],[11,"check_ty","","",501,null],[11,"check_generics","","",501,null],[11,"check_fn","","",501,null],[11,"check_fn_post","","",501,null],[11,"check_trait_item","","",501,null],[11,"check_trait_item_post","","",501,null],[11,"check_impl_item","","",501,null],[11,"check_impl_item_post","","",501,null],[11,"check_struct_def","","",501,null],[11,"check_struct_def_post","","",501,null],[11,"check_struct_field","","",501,null],[11,"check_variant","","",501,null],[11,"check_variant_post","","",501,null],[11,"check_lifetime","","",501,null],[11,"check_lifetime_def","","",501,null],[11,"check_explicit_self","","",501,null],[11,"check_path","","",501,null],[11,"check_path_list_item","","",501,null],[11,"check_attribute","","",501,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",501,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",501,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",502,null],[11,"check_crate","","",502,null],[11,"check_crate_post","","",502,null],[11,"check_mod","","",502,null],[11,"check_mod_post","","",502,null],[11,"check_foreign_item","","",502,null],[11,"check_foreign_item_post","","",502,null],[11,"check_item","","",502,null],[11,"check_item_post","","",502,null],[11,"check_local","","",502,null],[11,"check_block","","",502,null],[11,"check_block_post","","",502,null],[11,"check_stmt","","",502,null],[11,"check_arm","","",502,null],[11,"check_pat","","",502,null],[11,"check_decl","","",502,null],[11,"check_expr","","",502,null],[11,"check_expr_post","","",502,null],[11,"check_ty","","",502,null],[11,"check_generics","","",502,null],[11,"check_fn","","",502,null],[11,"check_fn_post","","",502,null],[11,"check_trait_item","","",502,null],[11,"check_trait_item_post","","",502,null],[11,"check_impl_item","","",502,null],[11,"check_impl_item_post","","",502,null],[11,"check_struct_def","","",502,null],[11,"check_struct_def_post","","",502,null],[11,"check_struct_field","","",502,null],[11,"check_variant","","",502,null],[11,"check_variant_post","","",502,null],[11,"check_lifetime","","",502,null],[11,"check_lifetime_def","","",502,null],[11,"check_explicit_self","","",502,null],[11,"check_path","","",502,null],[11,"check_path_list_item","","",502,null],[11,"check_attribute","","",502,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",502,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",502,null],[6,"EarlyLintPassObject","","",null,null],[6,"LateLintPassObject","","",null,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",167,null],[13,"Warn","","",167,null],[13,"Deny","","",167,null],[13,"Forbid","","",167,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",168,null],[13,"Node","","Lint level was set by an attribute.",168,null],[13,"CommandLine","","Lint level was set by a command-line flag.",168,null],[6,"LevelSource","","",null,null],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[7,"CONST_ERR","rustc_lint::lint::builtin","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"VARIANT_SIZE_DIFFERENCES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"UNSIZED_IN_TUPLE","","",null,null],[7,"OBJECT_UNSAFE_FRAGMENT","","",null,null],[3,"HardwiredLints","","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler.",null,null],[5,"raw_emit_lint","rustc_lint::lint","Emit a lint as a warning or an error (or not at all)\naccording to `level`.",null,null],[3,"GatherNodeLevels","","",null,null],[5,"check_crate","","Perform lint checking on a crate.",null,null],[8,"LintContext","","",null,null],[10,"sess","","",503,null],[10,"lints","","",503,null],[10,"mut_lints","","",503,null],[10,"level_stack","","",503,null],[10,"enter_attrs","","",503,null],[10,"exit_attrs","","",503,null],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",503,null],[11,"level_src","","",503,null],[11,"lookup_and_emit","","",503,null],[11,"lookup","","",503,null],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",503,null],[11,"struct_span_lint","","",503,null],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",503,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",503,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",503,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the\ncurrent lint context, call the provided function, then reset the\nlints in effect to their previous state.",503,null],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess.",null,null],[3,"LintStore","","Information about the registered lints.",null,null],[5,"raw_struct_lint","","",null,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to\nHIR.",null,null],[12,"sess","","Type context we&#39;re checking in.",172,null],[12,"krate","","The crate being checked.",172,null],[3,"LateContext","","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we&#39;re checking in.",171,null],[12,"krate","","The crate being checked.",171,null],[12,"access_levels","","Items accessible from the crate being checked.",171,null],[5,"check_ast_crate","","",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call\nto `register_future_incompatible` in `librustc_lint/lib.rs` for\nguidelines.",null,null],[12,"id","","",504,null],[12,"reference","","",504,null],[0,"middle","rustc_lint","",null,null],[0,"astconv_util","rustc_lint::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used.",null,null],[8,"Delegate","rustc_lint::middle::expr_use_visitor","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor.",null,null],[10,"consume","","",505,null],[10,"matched_pat","","",505,null],[10,"consume_pat","","",505,null],[10,"borrow","","",505,null],[10,"decl_without_init","","",505,null],[10,"mutate","","",505,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",174,null],[13,"AddrOf","","",174,null],[13,"AutoRef","","",174,null],[13,"AutoUnsafe","","",174,null],[13,"RefBinding","","",174,null],[13,"OverloadedOperator","","",174,null],[13,"ClosureInvocation","","",174,null],[13,"ForLoop","","",174,null],[13,"MatchDiscriminant","","",174,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",175,null],[13,"Move","","",175,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",176,null],[13,"PatBindingMove","","",176,null],[13,"CaptureMove","","",176,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",177,null],[13,"BorrowingMatch","","",177,null],[13,"CopyingMatch","","",177,null],[13,"MovingMatch","","",177,null],[4,"MutateMode","","",null,null],[13,"Init","","",178,null],[13,"JustWrite","","",178,null],[13,"WriteAndRead","","",178,null],[3,"ExprUseVisitor","","",null,null],[0,"const_val","rustc_lint::middle","",null,null],[4,"ConstVal","rustc_lint::middle::const_val","",null,null],[13,"Float","","",180,null],[13,"Integral","","",180,null],[13,"Str","","",180,null],[13,"ByteStr","","",180,null],[13,"Bool","","",180,null],[13,"Struct","","",180,null],[13,"Tuple","","",180,null],[13,"Function","","",180,null],[13,"Array","","",180,null],[13,"Repeat","","",180,null],[13,"Char","","",180,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never\nhandle this case. Its sole purpose is to allow more errors to be reported instead of\ncausing a fatal error.",180,null],[0,"const_qualif","rustc_lint::middle","",null,null],[3,"ConstQualif","rustc_lint::middle::const_qualif","",null,null],[0,"cstore","rustc_lint::middle","",null,null],[3,"LinkMeta","rustc_lint::middle::cstore","",null,null],[12,"crate_name","","",182,null],[12,"crate_hash","","",182,null],[3,"CrateSource","","",null,null],[12,"dylib","","",183,null],[12,"rlib","","",183,null],[12,"cnum","","",183,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",184,null],[13,"RequireStatic","","",184,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",185,null],[13,"NativeFramework","","",185,null],[13,"NativeUnknown","","",185,null],[4,"DefLike","","",null,null],[13,"DlDef","","",186,null],[13,"DlImpl","","",186,null],[13,"DlField","","",186,null],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans.",null,null],[13,"Item","","",187,null],[13,"TraitItem","","",187,null],[13,"ImplItem","","",187,null],[13,"Foreign","","",187,null],[4,"InlinedItemRef","","A borrowed version of `hir::InlinedItem`.",null,null],[13,"Item","","",188,null],[13,"TraitItem","","",188,null],[13,"ImplItem","","",188,null],[13,"Foreign","","",188,null],[17,"LOCAL_CRATE","","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId.",null,null],[3,"ChildItem","","",null,null],[12,"def","","",189,null],[12,"name","","",189,null],[12,"vis","","",189,null],[4,"FoundAst","","",null,null],[13,"Found","","",506,null],[13,"FoundParent","","",506,null],[13,"NotFound","","",506,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused\nthis crate to be loaded; note that there could be multiple\nsuch ids",190,null],[12,"span","","span of the extern crate that caused this to be loaded",190,null],[12,"direct","","If true, then this crate is the crate named by the extern\ncrate referenced above. If false, then this crate is a dep\nof the crate.",190,null],[12,"path_len","","Number of links to reach the extern crate `def_id`\ndeclaration; used to select the extern crate with the shortest\npath",190,null],[8,"CrateStore","","A store of Rust crates, through with their metadata\ncan be accessed.",null,null],[10,"stability","","",507,null],[10,"deprecation","","",507,null],[10,"visibility","","",507,null],[10,"closure_kind","","",507,null],[10,"closure_ty","","",507,null],[10,"item_variances","","",507,null],[10,"repr_attrs","","",507,null],[10,"item_type","","",507,null],[10,"visible_parent_map","","",507,null],[10,"item_name","","",507,null],[10,"item_predicates","","",507,null],[10,"item_super_predicates","","",507,null],[10,"item_attrs","","",507,null],[10,"item_symbol","","",507,null],[10,"trait_def","","",507,null],[10,"adt_def","","",507,null],[10,"method_arg_names","","",507,null],[10,"inherent_implementations_for_type","","",507,null],[10,"implementations_of_trait","","",507,null],[10,"provided_trait_methods","","",507,null],[10,"trait_item_def_ids","","",507,null],[10,"impl_items","","",507,null],[10,"impl_trait_ref","","",507,null],[10,"impl_polarity","","",507,null],[10,"custom_coerce_unsized_kind","","",507,null],[10,"associated_consts","","",507,null],[10,"impl_parent","","",507,null],[10,"trait_of_item","","",507,null],[10,"impl_or_trait_item","","",507,null],[10,"is_const_fn","","",507,null],[10,"is_defaulted_trait","","",507,null],[10,"is_impl","","",507,null],[10,"is_default_impl","","",507,null],[10,"is_extern_item","","",507,null],[10,"is_static_method","","",507,null],[10,"is_statically_included_foreign_item","","",507,null],[10,"is_typedef","","",507,null],[10,"dylib_dependency_formats","","",507,null],[10,"lang_items","","",507,null],[10,"missing_lang_items","","",507,null],[10,"is_staged_api","","",507,null],[10,"is_explicitly_linked","","",507,null],[10,"is_allocator","","",507,null],[10,"is_panic_runtime","","",507,null],[10,"panic_strategy","","",507,null],[10,"extern_crate","","",507,null],[10,"crate_attrs","","",507,null],[10,"crate_name","","The name of the crate as it is referred to in source code of the current\ncrate.",507,null],[10,"original_crate_name","","The name of the crate as it is stored in the crate&#39;s metadata.",507,null],[10,"crate_hash","","",507,null],[10,"crate_disambiguator","","",507,null],[10,"crate_struct_field_attrs","","",507,null],[10,"plugin_registrar_fn","","",507,null],[10,"native_libraries","","",507,null],[10,"reachable_ids","","",507,null],[10,"def_key","","",507,null],[10,"relative_def_path","","",507,null],[10,"variant_kind","","",507,null],[10,"struct_ctor_def_id","","",507,null],[10,"tuple_struct_definition_if_ctor","","",507,null],[10,"struct_field_names","","",507,null],[10,"item_children","","",507,null],[10,"crate_top_level_items","","",507,null],[10,"maybe_get_item_ast","","",507,null],[10,"maybe_get_item_mir","","",507,null],[10,"is_item_mir_available","","",507,null],[10,"crates","","",507,null],[10,"used_libraries","","",507,null],[10,"used_link_args","","",507,null],[10,"metadata_filename","","",507,null],[10,"metadata_section_name","","",507,null],[10,"encode_type","","",507,null],[10,"used_crates","","",507,null],[10,"used_crate_source","","",507,null],[10,"extern_mod_stmt_cnum","","",507,null],[10,"encode_metadata","","",507,null],[10,"metadata_encoding_version","","",507,null],[5,"validate_crate_name","","",null,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates,\nfor test purposes.",null,null],[0,"tls","","Metadata encoding and decoding can make use of thread-local encoding and\ndecoding contexts. These allow implementers of serialize::Encodable and\nDecodable to access information and datastructures that would otherwise not\nbe available to them. For example, we can automatically translate def-id and\nspan information during decoding because the decoding context knows which\ncrate the data is decoded from. Or it allows to make ty::Ty decodable\nbecause the context has access to the TyCtxt that is needed for creating\nty::Ty instances.",null,null],[8,"EncodingContext","rustc_lint::middle::cstore::tls","",null,null],[10,"tcx","","",508,null],[10,"encode_ty","","",508,null],[10,"encode_substs","","",508,null],[5,"enter_encoding_context","","Execute f after pushing the given EncodingContext onto the TLS stack.",null,{"inputs":[{"name":"encodingcontext"},{"name":"encoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder. This function will panic if the encoder passed in and the\ncontext encoder are not the same.",null,{"inputs":[{"name":"e"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[8,"DecodingContext","","",null,null],[10,"tcx","","",509,null],[10,"decode_ty","","",509,null],[10,"decode_substs","","",509,null],[10,"translate_def_id","","",509,null],[5,"enter_decoding_context","","Execute f after pushing the given DecodingContext onto the TLS stack.",null,{"inputs":[{"name":"decodingcontext"},{"name":"decoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder. This function will panic if the decoder passed in and the\ncontext decoder are not the same.",null,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"dataflow","rustc_lint::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression.",null,null],[4,"EntryOrExit","rustc_lint::middle::dataflow","",null,null],[13,"Entry","","",192,null],[13,"Exit","","",192,null],[3,"DataFlowContext","","",null,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&amp;`",510,null],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",511,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill\ntakes effect only when control flows directly through the node in\nquestion, or if the kill&#39;s effect is associated with any\ncontrol-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control\nflow goes over the node. A kill associated with the end of the\nscope of a variable declaration `let x;` is an example of a\n`ScopeEnd` kill.",194,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control\nflow goes through the node to completion. A kill associated\nwith an assignment statement `x = expr;` is an example of an\n`Execution` kill.",194,null],[0,"dead","rustc_lint::middle","",null,null],[5,"check_crate","rustc_lint::middle::dead","",null,null],[0,"dependency_format","rustc_lint::middle","Resolution of mixing rlibs and dylibs",null,null],[6,"DependencyList","rustc_lint::middle::dependency_format","",null,null],[6,"Dependencies","","",null,null],[4,"Linkage","","",null,null],[13,"NotLinked","","",195,null],[13,"IncludedFromDylib","","",195,null],[13,"Static","","",195,null],[13,"Dynamic","","",195,null],[5,"calculate","","",null,null],[0,"effect","rustc_lint::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`.",null,null],[5,"check_crate","rustc_lint::middle::effect","",null,null],[0,"entry","rustc_lint::middle","",null,null],[5,"find_entry_point","rustc_lint::middle::entry","",null,null],[0,"free_region","rustc_lint::middle","This file handles the relationships between free regions --\nmeaning lifetime parameters. Ordinarily, free regions are\nunrelated to one another, but they can be related via implied or\nexplicit bounds.  In that case, we track the bounds using the\n`TransitiveRelation` type and use that to decide when one free\nregion outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc_lint::middle::free_region","",null,null],[0,"intrinsicck","rustc_lint::middle","",null,null],[5,"check_crate","rustc_lint::middle::intrinsicck","",null,null],[0,"lang_items","rustc_lint::middle","",null,null],[4,"LangItem","rustc_lint::middle::lang_items","",null,null],[13,"CharImplItem","","",197,null],[13,"StrImplItem","","",197,null],[13,"SliceImplItem","","",197,null],[13,"ConstPtrImplItem","","",197,null],[13,"MutPtrImplItem","","",197,null],[13,"I8ImplItem","","",197,null],[13,"I16ImplItem","","",197,null],[13,"I32ImplItem","","",197,null],[13,"I64ImplItem","","",197,null],[13,"IsizeImplItem","","",197,null],[13,"U8ImplItem","","",197,null],[13,"U16ImplItem","","",197,null],[13,"U32ImplItem","","",197,null],[13,"U64ImplItem","","",197,null],[13,"UsizeImplItem","","",197,null],[13,"F32ImplItem","","",197,null],[13,"F64ImplItem","","",197,null],[13,"SendTraitLangItem","","",197,null],[13,"SizedTraitLangItem","","",197,null],[13,"UnsizeTraitLangItem","","",197,null],[13,"CopyTraitLangItem","","",197,null],[13,"SyncTraitLangItem","","",197,null],[13,"DropTraitLangItem","","",197,null],[13,"CoerceUnsizedTraitLangItem","","",197,null],[13,"AddTraitLangItem","","",197,null],[13,"SubTraitLangItem","","",197,null],[13,"MulTraitLangItem","","",197,null],[13,"DivTraitLangItem","","",197,null],[13,"RemTraitLangItem","","",197,null],[13,"NegTraitLangItem","","",197,null],[13,"NotTraitLangItem","","",197,null],[13,"BitXorTraitLangItem","","",197,null],[13,"BitAndTraitLangItem","","",197,null],[13,"BitOrTraitLangItem","","",197,null],[13,"ShlTraitLangItem","","",197,null],[13,"ShrTraitLangItem","","",197,null],[13,"AddAssignTraitLangItem","","",197,null],[13,"SubAssignTraitLangItem","","",197,null],[13,"MulAssignTraitLangItem","","",197,null],[13,"DivAssignTraitLangItem","","",197,null],[13,"RemAssignTraitLangItem","","",197,null],[13,"BitXorAssignTraitLangItem","","",197,null],[13,"BitAndAssignTraitLangItem","","",197,null],[13,"BitOrAssignTraitLangItem","","",197,null],[13,"ShlAssignTraitLangItem","","",197,null],[13,"ShrAssignTraitLangItem","","",197,null],[13,"IndexTraitLangItem","","",197,null],[13,"IndexMutTraitLangItem","","",197,null],[13,"UnsafeCellTypeLangItem","","",197,null],[13,"DerefTraitLangItem","","",197,null],[13,"DerefMutTraitLangItem","","",197,null],[13,"FnTraitLangItem","","",197,null],[13,"FnMutTraitLangItem","","",197,null],[13,"FnOnceTraitLangItem","","",197,null],[13,"EqTraitLangItem","","",197,null],[13,"OrdTraitLangItem","","",197,null],[13,"StrEqFnLangItem","","",197,null],[13,"PanicFnLangItem","","",197,null],[13,"PanicBoundsCheckFnLangItem","","",197,null],[13,"PanicFmtLangItem","","",197,null],[13,"ExchangeMallocFnLangItem","","",197,null],[13,"ExchangeFreeFnLangItem","","",197,null],[13,"BoxFreeFnLangItem","","",197,null],[13,"StrDupUniqFnLangItem","","",197,null],[13,"StartFnLangItem","","",197,null],[13,"EhPersonalityLangItem","","",197,null],[13,"EhPersonalityCatchLangItem","","",197,null],[13,"EhUnwindResumeLangItem","","",197,null],[13,"MSVCTryFilterLangItem","","",197,null],[13,"OwnedBoxLangItem","","",197,null],[13,"PhantomDataItem","","",197,null],[13,"CovariantTypeItem","","",197,null],[13,"ContravariantTypeItem","","",197,null],[13,"InvariantTypeItem","","",197,null],[13,"CovariantLifetimeItem","","",197,null],[13,"ContravariantLifetimeItem","","",197,null],[13,"InvariantLifetimeItem","","",197,null],[13,"NoCopyItem","","",197,null],[13,"NonZeroItem","","",197,null],[13,"DebugTraitLangItem","","",197,null],[3,"LanguageItems","","",null,null],[12,"items","","",198,null],[12,"missing","","",198,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[0,"liveness","rustc_lint::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid.",null,null],[5,"check_crate","rustc_lint::middle::liveness","",null,null],[0,"mem_categorization","rustc_lint::middle","# Categorization",null,null],[4,"Categorization","rustc_lint::middle::mem_categorization","",null,null],[13,"Rvalue","","",199,null],[13,"StaticItem","","",199,null],[13,"Upvar","","",199,null],[13,"Local","","",199,null],[13,"Deref","","",199,null],[13,"Interior","","",199,null],[13,"Downcast","","",199,null],[3,"Upvar","","",null,null],[12,"id","","",200,null],[12,"kind","","",200,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box&lt;T&gt;`",201,null],[13,"BorrowedPtr","","`&amp;T`",201,null],[13,"UnsafePtr","","`*T`",201,null],[13,"Implicit","","Implicit deref of the `&amp;T` that results from an overloaded index `[]`.",201,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",202,null],[13,"InteriorElement","","",202,null],[4,"FieldName","","",null,null],[13,"NamedField","","",203,null],[13,"PositionalField","","",203,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",204,null],[13,"Pattern","","",204,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",205,null],[13,"OtherElement","","",205,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",206,null],[13,"McDeclared","","",206,null],[13,"McInherited","","",206,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",207,null],[13,"NoteUpvarRef","","",207,null],[13,"NoteNone","","",207,null],[3,"cmt_","","",null,null],[12,"id","","",208,null],[12,"span","","",208,null],[12,"cat","","",208,null],[12,"mutbl","","",208,null],[12,"ty","","",208,null],[12,"note","","",208,null],[6,"cmt","","",null,null],[4,"deref_kind","","",null,null],[13,"deref_ptr","","",209,null],[13,"deref_interior","","",209,null],[8,"ast_node","","",null,null],[10,"id","","",512,null],[10,"span","","",512,null],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",210,null],[6,"McResult","","",null,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",211,null],[13,"NonAliasable","","",211,null],[13,"ImmutableUnique","","",211,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",212,null],[13,"AliasableClosure","","",212,null],[13,"AliasableOther","","",212,null],[13,"UnaliasableImmutable","","",212,null],[13,"AliasableStatic","","",212,null],[13,"AliasableStaticMut","","",212,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[0,"privacy","rustc_lint::middle","A pass that checks to make sure private fields and methods aren&#39;t used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library.",null,null],[4,"AccessLevel","rustc_lint::middle::privacy","",null,null],[13,"Reachable","","",213,null],[13,"Exported","","",213,null],[13,"Public","","",213,null],[3,"AccessLevels","","",null,null],[12,"map","","",214,null],[6,"ExternalExports","","",null,null],[0,"reachable","rustc_lint::middle","",null,null],[5,"find_reachable","rustc_lint::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"hashset"}}],[0,"region","rustc_lint::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized.",null,null],[3,"CodeExtent","rustc_lint::middle::region","",null,null],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling\ninstead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values.",null,null],[13,"Misc","","",216,null],[13,"CallSiteScope","","",216,null],[12,"fn_id","rustc_lint::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"ParameterScope","rustc_lint::middle::region","",216,null],[12,"fn_id","rustc_lint::middle::region::CodeExtentData","",216,null],[12,"body_id","","",216,null],[13,"DestructionScope","rustc_lint::middle::region","",216,null],[13,"Remainder","","",216,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",217,null],[12,"body_id","","",217,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`.",null,null],[12,"block","","",218,null],[12,"first_statement_index","","",218,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[5,"resolve_inlined_item","","",null,null],[0,"recursion_limit","rustc_lint::middle","",null,null],[5,"update_recursion_limit","rustc_lint::middle::recursion_limit","",null,null],[0,"resolve_lifetime","rustc_lint::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc_lint::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",221,null],[13,"DefEarlyBoundRegion","","",221,null],[13,"DefLateBoundRegion","","",221,null],[13,"DefFreeRegion","","",221,null],[6,"NamedRegionMap","","",null,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"hashmap"}],"output":{"name":"result"}}],[5,"early_bound_lifetimes","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"vec"}}],[0,"stability","rustc_lint::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes.",null,null],[4,"StabilityLevel","rustc_lint::middle::stability","",null,null],[13,"Unstable","","",222,null],[13,"Stable","","",222,null],[3,"Index","","A stability index, giving the stability level for items and methods.",null,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used.",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"hashmap"}}],[5,"check_item","","Helper for discovering nodes to check for stability",null,null],[5,"check_expr","","Helper for discovering nodes to check for stability",null,null],[5,"check_path","","",null,null],[5,"check_path_list_item","","",null,null],[5,"check_pat","","",null,null],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don&#39;t exist and error about them.",null,null],[0,"weak_lang_items","rustc_lint::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc_lint::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet.",null,null],[5,"link_name","","",null,null],[0,"session","rustc_lint","",null,null],[0,"config","rustc_lint::session","Contains infrastructure for configuring the compiler, including parsing\ncommand line options.",null,null],[3,"Config","rustc_lint::session::config","",null,null],[12,"target","","",513,null],[12,"int_type","","",513,null],[12,"uint_type","","",513,null],[4,"OptLevel","","",null,null],[13,"No","","",256,null],[13,"Less","","",256,null],[13,"Default","","",256,null],[13,"Aggressive","","",256,null],[13,"Size","","",256,null],[13,"SizeMin","","",256,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",257,null],[13,"LimitedDebugInfo","","",257,null],[13,"FullDebugInfo","","",257,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",258,null],[13,"Assembly","","",258,null],[13,"LlvmAssembly","","",258,null],[13,"Object","","",258,null],[13,"Exe","","",258,null],[13,"DepInfo","","",258,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",259,null],[13,"Json","","",259,null],[3,"Options","","",null,null],[12,"crate_types","","",260,null],[12,"gc","","",260,null],[12,"optimize","","",260,null],[12,"debug_assertions","","",260,null],[12,"debuginfo","","",260,null],[12,"lint_opts","","",260,null],[12,"lint_cap","","",260,null],[12,"describe_lints","","",260,null],[12,"output_types","","",260,null],[12,"search_paths","","",260,null],[12,"libs","","",260,null],[12,"maybe_sysroot","","",260,null],[12,"target_triple","","",260,null],[12,"cfg","","",260,null],[12,"test","","",260,null],[12,"parse_only","","",260,null],[12,"no_trans","","",260,null],[12,"error_format","","",260,null],[12,"treat_err_as_bug","","",260,null],[12,"continue_parse_after_error","","",260,null],[12,"mir_opt_level","","",260,null],[12,"incremental","","if Some, enable incremental compilation, using the given\ndirectory to store intermediate results",260,null],[12,"no_analysis","","",260,null],[12,"debugging_opts","","",260,null],[12,"prints","","",260,null],[12,"cg","","",260,null],[12,"externs","","",260,null],[12,"crate_name","","",260,null],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = &quot;name&quot;`. Default to &quot;std&quot;. Used by\nout-of-tree drivers.",260,null],[12,"unstable_features","","Indicates how the compiler should treat unstable features",260,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",261,null],[13,"Sysroot","","",261,null],[13,"CrateName","","",261,null],[13,"Cfg","","",261,null],[13,"TargetList","","",261,null],[4,"Input","","",null,null],[13,"File","","Load source from file",262,null],[13,"Str","","",262,null],[12,"name","rustc_lint::session::config::Input","",262,null],[12,"input","","",262,null],[3,"OutputFilenames","rustc_lint::session::config","",null,null],[12,"out_directory","","",263,null],[12,"out_filestem","","",263,null],[12,"single_output_file","","",263,null],[12,"extra","","",263,null],[12,"outputs","","",263,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[4,"EntryFnType","","",null,null],[13,"EntryMain","","",264,null],[13,"EntryStart","","",264,null],[13,"EntryNone","","",264,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",265,null],[13,"CrateTypeDylib","","",265,null],[13,"CrateTypeRlib","","",265,null],[13,"CrateTypeStaticlib","","",265,null],[4,"Passes","","",null,null],[13,"SomePasses","","",266,null],[13,"AllPasses","","",266,null],[4,"PanicStrategy","","",null,null],[13,"Unwind","","",267,null],[13,"Abort","","",267,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",268,null],[12,"linker","","",268,null],[12,"link_args","","",268,null],[12,"link_dead_code","","",268,null],[12,"lto","","",268,null],[12,"target_cpu","","",268,null],[12,"target_feature","","",268,null],[12,"passes","","",268,null],[12,"llvm_args","","",268,null],[12,"save_temps","","",268,null],[12,"rpath","","",268,null],[12,"no_prepopulate_passes","","",268,null],[12,"no_vectorize_loops","","",268,null],[12,"no_vectorize_slp","","",268,null],[12,"soft_float","","",268,null],[12,"prefer_dynamic","","",268,null],[12,"no_integrated_as","","",268,null],[12,"no_redzone","","",268,null],[12,"relocation_model","","",268,null],[12,"code_model","","",268,null],[12,"metadata","","",268,null],[12,"extra_filename","","",268,null],[12,"codegen_units","","",268,null],[12,"remark","","",268,null],[12,"no_stack_check","","",268,null],[12,"debuginfo","","",268,null],[12,"opt_level","","",268,null],[12,"debug_assertions","","",268,null],[12,"inline_threshold","","",268,null],[12,"panic","","",268,null],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[6,"CodegenSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",269,null],[12,"time_passes","","",269,null],[12,"count_llvm_insns","","",269,null],[12,"time_llvm_passes","","",269,null],[12,"input_stats","","",269,null],[12,"trans_stats","","",269,null],[12,"asm_comments","","",269,null],[12,"no_verify","","",269,null],[12,"borrowck_stats","","",269,null],[12,"no_landing_pads","","",269,null],[12,"debug_llvm","","",269,null],[12,"count_type_sizes","","",269,null],[12,"meta_stats","","",269,null],[12,"print_link_args","","",269,null],[12,"gc","","",269,null],[12,"print_llvm_passes","","",269,null],[12,"ast_json","","",269,null],[12,"ast_json_noexpand","","",269,null],[12,"ls","","",269,null],[12,"save_analysis","","",269,null],[12,"save_analysis_csv","","",269,null],[12,"print_move_fragments","","",269,null],[12,"flowgraph_print_loans","","",269,null],[12,"flowgraph_print_moves","","",269,null],[12,"flowgraph_print_assigns","","",269,null],[12,"flowgraph_print_all","","",269,null],[12,"print_region_graph","","",269,null],[12,"parse_only","","",269,null],[12,"no_trans","","",269,null],[12,"treat_err_as_bug","","",269,null],[12,"continue_parse_after_error","","",269,null],[12,"incremental","","",269,null],[12,"dump_dep_graph","","",269,null],[12,"query_dep_graph","","",269,null],[12,"no_analysis","","",269,null],[12,"extra_plugins","","",269,null],[12,"unstable_options","","",269,null],[12,"print_enum_sizes","","",269,null],[12,"force_overflow_checks","","",269,null],[12,"force_dropflag_checks","","",269,null],[12,"trace_macros","","",269,null],[12,"enable_nonzeroing_move_hints","","",269,null],[12,"keep_mtwt_tables","","",269,null],[12,"keep_ast","","",269,null],[12,"show_span","","",269,null],[12,"print_trans_items","","",269,null],[12,"mir_opt_level","","",269,null],[12,"dump_mir","","",269,null],[12,"orbit","","",269,null],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[6,"DebuggingSetter","","",null,null],[17,"DB_OPTIONS","","",null,null],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"append_configuration","","",null,null],[5,"build_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"vec"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[4,"OptionStability","","",null,null],[13,"Stable","","",270,null],[13,"UnstableButNotReally","","",270,null],[13,"Unstable","","",270,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",271,null],[12,"stability","","",271,null],[5,"rustc_short_optgroups","","Returns the &quot;short&quot; subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"build_session_options","","",null,{"inputs":[{"name":"matches"}],"output":{"name":"options"}}],[5,"get_unstable_features_setting","","",null,{"inputs":[],"output":{"name":"unstablefeatures"}}],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc_lint::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[0,"filesearch","rustc_lint::session","",null,null],[4,"FileMatch","rustc_lint::session::filesearch","",null,null],[13,"FileMatches","","",272,null],[13,"FileDoesntMatch","","",272,null],[3,"FileSearch","","",null,null],[12,"sysroot","","",273,null],[12,"search_paths","","",273,null],[12,"triple","","",273,null],[12,"kind","","",273,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"rustlibdir","","",null,{"inputs":[],"output":{"name":"string"}}],[0,"search_paths","rustc_lint::session","",null,null],[3,"SearchPaths","rustc_lint::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",275,null],[13,"Crate","","",275,null],[13,"Dependency","","",275,null],[13,"Framework","","",275,null],[13,"ExternFlag","","",275,null],[13,"All","","",275,null],[3,"Session","rustc_lint::session","",null,null],[12,"target","","",277,null],[12,"host","","",277,null],[12,"opts","","",277,null],[12,"cstore","","",277,null],[12,"parse_sess","","",277,null],[12,"entry_fn","","",277,null],[12,"entry_type","","",277,null],[12,"plugin_registrar_fn","","",277,null],[12,"default_sysroot","","",277,null],[12,"local_crate_source_file","","",277,null],[12,"working_dir","","",277,null],[12,"lint_store","","",277,null],[12,"lints","","",277,null],[12,"plugin_llvm_passes","","",277,null],[12,"mir_passes","","",277,null],[12,"plugin_attributes","","",277,null],[12,"crate_types","","",277,null],[12,"dependency_formats","","",277,null],[12,"crate_disambiguator","","",277,null],[12,"features","","",277,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",277,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime\ndependency if it didn&#39;t already find one, and this tracks what was\ninjected.",277,null],[12,"injected_panic_runtime","","",277,null],[12,"available_macros","","Names of all bang-style macros and syntax extensions\navailable in this crate",277,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of\nthe localized span for the macro body) to the\nmacro name and defintion span in the source crate.",277,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"early_error","","",null,null],[5,"early_warn","","",null,null],[6,"CompileResult","","",null,null],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[5,"bug_fmt","","",null,null],[5,"span_bug_fmt","","",null,null],[0,"util","rustc_lint","",null,null],[0,"common","rustc_lint::util","",null,null],[17,"FN_OUTPUT_NAME","rustc_lint::util::common","",null,null],[3,"ErrorReported","","",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[3,"Indenter","","",null,null],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[5,"loop_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[5,"block_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[8,"MemoizationMap","","",null,null],[16,"Key","","",514,null],[16,"Value","","",514,null],[10,"memoize","","If `key` is present in the map, return the valuee,\notherwise invoke `op` and store the value in the map.",514,null],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[0,"ppaux","rustc_lint::util","",null,null],[5,"verbose","rustc_lint::util::ppaux","",null,{"inputs":[],"output":{"name":"bool"}}],[4,"Ns","","Namespace of the path given to parameterized to print.",null,null],[13,"Type","","",498,null],[13,"Value","","",498,null],[5,"parameterized","","",null,null],[0,"nodemap","rustc_lint::util","An efficient hash map for node IDs",null,null],[6,"NodeMap","rustc_lint::util::nodemap","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[11,"clone","rustc_data_structures::bitvec","",515,null],[11,"new","","",515,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"contains","","",515,null],[11,"insert","","Returns true if the bit has changed.",515,null],[11,"insert_all","","",515,null],[11,"grow","","",515,null],[11,"iter","","Iterates over indexes of set bits in a sorted order",515,null],[11,"next","","",516,null],[11,"from_iter","","",515,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",517,null],[11,"new","","",517,{"inputs":[{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",517,null],[11,"contains","","Do the bits from `source` contain `target`?",517,null],[11,"intersection","","Returns those indices that are reachable from both `a` and\n`b`. This is an O(n) operation where `n` is the number of\nelements (somewhat independent from the actual size of the\nintersection, in particular).",517,null],[11,"merge","","Add the bits from `read` to the bits from `write`,\nreturn true if anything changed.",517,null],[11,"reverse","rustc_data_structures::graph","",518,null],[11,"reverse","","",519,null],[11,"fmt","","",519,null],[11,"hash","","",520,null],[11,"fmt","","",520,null],[11,"eq","","",520,null],[11,"ne","","",520,null],[11,"clone","","",520,null],[11,"hash","","",521,null],[11,"fmt","","",521,null],[11,"eq","","",521,null],[11,"ne","","",521,null],[11,"clone","","",521,null],[11,"eq","","",522,null],[11,"ne","","",522,null],[11,"fmt","","",522,null],[11,"clone","","",522,null],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",520,null],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",521,null],[11,"new","","",523,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",523,null],[11,"len_nodes","","",523,null],[11,"all_edges","","",523,null],[11,"len_edges","","",523,null],[11,"next_node_index","","",523,null],[11,"add_node","","",523,null],[11,"mut_node_data","","",523,null],[11,"node_data","","",523,null],[11,"node","","",523,null],[11,"next_edge_index","","",523,null],[11,"add_edge","","",523,null],[11,"mut_edge_data","","",523,null],[11,"edge_data","","",523,null],[11,"edge","","",523,null],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",523,null],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",523,null],[11,"each_node","","Iterates over all edges defined in the graph.",523,null],[11,"each_edge","","Iterates over all edges defined in the graph",523,null],[11,"outgoing_edges","","",523,null],[11,"incoming_edges","","",523,null],[11,"adjacent_edges","","",523,null],[11,"successor_nodes","","",523,null],[11,"predecessor_nodes","","",523,null],[11,"iterate_until_fixed_point","","",523,null],[11,"depth_traverse","","",523,null],[11,"next","","",524,null],[11,"next","","",525,null],[11,"next","","",526,null],[11,"next","","",527,null],[11,"source","","",519,null],[11,"target","","",519,null],[11,"source_or_target","","",519,null],[11,"eq","rustc_data_structures::ivar","",528,null],[11,"ne","","",528,null],[11,"new","","",528,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",528,null],[11,"fulfill","","",528,null],[11,"is_fulfilled","","",528,null],[11,"unwrap","","",528,null],[11,"fmt","","",528,null],[11,"clone","","",528,null],[11,"fmt","rustc_data_structures::obligation_forest","",529,null],[11,"eq","","",530,null],[11,"ne","","",530,null],[11,"fmt","","",530,null],[11,"new","","",531,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not\nyet been fully resolved.",531,null],[11,"start_snapshot","","",531,null],[11,"commit_snapshot","","",531,null],[11,"rollback_snapshot","","",531,null],[11,"in_snapshot","","",531,null],[11,"register_obligation","","Registers an obligation",531,null],[11,"to_errors","","Convert all remaining obligations to the given error.",531,null],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",531,null],[11,"process_obligations","","Perform a pass through the obligation list. This must\nbe called in a loop until `outcome.stalled` is false.",531,null],[11,"new","rustc_data_structures::snapshot_vec","",532,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",532,null],[11,"len","","",532,null],[11,"push","","",532,null],[11,"get","","",532,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",532,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",532,null],[11,"start_snapshot","","",532,null],[11,"actions_since_snapshot","","",532,null],[11,"rollback_to","","",532,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",532,null],[11,"deref","","",532,null],[11,"deref_mut","","",532,null],[11,"index","","",532,null],[11,"index_mut","","",532,null],[11,"extend","","",532,null],[11,"clone","rustc_data_structures::transitive_relation","",533,null],[11,"new","","",533,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"add","","Indicate that `a &lt; b` (where `&lt;` is this relation)",533,null],[11,"contains","","Check whether `a &lt; target` (transitively)",533,null],[11,"postdom_upper_bound","","Picks what I am referring to as the &quot;postdominating&quot;\nupper-bound for `a` and `b`. This is usually the least upper\nbound, but in cases where there is no single least upper\nbound, it is the &quot;mutual immediate postdominator&quot;, if you\nimagine a graph where `a &lt; b` means `a -&gt; b`.",533,null],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",533,null],[11,"fmt","rustc_data_structures::unify","",534,null],[11,"clone","","",534,null],[11,"eq","","",534,null],[11,"ne","","",534,null],[11,"new","","",535,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a &quot;LIFO&quot; (stack) order.",535,null],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",535,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",535,null],[11,"new_key","","",535,null],[11,"union","","",535,null],[11,"find","","",535,null],[11,"find_value","","",535,null],[11,"unioned","","",535,null],[11,"unify_var_var","","",535,null],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",535,null],[11,"has_value","","",535,null],[11,"probe","","",535,null],[11,"unsolved_variables","","",535,null],[11,"default","rustc_data_structures::fnv","",536,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",536,null],[11,"finish","","",536,null],[11,"with_capacity","rustc_data_structures::veccell","",537,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",537,null],[11,"swap","","",537,null],[6,"FnvHashMap","rustc_lint::util::nodemap","",null,null],[6,"FnvHashSet","","",null,null],[5,"FnvHashSet","","",null,{"inputs":[],"output":{"name":"hashset"}}],[5,"FnvHashMap","","",null,{"inputs":[],"output":{"name":"hashmap"}}],[0,"num","rustc_lint::util","",null,null],[8,"ToPrimitive","rustc_lint::util::num","",null,null],[10,"to_i8","","",538,null],[10,"to_i16","","",538,null],[10,"to_i32","","",538,null],[10,"to_i64","","",538,null],[10,"to_u8","","",538,null],[10,"to_u16","","",538,null],[10,"to_u32","","",538,null],[10,"to_u64","","",538,null],[0,"fs","rustc_lint::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc_lint::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[0,"sha2","rustc_lint::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant.",null,null],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",539,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",539,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",539,null],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",539,null],[11,"close","","Close and remove the temporary directory",539,null],[11,"drop","","",539,null],[11,"fmt","rustc_back::target","",540,null],[11,"clone","","",540,null],[11,"fmt","","",541,null],[11,"clone","","",541,null],[11,"default","","Create a set of &quot;sane defaults&quot; for any target. This is still\nincomplete, and if used for compilation, will certainly not work.",541,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn &quot;System&quot; into the correct ABI for this target.",540,null],[11,"from_json","","Load a target descriptor from a JSON object.",540,{"inputs":[{"name":"json"}],"output":{"name":"target"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",540,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"drop","rustc_back::dynamic_lib","",542,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",542,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",542,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",542,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",542,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",542,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",542,null],[8,"Digest","rustc_lint::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",543,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",543,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",543,null],[10,"output_bits","","Get the output size in bits.",543,null],[11,"input_str","","Convenience function that feeds a string into a digest.",543,null],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",543,null],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",543,null],[3,"Sha256","","The SHA-256 hash algorithm",null,null],[5,"register_builtins","rustc_lint","Tell the `LintStore` about all the built-in lints (the ones\ndefined in this crate and the ones defined in\n`rustc::lint::builtin`).",null,{"inputs":[{"name":"lintstore"},{"name":"option"}],"output":null}]],"paths":[[3,"Lint"],[3,"LabelledCFG"],[4,"CFGNodeData"],[3,"CFGEdgeData"],[3,"CFG"],[4,"DepNode"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[3,"DepGraphQuery"],[4,"Def"],[3,"PathResolution"],[3,"Export"],[3,"DefIndex"],[3,"DefId"],[4,"FnKind"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[3,"IdVisitor"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"FnLikeNode"],[3,"Item"],[3,"TraitItem"],[3,"Expr"],[4,"Code"],[3,"Definitions"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[4,"Node"],[4,"MapEntry"],[3,"Forest"],[3,"Map"],[3,"NodesMatchingSuffix"],[3,"State"],[3,"NoAnn"],[3,"Svh"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[3,"Local"],[4,"Decl_"],[3,"Arm"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[3,"QSelf"],[4,"MatchSource"],[4,"CaptureClause"],[3,"MutTy"],[3,"MethodSig"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItemKind"],[3,"TypeBinding"],[3,"Ty"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[4,"SelfKind"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField"],[4,"VariantData"],[3,"ItemId"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"Freevar"],[3,"TraitCandidate"],[3,"Bivariate"],[3,"CombineFields"],[3,"InferCtxt"],[4,"Result"],[3,"Equate"],[3,"TyCtxt"],[3,"TraitRef"],[3,"Binder"],[3,"Glb"],[3,"Lub"],[4,"Constraint"],[4,"GenericKind"],[4,"VerifyBound"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[3,"SameRegions"],[3,"RegionVarBindings"],[4,"VarValue"],[4,"Verify"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"IntVid"],[3,"RegionVidKey"],[3,"RegionVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[3,"TyVid"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"InferCtxtBuilder"],[3,"FnSig"],[4,"FnOutput"],[3,"ClosureSubsts"],[4,"LvalueTy"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"LateContext"],[3,"EarlyContext"],[3,"GatherNodeLevels"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[3,"ChildItem"],[3,"ExternCrate"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[3,"DataFlowContext"],[4,"KillFrom"],[4,"Linkage"],[3,"FreeRegionMap"],[4,"LangItem"],[3,"LanguageItems"],[4,"Categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[4,"deref_kind"],[3,"MemCategorizationContext"],[4,"Aliasability"],[4,"AliasableReason"],[4,"AccessLevel"],[3,"AccessLevels"],[3,"CodeExtent"],[4,"CodeExtentData"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[4,"Mutability"],[4,"BorrowKind"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlock"],[3,"BasicBlockData"],[3,"Terminator"],[4,"TerminatorKind"],[3,"Statement"],[4,"StatementKind"],[4,"Lvalue"],[3,"Projection"],[4,"ProjectionElem"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[3,"ScopeData"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[3,"Constant"],[3,"TypedConstVal"],[4,"Literal"],[4,"LvalueContext"],[4,"MirSource"],[3,"Passes"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[3,"Options"],[4,"PrintRequest"],[4,"Input"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[4,"FileMatch"],[3,"FileSearch"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"TraitErrorKey"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[4,"ProjectionMode"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[3,"SelectionCache"],[4,"MethodMatchedData"],[3,"EvaluationCache"],[3,"SelectionContext"],[4,"MethodMatchResult"],[3,"Graph"],[4,"Node"],[4,"NodeItems"],[3,"Ancestors"],[3,"NodeItem"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"SpecializesCache"],[3,"Obligation"],[4,"Vtable"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableBuiltinData"],[3,"VtableDefaultImplData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[4,"SelectionError"],[3,"SupertraitDefIds"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[4,"AutoAdjustment"],[3,"AutoDerefRef"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[3,"TyS"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[3,"RegionFolder"],[4,"RootMode"],[3,"TargetDataLayout"],[4,"Endian"],[3,"Size"],[3,"Align"],[4,"Integer"],[4,"Primitive"],[3,"Struct"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[3,"TypeAndMut"],[4,"Abi"],[3,"ProjectionTy"],[3,"ProjectionPredicate"],[3,"ExistentialBounds"],[3,"BuiltinBounds"],[4,"Region"],[3,"Rc"],[3,"Box"],[3,"Substs"],[4,"ParamSpace"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"IntType"],[4,"CopyImplementationError"],[4,"Representability"],[3,"ParameterEnvironment"],[3,"TypeContents"],[3,"CtxtArenas"],[3,"Tables"],[4,"Option"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[4,"Predicate"],[3,"ItemSubsts"],[3,"ClosureTy"],[3,"P"],[3,"TraitTy"],[3,"ImplHeader"],[3,"TypeParameterDef"],[4,"ObjectLifetimeDefault"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"InstantiatedPredicates"],[3,"ClosureUpvar"],[3,"TypeScheme"],[3,"FreeRegion"],[4,"BoundRegion"],[4,"TypeVariants"],[3,"TypeFlags"],[3,"BareFnTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"EarlyBoundRegion"],[3,"SkolemizedRegionVid"],[4,"InferTy"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[4,"BuiltinBound"],[3,"CrateAnalysis"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Visibility"],[3,"Method"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"ItemVariances"],[4,"Variance"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[4,"FragmentInfo"],[3,"UpvarId"],[4,"BorrowKind"],[4,"UpvarCapture"],[3,"UpvarBorrow"],[3,"AdtFlags"],[3,"AdtDefData"],[4,"AdtKind"],[4,"VariantKind"],[3,"VariantDefData"],[3,"FieldDefData"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"Sha256"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[8,"LintContext"],[3,"FutureIncompatibleInfo"],[8,"Delegate"],[4,"FoundAst"],[8,"CrateStore"],[8,"EncodingContext"],[8,"DecodingContext"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[8,"ast_node"],[3,"Config"],[8,"MemoizationMap"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"Outcome"],[3,"Error"],[3,"ObligationForest"],[3,"SnapshotVec"],[3,"TransitiveRelation"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[3,"VecCell"],[8,"ToPrimitive"],[3,"TempDir"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"],[8,"Digest"]]};
searchIndex["rustc_privacy"] = {"doc":"","items":[[5,"check_crate","rustc_privacy","",null,{"inputs":[{"name":"tyctxt"},{"name":"exportmap"}],"output":{"name":"accesslevels"}}],[0,"diagnostics","","",null,null],[17,"DIAGNOSTICS","","",null,null]],"paths":[]};
searchIndex["rustc_resolve"] = {"doc":"","items":[[3,"ModuleS","rustc_resolve","One node in the tree of modules.",null,null],[3,"NameBinding","","",null,null],[3,"Resolver","","The main resolver class.",null,null],[12,"def_map","","",0,null],[12,"freevars","","",0,null],[12,"export_map","","",0,null],[12,"trait_map","","",0,null],[12,"make_glob_map","","",0,null],[12,"glob_map","","",0,null],[12,"maybe_unused_trait_imports","","",0,null],[4,"Namespace","","",null,null],[13,"TypeNS","","",1,null],[13,"ValueNS","","",1,null],[4,"ResolveResult","","",null,null],[13,"Failed","","",2,null],[13,"Indeterminate","","",2,null],[13,"Success","","",2,null],[4,"MakeGlobMap","","",null,null],[13,"Yes","","",3,null],[13,"No","","",3,null],[5,"resolve_crate","","Entry point to crate resolution.",null,{"inputs":[{"name":"resolver"},{"name":"crate"}],"output":null}],[5,"with_resolver","","",null,{"inputs":[{"name":"session"},{"name":"definitions"},{"name":"makeglobmap"},{"name":"f"}],"output":{"name":"t"}}],[11,"build_reduced_graph","","Constructs the reduced graph for the entire crate.",0,null],[11,"populate_module_if_necessary","","Ensures that the reduced graph rooted at the given external module\nis built, building it if it is not.",0,null],[11,"resolve_name","","",4,null],[11,"resolve_name_in_lexical_scope","","",4,null],[11,"try_define_child","","",4,null],[11,"add_import_directive","","",4,null],[6,"ErrorMessage","","",null,null],[6,"Module","","",null,null],[17,"DIAGNOSTICS","","",null,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"visit_item","","",0,null],[11,"visit_arm","","",0,null],[11,"visit_block","","",0,null],[11,"visit_expr","","",0,null],[11,"visit_local","","",0,null],[11,"visit_ty","","",0,null],[11,"visit_generics","","",0,null],[11,"visit_poly_trait_ref","","",0,null],[11,"visit_variant","","",0,null],[11,"visit_foreign_item","","",0,null],[11,"visit_fn","","",0,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"is_descendant_of","","",0,null],[11,"resolve_generated_global_path","","",0,null],[11,"get_resolution","","",0,null],[11,"record_resolution","","",0,null],[11,"definitions","","",0,null],[11,"clone","","",3,null],[11,"eq","","",3,null]],"paths":[[3,"Resolver"],[4,"Namespace"],[4,"ResolveResult"],[4,"MakeGlobMap"],[3,"ModuleS"],[3,"NameBinding"]]};
searchIndex["rustc"] = {"doc":"The Rust compiler.","items":[[0,"diagnostics","rustc","",null,null],[0,"cfg","","Module that constructs a control-flow graph representing an item.\nUses `Graph` as the underlying representation.",null,null],[3,"CFG","rustc::cfg","",null,null],[12,"graph","","",0,null],[12,"entry","","",0,null],[12,"exit","","",0,null],[3,"CFGEdgeData","","",null,null],[12,"exiting_scopes","","",1,null],[4,"CFGNodeData","","",null,null],[13,"AST","","",2,null],[13,"Entry","","",2,null],[13,"Exit","","",2,null],[13,"Dummy","","",2,null],[13,"Unreachable","","",2,null],[0,"graphviz","","",null,null],[3,"LabelledCFG","rustc::cfg::graphviz","",null,null],[12,"ast_map","","",3,null],[12,"cfg","","",3,null],[12,"name","","",3,null],[12,"labelled_edges","","`labelled_edges` controls whether we emit labels on the edges",3,null],[6,"Node","","",null,null],[6,"Edge","","",null,null],[11,"graph_id","","",3,null],[11,"node_id","","",3,null],[11,"node_label","","",3,null],[11,"edge_label","","",3,null],[11,"nodes","","",3,null],[11,"edges","","",3,null],[11,"source","","",3,null],[11,"target","","",3,null],[6,"CFGIndex","rustc::cfg","",null,null],[6,"CFGGraph","","",null,null],[6,"CFGNode","","",null,null],[6,"CFGEdge","","",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"id","","",2,null],[11,"fmt","","",1,null],[11,"new","","",0,{"inputs":[{"name":"tyctxt"},{"name":"block"}],"output":{"name":"cfg"}}],[11,"node_is_reachable","","",0,null],[0,"dep_graph","rustc","",null,null],[3,"DepTrackingMap","rustc::dep_graph","A DepTrackingMap offers a subset of the `Map` API and ensures that\nwe make calls to `read` and `write` as appropriate. We key the\nmaps with a unique type for brevity.",null,null],[3,"DepGraph","","",null,null],[3,"DepGraphQuery","","",null,null],[12,"graph","","",4,null],[12,"indices","","",4,null],[4,"DepNode","","",null,null],[13,"Krate","","",5,null],[13,"Hir","","",5,null],[13,"CrateReader","","",5,null],[13,"CollectLanguageItems","","",5,null],[13,"CheckStaticRecursion","","",5,null],[13,"ResolveLifetimes","","",5,null],[13,"RegionResolveCrate","","",5,null],[13,"CheckLoops","","",5,null],[13,"PluginRegistrar","","",5,null],[13,"StabilityIndex","","",5,null],[13,"CollectItem","","",5,null],[13,"Coherence","","",5,null],[13,"EffectCheck","","",5,null],[13,"Liveness","","",5,null],[13,"Resolve","","",5,null],[13,"EntryPoint","","",5,null],[13,"CheckEntryFn","","",5,null],[13,"CoherenceCheckImpl","","",5,null],[13,"CoherenceOverlapCheck","","",5,null],[13,"CoherenceOverlapCheckSpecial","","",5,null],[13,"CoherenceOverlapInherentCheck","","",5,null],[13,"CoherenceOrphanCheck","","",5,null],[13,"Variance","","",5,null],[13,"WfCheck","","",5,null],[13,"TypeckItemType","","",5,null],[13,"TypeckItemBody","","",5,null],[13,"Dropck","","",5,null],[13,"DropckImpl","","",5,null],[13,"UnusedTraitCheck","","",5,null],[13,"CheckConst","","",5,null],[13,"Privacy","","",5,null],[13,"IntrinsicCheck","","",5,null],[13,"MatchCheck","","",5,null],[13,"MirMapConstruction","","",5,null],[13,"MirPass","","",5,null],[13,"MirTypeck","","",5,null],[13,"BorrowCheck","","",5,null],[13,"RvalueCheck","","",5,null],[13,"Reachability","","",5,null],[13,"DeadCheck","","",5,null],[13,"StabilityCheck","","",5,null],[13,"LateLintCheck","","",5,null],[13,"TransCrate","","",5,null],[13,"TransCrateItem","","",5,null],[13,"TransInlinedItem","","",5,null],[13,"TransWriteMetadata","","",5,null],[13,"ImplOrTraitItems","","",5,null],[13,"ItemSignature","","",5,null],[13,"FieldTy","","",5,null],[13,"SizedConstraint","","",5,null],[13,"TraitItemDefIds","","",5,null],[13,"InherentImpls","","",5,null],[13,"ImplItems","","",5,null],[13,"TraitImpls","","",5,null],[13,"TraitItems","","",5,null],[13,"ReprHints","","",5,null],[13,"TraitSelect","","",5,null],[5,"visit_all_items_in_krate","","Visit all the items in the krate in some order. When visiting a\nparticular item, first create a dep-node by calling `dep_node_fn`\nand push that onto the dep-graph stack of tasks, and also create a\nread edge from the corresponding AST node. This is used in\ncompiler passes to automatically record the item that they are\nworking on.",null,{"inputs":[{"name":"tyctxt"},{"name":"f"},{"name":"v"}],"output":null}],[11,"decode","","",5,{"inputs":[{"name":"__dd"}],"output":{"name":"result"}}],[11,"encode","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"from_label_string","","Used in testing",5,{"inputs":[{"name":"str"},{"name":"d"}],"output":{"name":"result"}}],[11,"map_def","","",5,null],[11,"new","","",6,{"inputs":[{"name":"depgraph"}],"output":{"name":"deptrackingmap"}}],[11,"get","","",6,null],[11,"insert","","",6,null],[11,"contains_key","","",6,null],[11,"memoize","core::cell","Memoizes an entry in the dep-tracking-map. If the entry is not\nalready present, then `op` will be executed to compute its value.\nThe resulting dependency graph looks like this:",7,null],[11,"index","rustc::dep_graph","",6,null],[11,"clone","","",8,null],[11,"new","","",8,{"inputs":[{"name":"bool"}],"output":{"name":"depgraph"}}],[11,"enabled","","True if we are actually building a dep-graph. If this returns false,\nthen the other methods on this `DepGraph` will have no net effect.",8,null],[11,"query","","",8,null],[11,"in_ignore","","",8,null],[11,"in_task","","",8,null],[11,"with_ignore","","",8,null],[11,"with_task","","",8,null],[11,"read","","",8,null],[11,"write","","",8,null],[11,"new","","",4,null],[11,"contains_node","","",4,null],[11,"nodes","","",4,null],[11,"edges","","",4,null],[11,"transitive_dependents","","All nodes reachable from `node`. In other words, things that\nwill have to be recomputed if `node` changes.",4,null],[11,"immediate_dependents","","Just the outgoing edges from `node`.",4,null],[8,"DepTrackingMapConfig","","",null,null],[16,"Key","","",9,null],[16,"Value","","",9,null],[10,"to_dep_node","","",9,{"inputs":[{"name":"key"}],"output":{"name":"depnode"}}],[0,"hir","rustc","",null,null],[3,"Lifetime","rustc::hir","",null,null],[12,"id","","",10,null],[12,"span","","",10,null],[12,"name","","",10,null],[3,"LifetimeDef","","A lifetime definition, eg `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"lifetime","","",11,null],[12,"bounds","","",11,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name; for instance:\nstd::cmp::PartialEq  .  It&#39;s represented as a sequence of identifiers,\nalong with a bunch of supporting information.",null,null],[12,"span","","",12,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",12,null],[12,"segments","","The segments in the path: the things separated by `::`.",12,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of\ntypes.",null,null],[12,"name","","The identifier portion of this path segment.",13,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",13,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",14,null],[12,"types","","The type parameters for this path segment, if present.",14,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.\nE.g., `Foo&lt;A=Bar&gt;`.",14,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"span","","Overall span",15,null],[12,"inputs","","`(A,B)`",15,null],[12,"output","","`C`",15,null],[3,"TyParam","","",null,null],[12,"name","","",16,null],[12,"id","","",16,null],[12,"bounds","","",16,null],[12,"default","","",16,null],[12,"span","","",16,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",17,null],[12,"ty_params","","",17,null],[12,"where_clause","","",17,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",18,null],[12,"predicates","","",18,null],[3,"WhereBoundPredicate","","A type bound, eg `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",null,null],[12,"span","","",19,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",19,null],[12,"bounded_ty","","The type being bounded",19,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",19,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",null,null],[12,"span","","",20,null],[12,"lifetime","","",20,null],[12,"bounds","","",20,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",21,null],[12,"span","","",21,null],[12,"path","","",21,null],[12,"ty","","",21,null],[3,"Crate","","",null,null],[12,"module","","",22,null],[12,"attrs","","",22,null],[12,"config","","",22,null],[12,"span","","",22,null],[12,"exported_macros","","",22,null],[12,"items","","",22,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"name","","",23,null],[12,"attrs","","",23,null],[12,"id","","",23,null],[12,"span","","",23,null],[12,"imported_from","","",23,null],[12,"export","","",23,null],[12,"use_locally","","",23,null],[12,"allow_internal_unstable","","",23,null],[12,"body","","",23,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",24,null],[12,"expr","","An expression at the end of the block\nwithout a semicolon, if any",24,null],[12,"id","","",24,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",24,null],[12,"span","","",24,null],[3,"Pat","","",null,null],[12,"id","","",25,null],[12,"node","","",25,null],[12,"span","","",25,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"name","","The identifier for the field",26,null],[12,"pat","","The pattern the field is destructured to",26,null],[12,"is_shorthand","","",26,null],[3,"Local","","Local represents a `let` statement, e.g., `let &lt;pat&gt;:&lt;ty&gt; = &lt;expr&gt;;`",null,null],[12,"pat","","",27,null],[12,"ty","","",27,null],[12,"init","","Initializer expression to set the value, if any",27,null],[12,"id","","",27,null],[12,"span","","",27,null],[12,"attrs","","",27,null],[3,"Arm","","represents one arm of a &#39;match&#39;",null,null],[12,"attrs","","",28,null],[12,"pats","","",28,null],[12,"guard","","",28,null],[12,"body","","",28,null],[3,"Field","","",null,null],[12,"name","","",29,null],[12,"expr","","",29,null],[12,"span","","",29,null],[3,"Expr","","An expression",null,null],[12,"id","","",30,null],[12,"node","","",30,null],[12,"span","","",30,null],[12,"attrs","","",30,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",31,null],[12,"position","","",31,null],[3,"MutTy","","",null,null],[12,"ty","","",32,null],[12,"mutbl","","",32,null],[3,"MethodSig","","Represents a method&#39;s signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",33,null],[12,"constness","","",33,null],[12,"abi","","",33,null],[12,"decl","","",33,null],[12,"generics","","",33,null],[3,"TraitItem","","Represents an item declaration within a trait declaration,\npossibly including a default implementation. A trait item is\neither required (meaning it doesn&#39;t have an implementation, just a\nsignature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",34,null],[12,"name","","",34,null],[12,"attrs","","",34,null],[12,"node","","",34,null],[12,"span","","",34,null],[3,"ImplItem","","",null,null],[12,"id","","",35,null],[12,"name","","",35,null],[12,"vis","","",35,null],[12,"defaultness","","",35,null],[12,"attrs","","",35,null],[12,"node","","",35,null],[12,"span","","",35,null],[3,"TypeBinding","","",null,null],[12,"id","","",36,null],[12,"name","","",36,null],[12,"ty","","",36,null],[12,"span","","",36,null],[3,"Ty","","",null,null],[12,"id","","",37,null],[12,"node","","",37,null],[12,"span","","",37,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",38,null],[12,"abi","","",38,null],[12,"lifetimes","","",38,null],[12,"decl","","",38,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",39,null],[12,"is_rw","","",39,null],[12,"is_indirect","","",39,null],[3,"InlineAsm","","",null,null],[12,"asm","","",40,null],[12,"asm_str_style","","",40,null],[12,"outputs","","",40,null],[12,"inputs","","",40,null],[12,"clobbers","","",40,null],[12,"volatile","","",40,null],[12,"alignstack","","",40,null],[12,"dialect","","",40,null],[12,"expn_id","","",40,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"ty","","",41,null],[12,"pat","","",41,null],[12,"id","","",41,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",42,null],[12,"output","","",42,null],[12,"variadic","","",42,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",43,null],[12,"item_ids","","",43,null],[3,"ForeignMod","","",null,null],[12,"abi","","",44,null],[12,"items","","",44,null],[3,"EnumDef","","",null,null],[12,"variants","","",45,null],[3,"Variant_","","",null,null],[12,"name","","",46,null],[12,"attrs","","",46,null],[12,"data","","",46,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",46,null],[3,"TraitRef","","TraitRef&#39;s appear in impls.",null,null],[12,"path","","",47,null],[12,"ref_id","","",47,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",48,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",48,null],[12,"span","","",48,null],[3,"StructField","","",null,null],[12,"span","","",49,null],[12,"name","","",49,null],[12,"vis","","",49,null],[12,"id","","",49,null],[12,"ty","","",49,null],[12,"attrs","","",49,null],[3,"ItemId","","",null,null],[12,"id","","",50,null],[3,"Item","","An item",null,null],[12,"name","","",51,null],[12,"attrs","","",51,null],[12,"id","","",51,null],[12,"node","","",51,null],[12,"vis","","",51,null],[12,"span","","",51,null],[3,"ForeignItem","","",null,null],[12,"name","","",52,null],[12,"attrs","","",52,null],[12,"node","","",52,null],[12,"id","","",52,null],[12,"span","","",52,null],[12,"vis","","",52,null],[3,"Freevar","","A free variable referred to in a function.",null,null],[12,"def","","The variable being accessed free.",53,null],[12,"span","","",53,null],[3,"TraitCandidate","","",null,null],[12,"def_id","","",54,null],[12,"import_id","","",54,null],[4,"PathParameters","","",null,null],[13,"AngleBracketedParameters","","The `&lt;&#39;a, A,B,C&gt;` in `foo::bar::baz::&lt;&#39;a, A,B,C&gt;`",55,null],[13,"ParenthesizedParameters","","The `(A,B)` and `C` in `Foo(A,B) -&gt; C`",55,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe &quot;special&quot; built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",56,null],[13,"RegionTyParamBound","","",56,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",57,null],[13,"Maybe","","",57,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, eg `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",58,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",58,null],[13,"EqPredicate","","An equality predicate (unsupported)",58,null],[4,"BindingMode","","",null,null],[13,"BindByRef","","",59,null],[13,"BindByValue","","",59,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",60,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable,\nor a unit struct/variant pattern, or a const pattern (in the last two cases\nthe third field must be `None`).",60,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\nThe `bool` is `true` in the presence of a `..`.",60,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, z)`.\n&quot;None&quot; means a `Variant(..)` pattern where we don&#39;t bind the fields to names.",60,null],[13,"Path","","A path pattern.\nSuch pattern can be resolved to a unit struct/variant or a constant.",60,null],[13,"QPath","","An associated const named using the qualified path `&lt;T&gt;::CONST` or\n`&lt;T as Trait&gt;::CONST`. Associated consts from inherent impls can be\nreferred to as simply `T::CONST`, in which case they will end up as\nPatKind::Path, and the resolver will have to sort that out.",60,null],[13,"Tup","","A tuple pattern `(a, b)`",60,null],[13,"Box","","A `box` pattern",60,null],[13,"Ref","","A reference pattern, e.g. `&amp;mut (a, b)`",60,null],[13,"Lit","","A literal",60,null],[13,"Range","","A range pattern, e.g. `1...2`",60,null],[13,"Vec","","`[a, b, ..i, y, z]` is represented as:\n`PatKind::Vec(box [a, b], Some(i), box [y, z])`",60,null],[4,"Mutability","","",null,null],[13,"MutMutable","","",61,null],[13,"MutImmutable","","",61,null],[4,"BinOp_","","",null,null],[13,"BiAdd","","The `+` operator (addition)",62,null],[13,"BiSub","","The `-` operator (subtraction)",62,null],[13,"BiMul","","The `*` operator (multiplication)",62,null],[13,"BiDiv","","The `/` operator (division)",62,null],[13,"BiRem","","The `%` operator (modulus)",62,null],[13,"BiAnd","","The `&amp;&amp;` operator (logical and)",62,null],[13,"BiOr","","The `||` operator (logical or)",62,null],[13,"BiBitXor","","The `^` operator (bitwise xor)",62,null],[13,"BiBitAnd","","The `&amp;` operator (bitwise and)",62,null],[13,"BiBitOr","","The `|` operator (bitwise or)",62,null],[13,"BiShl","","The `&lt;&lt;` operator (shift left)",62,null],[13,"BiShr","","The `&gt;&gt;` operator (shift right)",62,null],[13,"BiEq","","The `==` operator (equality)",62,null],[13,"BiLt","","The `&lt;` operator (less than)",62,null],[13,"BiLe","","The `&lt;=` operator (less than or equal to)",62,null],[13,"BiNe","","The `!=` operator (not equal to)",62,null],[13,"BiGe","","The `&gt;=` operator (greater than or equal to)",62,null],[13,"BiGt","","The `&gt;` operator (greater than)",62,null],[4,"UnOp","","",null,null],[13,"UnDeref","","The `*` operator for dereferencing",63,null],[13,"UnNot","","The `!` operator for logical inversion",63,null],[13,"UnNeg","","The `-` operator for negation",63,null],[4,"Stmt_","","",null,null],[13,"StmtDecl","","Could be an item or a local (let) binding:",64,null],[13,"StmtExpr","","Expr without trailing semi-colon (must have unit type):",64,null],[13,"StmtSemi","","Expr with trailing semi-colon (may have any type):",64,null],[4,"Decl_","","",null,null],[13,"DeclLocal","","A local (let) binding:",65,null],[13,"DeclItem","","An item binding:",65,null],[4,"BlockCheckMode","","",null,null],[13,"DefaultBlock","","",66,null],[13,"UnsafeBlock","","",66,null],[13,"PushUnsafeBlock","","",66,null],[13,"PopUnsafeBlock","","",66,null],[13,"PushUnstableBlock","","",66,null],[13,"PopUnstableBlock","","",66,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",67,null],[13,"UserProvided","","",67,null],[4,"Expr_","","",null,null],[13,"ExprBox","","A `box x` expression.",68,null],[13,"ExprVec","","An array (`[a, b, c, d]`)",68,null],[13,"ExprCall","","A function call",68,null],[13,"ExprMethodCall","","A method call (`x.foo::&lt;Bar, Baz&gt;(a, b, c, d)`)",68,null],[13,"ExprTup","","A tuple (`(a, b, c ,d)`)",68,null],[13,"ExprBinary","","A binary operation (For example: `a + b`, `a * b`)",68,null],[13,"ExprUnary","","A unary operation (For example: `!x`, `*x`)",68,null],[13,"ExprLit","","A literal (For example: `1`, `&quot;foo&quot;`)",68,null],[13,"ExprCast","","A cast (`foo as f64`)",68,null],[13,"ExprType","","",68,null],[13,"ExprIf","","An `if` block, with an optional else block",68,null],[13,"ExprWhile","","A while loop, with an optional label",68,null],[13,"ExprLoop","","Conditionless loop (can be exited with break, continue, or return)",68,null],[13,"ExprMatch","","A `match` block, with a source that indicates whether or not it is\nthe result of a desugaring, and if so, which kind.",68,null],[13,"ExprClosure","","A closure (for example, `move |a, b, c| {a + b + c}`).",68,null],[13,"ExprBlock","","A block (`{ ... }`)",68,null],[13,"ExprAssign","","An assignment (`a = foo()`)",68,null],[13,"ExprAssignOp","","An assignment with an operator",68,null],[13,"ExprField","","Access of a named struct field (`obj.foo`)",68,null],[13,"ExprTupField","","Access of an unnamed field of a struct or tuple-struct",68,null],[13,"ExprIndex","","An indexing operation (`foo[2]`)",68,null],[13,"ExprPath","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",68,null],[13,"ExprAddrOf","","A referencing operation (`&amp;a` or `&amp;mut a`)",68,null],[13,"ExprBreak","","A `break`, with an optional label to break",68,null],[13,"ExprAgain","","A `continue`, with an optional label",68,null],[13,"ExprRet","","A `return`, with an optional value to be returned",68,null],[13,"ExprInlineAsm","","Inline assembly (from `asm!`), with its outputs and inputs.",68,null],[13,"ExprStruct","","A struct literal expression.",68,null],[13,"ExprRepeat","","A vector literal constructed from one repeated element.",68,null],[4,"MatchSource","","",null,null],[13,"Normal","","",69,null],[13,"IfLetDesugar","","",69,null],[12,"contains_else_clause","rustc::hir::MatchSource","",69,null],[13,"WhileLetDesugar","rustc::hir","",69,null],[13,"ForLoopDesugar","","",69,null],[13,"TryDesugar","","",69,null],[4,"CaptureClause","","",null,null],[13,"CaptureByValue","","",70,null],[13,"CaptureByRef","","",70,null],[4,"TraitItem_","","",null,null],[13,"ConstTraitItem","","",71,null],[13,"MethodTraitItem","","",71,null],[13,"TypeTraitItem","","",71,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",72,null],[13,"Method","","",72,null],[13,"Type","","",72,null],[4,"PrimTy","","Not represented directly in the AST, referred to by name through a ty_path.",null,null],[13,"TyInt","","",73,null],[13,"TyUint","","",73,null],[13,"TyFloat","","",73,null],[13,"TyStr","","",73,null],[13,"TyBool","","",73,null],[13,"TyChar","","",73,null],[4,"Ty_","","The different kinds of types recognized by the compiler",null,null],[13,"TyVec","","",74,null],[13,"TyFixedLengthVec","","A fixed length array (`[T; n]`)",74,null],[13,"TyPtr","","A raw pointer (`*const T` or `*mut T`)",74,null],[13,"TyRptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",74,null],[13,"TyBareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",74,null],[13,"TyTup","","A tuple (`(A, B, C, D,...)`)",74,null],[13,"TyPath","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;HirVec&lt;T&gt; as SomeTrait&gt;::SomeType`.",74,null],[13,"TyObjectSum","","Something like `A+B`. Note that `B` must always be a path.",74,null],[13,"TyPolyTraitRef","","A type like `for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a Bar&gt;`",74,null],[13,"TyTypeof","","Unused for now",74,null],[13,"TyInfer","","TyInfer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",74,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",75,null],[13,"Region","","`&amp;&#39;lt self`, `&amp;&#39;lt mut self`",75,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",75,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",76,null],[13,"Normal","","",76,null],[4,"Constness","","",null,null],[13,"Const","","",77,null],[13,"NotConst","","",77,null],[4,"Defaultness","","",null,null],[13,"Default","","",78,null],[13,"Final","","",78,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",79,null],[13,"Negative","","`impl !Trait for Type`",79,null],[4,"FunctionRetTy","","",null,null],[13,"NoReturn","","Functions with return type `!`that always\nraise an error or exit (i.e. never return to the caller)",80,null],[13,"DefaultReturn","","Return type is not specified.",80,null],[13,"Return","","Everything else",80,null],[4,"PathListItem_","","",null,null],[13,"PathListIdent","","",81,null],[12,"name","rustc::hir::PathListItem_","",81,null],[12,"rename","","renamed in list, eg `use foo::{bar as baz};`",81,null],[12,"id","","",81,null],[13,"PathListMod","rustc::hir","",81,null],[12,"rename","rustc::hir::PathListItem_","renamed in list, eg `use foo::{self as baz};`",81,null],[12,"id","","",81,null],[4,"ViewPath_","rustc::hir","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",82,null],[13,"ViewPathGlob","","`foo::bar::*`",82,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",82,null],[4,"Visibility","","",null,null],[13,"Public","","",83,null],[13,"Crate","","",83,null],[13,"Restricted","","",83,null],[12,"path","rustc::hir::Visibility","",83,null],[12,"id","","",83,null],[13,"Inherited","rustc::hir","",83,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",84,null],[13,"Tuple","","",84,null],[13,"Unit","","",84,null],[4,"Item_","","",null,null],[13,"ItemExternCrate","","An`extern crate` item, with optional original crate name,",85,null],[13,"ItemUse","","A `use` or `pub use` item",85,null],[13,"ItemStatic","","A `static` item",85,null],[13,"ItemConst","","A `const` item",85,null],[13,"ItemFn","","A function declaration",85,null],[13,"ItemMod","","A module",85,null],[13,"ItemForeignMod","","An external module",85,null],[13,"ItemTy","","A type alias, e.g. `type Foo = Bar&lt;u8&gt;`",85,null],[13,"ItemEnum","","An enum definition, e.g. `enum Foo&lt;A, B&gt; {C&lt;A&gt;, D&lt;B&gt;}`",85,null],[13,"ItemStruct","","A struct definition, e.g. `struct Foo&lt;A&gt; {x: A}`",85,null],[13,"ItemTrait","","Represents a Trait Declaration",85,null],[13,"ItemDefaultImpl","","",85,null],[13,"ItemImpl","","An implementation, eg `impl&lt;A&gt; Trait for Foo { .. }`",85,null],[4,"ForeignItem_","","An item within an `extern` block",null,null],[13,"ForeignItemFn","","A foreign function",86,null],[13,"ForeignItemStatic","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",86,null],[0,"check_attr","","",null,null],[5,"check_crate","rustc::hir::check_attr","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"def","rustc::hir","",null,null],[3,"PathResolution","rustc::hir::def","The result of resolving a path.\nBefore type checking completes, `depth` represents the number of\ntrailing segments which are yet unresolved. Afterwards, if there\nwere no errors, all paths should be fully resolved, with `depth`\nset to `0` and `base_def` representing the final resolution.",null,null],[12,"base_def","","",87,null],[12,"depth","","",87,null],[3,"Export","","",null,null],[12,"name","","",88,null],[12,"def_id","","",88,null],[4,"Def","","",null,null],[13,"Fn","","",89,null],[13,"SelfTy","","",89,null],[13,"Mod","","",89,null],[13,"ForeignMod","","",89,null],[13,"Static","","",89,null],[13,"Const","","",89,null],[13,"AssociatedConst","","",89,null],[13,"Local","","",89,null],[13,"Variant","","",89,null],[13,"Enum","","",89,null],[13,"TyAlias","","",89,null],[13,"AssociatedTy","","",89,null],[13,"Trait","","",89,null],[13,"PrimTy","","",89,null],[13,"TyParam","","",89,null],[13,"Upvar","","",89,null],[13,"Struct","","",89,null],[13,"Label","","",89,null],[13,"Method","","",89,null],[13,"Err","","",89,null],[6,"DefMap","","",null,null],[6,"ExportMap","","",null,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"full_def","","Get the definition, if fully resolved, otherwise panic.",87,null],[11,"def_id","","Get the DefId, if fully resolved, otherwise panic.",87,null],[11,"new","","",87,{"inputs":[{"name":"def"},{"name":"usize"}],"output":{"name":"pathresolution"}}],[11,"clone","","",88,null],[11,"var_id","","",89,null],[11,"def_id","","",89,null],[11,"variant_def_ids","","",89,null],[11,"kind_name","","",89,null],[0,"def_id","rustc::hir","",null,null],[3,"DefIndex","rustc::hir::def_id","A DefIndex is an index into the hir-map for a crate, identifying a\nparticular definition. It should really be considered an interned\nshorthand for a particular DefPath.",null,null],[3,"DefId","","A DefId identifies a particular *definition*, by combining a crate\nindex and a def index.",null,null],[12,"krate","","",90,null],[12,"index","","",90,null],[17,"CRATE_DEF_INDEX","","The crate root is always assigned index 0 by the AST Map code,\nthanks to `NodeCollector::new`.",null,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"new","","",91,{"inputs":[{"name":"usize"}],"output":{"name":"defindex"}}],[11,"from_u32","","",91,{"inputs":[{"name":"u32"}],"output":{"name":"defindex"}}],[11,"as_usize","","",91,null],[11,"as_u32","","",91,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"cmp","","",90,null],[11,"clone","","",90,null],[11,"fmt","","",90,null],[11,"local","","",90,{"inputs":[{"name":"defindex"}],"output":{"name":"defid"}}],[11,"is_local","","",90,null],[0,"fold","rustc::hir","A Folder represents an HIR-&gt;HIR fold; it accepts a HIR piece,\nand returns a piece of the same type.",null,null],[5,"noop_fold_meta_items","rustc::hir::fold","",null,{"inputs":[{"name":"hirvec"},{"name":"t"}],"output":{"name":"hirvec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"hirvec"},{"name":"t"}],"output":{"name":"hirvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_name","","",null,{"inputs":[{"name":"name"},{"name":"t"}],"output":{"name":"name"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"hirvec"},{"name":"t"}],"output":{"name":"hirvec"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"hirvec"},{"name":"t"}],"output":{"name":"hirvec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"hirvec"},{"name":"t"}],"output":{"name":"hirvec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_underscore","","",null,{"inputs":[{"name":"item_"},{"name":"t"}],"output":{"name":"item_"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"traititem"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"implitem"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item_id","","",null,{"inputs":[{"name":"itemid"},{"name":"t"}],"output":{"name":"itemid"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"stmt"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",92,null],[11,"fold_meta_items","","",92,null],[11,"fold_meta_item","","",92,null],[11,"fold_view_path","","",92,null],[11,"fold_foreign_item","","",92,null],[11,"fold_item","","",92,null],[11,"fold_item_id","","",92,null],[11,"fold_struct_field","","",92,null],[11,"fold_item_underscore","","",92,null],[11,"fold_trait_item","","",92,null],[11,"fold_impl_item","","",92,null],[11,"fold_fn_decl","","",92,null],[11,"fold_block","","",92,null],[11,"fold_stmt","","",92,null],[11,"fold_arm","","",92,null],[11,"fold_pat","","",92,null],[11,"fold_decl","","",92,null],[11,"fold_expr","","",92,null],[11,"fold_ty","","",92,null],[11,"fold_ty_binding","","",92,null],[11,"fold_mod","","",92,null],[11,"fold_foreign_mod","","",92,null],[11,"fold_variant","","",92,null],[11,"fold_name","","",92,null],[11,"fold_usize","","",92,null],[11,"fold_path","","",92,null],[11,"fold_path_parameters","","",92,null],[11,"fold_angle_bracketed_parameter_data","","",92,null],[11,"fold_parenthesized_parameter_data","","",92,null],[11,"fold_local","","",92,null],[11,"fold_lifetime","","",92,null],[11,"fold_lifetime_def","","",92,null],[11,"fold_attribute","","",92,null],[11,"fold_arg","","",92,null],[11,"fold_generics","","",92,null],[11,"fold_trait_ref","","",92,null],[11,"fold_poly_trait_ref","","",92,null],[11,"fold_variant_data","","",92,null],[11,"fold_lifetimes","","",92,null],[11,"fold_lifetime_defs","","",92,null],[11,"fold_ty_param","","",92,null],[11,"fold_ty_params","","",92,null],[11,"fold_opt_lifetime","","",92,null],[11,"fold_opt_bounds","","",92,null],[11,"fold_bounds","","",92,null],[11,"fold_ty_param_bound","","",92,null],[11,"fold_mt","","",92,null],[11,"fold_field","","",92,null],[11,"fold_where_clause","","",92,null],[11,"fold_where_predicate","","",92,null],[11,"new_id","","called for the `id` on each declaration",92,null],[11,"map_id","","called for ids that are references (e.g., ItemDef)",92,null],[11,"new_span","","",92,null],[0,"intravisit","rustc::hir","HIR walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `intravisit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[3,"IdRange","rustc::hir::intravisit","",null,null],[12,"min","","",93,null],[12,"max","","",93,null],[3,"IdRangeComputingVisitor","","",null,null],[12,"result","","",94,null],[3,"IdVisitor","","",null,null],[4,"FnKind","","",null,null],[13,"ItemFn","","fn foo() or extern &quot;Abi&quot; fn foo()",95,null],[13,"Method","","fn foo(&amp;self)",95,null],[13,"Closure","","|x, y| {}",95,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_crate","","Walks the contents of a crate. See also `Crate::visit_all_items`.",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_decl_nopat","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_decl","","",null,{"inputs":[{"name":"v"},{"name":"decl"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[5,"compute_id_range_for_fn_body","","Computes the id range for a single fn body, ignoring nested items.",null,{"inputs":[{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":{"name":"idrange"}}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `intravisit::walk_mod`.",null,null],[11,"visit_nested_item","","Invoked when a nested item is encountered. By default, does\nnothing. If you want a deep walk, you need to override to\nfetch the item contents. But most of the time, it is easier\n(and better) to invoke `Crate::visit_all_items`, which visits\nall items in the crate in some order (but doesn&#39;t respect\nnesting).",96,null],[11,"visit_item","","Visit the top-level item and (optionally) nested items. See\n`visit_nested_item` for details.",96,null],[11,"visit_name","","",96,null],[11,"visit_mod","","",96,null],[11,"visit_foreign_item","","",96,null],[11,"visit_local","","",96,null],[11,"visit_block","","",96,null],[11,"visit_stmt","","",96,null],[11,"visit_arm","","",96,null],[11,"visit_pat","","",96,null],[11,"visit_decl","","",96,null],[11,"visit_expr","","",96,null],[11,"visit_expr_post","","",96,null],[11,"visit_ty","","",96,null],[11,"visit_generics","","",96,null],[11,"visit_fn","","",96,null],[11,"visit_trait_item","","",96,null],[11,"visit_impl_item","","",96,null],[11,"visit_trait_ref","","",96,null],[11,"visit_ty_param_bound","","",96,null],[11,"visit_poly_trait_ref","","",96,null],[11,"visit_variant_data","","",96,null],[11,"visit_struct_field","","",96,null],[11,"visit_enum_def","","",96,null],[11,"visit_variant","","",96,null],[11,"visit_lifetime","","",96,null],[11,"visit_lifetime_def","","",96,null],[11,"visit_path","","",96,null],[11,"visit_path_list_item","","",96,null],[11,"visit_path_segment","","",96,null],[11,"visit_path_parameters","","",96,null],[11,"visit_assoc_type_binding","","",96,null],[11,"visit_attribute","","",96,null],[11,"visit_macro_def","","",96,null],[11,"visit_vis","","",96,null],[8,"IdVisitingOperation","","",null,null],[10,"visit_id","","",97,null],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"clone","","",95,null],[11,"attrs","","",95,null],[11,"fmt","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"clone","","",93,null],[11,"max","","",93,{"inputs":[],"output":{"name":"idrange"}}],[11,"empty","","",93,null],[11,"add","","",93,null],[11,"new","","",94,{"inputs":[],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",94,null],[11,"visit_id","","",94,null],[11,"new","","",98,{"inputs":[{"name":"o"}],"output":{"name":"idvisitor"}}],[11,"visit_mod","","",98,null],[11,"visit_foreign_item","","",98,null],[11,"visit_item","","",98,null],[11,"visit_local","","",98,null],[11,"visit_block","","",98,null],[11,"visit_stmt","","",98,null],[11,"visit_pat","","",98,null],[11,"visit_expr","","",98,null],[11,"visit_ty","","",98,null],[11,"visit_generics","","",98,null],[11,"visit_fn","","",98,null],[11,"visit_struct_field","","",98,null],[11,"visit_variant_data","","",98,null],[11,"visit_trait_item","","",98,null],[11,"visit_impl_item","","",98,null],[11,"visit_lifetime","","",98,null],[11,"visit_lifetime_def","","",98,null],[11,"visit_trait_ref","","",98,null],[0,"lowering","rustc::hir","",null,null],[3,"LoweringContext","rustc::hir::lowering","",null,null],[3,"DummyResolver","","",null,null],[5,"lower_crate","","",null,{"inputs":[{"name":"crate"},{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"crate"}}],[8,"Resolver","","",null,null],[10,"resolve_generated_global_path","","",99,null],[10,"get_resolution","","",99,null],[10,"record_resolution","","",99,null],[10,"definitions","","",99,null],[11,"resolve_generated_global_path","","",100,null],[11,"get_resolution","","",100,null],[11,"record_resolution","","",100,null],[11,"definitions","","",100,null],[11,"testing_context","","",101,{"inputs":[{"name":"nodeidassigner"},{"name":"resolver"}],"output":{"name":"self"}}],[11,"lower_item","","",101,null],[0,"map","rustc::hir","",null,null],[3,"Forest","rustc::hir::map","Stores a crate and any number of inlined items from other crates.",null,null],[12,"dep_graph","","",102,null],[3,"Map","","Represents a mapping from Node IDs to AST elements and their parent\nNode IDs",null,null],[12,"forest","","The backing storage for all the AST nodes.",103,null],[12,"dep_graph","","Same as the dep_graph in forest, just available with one fewer\nderef. This is a gratuitious micro-optimization.",103,null],[3,"NodesMatchingSuffix","","",null,null],[4,"Node","","",null,null],[13,"NodeItem","","",104,null],[13,"NodeForeignItem","","",104,null],[13,"NodeTraitItem","","",104,null],[13,"NodeImplItem","","",104,null],[13,"NodeVariant","","",104,null],[13,"NodeExpr","","",104,null],[13,"NodeStmt","","",104,null],[13,"NodeLocal","","",104,null],[13,"NodePat","","",104,null],[13,"NodeBlock","","",104,null],[13,"NodeStructCtor","","NodeStructCtor represents a tuple struct.",104,null],[13,"NodeLifetime","","",104,null],[13,"NodeTyParam","","",104,null],[4,"MapEntry","","Represents an entry and its parent NodeID.\nThe odd layout is to bring down the total size.",null,null],[13,"NotPresent","","Placeholder for holes in the map.",105,null],[13,"EntryItem","","All the node types, with a parent ID.",105,null],[13,"EntryForeignItem","","",105,null],[13,"EntryTraitItem","","",105,null],[13,"EntryImplItem","","",105,null],[13,"EntryVariant","","",105,null],[13,"EntryExpr","","",105,null],[13,"EntryStmt","","",105,null],[13,"EntryLocal","","",105,null],[13,"EntryPat","","",105,null],[13,"EntryBlock","","",105,null],[13,"EntryStructCtor","","",105,null],[13,"EntryLifetime","","",105,null],[13,"EntryTyParam","","",105,null],[13,"RootCrate","","Roots for node trees.",105,null],[13,"RootInlinedParent","","",105,null],[5,"collect_definitions","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"definitions"}}],[5,"map_crate","","",null,{"inputs":[{"name":"forest"},{"name":"definitions"}],"output":{"name":"map"}}],[5,"map_decoded_item","","Used for items loaded from external crate that are being inlined into this\ncrate.",null,{"inputs":[{"name":"map"},{"name":"defpath"},{"name":"defid"},{"name":"inlineditem"},{"name":"f"}],"output":{"name":"inlineditem"}}],[0,"blocks","","This module provides a simplified abstraction for working with\ncode blocks identified by their integer node-id.  In particular,\nit captures a common set of attributes that all &quot;function-like\nthings&quot; (represented by `FnLike` instances) share.  For example,\nall `FnLike` instances have a type signature (be it explicit or\ninferred).  And all `FnLike` instances have a body, i.e. the code\nthat is run when the function-like thing it represents is invoked.",null,null],[3,"FnLikeNode","rustc::hir::map::blocks","An FnLikeNode is a Node that is like a fn, in that it has a decl\nand a body (as well as a NodeId, a span, etc).",null,null],[3,"FnParts","","Components shared by fn-like things (fn items, methods, closures).",null,null],[12,"decl","","",106,null],[12,"body","","",106,null],[12,"kind","","",106,null],[12,"span","","",106,null],[12,"id","","",106,null],[4,"Code","","Carries either an FnLikeNode or a Block, as these are the two\nconstructs that correspond to &quot;code&quot; (as in, something from which\nwe can construct a control-flow graph).",null,null],[13,"FnLikeCode","","",107,null],[13,"BlockCode","","",107,null],[8,"MaybeFnLike","","MaybeFnLike wraps a method that indicates if an object\ncorresponds to some FnLikeNode.",null,null],[10,"is_fn_like","","",108,null],[11,"clone","","",109,null],[11,"is_fn_like","rustc::hir","",51,null],[11,"is_fn_like","","",34,null],[11,"is_fn_like","","",30,null],[11,"clone","rustc::hir::map::blocks","",107,null],[11,"id","","",107,null],[11,"from_node","","Attempts to construct a Code from presumed FnLike or Block node input.",107,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"from_node","","Attempts to construct a FnLikeNode from presumed FnLike node input.",109,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"to_fn_parts","","",109,null],[11,"body","","",109,null],[11,"decl","","",109,null],[11,"span","","",109,null],[11,"id","","",109,null],[11,"kind","","",109,null],[0,"definitions","rustc::hir::map","",null,null],[3,"Definitions","rustc::hir::map::definitions","",null,null],[3,"DefKey","","A unique identifier that we can use to lookup a definition\nprecisely. It combines the index of the definition&#39;s parent (if\nany) with a `DisambiguatedDefPathData`.",null,null],[12,"parent","","Parent path.",110,null],[12,"disambiguated_data","","Identifier of this node.",110,null],[3,"DisambiguatedDefPathData","","Pair of `DefPathData` and an integer disambiguator. The integer is\nnormally 0, but in the event that there are multiple defs with the\nsame `parent` and `data`, we use this field to disambiguate\nbetween them. This introduces some artificial ordering dependency\nbut means that if you have (e.g.) two impls for the same type in\nthe same module, they do get distinct def-ids.",null,null],[12,"data","","",111,null],[12,"disambiguator","","",111,null],[3,"DefData","","For each definition, we track the following data.  A definition\nhere is defined somewhat circularly as &quot;something with a def-id&quot;,\nbut it generally corresponds to things like structs, enums, etc.\nThere are also some rather random cases (like const initializer\nexpressions) that are mostly just leftovers.",null,null],[12,"key","","",112,null],[12,"node_id","","Local ID within the HIR.",112,null],[3,"DefPath","","",null,null],[12,"data","","the path leading from the crate root to the item",113,null],[12,"krate","","what krate root is this path relative to?",113,null],[3,"InlinedRootPath","","Root of an inlined item. We track the `DefPath` of the item within\nthe original crate but also its def-id. This is kind of an\naugmented version of a `DefPath` that includes a `DefId`. This is\nall sort of ugly but the hope is that inlined items will be going\naway soon anyway.",null,null],[12,"data","","",114,null],[12,"def_id","","",114,null],[4,"DefPathData","","",null,null],[13,"CrateRoot","","",115,null],[13,"InlinedRoot","","",115,null],[13,"Misc","","",115,null],[13,"Impl","","",115,null],[13,"TypeNs","","",115,null],[13,"ValueNs","","",115,null],[13,"Module","","",115,null],[13,"MacroDef","","",115,null],[13,"ClosureExpr","","",115,null],[13,"TypeParam","","",115,null],[13,"LifetimeDef","","",115,null],[13,"EnumVariant","","",115,null],[13,"Field","","",115,null],[13,"StructCtor","","",115,null],[13,"Initializer","","",115,null],[13,"Binding","","",115,null],[11,"clone","","",116,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"hash","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"hash","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"hash","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"fmt","","",113,null],[11,"clone","","",113,null],[11,"is_local","","",113,null],[11,"make","","",113,{"inputs":[{"name":"cratenum"},{"name":"defindex"},{"name":"fn"}],"output":{"name":"defpath"}}],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",114,null],[11,"hash","","",114,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"decode","","",115,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",115,null],[11,"hash","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"new","","",116,{"inputs":[],"output":{"name":"definitions"}}],[11,"len","","",116,null],[11,"def_key","","",116,null],[11,"def_path","","Returns the path from the crate root to `index`. The root\nnodes are not included in the path (i.e., this will be an\nempty vector for the crate root). For an inlined item, this\nwill be the path of the item in the external crate (but the\npath will begin with the path to the external crate).",116,null],[11,"opt_def_index","","",116,null],[11,"opt_local_def_id","","",116,null],[11,"local_def_id","","",116,null],[11,"as_local_node_id","","",116,null],[11,"retrace_path","","",116,null],[11,"create_def_with_parent","","",116,null],[11,"as_interned_str","","",115,null],[11,"to_string","","",115,null],[8,"FoldOps","rustc::hir::map","",null,null],[11,"new_id","","",117,null],[11,"new_def_id","","",117,null],[11,"new_span","","",117,null],[8,"NodePrinter","","",null,null],[10,"print_node","","",118,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"new","","",102,{"inputs":[{"name":"crate"},{"name":"depgraph"}],"output":{"name":"forest"}}],[11,"krate","","",102,null],[11,"clone","","",103,null],[11,"num_local_def_ids","","",103,null],[11,"def_key","","",103,null],[11,"def_path_from_id","","",103,null],[11,"def_path","","",103,null],[11,"retrace_path","","",103,null],[11,"local_def_id","","",103,null],[11,"opt_local_def_id","","",103,null],[11,"as_local_node_id","","",103,null],[11,"krate","","",103,null],[11,"krate_attrs","","Get the attributes on the krate. This is preferable to\ninvoking `krate.attrs` because it registers a tighter\ndep-graph access.",103,null],[11,"get","","Retrieve the Node corresponding to `id`, panicking if it cannot\nbe found.",103,null],[11,"get_if_local","","",103,null],[11,"find","","Retrieve the Node corresponding to `id`, returning None if\ncannot be found.",103,null],[11,"get_parent_node","","Similar to get_parent, returns the parent node id or id if there is no\nparent.\nThis function returns the immediate parent in the AST, whereas get_parent\nreturns the enclosing item. Note that this might not be the actual parent\nnode in the AST - some kinds of nodes are not in the map and these will\nnever appear as the parent_node. So you can always walk the parent_nodes\nfrom a node to the root of the ast (unless you get the same id back here\nthat can happen if the id is not in the map itself or is just weird).",103,null],[11,"is_argument","","Check if the node is an argument. An argument is a local variable whose\nimmediate parent is an item or a closure.",103,null],[11,"get_parent","","Retrieve the NodeId for `id`&#39;s parent item, or `id` itself if no\nparent item is in this map. The &quot;parent item&quot; is the closest parent node\nin the AST which is recorded by the map and is an item, either an item\nin a module, trait, or impl.",103,null],[11,"get_module_parent","","Returns the NodeId of `id`&#39;s nearest module parent, or `id` itself if no\nmodule parent is in this map.",103,null],[11,"get_enclosing_scope","","Returns the nearest enclosing scope. A scope is an item or block.\nFIXME it is not clear to me that all items qualify as scopes - statics\nand associated types probably shouldn&#39;t, for example. Behaviour in this\nregard should be expected to be highly unstable.",103,null],[11,"get_parent_did","","",103,null],[11,"get_foreign_abi","","",103,null],[11,"expect_item","","",103,null],[11,"expect_trait_item","","",103,null],[11,"expect_struct","","",103,null],[11,"expect_variant","","",103,null],[11,"expect_foreign_item","","",103,null],[11,"expect_expr","","",103,null],[11,"name","","Returns the name associated with the given NodeId&#39;s AST.",103,null],[11,"attrs","","Given a node ID, get a list of attributes associated with the AST\ncorresponding to the Node ID",103,null],[11,"nodes_matching_suffix","","Returns an iterator that yields the node id&#39;s with paths that\nmatch `parts`.  (Requires `parts` is non-empty.)",103,null],[11,"opt_span","","",103,null],[11,"span","","",103,null],[11,"span_if_local","","",103,null],[11,"def_id_span","","",103,null],[11,"node_to_string","","",103,null],[11,"node_to_user_string","","",103,null],[11,"next","","",119,null],[0,"pat_util","rustc::hir","",null,null],[5,"pat_id_map","rustc::hir::pat_util","",null,{"inputs":[{"name":"refcell"},{"name":"pat"}],"output":{"name":"patidmap"}}],[5,"pat_is_refutable","","",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_variant_or_struct","","",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_const","","",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_resolved_const","","",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_binding","","",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_is_binding_or_wild","","",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_bindings","","Call `it` on every &quot;binding&quot; in a pattern, e.g., on `a` in\n`match foo() { Some(a) =&gt; (), None =&gt; () }`",null,{"inputs":[{"name":"refcell"},{"name":"pat"},{"name":"i"}],"output":null}],[5,"pat_contains_bindings","","Checks if the pattern contains any patterns that bind something to\nan ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"pat_contains_ref_binding","","Checks if the pattern contains any `ref` or `ref mut` bindings,\nand if yes whether its containing mutable ones or just immutables ones.",null,{"inputs":[{"name":"refcell"},{"name":"pat"}],"output":{"name":"option"}}],[5,"arm_contains_ref_binding","","Checks if the patterns for this arm contain any `ref` or `ref mut`\nbindings, and if yes whether its containing mutable ones or just immutables ones.",null,{"inputs":[{"name":"refcell"},{"name":"arm"}],"output":{"name":"option"}}],[5,"pat_contains_bindings_or_wild","","Checks if the pattern contains any patterns that bind something to\nan ident or wildcard, e.g. `foo`, or `Foo(_)`, `foo @ Bar(..)`,",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"bool"}}],[5,"simple_name","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"option"}}],[5,"def_to_path","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"path"}}],[5,"necessary_variants","","Return variants that are necessary to exist for the pattern to match.",null,{"inputs":[{"name":"defmap"},{"name":"pat"}],"output":{"name":"vec"}}],[6,"PatIdMap","","",null,null],[0,"print","rustc::hir","",null,null],[3,"NoAnn","rustc::hir::print","",null,null],[3,"State","","",null,null],[12,"s","","",120,null],[4,"AnnNode","","",null,null],[13,"NodeName","","",121,null],[13,"NodeBlock","","",121,null],[13,"NodeItem","","",121,null],[13,"NodeSubItem","","",121,null],[13,"NodeExpr","","",121,null],[13,"NodePat","","",121,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"},{"name":"option"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"name_to_string","","",null,{"inputs":[{"name":"name"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"name"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"indent_unit","","",null,null],[17,"default_columns","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",122,null],[11,"post","","",122,null],[11,"clone","","",123,null],[11,"writer","","",120,null],[11,"boxes","","",120,null],[11,"comments","","",120,null],[11,"cur_cmnt_and_lit","","",120,null],[11,"literals","","",120,null],[11,"new_from_input","","",120,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"},{"name":"option"}],"output":{"name":"state"}}],[11,"new","","",120,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"cbox","","",120,null],[11,"nbsp","","",120,null],[11,"word_nbsp","","",120,null],[11,"head","","",120,null],[11,"bopen","","",120,null],[11,"bclose_","","",120,null],[11,"bclose_maybe_open","","",120,null],[11,"bclose","","",120,null],[11,"in_cbox","","",120,null],[11,"space_if_not_bol","","",120,null],[11,"break_offset_if_not_bol","","",120,null],[11,"synth_comment","","",120,null],[11,"commasep_cmnt","","",120,null],[11,"commasep_exprs","","",120,null],[11,"print_mod","","",120,null],[11,"print_foreign_mod","","",120,null],[11,"print_opt_lifetime","","",120,null],[11,"print_type","","",120,null],[11,"print_foreign_item","","",120,null],[11,"print_item_id","","",120,null],[11,"print_item","","Pretty-print an item",120,null],[11,"print_enum_def","","",120,null],[11,"print_variants","","",120,null],[11,"print_visibility","","",120,null],[11,"print_struct","","",120,null],[11,"print_variant","","",120,null],[11,"print_method_sig","","",120,null],[11,"print_trait_item","","",120,null],[11,"print_impl_item","","",120,null],[11,"print_stmt","","",120,null],[11,"print_block","","",120,null],[11,"print_block_unclosed","","",120,null],[11,"print_block_unclosed_indent","","",120,null],[11,"print_block_with_attrs","","",120,null],[11,"print_block_maybe_unclosed","","",120,null],[11,"print_if","","",120,null],[11,"print_if_let","","",120,null],[11,"print_expr_maybe_paren","","",120,null],[11,"print_expr","","",120,null],[11,"print_local_decl","","",120,null],[11,"print_decl","","",120,null],[11,"print_usize","","",120,null],[11,"print_name","","",120,null],[11,"print_for_decl","","",120,null],[11,"print_pat","","",120,null],[11,"print_fn","","",120,null],[11,"print_fn_args_and_ret","","",120,null],[11,"print_fn_block_args","","",120,null],[11,"print_capture_clause","","",120,null],[11,"print_bounds","","",120,null],[11,"print_lifetime","","",120,null],[11,"print_lifetime_def","","",120,null],[11,"print_generics","","",120,null],[11,"print_ty_param","","",120,null],[11,"print_where_clause","","",120,null],[11,"print_view_path","","",120,null],[11,"print_mutability","","",120,null],[11,"print_mt","","",120,null],[11,"print_arg","","",120,null],[11,"print_fn_output","","",120,null],[11,"print_ty_fn","","",120,null],[11,"maybe_print_trailing_comment","","",120,null],[11,"print_remaining_comments","","",120,null],[11,"print_opt_abi_and_extern_if_nondefault","","",120,null],[11,"print_extern_opt_abi","","",120,null],[11,"print_fn_header_info","","",120,null],[11,"print_unsafety","","",120,null],[0,"svh","rustc::hir","Calculation and management of a Strict Version Hash for crates",null,null],[3,"Svh","rustc::hir::svh","",null,null],[11,"fmt","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"hash","","",124,null],[11,"clone","","",124,null],[11,"new","","Create a new `Svh` given the hash. If you actually want to\ncompute the SVH from some HIR, you want the `calculate_svh`\nfunction found in `librustc_trans`.",124,{"inputs":[{"name":"string"}],"output":{"name":"svh"}}],[11,"from_hash","","",124,{"inputs":[{"name":"u64"}],"output":{"name":"svh"}}],[11,"as_str","","",124,null],[11,"fmt","","",124,null],[6,"HirVec","rustc::hir","HIR doesn&#39;t commit to a concrete storage type and have its own alias for a vector.\nIt can be `Vec`, `P&lt;[T]&gt;` or potentially `Box&lt;[T]&gt;`, or some other container with similar\nbehavior. Unlike AST, HIR is mostly a static structure, so we can use an owned slice instead\nof `Vec` to avoid keeping extra capacity.",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","",null,null],[6,"BinOp","","",null,null],[6,"Stmt","","A statement",null,null],[6,"Decl","","",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"FreevarMap","","",null,null],[6,"CaptureModeMap","","",null,null],[6,"TraitMap","","",null,null],[6,"GlobMap","","",null,null],[11,"hash","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"hash","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"hash","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",12,null],[11,"from_name","","Convert a span and an identifier to the corresponding\n1-segment path.",12,{"inputs":[{"name":"span"},{"name":"name"}],"output":{"name":"path"}}],[11,"fmt","","",13,null],[11,"hash","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"none","","",55,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",55,null],[11,"has_lifetimes","","",55,null],[11,"has_types","","",55,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",55,null],[11,"lifetimes","","",55,null],[11,"bindings","","",55,null],[11,"fmt","","",14,null],[11,"hash","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",15,null],[11,"hash","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"clone","","",57,null],[11,"fmt","","",16,null],[11,"hash","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",17,null],[11,"hash","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"empty","","",17,{"inputs":[],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",17,null],[11,"is_type_parameterized","","",17,null],[11,"is_parameterized","","",17,null],[11,"fmt","","",18,null],[11,"hash","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",58,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",19,null],[11,"hash","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"hash","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",21,null],[11,"hash","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"item","","",22,null],[11,"visit_all_items","","Visits all items in the crate in some determinstic (but\nunspecified) order. If you just need to process every item,\nbut don&#39;t care about nesting, this method is the best choice.",22,null],[11,"fmt","","",23,null],[11,"hash","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",24,null],[11,"hash","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"hash","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"walk","","",25,null],[11,"fmt","","",26,null],[11,"hash","","",26,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"clone","","",62,null],[11,"as_str","","",62,null],[11,"is_lazy","","",62,null],[11,"is_shift","","",62,null],[11,"is_comparison","","",62,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",62,null],[11,"fmt","","",63,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"clone","","",63,null],[11,"as_str","","",63,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",63,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"attrs","","",64,null],[11,"id","","",64,null],[11,"fmt","","",27,null],[11,"hash","","",27,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"attrs","","",65,null],[11,"fmt","","",28,null],[11,"hash","","",28,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"hash","","",29,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"clone","","",29,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"clone","","",67,null],[11,"hash","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",31,null],[11,"hash","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",32,null],[11,"hash","","",32,null],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"clone","","",32,null],[11,"fmt","","",33,null],[11,"hash","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",34,null],[11,"hash","","",34,null],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",35,null],[11,"hash","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"clone","","",35,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",36,null],[11,"hash","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"clone","","",36,null],[11,"hash","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"fmt","","",73,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",38,null],[11,"hash","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"clone","","",38,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",39,null],[11,"hash","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"clone","","",39,null],[11,"fmt","","",40,null],[11,"hash","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",41,null],[11,"hash","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"to_self","","",41,null],[11,"is_self","","",41,null],[11,"fmt","","",42,null],[11,"hash","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"has_self","","",42,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"clone","","",78,null],[11,"is_final","","",78,null],[11,"is_default","","",78,null],[11,"fmt","","",76,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"span","","",80,null],[11,"fmt","","",43,null],[11,"hash","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"clone","","",43,null],[11,"fmt","","",44,null],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"fmt","","",46,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"id","","",81,null],[11,"name","","",81,null],[11,"rename","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"is_positional","","",49,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fields","","",84,null],[11,"id","","",84,null],[11,"is_struct","","",84,null],[11,"is_tuple","","",84,null],[11,"is_unit","","",84,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"descriptive_variant","","",85,null],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"descriptive_variant","","",86,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[0,"infer","rustc","See the Book for more information.",null,null],[3,"TypeFreshener","rustc::infer","",null,null],[3,"InferOk","","",null,null],[12,"value","","",125,null],[12,"obligations","","",125,null],[3,"InferCtxt","","",null,null],[12,"tcx","","",126,null],[12,"tables","","",126,null],[12,"parameter_environment","","",126,null],[12,"selection_cache","","Caches the results of trait selection. This cache is used\nfor things that have to do with the parameters in scope.",126,null],[12,"evaluation_cache","","Caches the results of trait evaluation.",126,null],[12,"reported_trait_errors","","",126,null],[3,"TypeTrace","","The trace designates the path through inference that we took to\nencounter an error or subtyping constraint.",null,null],[3,"InferCtxtBuilder","","Helper type of a temporary returned by tcx.infer_ctxt(...).\nNecessary because we can&#39;t write the following bound:\nF: for&lt;&#39;b, &#39;tcx&gt; where &#39;gcx: &#39;tcx FnOnce(InferCtxt&lt;&#39;b, &#39;gcx, &#39;tcx&gt;).",null,null],[3,"CombinedSnapshot","","",null,null],[4,"InferTables","","A version of &amp;ty::Tables which can be global or local.\nOnly the local version supports borrow_mut.",null,null],[13,"Global","","",127,null],[13,"Local","","",127,null],[4,"TypeOrigin","","Why did we require that the two types be related?",null,null],[13,"Misc","","",128,null],[13,"MethodCompatCheck","","",128,null],[13,"ExprAssignable","","",128,null],[13,"RelateTraitRefs","","",128,null],[13,"RelateSelfType","","",128,null],[13,"RelateOutputImplTypes","","",128,null],[13,"MatchExpressionArm","","",128,null],[13,"IfExpression","","",128,null],[13,"IfExpressionWithNoElse","","",128,null],[13,"RangeExpression","","",128,null],[13,"EquatePredicate","","",128,null],[4,"ValuePairs","","See `error_reporting.rs` for more details",null,null],[13,"Types","","",129,null],[13,"TraitRefs","","",129,null],[13,"PolyTraitRefs","","",129,null],[4,"SubregionOrigin","","The origin of a `r1 &lt;= r2` constraint.",null,null],[13,"Subtype","","",130,null],[13,"InfStackClosure","","",130,null],[13,"InvokeClosure","","",130,null],[13,"DerefPointer","","",130,null],[13,"FreeVariable","","",130,null],[13,"IndexSlice","","",130,null],[13,"RelateObjectBound","","",130,null],[13,"RelateParamBound","","",130,null],[13,"RelateRegionParamBound","","",130,null],[13,"RelateDefaultParamBound","","",130,null],[13,"Reborrow","","",130,null],[13,"ReborrowUpvar","","",130,null],[13,"DataBorrowed","","",130,null],[13,"ReferenceOutlivesReferent","","",130,null],[13,"ParameterInScope","","",130,null],[13,"ExprTypeIsNotInScope","","",130,null],[13,"BindingTypeIsNotValidAtDecl","","",130,null],[13,"CallRcvr","","",130,null],[13,"CallArg","","",130,null],[13,"CallReturn","","",130,null],[13,"Operand","","",130,null],[13,"AddrOf","","",130,null],[13,"AutoBorrow","","",130,null],[13,"SafeDestructor","","",130,null],[4,"ParameterOrigin","","Places that type/region parameters can appear.",null,null],[13,"Path","","",131,null],[13,"MethodCall","","",131,null],[13,"OverloadedOperator","","",131,null],[13,"OverloadedDeref","","",131,null],[4,"LateBoundRegionConversionTime","","Times when we replace late-bound regions with variables:",null,null],[13,"FnCall","","when a fn is called",132,null],[13,"HigherRankedType","","when two higher-ranked types are compared",132,null],[13,"AssocTypeProjection","","when projecting an associated type",132,null],[4,"RegionVariableOrigin","","Reasons to create a region inference variable",null,null],[13,"MiscVariable","","",133,null],[13,"PatternRegion","","",133,null],[13,"AddrOfRegion","","",133,null],[13,"Autoref","","",133,null],[13,"Coercion","","",133,null],[13,"EarlyBoundRegion","","",133,null],[13,"LateBoundRegion","","",133,null],[13,"UpvarRegion","","",133,null],[13,"BoundRegionInCoherence","","",133,null],[4,"FixupError","","",null,null],[13,"UnresolvedIntTy","","",134,null],[13,"UnresolvedFloatTy","","",134,null],[13,"UnresolvedTy","","",134,null],[0,"bivariate","","Applies the &quot;bivariance relationship&quot; to two types and/or regions.\nIf (A,B) are bivariant then either A &lt;: B or B &lt;: A. It occurs\nwhen type/lifetime parameters are unconstrained. Usually this is\nan error, but we permit it in the specific case where a type\nparameter is constrained in a where-clause via an associated type.",null,null],[3,"Bivariate","rustc::infer::bivariate","",null,null],[11,"new","","",135,{"inputs":[{"name":"combinefields"}],"output":{"name":"bivariate"}}],[11,"tag","","",135,null],[11,"tcx","","",135,null],[11,"a_is_expected","","",135,null],[11,"relate_with_variance","","",135,null],[11,"tys","","",135,null],[11,"regions","","",135,null],[11,"binders","","",135,null],[0,"combine","rustc::infer","",null,null],[3,"CombineFields","rustc::infer::combine","",null,null],[12,"infcx","","",136,null],[12,"a_is_expected","","",136,null],[12,"trace","","",136,null],[12,"cause","","",136,null],[12,"obligations","","",136,null],[8,"RelateResultCompare","","",null,null],[10,"compare","","",137,null],[11,"clone","","",136,null],[11,"super_combine_tys","rustc::infer","",126,null],[11,"tcx","rustc::infer::combine","",136,null],[11,"switch_expected","","",136,null],[11,"equate","","",136,null],[11,"bivariate","","",136,null],[11,"sub","","",136,null],[11,"lub","","",136,null],[11,"glb","","",136,null],[11,"instantiate","","",136,null],[0,"equate","rustc::infer","",null,null],[3,"Equate","rustc::infer::equate","Ensures `a` is made equal to `b`. Returns `a` on success.",null,null],[11,"new","","",138,{"inputs":[{"name":"combinefields"}],"output":{"name":"equate"}}],[11,"obligations","","",138,null],[11,"tag","","",138,null],[11,"tcx","","",138,null],[11,"a_is_expected","","",138,null],[11,"relate_with_variance","","",138,null],[11,"tys","","",138,null],[11,"regions","","",138,null],[11,"binders","","",138,null],[0,"error_reporting","rustc::infer","Error Reporting Code for the inference engine",null,null],[8,"Resolvable","rustc::infer::error_reporting","",null,null],[10,"resolve","","",139,null],[11,"report_region_errors","rustc::infer","",126,null],[11,"report_and_explain_type_error","","",126,null],[0,"glb","","",null,null],[3,"Glb","rustc::infer::glb","&quot;Greatest lower bound&quot; (common subtype)",null,null],[11,"new","","",140,{"inputs":[{"name":"combinefields"}],"output":{"name":"glb"}}],[11,"obligations","","",140,null],[11,"tag","","",140,null],[11,"tcx","","",140,null],[11,"a_is_expected","","",140,null],[11,"relate_with_variance","","",140,null],[11,"tys","","",140,null],[11,"regions","","",140,null],[11,"binders","","",140,null],[11,"infcx","","",140,null],[11,"relate_bound","","",140,null],[11,"higher_ranked_sub","rustc::infer::combine","",136,null],[11,"higher_ranked_lub","","",136,null],[11,"higher_ranked_glb","","",136,null],[11,"skolemize_late_bound_regions","rustc::infer","Replace all regions bound by `binder` with skolemized regions and\nreturn a map indicating which bound-region was replaced with what\nskolemized region. This is the first step of checking subtyping\nwhen higher-ranked things are involved. See `README.md` for more\ndetails.",126,null],[11,"leak_check","","Searches the region constriants created since `snapshot` was started\nand checks to determine whether any of the skolemized regions created\nin `skol_map` would &quot;escape&quot; -- meaning that they are related to\nother regions in some way. If so, the higher-ranked subtyping doesn&#39;t\nhold. See `README.md` for more details.",126,null],[11,"plug_leaks","","This code converts from skolemized regions back to late-bound\nregions. It works by replacing each region in the taint set of a\nskolemized region with a bound-region. The bound region will be bound\nby the outer-most binder in `value`; the caller must ensure that there is\nsuch a binder and it is the right place.",126,null],[0,"lattice","","# Lattice Variables",null,null],[5,"super_lattice_tys","rustc::infer::lattice","",null,{"inputs":[{"name":"l"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[8,"LatticeDir","","",null,null],[10,"infcx","","",141,null],[10,"relate_bound","","",141,null],[0,"lub","rustc::infer","",null,null],[3,"Lub","rustc::infer::lub","&quot;Least upper bound&quot; (common supertype)",null,null],[11,"new","","",142,{"inputs":[{"name":"combinefields"}],"output":{"name":"lub"}}],[11,"obligations","","",142,null],[11,"tag","","",142,null],[11,"tcx","","",142,null],[11,"a_is_expected","","",142,null],[11,"relate_with_variance","","",142,null],[11,"tys","","",142,null],[11,"regions","","",142,null],[11,"binders","","",142,null],[11,"infcx","","",142,null],[11,"relate_bound","","",142,null],[0,"region_inference","rustc::infer","See README.md",null,null],[3,"TwoRegions","rustc::infer::region_inference","",null,null],[3,"SameRegions","","SameRegions is used to group regions that we think are the same and would\nlike to indicate so to the user.\nFor example, the following function\n```\nstruct Foo { bar: i32 }\nfn foo2&lt;&#39;a, &#39;b&gt;(x: &amp;&#39;a Foo) -&gt; &amp;&#39;b i32 {\n   &amp;x.bar\n}\n```\nwould report an error because we expect &#39;a and &#39;b to match, and so we group\n&#39;a and &#39;b together inside a SameRegions struct",null,null],[12,"scope_id","","",143,null],[12,"regions","","",143,null],[3,"RegionVarBindings","","",null,null],[3,"RegionSnapshot","","",null,null],[4,"Constraint","","",null,null],[13,"ConstrainVarSubVar","","",144,null],[13,"ConstrainRegSubVar","","",144,null],[13,"ConstrainVarSubReg","","",144,null],[4,"Verify","","",null,null],[13,"VerifyRegSubReg","","",145,null],[13,"VerifyGenericBound","","",145,null],[4,"GenericKind","","",null,null],[13,"Param","","",146,null],[13,"Projection","","",146,null],[4,"VerifyBound","","",null,null],[13,"AnyRegion","","",147,null],[13,"AllRegions","","",147,null],[13,"AnyBound","","",147,null],[13,"AllBounds","","",147,null],[4,"UndoLogEntry","","",null,null],[13,"OpenSnapshot","","",148,null],[13,"CommitedSnapshot","","",148,null],[13,"AddVar","","",148,null],[13,"AddConstraint","","",148,null],[13,"AddVerify","","",148,null],[13,"AddGiven","","",148,null],[13,"AddCombination","","",148,null],[4,"CombineMapType","","",null,null],[13,"Lub","","",149,null],[13,"Glb","","",149,null],[4,"RegionResolutionError","","",null,null],[13,"ConcreteFailure","","`ConcreteFailure(o, a, b)`:",150,null],[13,"GenericBoundFailure","","`GenericBoundFailure(p, s, a)",150,null],[13,"SubSupConflict","","`SubSupConflict(v, sub_origin, sub_r, sup_origin, sup_r)`:",150,null],[13,"ProcessedErrors","","For subsets of `ConcreteFailure` and `SubSupConflict`, we can derive\nmore specific errors message by suggesting to the user where they\nshould put a lifetime. In those cases we process and put those errors\ninto `ProcessedErrors` before we do any reporting.",150,null],[4,"ProcessedErrorOrigin","","",null,null],[13,"ConcreteFailure","","",151,null],[13,"VariableFailure","","",151,null],[4,"VarValue","","",null,null],[13,"Value","","",152,null],[13,"ErrorValue","","",152,null],[6,"CombineMap","","",null,null],[11,"fmt","","",144,null],[11,"hash","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"eq","","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"fmt","","",147,null],[11,"hash","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"clone","","",153,null],[11,"eq","","",148,null],[11,"ne","","",148,null],[11,"clone","","",148,null],[11,"eq","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"fmt","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"contains","","",143,null],[11,"push","","",143,null],[11,"new","","",154,{"inputs":[{"name":"tyctxt"}],"output":{"name":"regionvarbindings"}}],[11,"start_snapshot","","",154,null],[11,"commit","","",154,null],[11,"rollback_to","","",154,null],[11,"num_vars","","",154,null],[11,"new_region_var","","",154,null],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto &quot;escape&quot; out into error messages or the code at large.",154,null],[11,"new_bound","","",154,null],[11,"add_given","","",154,null],[11,"make_eqregion","","",154,null],[11,"make_subregion","","",154,null],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",154,null],[11,"lub_regions","","",154,null],[11,"glb_regions","","",154,null],[11,"resolve_var","","",154,null],[11,"opportunistic_resolve_var","","",154,null],[11,"combine_vars","","",154,null],[11,"vars_created_since_snapshot","","",154,null],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",154,null],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",154,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",145,null],[11,"fmt","","",155,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"to_ty","","",146,null],[11,"must_hold","","",147,null],[11,"cannot_hold","","",147,null],[11,"or","","",147,null],[11,"and","","",147,null],[0,"resolve","rustc::infer","",null,null],[3,"OpportunisticTypeResolver","rustc::infer::resolve","The opportunistic type resolver can be used at any time. It simply replaces\ntype variables that have been unified with the things they have\nbeen unified with (similar to `shallow_resolve`, but deep). This is\nuseful for printing messages etc but also required at various\npoints for correctness.",null,null],[3,"OpportunisticTypeAndRegionResolver","","The opportunistic type and region resolver is similar to the\nopportunistic type resolver, but also opportunistly resolves\nregions. It is useful for canonicalization.",null,null],[5,"fully_resolve","","Full type resolution replaces all type and region variables with\ntheir concrete results. If any variable cannot be replaced (never unified, etc)\nthen an `Err` result is returned.",null,{"inputs":[{"name":"inferctxt"},{"name":"t"}],"output":{"name":"fixupresult"}}],[11,"new","","",156,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"tcx","","",156,null],[11,"fold_ty","","",156,null],[11,"new","","",157,{"inputs":[{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"tcx","","",157,null],[11,"fold_ty","","",157,null],[11,"fold_region","","",157,null],[11,"new","rustc::infer","",158,{"inputs":[{"name":"inferctxt"}],"output":{"name":"typefreshener"}}],[11,"tcx","","",158,null],[11,"fold_region","","",158,null],[11,"fold_ty","","",158,null],[0,"sub","","",null,null],[3,"Sub","rustc::infer::sub","Ensures `a` is made a subtype of `b`. Returns `a` on success.",null,null],[11,"new","","",159,{"inputs":[{"name":"combinefields"}],"output":{"name":"sub"}}],[11,"obligations","","",159,null],[11,"tag","","",159,null],[11,"tcx","","",159,null],[11,"a_is_expected","","",159,null],[11,"with_cause","","",159,null],[11,"relate_with_variance","","",159,null],[11,"tys","","",159,null],[11,"regions","","",159,null],[11,"binders","","",159,null],[0,"type_variable","rustc::infer","",null,null],[3,"TypeVariableTable","rustc::infer::type_variable","",null,null],[3,"Default","","",null,null],[12,"ty","","",160,null],[12,"origin_span","","The span where the default was incurred",160,null],[12,"def_id","","The definition that the default originates from",160,null],[3,"Snapshot","","",null,null],[4,"RelationDir","","",null,null],[13,"SubtypeOf","","",161,null],[13,"SupertypeOf","","",161,null],[13,"EqTo","","",161,null],[13,"BiTo","","",161,null],[11,"hash","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"fmt","","",160,null],[11,"clone","","",160,null],[11,"fmt","","",161,null],[11,"hash","","",161,null],[11,"eq","","",161,null],[11,"clone","","",161,null],[11,"new","","",162,{"inputs":[],"output":{"name":"typevariabletable"}}],[11,"default","","",162,null],[11,"var_diverges","","",162,null],[11,"relate_vars","","Records that `a &lt;: b`, `a :&gt; b`, or `a == b`, depending on `dir`.",162,null],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",162,null],[11,"new_var","","",162,null],[11,"root_var","","",162,null],[11,"probe","","",162,null],[11,"probe_root","","Retrieves the type of `vid` given that it is currently a root in the unification table",162,null],[11,"replace_if_possible","","",162,null],[11,"snapshot","","",162,null],[11,"rollback_to","","",162,null],[11,"commit","","",162,null],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",162,null],[11,"unsolved_variables","","",162,null],[0,"unify_key","rustc::infer","",null,null],[3,"RegionVidKey","rustc::infer::unify_key","",null,null],[12,"min_vid","","The minimum region vid in the unification set. This is needed\nto have a canonical name for a type to prevent infinite\nrecursion.",163,null],[8,"ToType","","",null,null],[10,"to_type","","",164,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"combine","","",163,null],[11,"to_type","syntax::ast","",165,null],[6,"InferResult","rustc::infer","",null,null],[6,"Bound","","",null,null],[6,"UnitResult","","",null,null],[6,"FixupResult","","",null,null],[6,"SkolemizationMap","","A map returned by `skolemize_late_bound_regions()` indicating the skolemized\nregion that each late-bound region was replaced with.",null,null],[8,"TransNormalize","","Helper trait for shortening the lifetimes inside a\nvalue for post-type-checking normalization.",null,null],[10,"trans_normalize","","",166,null],[11,"clone","","",127,null],[11,"borrow","","",127,null],[11,"borrow_mut","","",127,null],[11,"fmt","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"clone","","",167,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"fmt","","",133,null],[11,"clone","","",133,null],[11,"fmt","","",134,null],[11,"clone","","",134,null],[11,"fmt","","",134,null],[11,"enter","","",168,null],[11,"drain_fulfillment_cx_or_panic","","",126,null],[11,"drain_fulfillment_cx","","Finishes processes any obligations that remain in the fulfillment\ncontext, and then &quot;freshens&quot; and returns `result`. This is\nprimarily used during normalization and other cases where\nprocessing the obligations in `fulfill_cx` may cause type\ninference variables that appear in `result` to be unified, and\nhence we need to process those obligations to get the complete\npicture of the type.",126,null],[11,"projection_mode","","",126,null],[11,"freshen","","",126,null],[11,"type_var_diverges","","",126,null],[11,"freshener","","",126,null],[11,"type_is_unconstrained_numeric","","",126,null],[11,"default","","Returns a type variable&#39;s default fallback if any exists. A default\nmust be attached to the variable when created, if it is created\nwithout a default, this will return None.",126,null],[11,"unsolved_variables","","",126,null],[11,"equate","","",126,null],[11,"sub","","",126,null],[11,"lub","","",126,null],[11,"glb","","",126,null],[11,"commit_unconditionally","","Execute `f` and commit the bindings",126,null],[11,"commit_if_ok","","Execute `f` and commit the bindings if closure `f` returns `Ok(_)`",126,null],[11,"in_snapshot","","",126,null],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",126,null],[11,"probe","","Execute `f` then unroll any bindings it creates",126,null],[11,"add_given","","",126,null],[11,"sub_types","","",126,null],[11,"can_sub_types","","",126,null],[11,"eq_types","","",126,null],[11,"eq_trait_refs","","",126,null],[11,"eq_impl_headers","","",126,null],[11,"sub_poly_trait_refs","","",126,null],[11,"sub_regions","","",126,null],[11,"equality_predicate","","",126,null],[11,"region_outlives_predicate","","",126,null],[11,"next_ty_var_id","","",126,null],[11,"next_ty_var","","",126,null],[11,"next_ty_var_with_default","","",126,null],[11,"next_diverging_ty_var","","",126,null],[11,"next_ty_vars","","",126,null],[11,"next_int_var_id","","",126,null],[11,"next_float_var_id","","",126,null],[11,"next_region_var","","",126,null],[11,"region_vars_for_defs","","",126,null],[11,"type_vars_for_defs","","",126,null],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",126,null],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",126,null],[11,"fresh_bound_region","","",126,null],[11,"adjust_expr_ty","","Apply `adjustment` to the type of `expr`",126,null],[11,"is_tainted_by_errors","","True if errors have been reported since this infcx was\ncreated.  This is sometimes used as a heuristic to skip\nreporting errors that often occur as a result of earlier\nerrors, but where it&#39;s hard to be 100% sure (e.g., unresolved\ninference variables, regionck errors).",126,null],[11,"set_tainted_by_errors","","Set the &quot;tainted by errors&quot; flag to true. We call this when we\nobserve an error from a prior pass.",126,null],[11,"node_type","","",126,null],[11,"expr_ty","","",126,null],[11,"resolve_regions_and_report_errors","","",126,null],[11,"ty_to_string","","",126,null],[11,"tys_to_string","","",126,null],[11,"trait_ref_to_string","","",126,null],[11,"shallow_resolve","","",126,null],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",126,null],[11,"resolve_type_and_region_vars_if_possible","","",126,null],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",126,null],[11,"type_error_message_str","","",126,null],[11,"type_error_struct_str","","",126,null],[11,"type_error_message_str_with_expected","","",126,null],[11,"type_error_struct_str_with_expected","","",126,null],[11,"type_error_message","","",126,null],[11,"type_error_struct","","",126,null],[11,"report_mismatched_types","","",126,null],[11,"report_conflicting_default_types","","",126,null],[11,"replace_late_bound_regions_with_fresh_var","","",126,null],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",126,null],[11,"can_equate","","",126,null],[11,"node_ty","","",126,null],[11,"expr_ty_adjusted","","",126,null],[11,"type_moves_by_default","","",126,null],[11,"node_method_ty","","",126,null],[11,"node_method_id","","",126,null],[11,"adjustments","","",126,null],[11,"is_method_call","","",126,null],[11,"temporary_scope","","",126,null],[11,"upvar_capture","","",126,null],[11,"param_env","","",126,null],[11,"closure_kind","","",126,null],[11,"closure_type","","",126,null],[11,"span","","",167,null],[11,"types","","",167,{"inputs":[{"name":"typeorigin"},{"name":"bool"},{"name":"ty"},{"name":"ty"}],"output":{"name":"typetrace"}}],[11,"dummy","","",167,{"inputs":[{"name":"tyctxt"}],"output":{"name":"typetrace"}}],[11,"fmt","","",167,null],[11,"span","","",128,null],[11,"span","","",130,null],[11,"span","","",133,null],[0,"lint","rustc","Lints, aka compiler warnings.",null,null],[3,"LateContext","rustc::lint","Context for lint checking after type checking.",null,null],[12,"tcx","","Type context we&#39;re checking in.",169,null],[12,"krate","","The crate being checked.",169,null],[12,"access_levels","","Items accessible from the crate being checked.",169,null],[3,"EarlyContext","","Context for lint checking of the AST, after expansion, before lowering to\nHIR.",null,null],[12,"sess","","Type context we&#39;re checking in.",170,null],[12,"krate","","The crate being checked.",170,null],[3,"LintStore","","Information about the registered lints.",null,null],[3,"GatherNodeLevels","","",null,null],[3,"FutureIncompatibleInfo","","Extra information for a future incompatibility lint. See the call\nto `register_future_incompatible` in `librustc_lint/lib.rs` for\nguidelines.",null,null],[12,"id","","",171,null],[12,"reference","","",171,null],[3,"Lint","","Specification of a single lint.",null,null],[12,"name","","A string identifier for the lint.",172,null],[12,"default_level","","Default level for the lint.",172,null],[12,"desc","","Description of the lint or the issue it detects.",172,null],[3,"LintId","","Identifies a lint known to the compiler.",null,null],[4,"Level","","Setting for how to handle a lint.",null,null],[13,"Allow","","",173,null],[13,"Warn","","",173,null],[13,"Deny","","",173,null],[13,"Forbid","","",173,null],[4,"LintSource","","How a lint level was set.",null,null],[13,"Default","","Lint is at the default level as declared\nin rustc or a plugin.",174,null],[13,"Node","","Lint level was set by an attribute.",174,null],[13,"CommandLine","","Lint level was set by a command-line flag.",174,null],[5,"raw_emit_lint","","Emit a lint as a warning or an error (or not at all)\naccording to `level`.",null,{"inputs":[{"name":"session"},{"name":"lintstore"},{"name":"lint"},{"name":"levelsource"},{"name":"option"},{"name":"str"}],"output":null}],[5,"check_crate","","Perform lint checking on a crate.",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":null}],[5,"check_ast_crate","","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[5,"gather_attrs","","Parse the lint attributes into a vector, with `Err`s for malformed lint\nattributes. Writing this as an iterator is an enormous mess.",null,null],[5,"raw_struct_lint","","",null,{"inputs":[{"name":"session"},{"name":"lintstore"},{"name":"lint"},{"name":"levelsource"},{"name":"option"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[0,"builtin","","Some lints that are built in to the compiler.",null,null],[3,"HardwiredLints","rustc::lint::builtin","Does nothing as a lint pass, but registers some `Lint`s\nwhich are used by other parts of the compiler.",null,null],[7,"CONST_ERR","","",null,null],[7,"UNUSED_IMPORTS","","",null,null],[7,"UNUSED_EXTERN_CRATES","","",null,null],[7,"UNUSED_QUALIFICATIONS","","",null,null],[7,"UNKNOWN_LINTS","","",null,null],[7,"UNUSED_VARIABLES","","",null,null],[7,"UNUSED_ASSIGNMENTS","","",null,null],[7,"DEAD_CODE","","",null,null],[7,"UNREACHABLE_CODE","","",null,null],[7,"WARNINGS","","",null,null],[7,"UNUSED_FEATURES","","",null,null],[7,"STABLE_FEATURES","","",null,null],[7,"UNKNOWN_CRATE_TYPES","","",null,null],[7,"VARIANT_SIZE_DIFFERENCES","","",null,null],[7,"FAT_PTR_TRANSMUTES","","",null,null],[7,"TRIVIAL_CASTS","","",null,null],[7,"TRIVIAL_NUMERIC_CASTS","","",null,null],[7,"PRIVATE_IN_PUBLIC","","",null,null],[7,"INACCESSIBLE_EXTERN_CRATE","","",null,null],[7,"INVALID_TYPE_PARAM_DEFAULT","","",null,null],[7,"ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN","","",null,null],[7,"ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN","","",null,null],[7,"MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT","","",null,null],[7,"RAW_POINTER_DERIVE","","",null,null],[7,"TRANSMUTE_FROM_FN_ITEM_TYPES","","",null,null],[7,"HR_LIFETIME_IN_ASSOC_TYPE","","",null,null],[7,"OVERLAPPING_INHERENT_IMPLS","","",null,null],[7,"RENAMED_AND_REMOVED_LINTS","","",null,null],[7,"SUPER_OR_SELF_IN_GLOBAL_PATH","","",null,null],[7,"UNSIZED_IN_TUPLE","","",null,null],[7,"OBJECT_UNSAFE_FRAGMENT","","",null,null],[11,"clone","","",175,null],[11,"get_lints","","",175,null],[11,"new","rustc::lint","",176,{"inputs":[],"output":{"name":"lintstore"}}],[11,"get_lints","","",176,null],[11,"get_lint_groups","","",176,null],[11,"register_early_pass","","",176,null],[11,"register_late_pass","","",176,null],[11,"register_future_incompatible","","",176,null],[11,"future_incompatible","","",176,null],[11,"register_group","","",176,null],[11,"register_renamed","","",176,null],[11,"register_removed","","",176,null],[11,"process_command_line","","",176,null],[11,"sess","","Get the overall compiler `Session` object.",169,null],[11,"lints","","",169,null],[11,"mut_lints","","",169,null],[11,"level_stack","","",169,null],[11,"enter_attrs","","",169,null],[11,"exit_attrs","","",169,null],[11,"sess","","Get the overall compiler `Session` object.",170,null],[11,"lints","","",170,null],[11,"mut_lints","","",170,null],[11,"level_stack","","",170,null],[11,"enter_attrs","","",170,null],[11,"exit_attrs","","",170,null],[11,"visit_nested_item","","Because lints are scoped lexically, we want to walk nested\nitems in the context of the outer item, so enable\ndeep-walking.",169,null],[11,"visit_item","","",169,null],[11,"visit_foreign_item","","",169,null],[11,"visit_pat","","",169,null],[11,"visit_expr","","",169,null],[11,"visit_stmt","","",169,null],[11,"visit_fn","","",169,null],[11,"visit_variant_data","","",169,null],[11,"visit_struct_field","","",169,null],[11,"visit_variant","","",169,null],[11,"visit_ty","","",169,null],[11,"visit_name","","",169,null],[11,"visit_mod","","",169,null],[11,"visit_local","","",169,null],[11,"visit_block","","",169,null],[11,"visit_arm","","",169,null],[11,"visit_decl","","",169,null],[11,"visit_expr_post","","",169,null],[11,"visit_generics","","",169,null],[11,"visit_trait_item","","",169,null],[11,"visit_impl_item","","",169,null],[11,"visit_lifetime","","",169,null],[11,"visit_lifetime_def","","",169,null],[11,"visit_path","","",169,null],[11,"visit_path_list_item","","",169,null],[11,"visit_attribute","","",169,null],[11,"visit_item","","",170,null],[11,"visit_foreign_item","","",170,null],[11,"visit_pat","","",170,null],[11,"visit_expr","","",170,null],[11,"visit_stmt","","",170,null],[11,"visit_fn","","",170,null],[11,"visit_variant_data","","",170,null],[11,"visit_struct_field","","",170,null],[11,"visit_variant","","",170,null],[11,"visit_ty","","",170,null],[11,"visit_ident","","",170,null],[11,"visit_mod","","",170,null],[11,"visit_local","","",170,null],[11,"visit_block","","",170,null],[11,"visit_arm","","",170,null],[11,"visit_decl","","",170,null],[11,"visit_expr_post","","",170,null],[11,"visit_generics","","",170,null],[11,"visit_trait_item","","",170,null],[11,"visit_impl_item","","",170,null],[11,"visit_lifetime","","",170,null],[11,"visit_lifetime_def","","",170,null],[11,"visit_explicit_self","","",170,null],[11,"visit_path","","",170,null],[11,"visit_path_list_item","","",170,null],[11,"visit_attribute","","",170,null],[11,"visit_id","","",169,null],[11,"get_lints","","",177,null],[11,"check_item","","",177,null],[6,"LintArray","","",null,null],[6,"EarlyLintPassObject","","A lint pass boxed up as a trait object.",null,null],[6,"LateLintPassObject","","",null,null],[6,"LevelSource","","",null,null],[8,"LintContext","","",null,null],[10,"sess","","",178,null],[10,"lints","","",178,null],[10,"mut_lints","","",178,null],[10,"level_stack","","",178,null],[10,"enter_attrs","","",178,null],[10,"exit_attrs","","",178,null],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",178,null],[11,"level_src","","",178,null],[11,"lookup_and_emit","","",178,null],[11,"lookup","","",178,null],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",178,null],[11,"struct_span_lint","","",178,null],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",178,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",178,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",178,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the\ncurrent lint context, call the provided function, then reset the\nlints in effect to their previous state.",178,null],[8,"LintPass","","",null,null],[10,"get_lints","","Get descriptions of the lints this `LintPass` object can emit.",179,null],[8,"LateLintPass","","Trait for types providing lint checks.",null,null],[11,"check_name","","",180,null],[11,"check_crate","","",180,null],[11,"check_crate_post","","",180,null],[11,"check_mod","","",180,null],[11,"check_mod_post","","",180,null],[11,"check_foreign_item","","",180,null],[11,"check_foreign_item_post","","",180,null],[11,"check_item","","",180,null],[11,"check_item_post","","",180,null],[11,"check_local","","",180,null],[11,"check_block","","",180,null],[11,"check_block_post","","",180,null],[11,"check_stmt","","",180,null],[11,"check_arm","","",180,null],[11,"check_pat","","",180,null],[11,"check_decl","","",180,null],[11,"check_expr","","",180,null],[11,"check_expr_post","","",180,null],[11,"check_ty","","",180,null],[11,"check_generics","","",180,null],[11,"check_fn","","",180,null],[11,"check_fn_post","","",180,null],[11,"check_trait_item","","",180,null],[11,"check_trait_item_post","","",180,null],[11,"check_impl_item","","",180,null],[11,"check_impl_item_post","","",180,null],[11,"check_struct_def","","",180,null],[11,"check_struct_def_post","","",180,null],[11,"check_struct_field","","",180,null],[11,"check_variant","","",180,null],[11,"check_variant_post","","",180,null],[11,"check_lifetime","","",180,null],[11,"check_lifetime_def","","",180,null],[11,"check_explicit_self","","",180,null],[11,"check_path","","",180,null],[11,"check_path_list_item","","",180,null],[11,"check_attribute","","",180,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",180,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",180,null],[8,"EarlyLintPass","","",null,null],[11,"check_ident","","",181,null],[11,"check_crate","","",181,null],[11,"check_crate_post","","",181,null],[11,"check_mod","","",181,null],[11,"check_mod_post","","",181,null],[11,"check_foreign_item","","",181,null],[11,"check_foreign_item_post","","",181,null],[11,"check_item","","",181,null],[11,"check_item_post","","",181,null],[11,"check_local","","",181,null],[11,"check_block","","",181,null],[11,"check_block_post","","",181,null],[11,"check_stmt","","",181,null],[11,"check_arm","","",181,null],[11,"check_pat","","",181,null],[11,"check_decl","","",181,null],[11,"check_expr","","",181,null],[11,"check_expr_post","","",181,null],[11,"check_ty","","",181,null],[11,"check_generics","","",181,null],[11,"check_fn","","",181,null],[11,"check_fn_post","","",181,null],[11,"check_trait_item","","",181,null],[11,"check_trait_item_post","","",181,null],[11,"check_impl_item","","",181,null],[11,"check_impl_item_post","","",181,null],[11,"check_struct_def","","",181,null],[11,"check_struct_def_post","","",181,null],[11,"check_struct_field","","",181,null],[11,"check_variant","","",181,null],[11,"check_variant_post","","",181,null],[11,"check_lifetime","","",181,null],[11,"check_lifetime_def","","",181,null],[11,"check_explicit_self","","",181,null],[11,"check_path","","",181,null],[11,"check_path_list_item","","",181,null],[11,"check_attribute","","",181,null],[11,"enter_lint_attrs","","Called when entering a syntax node that can have lint attributes such\nas `#[allow(...)]`. Called with *all* the attributes of that node.",181,null],[11,"exit_lint_attrs","","Counterpart to `enter_lint_attrs`.",181,null],[11,"fmt","","",172,null],[11,"clone","","",172,null],[11,"name_lower","","Get the lint&#39;s name, with ASCII letters converted to lowercase.",172,null],[11,"fmt","","",182,null],[11,"clone","","",182,null],[11,"eq","","",182,null],[11,"hash","","",182,null],[11,"of","","Get the `LintId` for a `Lint`.",182,{"inputs":[{"name":"lint"}],"output":{"name":"lintid"}}],[11,"as_str","","Get the name of the lint.",182,null],[11,"fmt","","",173,null],[11,"cmp","","",173,null],[11,"partial_cmp","","",173,null],[11,"eq","","",173,null],[11,"clone","","",173,null],[11,"as_str","","Convert a level to a lower-case string.",173,null],[11,"from_str","","Convert a lower-case string to a level.",173,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"clone","","",174,null],[0,"middle","rustc","",null,null],[0,"astconv_util","rustc::middle","This module contains a simple utility routine\nused by both `typeck` and `const_eval`.\nAlmost certainly this could (and should) be refactored out of existence.",null,null],[0,"expr_use_visitor","","A different sort of visitor for walking fn bodies.  Unlike the\nnormal visitor, which just walks the entire body in one shot, the\n`ExprUseVisitor` determines how expressions are being used.",null,null],[3,"ExprUseVisitor","rustc::middle::expr_use_visitor","",null,null],[4,"LoanCause","","",null,null],[13,"ClosureCapture","","",183,null],[13,"AddrOf","","",183,null],[13,"AutoRef","","",183,null],[13,"AutoUnsafe","","",183,null],[13,"RefBinding","","",183,null],[13,"OverloadedOperator","","",183,null],[13,"ClosureInvocation","","",183,null],[13,"ForLoop","","",183,null],[13,"MatchDiscriminant","","",183,null],[4,"ConsumeMode","","",null,null],[13,"Copy","","",184,null],[13,"Move","","",184,null],[4,"MoveReason","","",null,null],[13,"DirectRefMove","","",185,null],[13,"PatBindingMove","","",185,null],[13,"CaptureMove","","",185,null],[4,"MatchMode","","",null,null],[13,"NonBindingMatch","","",186,null],[13,"BorrowingMatch","","",186,null],[13,"CopyingMatch","","",186,null],[13,"MovingMatch","","",186,null],[4,"MutateMode","","",null,null],[13,"Init","","",187,null],[13,"JustWrite","","",187,null],[13,"WriteAndRead","","",187,null],[8,"Delegate","","This trait defines the callbacks you can expect to receive when\nemploying the ExprUseVisitor.",null,null],[10,"consume","","",188,null],[10,"matched_pat","","",188,null],[10,"consume_pat","","",188,null],[10,"borrow","","",188,null],[10,"decl_without_init","","",188,null],[10,"mutate","","",188,null],[11,"fmt","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"clone","","",183,null],[11,"fmt","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"clone","","",184,null],[11,"fmt","","",185,null],[11,"eq","","",185,null],[11,"clone","","",185,null],[11,"fmt","","",186,null],[11,"eq","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",187,null],[11,"eq","","",187,null],[11,"clone","","",187,null],[11,"new","","",189,{"inputs":[{"name":"delegate"},{"name":"inferctxt"}],"output":{"name":"self"}}],[11,"walk_fn","","",189,null],[11,"consume_expr","","",189,null],[11,"walk_expr","","",189,null],[0,"const_val","rustc::middle","",null,null],[4,"ConstVal","rustc::middle::const_val","",null,null],[13,"Float","","",190,null],[13,"Integral","","",190,null],[13,"Str","","",190,null],[13,"ByteStr","","",190,null],[13,"Bool","","",190,null],[13,"Struct","","",190,null],[13,"Tuple","","",190,null],[13,"Function","","",190,null],[13,"Array","","",190,null],[13,"Repeat","","",190,null],[13,"Char","","",190,null],[13,"Dummy","","A value that only occurs in case `eval_const_expr` reported an error. You should never\nhandle this case. Its sole purpose is to allow more errors to be reported instead of\ncausing a fatal error.",190,null],[11,"decode","","",190,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",190,null],[11,"fmt","","",190,null],[11,"clone","","",190,null],[11,"hash","","",190,null],[11,"eq","","",190,null],[11,"description","","",190,null],[0,"const_qualif","rustc::middle","",null,null],[3,"ConstQualif","rustc::middle::const_qualif","",null,null],[11,"hash","","",191,null],[11,"cmp","","",191,null],[11,"partial_cmp","","",191,null],[11,"lt","","",191,null],[11,"le","","",191,null],[11,"gt","","",191,null],[11,"ge","","",191,null],[11,"clone","","",191,null],[11,"eq","","",191,null],[11,"ne","","",191,null],[11,"decode","","",191,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",191,null],[18,"MUTABLE_MEM","rustc::middle","",191,null],[18,"NEEDS_DROP","","",191,null],[18,"PREFER_IN_PLACE","","",191,null],[18,"NON_ZERO_SIZED","","",191,null],[18,"HAS_STATIC_BORROWS","","",191,null],[18,"NOT_CONST","","",191,null],[18,"NON_STATIC_BORROWS","","",191,null],[11,"empty","rustc::middle::const_qualif","Returns an empty set of flags.",191,{"inputs":[],"output":{"name":"constqualif"}}],[11,"all","","Returns the set containing all flags.",191,{"inputs":[],"output":{"name":"constqualif"}}],[11,"bits","","Returns the raw value of the flags currently stored.",191,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",191,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",191,{"inputs":[{"name":"u8"}],"output":{"name":"constqualif"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",191,null],[11,"is_all","","Returns `true` if all flags are currently set.",191,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",191,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",191,null],[11,"insert","","Inserts the specified flags in-place.",191,null],[11,"remove","","Removes the specified flags in-place.",191,null],[11,"toggle","","Toggles the specified flags in-place.",191,null],[11,"bitor","","Returns the union of the two sets of flags.",191,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",191,null],[11,"bitand","","Returns the intersection between the two sets of flags.",191,null],[11,"sub","","Returns the set difference of the two sets of flags.",191,null],[11,"not","","Returns the complement of this set of flags.",191,null],[0,"cstore","rustc::middle","",null,null],[3,"LinkMeta","rustc::middle::cstore","",null,null],[12,"crate_name","","",192,null],[12,"crate_hash","","",192,null],[3,"CrateSource","","",null,null],[12,"dylib","","",193,null],[12,"rlib","","",193,null],[12,"cnum","","",193,null],[3,"ChildItem","","",null,null],[12,"def","","",194,null],[12,"name","","",194,null],[12,"vis","","",194,null],[3,"ExternCrate","","",null,null],[12,"def_id","","def_id of an `extern crate` in the current crate that caused\nthis crate to be loaded; note that there could be multiple\nsuch ids",195,null],[12,"span","","span of the extern crate that caused this to be loaded",195,null],[12,"direct","","If true, then this crate is the crate named by the extern\ncrate referenced above. If false, then this crate is a dep\nof the crate.",195,null],[12,"path_len","","Number of links to reach the extern crate `def_id`\ndeclaration; used to select the extern crate with the shortest\npath",195,null],[3,"DummyCrateStore","","A dummy crate store that does not support any non-local crates,\nfor test purposes.",null,null],[4,"LinkagePreference","","",null,null],[13,"RequireDynamic","","",196,null],[13,"RequireStatic","","",196,null],[4,"NativeLibraryKind","","",null,null],[13,"NativeStatic","","",197,null],[13,"NativeFramework","","",197,null],[13,"NativeUnknown","","",197,null],[4,"DefLike","","",null,null],[13,"DlDef","","",198,null],[13,"DlImpl","","",198,null],[13,"DlField","","",198,null],[4,"InlinedItem","","The data we save and restore about an inlined item or method.  This is not\npart of the AST that we parse from a file, but it becomes part of the tree\nthat we trans.",null,null],[13,"Item","","",199,null],[13,"TraitItem","","",199,null],[13,"ImplItem","","",199,null],[13,"Foreign","","",199,null],[4,"InlinedItemRef","","A borrowed version of `hir::InlinedItem`.",null,null],[13,"Item","","",200,null],[13,"TraitItem","","",200,null],[13,"ImplItem","","",200,null],[13,"Foreign","","",200,null],[4,"FoundAst","","",null,null],[13,"Found","","",201,null],[13,"FoundParent","","",201,null],[13,"NotFound","","",201,null],[5,"validate_crate_name","","",null,{"inputs":[{"name":"option"},{"name":"str"},{"name":"option"}],"output":null}],[0,"tls","","Metadata encoding and decoding can make use of thread-local encoding and\ndecoding contexts. These allow implementers of serialize::Encodable and\nDecodable to access information and datastructures that would otherwise not\nbe available to them. For example, we can automatically translate def-id and\nspan information during decoding because the decoding context knows which\ncrate the data is decoded from. Or it allows to make ty::Ty decodable\nbecause the context has access to the TyCtxt that is needed for creating\nty::Ty instances.",null,null],[5,"enter_encoding_context","rustc::middle::cstore::tls","Execute f after pushing the given EncodingContext onto the TLS stack.",null,{"inputs":[{"name":"encodingcontext"},{"name":"opaqueencoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder. This function will panic if the encoder passed in and the\ncontext encoder are not the same.",null,{"inputs":[{"name":"e"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_encoding_context","","Execute f with access to the thread-local encoding context and\nrbml encoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"enter_decoding_context","","Execute f after pushing the given DecodingContext onto the TLS stack.",null,{"inputs":[{"name":"decodingcontext"},{"name":"opaquedecoder"},{"name":"f"}],"output":{"name":"r"}}],[5,"with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder. This function will panic if the decoder passed in and the\ncontext decoder are not the same.",null,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"r"}}],[5,"unsafe_with_decoding_context","","Execute f with access to the thread-local decoding context and\nrbml decoder.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[8,"EncodingContext","","",null,null],[10,"tcx","","",202,null],[10,"encode_ty","","",202,null],[10,"encode_substs","","",202,null],[8,"DecodingContext","","",null,null],[10,"tcx","","",203,null],[10,"decode_ty","","",203,null],[10,"decode_substs","","",203,null],[10,"translate_def_id","","",203,null],[17,"LOCAL_CRATE","rustc::middle::cstore","Item definitions in the currently-compiled crate would have the CrateNum\nLOCAL_CRATE in their DefId.",null,null],[8,"CrateStore","","A store of Rust crates, through with their metadata\ncan be accessed.",null,null],[10,"stability","","",204,null],[10,"deprecation","","",204,null],[10,"visibility","","",204,null],[10,"closure_kind","","",204,null],[10,"closure_ty","","",204,null],[10,"item_variances","","",204,null],[10,"repr_attrs","","",204,null],[10,"item_type","","",204,null],[10,"visible_parent_map","","",204,null],[10,"item_name","","",204,null],[10,"item_predicates","","",204,null],[10,"item_super_predicates","","",204,null],[10,"item_attrs","","",204,null],[10,"item_symbol","","",204,null],[10,"trait_def","","",204,null],[10,"adt_def","","",204,null],[10,"method_arg_names","","",204,null],[10,"inherent_implementations_for_type","","",204,null],[10,"implementations_of_trait","","",204,null],[10,"provided_trait_methods","","",204,null],[10,"trait_item_def_ids","","",204,null],[10,"impl_items","","",204,null],[10,"impl_trait_ref","","",204,null],[10,"impl_polarity","","",204,null],[10,"custom_coerce_unsized_kind","","",204,null],[10,"associated_consts","","",204,null],[10,"impl_parent","","",204,null],[10,"trait_of_item","","",204,null],[10,"impl_or_trait_item","","",204,null],[10,"is_const_fn","","",204,null],[10,"is_defaulted_trait","","",204,null],[10,"is_impl","","",204,null],[10,"is_default_impl","","",204,null],[10,"is_extern_item","","",204,null],[10,"is_static_method","","",204,null],[10,"is_statically_included_foreign_item","","",204,null],[10,"is_typedef","","",204,null],[10,"dylib_dependency_formats","","",204,null],[10,"lang_items","","",204,null],[10,"missing_lang_items","","",204,null],[10,"is_staged_api","","",204,null],[10,"is_explicitly_linked","","",204,null],[10,"is_allocator","","",204,null],[10,"is_panic_runtime","","",204,null],[10,"panic_strategy","","",204,null],[10,"extern_crate","","",204,null],[10,"crate_attrs","","",204,null],[10,"crate_name","","The name of the crate as it is referred to in source code of the current\ncrate.",204,null],[10,"original_crate_name","","The name of the crate as it is stored in the crate&#39;s metadata.",204,null],[10,"crate_hash","","",204,null],[10,"crate_disambiguator","","",204,null],[10,"crate_struct_field_attrs","","",204,null],[10,"plugin_registrar_fn","","",204,null],[10,"native_libraries","","",204,null],[10,"reachable_ids","","",204,null],[10,"def_key","","",204,null],[10,"relative_def_path","","",204,null],[10,"variant_kind","","",204,null],[10,"struct_ctor_def_id","","",204,null],[10,"tuple_struct_definition_if_ctor","","",204,null],[10,"struct_field_names","","",204,null],[10,"item_children","","",204,null],[10,"crate_top_level_items","","",204,null],[10,"maybe_get_item_ast","","",204,null],[10,"maybe_get_item_mir","","",204,null],[10,"is_item_mir_available","","",204,null],[10,"crates","","",204,null],[10,"used_libraries","","",204,null],[10,"used_link_args","","",204,null],[10,"metadata_filename","","",204,null],[10,"metadata_section_name","","",204,null],[10,"encode_type","","",204,null],[10,"used_crates","","",204,null],[10,"used_crate_source","","",204,null],[10,"extern_mod_stmt_cnum","","",204,null],[10,"encode_metadata","","",204,null],[10,"metadata_encoding_version","","",204,null],[11,"fmt","","",192,null],[11,"clone","","",192,null],[11,"fmt","","",193,null],[11,"clone","","",193,null],[11,"eq","","",193,null],[11,"ne","","",193,null],[11,"clone","","",196,null],[11,"eq","","",196,null],[11,"fmt","","",196,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"from_u32","","",197,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"fmt","","",198,null],[11,"clone","","",198,null],[11,"fmt","","",199,null],[11,"hash","","",199,null],[11,"decode","","",199,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",199,null],[11,"eq","","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"fmt","","",200,null],[11,"hash","","",200,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"clone","","",200,null],[11,"clone","","",194,null],[11,"fmt","","",195,null],[11,"clone","","",195,null],[11,"visit","","",199,null],[11,"visit_ids","","",199,null],[11,"stability","","",205,null],[11,"deprecation","","",205,null],[11,"visibility","","",205,null],[11,"closure_kind","","",205,null],[11,"closure_ty","","",205,null],[11,"item_variances","","",205,null],[11,"repr_attrs","","",205,null],[11,"item_type","","",205,null],[11,"visible_parent_map","","",205,null],[11,"item_name","","",205,null],[11,"item_predicates","","",205,null],[11,"item_super_predicates","","",205,null],[11,"item_attrs","","",205,null],[11,"item_symbol","","",205,null],[11,"trait_def","","",205,null],[11,"adt_def","","",205,null],[11,"method_arg_names","","",205,null],[11,"inherent_implementations_for_type","","",205,null],[11,"implementations_of_trait","","",205,null],[11,"provided_trait_methods","","",205,null],[11,"trait_item_def_ids","","",205,null],[11,"impl_items","","",205,null],[11,"impl_trait_ref","","",205,null],[11,"impl_polarity","","",205,null],[11,"custom_coerce_unsized_kind","","",205,null],[11,"associated_consts","","",205,null],[11,"impl_parent","","",205,null],[11,"trait_of_item","","",205,null],[11,"impl_or_trait_item","","",205,null],[11,"is_const_fn","","",205,null],[11,"is_defaulted_trait","","",205,null],[11,"is_impl","","",205,null],[11,"is_default_impl","","",205,null],[11,"is_extern_item","","",205,null],[11,"is_static_method","","",205,null],[11,"is_statically_included_foreign_item","","",205,null],[11,"is_typedef","","",205,null],[11,"dylib_dependency_formats","","",205,null],[11,"lang_items","","",205,null],[11,"missing_lang_items","","",205,null],[11,"is_staged_api","","",205,null],[11,"is_explicitly_linked","","",205,null],[11,"is_allocator","","",205,null],[11,"is_panic_runtime","","",205,null],[11,"panic_strategy","","",205,null],[11,"extern_crate","","",205,null],[11,"crate_attrs","","",205,null],[11,"crate_name","","",205,null],[11,"original_crate_name","","",205,null],[11,"crate_hash","","",205,null],[11,"crate_disambiguator","","",205,null],[11,"crate_struct_field_attrs","","",205,null],[11,"plugin_registrar_fn","","",205,null],[11,"native_libraries","","",205,null],[11,"reachable_ids","","",205,null],[11,"def_key","","",205,null],[11,"relative_def_path","","",205,null],[11,"variant_kind","","",205,null],[11,"struct_ctor_def_id","","",205,null],[11,"tuple_struct_definition_if_ctor","","",205,null],[11,"struct_field_names","","",205,null],[11,"item_children","","",205,null],[11,"crate_top_level_items","","",205,null],[11,"maybe_get_item_ast","","",205,null],[11,"maybe_get_item_mir","","",205,null],[11,"is_item_mir_available","","",205,null],[11,"crates","","",205,null],[11,"used_libraries","","",205,null],[11,"used_link_args","","",205,null],[11,"metadata_filename","","",205,null],[11,"metadata_section_name","","",205,null],[11,"encode_type","","",205,null],[11,"used_crates","","",205,null],[11,"used_crate_source","","",205,null],[11,"extern_mod_stmt_cnum","","",205,null],[11,"encode_metadata","","",205,null],[11,"metadata_encoding_version","","",205,null],[0,"dataflow","rustc::middle","A module for propagating forward dataflow information. The analysis\nassumes that the items to be propagated can be represented as bits\nand thus uses bitvectors. Your job is simply to specify the so-called\nGEN and KILL bits for each expression.",null,null],[3,"DataFlowContext","rustc::middle::dataflow","",null,null],[4,"EntryOrExit","","",null,null],[13,"Entry","","",206,null],[13,"Exit","","",206,null],[4,"KillFrom","","Flag used by `add_kill` to indicate whether the provided kill\ntakes effect only when control flows directly through the node in\nquestion, or if the kill&#39;s effect is associated with any\ncontrol-flow directly through or indirectly over the node.",null,null],[13,"ScopeEnd","","A `ScopeEnd` kill is one that takes effect when any control\nflow goes over the node. A kill associated with the end of the\nscope of a variable declaration `let x;` is an example of a\n`ScopeEnd` kill.",207,null],[13,"Execution","","An `Execution` kill is one that takes effect only when control\nflow goes through the node to completion. A kill associated\nwith an assignment statement `x = expr;` is an example of an\n`Execution` kill.",207,null],[8,"BitwiseOperator","","",null,null],[10,"join","","Joins two predecessor bits together, typically either `|` or `&amp;`",208,null],[8,"DataFlowOperator","","Parameterization for the precise form of data flow that is used.",null,null],[10,"initial_value","","Specifies the initial value for each bit in the `on_entry` set",209,null],[11,"fmt","","",206,null],[11,"clone","","",206,null],[11,"clone","","",210,null],[11,"pre","","",210,null],[11,"fmt","","",207,null],[11,"eq","","",207,null],[11,"clone","","",207,null],[11,"new","","",210,{"inputs":[{"name":"tyctxt"},{"name":"str"},{"name":"option"},{"name":"cfg"},{"name":"o"},{"name":"idrange"},{"name":"usize"}],"output":{"name":"dataflowcontext"}}],[11,"add_gen","","Indicates that `id` generates `bit`",210,null],[11,"add_kill","","Indicates that `id` kills `bit`",210,null],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",210,null],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",210,null],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",210,null],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",210,null],[11,"propagate","","Performs the data flow analysis.",210,null],[0,"dead","rustc::middle","",null,null],[5,"check_crate","rustc::middle::dead","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":null}],[0,"dependency_format","rustc::middle","Resolution of mixing rlibs and dylibs",null,null],[4,"Linkage","rustc::middle::dependency_format","",null,null],[13,"NotLinked","","",211,null],[13,"IncludedFromDylib","","",211,null],[13,"Static","","",211,null],[13,"Dynamic","","",211,null],[5,"calculate","","",null,{"inputs":[{"name":"session"}],"output":null}],[6,"DependencyList","","A list of dependencies for a certain crate type.",null,null],[6,"Dependencies","","A mapping of all required dependencies for a particular flavor of output.",null,null],[11,"fmt","","",211,null],[11,"eq","","",211,null],[11,"clone","","",211,null],[0,"effect","rustc::middle","Enforces the Rust effect system. Currently there is just one effect,\n`unsafe`.",null,null],[5,"check_crate","rustc::middle::effect","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"entry","rustc::middle","",null,null],[5,"find_entry_point","rustc::middle::entry","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":null}],[0,"free_region","rustc::middle","This file handles the relationships between free regions --\nmeaning lifetime parameters. Ordinarily, free regions are\nunrelated to one another, but they can be related via implied or\nexplicit bounds.  In that case, we track the bounds using the\n`TransitiveRelation` type and use that to decide when one free\nregion outlives another and so forth.",null,null],[3,"FreeRegionMap","rustc::middle::free_region","",null,null],[11,"clone","","",212,null],[11,"new","","",212,{"inputs":[],"output":{"name":"freeregionmap"}}],[11,"relate_free_regions_from_implied_bounds","","",212,null],[11,"relate_free_regions_from_predicates","","",212,null],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `map`.  Note that\nit is possible that `sub != sup` and `sub &lt;= sup` and `sup &lt;= sub`\n(that is, the user can give two different names to the same lifetime).",212,null],[11,"lub_free_regions","","",212,null],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",212,null],[11,"is_static","","Determines whether this free-region is required to be &#39;static",212,null],[0,"intrinsicck","rustc::middle","",null,null],[5,"check_crate","rustc::middle::intrinsicck","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"lang_items","rustc::middle","",null,null],[3,"LanguageItems","rustc::middle::lang_items","",null,null],[12,"items","","",213,null],[12,"missing","","",213,null],[4,"LangItem","","",null,null],[13,"CharImplItem","","",214,null],[13,"StrImplItem","","",214,null],[13,"SliceImplItem","","",214,null],[13,"ConstPtrImplItem","","",214,null],[13,"MutPtrImplItem","","",214,null],[13,"I8ImplItem","","",214,null],[13,"I16ImplItem","","",214,null],[13,"I32ImplItem","","",214,null],[13,"I64ImplItem","","",214,null],[13,"IsizeImplItem","","",214,null],[13,"U8ImplItem","","",214,null],[13,"U16ImplItem","","",214,null],[13,"U32ImplItem","","",214,null],[13,"U64ImplItem","","",214,null],[13,"UsizeImplItem","","",214,null],[13,"F32ImplItem","","",214,null],[13,"F64ImplItem","","",214,null],[13,"SendTraitLangItem","","",214,null],[13,"SizedTraitLangItem","","",214,null],[13,"UnsizeTraitLangItem","","",214,null],[13,"CopyTraitLangItem","","",214,null],[13,"SyncTraitLangItem","","",214,null],[13,"DropTraitLangItem","","",214,null],[13,"CoerceUnsizedTraitLangItem","","",214,null],[13,"AddTraitLangItem","","",214,null],[13,"SubTraitLangItem","","",214,null],[13,"MulTraitLangItem","","",214,null],[13,"DivTraitLangItem","","",214,null],[13,"RemTraitLangItem","","",214,null],[13,"NegTraitLangItem","","",214,null],[13,"NotTraitLangItem","","",214,null],[13,"BitXorTraitLangItem","","",214,null],[13,"BitAndTraitLangItem","","",214,null],[13,"BitOrTraitLangItem","","",214,null],[13,"ShlTraitLangItem","","",214,null],[13,"ShrTraitLangItem","","",214,null],[13,"AddAssignTraitLangItem","","",214,null],[13,"SubAssignTraitLangItem","","",214,null],[13,"MulAssignTraitLangItem","","",214,null],[13,"DivAssignTraitLangItem","","",214,null],[13,"RemAssignTraitLangItem","","",214,null],[13,"BitXorAssignTraitLangItem","","",214,null],[13,"BitAndAssignTraitLangItem","","",214,null],[13,"BitOrAssignTraitLangItem","","",214,null],[13,"ShlAssignTraitLangItem","","",214,null],[13,"ShrAssignTraitLangItem","","",214,null],[13,"IndexTraitLangItem","","",214,null],[13,"IndexMutTraitLangItem","","",214,null],[13,"UnsafeCellTypeLangItem","","",214,null],[13,"DerefTraitLangItem","","",214,null],[13,"DerefMutTraitLangItem","","",214,null],[13,"FnTraitLangItem","","",214,null],[13,"FnMutTraitLangItem","","",214,null],[13,"FnOnceTraitLangItem","","",214,null],[13,"EqTraitLangItem","","",214,null],[13,"OrdTraitLangItem","","",214,null],[13,"StrEqFnLangItem","","",214,null],[13,"PanicFnLangItem","","",214,null],[13,"PanicBoundsCheckFnLangItem","","",214,null],[13,"PanicFmtLangItem","","",214,null],[13,"ExchangeMallocFnLangItem","","",214,null],[13,"ExchangeFreeFnLangItem","","",214,null],[13,"BoxFreeFnLangItem","","",214,null],[13,"StrDupUniqFnLangItem","","",214,null],[13,"StartFnLangItem","","",214,null],[13,"EhPersonalityLangItem","","",214,null],[13,"EhPersonalityCatchLangItem","","",214,null],[13,"EhUnwindResumeLangItem","","",214,null],[13,"MSVCTryFilterLangItem","","",214,null],[13,"OwnedBoxLangItem","","",214,null],[13,"PhantomDataItem","","",214,null],[13,"CovariantTypeItem","","",214,null],[13,"ContravariantTypeItem","","",214,null],[13,"InvariantTypeItem","","",214,null],[13,"CovariantLifetimeItem","","",214,null],[13,"ContravariantLifetimeItem","","",214,null],[13,"InvariantLifetimeItem","","",214,null],[13,"NoCopyItem","","",214,null],[13,"NonZeroItem","","",214,null],[13,"DebugTraitLangItem","","",214,null],[5,"extract","","",null,null],[5,"collect_language_items","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"languageitems"}}],[11,"hash","","",214,null],[11,"eq","","",214,null],[11,"clone","","",214,null],[11,"from_u32","","",214,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"new","","",213,{"inputs":[],"output":{"name":"languageitems"}}],[11,"items","","",213,null],[11,"item_name","","",213,{"inputs":[{"name":"usize"}],"output":{"name":"str"}}],[11,"require","","",213,null],[11,"require_owned_box","","",213,null],[11,"from_builtin_kind","","",213,null],[11,"to_builtin_kind","","",213,null],[11,"fn_trait_kind","","",213,null],[11,"char_impl","","",213,null],[11,"str_impl","","",213,null],[11,"slice_impl","","",213,null],[11,"const_ptr_impl","","",213,null],[11,"mut_ptr_impl","","",213,null],[11,"i8_impl","","",213,null],[11,"i16_impl","","",213,null],[11,"i32_impl","","",213,null],[11,"i64_impl","","",213,null],[11,"isize_impl","","",213,null],[11,"u8_impl","","",213,null],[11,"u16_impl","","",213,null],[11,"u32_impl","","",213,null],[11,"u64_impl","","",213,null],[11,"usize_impl","","",213,null],[11,"f32_impl","","",213,null],[11,"f64_impl","","",213,null],[11,"send_trait","","",213,null],[11,"sized_trait","","",213,null],[11,"unsize_trait","","",213,null],[11,"copy_trait","","",213,null],[11,"sync_trait","","",213,null],[11,"drop_trait","","",213,null],[11,"coerce_unsized_trait","","",213,null],[11,"add_trait","","",213,null],[11,"sub_trait","","",213,null],[11,"mul_trait","","",213,null],[11,"div_trait","","",213,null],[11,"rem_trait","","",213,null],[11,"neg_trait","","",213,null],[11,"not_trait","","",213,null],[11,"bitxor_trait","","",213,null],[11,"bitand_trait","","",213,null],[11,"bitor_trait","","",213,null],[11,"shl_trait","","",213,null],[11,"shr_trait","","",213,null],[11,"add_assign_trait","","",213,null],[11,"sub_assign_trait","","",213,null],[11,"mul_assign_trait","","",213,null],[11,"div_assign_trait","","",213,null],[11,"rem_assign_trait","","",213,null],[11,"bitxor_assign_trait","","",213,null],[11,"bitand_assign_trait","","",213,null],[11,"bitor_assign_trait","","",213,null],[11,"shl_assign_trait","","",213,null],[11,"shr_assign_trait","","",213,null],[11,"index_trait","","",213,null],[11,"index_mut_trait","","",213,null],[11,"unsafe_cell_type","","",213,null],[11,"deref_trait","","",213,null],[11,"deref_mut_trait","","",213,null],[11,"fn_trait","","",213,null],[11,"fn_mut_trait","","",213,null],[11,"fn_once_trait","","",213,null],[11,"eq_trait","","",213,null],[11,"ord_trait","","",213,null],[11,"str_eq_fn","","",213,null],[11,"panic_fn","","",213,null],[11,"panic_bounds_check_fn","","",213,null],[11,"panic_fmt","","",213,null],[11,"exchange_malloc_fn","","",213,null],[11,"exchange_free_fn","","",213,null],[11,"box_free_fn","","",213,null],[11,"strdup_uniq_fn","","",213,null],[11,"start_fn","","",213,null],[11,"eh_personality","","",213,null],[11,"eh_personality_catch","","",213,null],[11,"eh_unwind_resume","","",213,null],[11,"msvc_try_filter","","",213,null],[11,"owned_box","","",213,null],[11,"phantom_data","","",213,null],[11,"covariant_type","","",213,null],[11,"contravariant_type","","",213,null],[11,"invariant_type","","",213,null],[11,"covariant_lifetime","","",213,null],[11,"contravariant_lifetime","","",213,null],[11,"invariant_lifetime","","",213,null],[11,"no_copy_bound","","",213,null],[11,"non_zero","","",213,null],[11,"debug_trait","","",213,null],[0,"liveness","rustc::middle","A classic liveness analysis based on dataflow over the AST.  Computes,\nfor each local variable in a function, whether that variable is live\nat a given point.  Program execution points are identified by their\nid.",null,null],[5,"check_crate","rustc::middle::liveness","",null,{"inputs":[{"name":"tyctxt"}],"output":null}],[0,"mem_categorization","rustc::middle","# Categorization",null,null],[3,"Upvar","rustc::middle::mem_categorization","",null,null],[12,"id","","",215,null],[12,"kind","","",215,null],[3,"cmt_","","",null,null],[12,"id","","",216,null],[12,"span","","",216,null],[12,"cat","","",216,null],[12,"mutbl","","",216,null],[12,"ty","","",216,null],[12,"note","","",216,null],[3,"MemCategorizationContext","","",null,null],[12,"infcx","","",217,null],[4,"Categorization","","",null,null],[13,"Rvalue","","",218,null],[13,"StaticItem","","",218,null],[13,"Upvar","","",218,null],[13,"Local","","",218,null],[13,"Deref","","",218,null],[13,"Interior","","",218,null],[13,"Downcast","","",218,null],[4,"PointerKind","","",null,null],[13,"Unique","","`Box&lt;T&gt;`",219,null],[13,"BorrowedPtr","","`&amp;T`",219,null],[13,"UnsafePtr","","`*T`",219,null],[13,"Implicit","","Implicit deref of the `&amp;T` that results from an overloaded index `[]`.",219,null],[4,"InteriorKind","","",null,null],[13,"InteriorField","","",220,null],[13,"InteriorElement","","",220,null],[4,"FieldName","","",null,null],[13,"NamedField","","",221,null],[13,"PositionalField","","",221,null],[4,"InteriorOffsetKind","","",null,null],[13,"Index","","",222,null],[13,"Pattern","","",222,null],[4,"ElementKind","","",null,null],[13,"VecElement","","",223,null],[13,"OtherElement","","",223,null],[4,"MutabilityCategory","","",null,null],[13,"McImmutable","","",224,null],[13,"McDeclared","","",224,null],[13,"McInherited","","",224,null],[4,"Note","","",null,null],[13,"NoteClosureEnv","","",225,null],[13,"NoteUpvarRef","","",225,null],[13,"NoteNone","","",225,null],[4,"deref_kind","","",null,null],[13,"deref_ptr","","",226,null],[13,"deref_interior","","",226,null],[4,"Aliasability","","",null,null],[13,"FreelyAliasable","","",227,null],[13,"NonAliasable","","",227,null],[13,"ImmutableUnique","","",227,null],[4,"AliasableReason","","",null,null],[13,"AliasableBorrowed","","",228,null],[13,"AliasableClosure","","",228,null],[13,"AliasableOther","","",228,null],[13,"UnaliasableImmutable","","",228,null],[13,"AliasableStatic","","",228,null],[13,"AliasableStaticMut","","",228,null],[5,"ptr_sigil","","",null,{"inputs":[{"name":"pointerkind"}],"output":{"name":"str"}}],[6,"cmt","","",null,null],[6,"McResult","","",null,null],[8,"ast_node","","",null,null],[10,"id","","",229,null],[10,"span","","",229,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"clone","","",218,null],[11,"eq","","",215,null],[11,"ne","","",215,null],[11,"clone","","",215,null],[11,"hash","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"clone","","",219,null],[11,"hash","","",220,null],[11,"eq","","",220,null],[11,"ne","","",220,null],[11,"clone","","",220,null],[11,"fmt","","",221,null],[11,"hash","","",221,null],[11,"eq","","",221,null],[11,"ne","","",221,null],[11,"clone","","",221,null],[11,"fmt","","",222,null],[11,"hash","","",222,null],[11,"eq","","",222,null],[11,"clone","","",222,null],[11,"fmt","","",223,null],[11,"hash","","",223,null],[11,"eq","","",223,null],[11,"clone","","",223,null],[11,"fmt","","",224,null],[11,"hash","","",224,null],[11,"eq","","",224,null],[11,"clone","","",224,null],[11,"fmt","","",225,null],[11,"eq","","",225,null],[11,"ne","","",225,null],[11,"clone","","",225,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"clone","","",216,null],[11,"clone","","",226,null],[11,"id","rustc::hir","",30,null],[11,"span","","",30,null],[11,"id","","",25,null],[11,"span","","",25,null],[11,"clone","rustc::middle::mem_categorization","",217,null],[11,"from_mutbl","","",224,{"inputs":[{"name":"mutability"}],"output":{"name":"mutabilitycategory"}}],[11,"from_borrow_kind","","",224,{"inputs":[{"name":"borrowkind"}],"output":{"name":"mutabilitycategory"}}],[11,"inherit","","",224,null],[11,"is_mutable","","",224,null],[11,"is_immutable","","",224,null],[11,"to_user_str","","",224,null],[11,"new","","",217,{"inputs":[{"name":"inferctxt"}],"output":{"name":"memcategorizationcontext"}}],[11,"cat_expr","","",217,null],[11,"cat_expr_autoderefd","","",217,null],[11,"cat_expr_unadjusted","","",217,null],[11,"cat_def","","",217,null],[11,"temporary_scope","","Returns the lifetime of a temporary created by expr with id `id`.\nThis could be `&#39;static` if `id` is part of a constant expression.",217,null],[11,"cat_rvalue_node","","",217,null],[11,"cat_rvalue","","",217,null],[11,"cat_field","","",217,null],[11,"cat_tup_field","","",217,null],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",217,null],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",217,null],[11,"cat_imm_interior","","",217,null],[11,"cat_downcast","","",217,null],[11,"cat_pattern","","",217,null],[11,"fmt","","",227,null],[11,"clone","","",227,null],[11,"fmt","","",228,null],[11,"clone","","",228,null],[11,"guarantor","","Returns `self` after stripping away any derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",216,null],[11,"freely_aliasable","","Returns `FreelyAliasable(_)` if this lvalue represents a freely aliasable pointer type.",216,null],[11,"upvar","","",216,null],[11,"descriptive_string","","",216,null],[11,"fmt","","",216,null],[11,"fmt","","",218,null],[11,"fmt","","",219,null],[11,"fmt","","",220,null],[11,"fmt","","",215,null],[11,"fmt","","",215,null],[0,"privacy","rustc::middle","A pass that checks to make sure private fields and methods aren&#39;t used\noutside their scopes. This pass will also generate a set of exported items\nwhich are available for use externally when compiled as a library.",null,null],[3,"AccessLevels","rustc::middle::privacy","",null,null],[12,"map","","",230,null],[4,"AccessLevel","","",null,null],[13,"Reachable","","",231,null],[13,"Exported","","",231,null],[13,"Public","","",231,null],[6,"ExternalExports","","A set containing all exported definitions from external crates.\nThe set does not contain any entries from local crates.",null,null],[11,"cmp","","",231,null],[11,"partial_cmp","","",231,null],[11,"eq","","",231,null],[11,"fmt","","",231,null],[11,"clone","","",231,null],[11,"clone","","",230,null],[11,"is_reachable","","",230,null],[11,"is_exported","","",230,null],[11,"is_public","","",230,null],[11,"default","","",230,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",230,null],[0,"reachable","rustc::middle","",null,null],[5,"find_reachable","rustc::middle::reachable","",null,{"inputs":[{"name":"tyctxt"},{"name":"accesslevels"}],"output":{"name":"nodeset"}}],[0,"region","rustc::middle","This file actually contains two passes related to regions.  The first\npass builds up the `scope_map`, which describes the parent links in\nthe region hierarchy.  The second pass infers which types must be\nregion parameterized.",null,null],[3,"CodeExtent","rustc::middle::region","",null,null],[3,"CallSiteScopeData","","extent of call-site for a function/method.",null,null],[12,"fn_id","","",232,null],[12,"body_id","","",232,null],[3,"BlockRemainder","","Represents a subscope of `block` for a binding that is introduced\nby `block.stmts[first_statement_index]`. Such subscopes represent\na suffix of the block. Note that each subscope does not include\nthe initializer expression, if any, for the statement indexed by\n`first_statement_index`.",null,null],[12,"block","","",233,null],[12,"first_statement_index","","",233,null],[3,"RegionMaps","","The region maps encode information about region relationships.",null,null],[3,"Context","","",null,null],[4,"CodeExtentData","","CodeExtent represents a statically-describable extent that can be\nused to bound the lifetime/region for values.",null,null],[13,"Misc","","",234,null],[13,"CallSiteScope","","",234,null],[12,"fn_id","rustc::middle::region::CodeExtentData","",234,null],[12,"body_id","","",234,null],[13,"ParameterScope","rustc::middle::region","",234,null],[12,"fn_id","rustc::middle::region::CodeExtentData","",234,null],[12,"body_id","","",234,null],[13,"DestructionScope","rustc::middle::region","",234,null],[13,"Remainder","","",234,null],[5,"resolve_crate","","",null,{"inputs":[{"name":"session"},{"name":"map"}],"output":{"name":"regionmaps"}}],[5,"resolve_inlined_item","","",null,{"inputs":[{"name":"session"},{"name":"regionmaps"},{"name":"inlineditem"}],"output":null}],[17,"ROOT_CODE_EXTENT","","The root of everything. I should be using NonZero or profiling\ninstead of this (probably).",null,null],[17,"DUMMY_CODE_EXTENT","","A placeholder used in trans to stand for real code extents",null,null],[11,"decode","","",235,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",235,null],[11,"hash","","",235,null],[11,"cmp","","",235,null],[11,"partial_cmp","","",235,null],[11,"lt","","",235,null],[11,"le","","",235,null],[11,"gt","","",235,null],[11,"ge","","",235,null],[11,"eq","","",235,null],[11,"ne","","",235,null],[11,"clone","","",235,null],[11,"fmt","","",235,null],[11,"fmt","","",234,null],[11,"hash","","",234,null],[11,"cmp","","",234,null],[11,"partial_cmp","","",234,null],[11,"lt","","",234,null],[11,"le","","",234,null],[11,"gt","","",234,null],[11,"ge","","",234,null],[11,"eq","","",234,null],[11,"ne","","",234,null],[11,"clone","","",234,null],[11,"fmt","","",232,null],[11,"decode","","",232,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",232,null],[11,"hash","","",232,null],[11,"cmp","","",232,null],[11,"partial_cmp","","",232,null],[11,"lt","","",232,null],[11,"le","","",232,null],[11,"gt","","",232,null],[11,"ge","","",232,null],[11,"eq","","",232,null],[11,"ne","","",232,null],[11,"clone","","",232,null],[11,"to_code_extent","","",232,null],[11,"fmt","","",233,null],[11,"decode","","",233,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",233,null],[11,"hash","","",233,null],[11,"cmp","","",233,null],[11,"partial_cmp","","",233,null],[11,"lt","","",233,null],[11,"le","","",233,null],[11,"gt","","",233,null],[11,"ge","","",233,null],[11,"eq","","",233,null],[11,"ne","","",233,null],[11,"clone","","",233,null],[11,"node_id","","Returns a node id associated with this scope.",234,null],[11,"node_id","","",235,null],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",235,null],[11,"clone","","",236,null],[11,"fmt","","",236,null],[11,"bogus_code_extent","","create a bogus code extent for the regions in astencode types. Nobody\nreally cares about the contents of these.",237,null],[11,"lookup_code_extent","","",237,null],[11,"node_extent","","",237,null],[11,"item_extent","","",237,null],[11,"call_site_extent","","",237,null],[11,"opt_destruction_extent","","",237,null],[11,"intern_code_extent","","",237,null],[11,"intern_node","","",237,null],[11,"code_extent_data","","",237,null],[11,"each_encl_scope","","",237,null],[11,"each_var_scope","","",237,null],[11,"each_rvalue_scope","","",237,null],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",237,null],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",237,null],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",237,null],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",237,null],[11,"var_region","","Returns the lifetime of the variable `id`.",237,null],[11,"scopes_intersect","","",237,null],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",237,null],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",237,null],[0,"recursion_limit","rustc::middle","",null,null],[5,"update_recursion_limit","rustc::middle::recursion_limit","",null,{"inputs":[{"name":"session"},{"name":"crate"}],"output":null}],[0,"resolve_lifetime","rustc::middle","Name resolution for lifetimes.",null,null],[4,"DefRegion","rustc::middle::resolve_lifetime","",null,null],[13,"DefStaticRegion","","",238,null],[13,"DefEarlyBoundRegion","","",238,null],[13,"DefLateBoundRegion","","",238,null],[13,"DefFreeRegion","","",238,null],[5,"krate","","",null,{"inputs":[{"name":"session"},{"name":"map"},{"name":"defmap"}],"output":{"name":"result"}}],[5,"early_bound_lifetimes","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"vec"}}],[6,"NamedRegionMap","","",null,null],[11,"fmt","","",238,null],[11,"decode","","",238,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",238,null],[11,"hash","","",238,null],[11,"eq","","",238,null],[11,"ne","","",238,null],[11,"clone","","",238,null],[0,"stability","rustc::middle","A pass that annotates every item and method with its stability level,\npropagating default levels lexically from parent to children ast nodes.",null,null],[3,"Index","rustc::middle::stability","A stability index, giving the stability level for items and methods.",null,null],[4,"StabilityLevel","","",null,null],[13,"Unstable","","",239,null],[13,"Stable","","",239,null],[5,"check_unstable_api_usage","","Cross-references the feature names of unstable APIs with enabled\nfeatures and possibly prints errors. Returns a list of all\nfeatures used.",null,{"inputs":[{"name":"tyctxt"}],"output":{"name":"fnvhashmap"}}],[5,"check_item","","Helper for discovering nodes to check for stability",null,{"inputs":[{"name":"tyctxt"},{"name":"item"},{"name":"bool"},{"name":"fnmut"}],"output":null}],[5,"check_expr","","Helper for discovering nodes to check for stability",null,{"inputs":[{"name":"tyctxt"},{"name":"expr"},{"name":"fnmut"}],"output":null}],[5,"check_path","","",null,{"inputs":[{"name":"tyctxt"},{"name":"path"},{"name":"nodeid"},{"name":"fnmut"}],"output":null}],[5,"check_path_list_item","","",null,{"inputs":[{"name":"tyctxt"},{"name":"pathlistitem"},{"name":"fnmut"}],"output":null}],[5,"check_pat","","",null,{"inputs":[{"name":"tyctxt"},{"name":"pat"},{"name":"fnmut"}],"output":null}],[5,"check_unused_or_stable_features","","Given the list of enabled features that were not language features (i.e. that\nwere expected to be library features), and the list of features used from\nlibraries, identify activated features that don&#39;t exist and error about them.",null,{"inputs":[{"name":"session"},{"name":"fnvhashmap"}],"output":null}],[11,"hash","","",239,null],[11,"fmt","","",239,null],[11,"clone","","",239,null],[11,"partial_cmp","","",239,null],[11,"eq","","",239,null],[11,"decode","","",239,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",239,null],[11,"from_attr_level","","",239,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"self"}}],[11,"build","","Construct the stability index for a crate being compiled.",240,null],[11,"new","","",240,{"inputs":[{"name":"map"}],"output":{"name":"index"}}],[0,"weak_lang_items","rustc::middle","Validity checking for weak lang items",null,null],[5,"check_crate","rustc::middle::weak_lang_items","Checks the crate for usage of weak lang items, returning a vector of all the\nlanguage items required by this crate, but not defined yet.",null,{"inputs":[{"name":"crate"},{"name":"session"},{"name":"languageitems"}],"output":null}],[5,"link_name","","",null,null],[0,"mir","rustc","",null,null],[0,"repr","rustc::mir","",null,null],[3,"Mir","rustc::mir::repr","Lowered representation of a single function.",null,null],[12,"basic_blocks","","List of basic blocks. References to basic block use a newtyped index type `BasicBlock`\nthat indexes into this vector.",241,null],[12,"scopes","","List of lexical scopes; these are referenced by statements and\nused (eventually) for debuginfo. Indexed by a `ScopeId`.",241,null],[12,"promoted","","Rvalues promoted from this function, such as borrows of constants.\nEach of them is the Mir of a constant with the fn&#39;s type parameters\nin scope, but no vars or args and a separate set of temps.",241,null],[12,"return_ty","","Return type of the function.",241,null],[12,"var_decls","","Variables: these are stack slots corresponding to user variables. They may be\nassigned many times.",241,null],[12,"arg_decls","","Args: these are stack slots corresponding to the input arguments.",241,null],[12,"temp_decls","","Temp declarations: stack slots that for temporaries created by\nthe compiler. These are assigned once, but they are not SSA\nvalues in that it is possible to borrow them and mutate them\nthrough the resulting reference.",241,null],[12,"upvar_decls","","Names and capture modes of all the closure upvars, assuming\nthe first argument is either the closure or a reference to it.",241,null],[12,"span","","A span representing this MIR, for error reporting",241,null],[3,"VarDecl","","A &quot;variable&quot; is a binding declared by the user as part of the fn\ndecl, a let, etc.",null,null],[12,"mutability","","`let mut x` vs `let x`",242,null],[12,"name","","name that user gave the variable; not that, internally,\nmir references variables by index",242,null],[12,"ty","","type inferred for this variable (`let x: ty = ...`)",242,null],[12,"scope","","scope in which variable was declared",242,null],[12,"span","","span where variable was declared",242,null],[3,"TempDecl","","A &quot;temp&quot; is a temporary that we place on the stack. They are\nanonymous, always mutable, and have only a type.",null,null],[12,"ty","","",243,null],[3,"ArgDecl","","A &quot;arg&quot; is one of the function&#39;s formal arguments. These are\nanonymous and distinct from the bindings that the user declares.",null,null],[12,"ty","","",244,null],[12,"spread","","If true, this argument is a tuple after monomorphization,\nand has to be collected from multiple actual arguments.",244,null],[12,"debug_name","","Either keywords::Invalid or the name of a single-binding\npattern associated with this argument. Useful for debuginfo.",244,null],[3,"UpvarDecl","","A closure capture, with its name and mode.",null,null],[12,"debug_name","","",245,null],[12,"by_ref","","If true, the capture is behind a reference.",245,null],[3,"BasicBlock","","The index of a particular basic block. The index is into the `basic_blocks`\nlist of the `Mir`.",null,null],[3,"BasicBlockData","","",null,null],[12,"statements","","List of statements in this block.",246,null],[12,"terminator","","Terminator for this block.",246,null],[12,"is_cleanup","","If true, this block lies on an unwind path. This is used\nduring trans where distinct kinds of basic blocks may be\ngenerated (particularly for MSVC cleanup). Unwind blocks must\nonly branch to other unwind blocks.",246,null],[3,"Terminator","","",null,null],[12,"span","","",247,null],[12,"scope","","",247,null],[12,"kind","","",247,null],[3,"Statement","","",null,null],[12,"span","","",248,null],[12,"scope","","",248,null],[12,"kind","","",248,null],[3,"Projection","","The `Projection` data structure defines things of the form `B.x`\nor `*B` or `B[index]`. Note that it is parameterized because it is\nshared between `Constant` and `Lvalue`. See the aliases\n`LvalueProjection` etc below.",null,null],[12,"base","","",249,null],[12,"elem","","",249,null],[3,"Field","","Index into the list of fields found in a `VariantDef`",null,null],[3,"ScopeId","","",null,null],[3,"ScopeData","","",null,null],[12,"span","","",250,null],[12,"parent_scope","","",250,null],[3,"Constant","","Constants",null,null],[12,"span","","",251,null],[12,"ty","","",251,null],[12,"literal","","",251,null],[3,"TypedConstVal","","",null,null],[12,"ty","","",252,null],[12,"span","","",252,null],[12,"value","","",252,null],[4,"Mutability","","",null,null],[13,"Mut","","",253,null],[13,"Not","","",253,null],[4,"BorrowKind","","",null,null],[13,"Shared","","Data must be immutable and is aliasable.",254,null],[13,"Unique","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",254,null],[13,"Mut","","Data is mutable and not aliasable.",254,null],[4,"TerminatorKind","","",null,null],[13,"Goto","","block should have one successor in the graph; we jump there",255,null],[12,"target","rustc::mir::repr::TerminatorKind","",255,null],[13,"If","rustc::mir::repr","jump to branch 0 if this lvalue evaluates to true",255,null],[12,"cond","rustc::mir::repr::TerminatorKind","",255,null],[12,"targets","","",255,null],[13,"Switch","rustc::mir::repr","lvalue evaluates to some enum; jump depending on the branch",255,null],[12,"discr","rustc::mir::repr::TerminatorKind","",255,null],[12,"adt_def","","",255,null],[12,"targets","","",255,null],[13,"SwitchInt","rustc::mir::repr","operand evaluates to an integer; jump depending on its value\nto one of the targets, and otherwise fallback to `otherwise`",255,null],[12,"discr","rustc::mir::repr::TerminatorKind","discriminant value being tested",255,null],[12,"switch_ty","","type of value being tested",255,null],[12,"values","","Possible values. The locations to branch to in each case\nare found in the corresponding indices from the `targets` vector.",255,null],[12,"targets","","Possible branch sites. The length of this vector should be\nequal to the length of the `values` vector plus 1 -- the\nextra item is the block to branch to if none of the values\nfit.",255,null],[13,"Resume","rustc::mir::repr","Indicates that the landing pad is finished and unwinding should\ncontinue. Emitted by build::scope::diverge_cleanup.",255,null],[13,"Return","","Indicates a normal return. The ReturnPointer lvalue should\nhave been filled in by now. This should occur at most once.",255,null],[13,"Drop","","Drop the Lvalue",255,null],[12,"value","rustc::mir::repr::TerminatorKind","",255,null],[12,"target","","",255,null],[12,"unwind","","",255,null],[13,"Call","rustc::mir::repr","Block ends with a call of a converging function",255,null],[12,"func","rustc::mir::repr::TerminatorKind","The function that’s being called",255,null],[12,"args","","Arguments the function is called with",255,null],[12,"destination","","Destination for the return value. If some, the call is converging.",255,null],[12,"cleanup","","Cleanups to be done if the call unwinds.",255,null],[4,"StatementKind","rustc::mir::repr","",null,null],[13,"Assign","","",256,null],[4,"Lvalue","","A path to a value; something that can be evaluated without\nchanging or disturbing program state.",null,null],[13,"Var","","local variable declared by the user",257,null],[13,"Temp","","temporary introduced during lowering into MIR",257,null],[13,"Arg","","formal parameter of the function; note that these are NOT the\nbindings that the user declares, which are vars",257,null],[13,"Static","","static or static mut variable",257,null],[13,"ReturnPointer","","the return pointer of the fn",257,null],[13,"Projection","","projection out of an lvalue (access a field, deref a pointer, etc)",257,null],[4,"ProjectionElem","","",null,null],[13,"Deref","","",258,null],[13,"Field","","",258,null],[13,"Index","","",258,null],[13,"ConstantIndex","","These indices are generated by slice patterns. Easiest to explain\nby example:",258,null],[12,"offset","rustc::mir::repr::ProjectionElem","index or -index (in Python terms), depending on from_end",258,null],[12,"min_length","","thing being indexed must be at least this long",258,null],[12,"from_end","","counting backwards from end?",258,null],[13,"Downcast","rustc::mir::repr","&quot;Downcast&quot; to a variant of an ADT. Currently, we only introduce\nthis for ADTs with more than one variant. It may be better to\njust introduce it always, or always for enums.",258,null],[4,"Operand","","These are values that can appear inside an rvalue (or an index\nlvalue). They are intentionally limited to prevent rvalues from\nbeing nested in one another.",null,null],[13,"Consume","","",259,null],[13,"Constant","","",259,null],[4,"Rvalue","","Rvalues",null,null],[13,"Use","","x (either a move or copy, depending on type of x)",260,null],[13,"Repeat","","[x; 32]",260,null],[13,"Ref","","&amp;x or &amp;mut x",260,null],[13,"Len","","length of a [X] or [X;n] value",260,null],[13,"Cast","","",260,null],[13,"BinaryOp","","",260,null],[13,"UnaryOp","","",260,null],[13,"Box","","Creates an *uninitialized* Box",260,null],[13,"Aggregate","","Create an aggregate value, like a tuple or struct.  This is\nonly needed because we want to distinguish `dest = Foo { x:\n..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case\nthat `Foo` has a destructor. These rvalues can be optimized\naway after type-checking and before lowering.",260,null],[13,"Slice","","Generates a slice of the form `&amp;input[from_start..L-from_end]`\nwhere `L` is the length of the slice. This is only created by\nslice pattern matching, so e.g. a pattern of the form `[x, y,\n.., z]` might create a slice with `from_start=2` and\n`from_end=1`.",260,null],[12,"input","rustc::mir::repr::Rvalue","",260,null],[12,"from_start","","",260,null],[12,"from_end","","",260,null],[13,"InlineAsm","rustc::mir::repr","",260,null],[12,"asm","rustc::mir::repr::Rvalue","",260,null],[12,"outputs","","",260,null],[12,"inputs","","",260,null],[4,"CastKind","rustc::mir::repr","",null,null],[13,"Misc","","",261,null],[13,"ReifyFnPointer","","Convert unique, zero-sized type for a fn to fn()",261,null],[13,"UnsafeFnPointer","","Convert safe fn() to unsafe fn()",261,null],[13,"Unsize","","&quot;Unsize&quot; -- convert a thin-or-fat pointer to a fat pointer.\ntrans must figure out the details once full monomorphization\nis known. For example, this could be used to cast from a\n`&amp;[i32;N]` to a `&amp;[i32]`, or a `Box&lt;T&gt;` to a `Box&lt;Trait&gt;`\n(presuming `T: Trait`).",261,null],[4,"AggregateKind","","",null,null],[13,"Vec","","",262,null],[13,"Tuple","","",262,null],[13,"Adt","","",262,null],[13,"Closure","","",262,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",263,null],[13,"Sub","","The `-` operator (subtraction)",263,null],[13,"Mul","","The `*` operator (multiplication)",263,null],[13,"Div","","The `/` operator (division)",263,null],[13,"Rem","","The `%` operator (modulus)",263,null],[13,"BitXor","","The `^` operator (bitwise xor)",263,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",263,null],[13,"BitOr","","The `|` operator (bitwise or)",263,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",263,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",263,null],[13,"Eq","","The `==` operator (equality)",263,null],[13,"Lt","","The `&lt;` operator (less than)",263,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",263,null],[13,"Ne","","The `!=` operator (not equal to)",263,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",263,null],[13,"Gt","","The `&gt;` operator (greater than)",263,null],[4,"UnOp","","",null,null],[13,"Not","","The `!` operator for logical inversion",264,null],[13,"Neg","","The `-` operator for negation",264,null],[4,"Literal","","",null,null],[13,"Item","","",265,null],[12,"def_id","rustc::mir::repr::Literal","",265,null],[12,"substs","","",265,null],[13,"Value","rustc::mir::repr","",265,null],[12,"value","rustc::mir::repr::Literal","",265,null],[13,"Promoted","rustc::mir::repr","",265,null],[12,"index","rustc::mir::repr::Literal","",265,null],[6,"LvalueProjection","rustc::mir::repr","Alias for projections as they appear in lvalues, where the base is an lvalue\nand the index is an operand.",null,null],[6,"LvalueElem","","Alias for projections as they appear in lvalues, where the base is an lvalue\nand the index is an operand.",null,null],[17,"START_BLOCK","","where execution begins",null,null],[11,"decode","","",241,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",241,null],[11,"clone","","",241,null],[11,"all_basic_blocks","","",241,null],[11,"basic_block_data","","",241,null],[11,"basic_block_data_mut","","",241,null],[11,"index","","",241,null],[11,"index_mut","","",241,null],[11,"decode","","",253,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",253,null],[11,"eq","","",253,null],[11,"fmt","","",253,null],[11,"clone","","",253,null],[11,"decode","","",254,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",254,null],[11,"eq","","",254,null],[11,"fmt","","",254,null],[11,"clone","","",254,null],[11,"decode","","",242,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",242,null],[11,"fmt","","",242,null],[11,"clone","","",242,null],[11,"decode","","",243,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",243,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"decode","","",244,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",244,null],[11,"fmt","","",244,null],[11,"clone","","",244,null],[11,"decode","","",245,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",245,null],[11,"fmt","","",245,null],[11,"clone","","",245,null],[11,"decode","","",266,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",266,null],[11,"hash","","",266,null],[11,"eq","","",266,null],[11,"ne","","",266,null],[11,"clone","","",266,null],[11,"new","","",266,{"inputs":[{"name":"usize"}],"output":{"name":"basicblock"}}],[11,"index","","Extract the index.",266,null],[11,"fmt","","",266,null],[11,"decode","","",246,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",246,null],[11,"fmt","","",246,null],[11,"clone","","",246,null],[11,"decode","","",247,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",247,null],[11,"fmt","","",247,null],[11,"clone","","",247,null],[11,"decode","","",255,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",255,null],[11,"clone","","",255,null],[11,"successors","","",247,null],[11,"successors_mut","","",247,null],[11,"successors","","",255,null],[11,"successors_mut","","",255,null],[11,"new","","",246,{"inputs":[{"name":"option"}],"output":{"name":"basicblockdata"}}],[11,"terminator","","Accessor for terminator.",246,null],[11,"terminator_mut","","",246,null],[11,"fmt","","",255,null],[11,"fmt_head","","Write the &quot;head&quot; part of the terminator; that is, its name and the data it uses to pick the\nsuccessor basic block, if any. The only information not inlcuded is the list of possible\nsuccessors, which may be rendered differently between the text and the graphviz format.",255,null],[11,"fmt_successor_labels","","Return the list of labels for the edges to the successor basic blocks.",255,null],[11,"decode","","",248,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",248,null],[11,"clone","","",248,null],[11,"decode","","",256,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",256,null],[11,"fmt","","",256,null],[11,"clone","","",256,null],[11,"fmt","","",248,null],[11,"decode","","",257,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",257,null],[11,"eq","","",257,null],[11,"ne","","",257,null],[11,"clone","","",257,null],[11,"decode","","",249,{"inputs":[{"name":"__dbv"}],"output":{"name":"result"}}],[11,"encode","","",249,null],[11,"hash","","",249,null],[11,"eq","","",249,null],[11,"ne","","",249,null],[11,"fmt","","",249,null],[11,"clone","","",249,null],[11,"decode","","",258,{"inputs":[{"name":"__dv"}],"output":{"name":"result"}}],[11,"encode","","",258,null],[11,"hash","","",258,null],[11,"eq","","",258,null],[11,"ne","","",258,null],[11,"fmt","","",258,null],[11,"clone","","",258,null],[11,"decode","","",267,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",267,null],[11,"hash","","",267,null],[11,"eq","","",267,null],[11,"ne","","",267,null],[11,"fmt","","",267,null],[11,"clone","","",267,null],[11,"new","","",267,{"inputs":[{"name":"usize"}],"output":{"name":"field"}}],[11,"index","","",267,null],[11,"field","","",257,null],[11,"deref","","",257,null],[11,"index","","",257,null],[11,"elem","","",257,null],[11,"fmt","","",257,null],[11,"index","collections::vec","",268,null],[11,"index_mut","","",268,null],[11,"decode","rustc::mir::repr","",269,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",269,null],[11,"eq","","",269,null],[11,"ne","","",269,null],[11,"hash","","",269,null],[11,"fmt","","",269,null],[11,"clone","","",269,null],[11,"new","","",269,{"inputs":[{"name":"usize"}],"output":{"name":"scopeid"}}],[11,"index","","",269,null],[11,"decode","","",250,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",250,null],[11,"fmt","","",250,null],[11,"clone","","",250,null],[11,"decode","","",259,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",259,null],[11,"eq","","",259,null],[11,"ne","","",259,null],[11,"clone","","",259,null],[11,"fmt","","",259,null],[11,"decode","","",260,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",260,null],[11,"clone","","",260,null],[11,"decode","","",261,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",261,null],[11,"eq","","",261,null],[11,"fmt","","",261,null],[11,"clone","","",261,null],[11,"decode","","",262,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",262,null],[11,"eq","","",262,null],[11,"ne","","",262,null],[11,"fmt","","",262,null],[11,"clone","","",262,null],[11,"decode","","",263,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",263,null],[11,"eq","","",263,null],[11,"fmt","","",263,null],[11,"clone","","",263,null],[11,"decode","","",264,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",264,null],[11,"eq","","",264,null],[11,"fmt","","",264,null],[11,"clone","","",264,null],[11,"fmt","","",260,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"hash","","",251,null],[11,"eq","","",251,null],[11,"ne","","",251,null],[11,"clone","","",251,null],[11,"decode","","",252,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",252,null],[11,"clone","","",252,null],[11,"fmt","","",252,null],[11,"decode","","",265,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",265,null],[11,"hash","","",265,null],[11,"eq","","",265,null],[11,"ne","","",265,null],[11,"clone","","",265,null],[11,"fmt","","",251,null],[11,"fmt","","",265,null],[0,"tcx","rustc::mir","Methods for the various MIR types. These are intended for use after\nbuilding is complete.",null,null],[4,"LvalueTy","rustc::mir::tcx","",null,null],[13,"Ty","","Normal type.",270,null],[12,"ty","rustc::mir::tcx::LvalueTy","",270,null],[13,"Downcast","rustc::mir::tcx","Downcast to a particular variant of an enum.",270,null],[12,"adt_def","rustc::mir::tcx::LvalueTy","",270,null],[12,"substs","","",270,null],[12,"variant_index","","",270,null],[11,"fmt","rustc::mir::tcx","",270,null],[11,"clone","","",270,null],[11,"from_ty","","",270,{"inputs":[{"name":"ty"}],"output":{"name":"lvaluety"}}],[11,"to_ty","","",270,null],[11,"projection_ty","","",270,null],[11,"super_fold_with","","",270,null],[11,"super_visit_with","","",270,null],[11,"operand_ty","rustc::mir::repr","",241,null],[11,"binop_ty","","",241,null],[11,"lvalue_ty","","",241,null],[11,"rvalue_ty","","",241,null],[11,"to_mutbl_lossy","","",254,null],[11,"to_hir_binop","","",263,null],[0,"visit","rustc::mir","",null,null],[4,"LvalueContext","rustc::mir::visit","",null,null],[13,"Store","","",271,null],[13,"Call","","",271,null],[13,"Drop","","",271,null],[13,"Inspect","","",271,null],[13,"Borrow","","",271,null],[12,"region","rustc::mir::visit::LvalueContext","",271,null],[12,"kind","","",271,null],[13,"Slice","rustc::mir::visit","",271,null],[12,"from_start","rustc::mir::visit::LvalueContext","",271,null],[12,"from_end","","",271,null],[13,"Projection","rustc::mir::visit","",271,null],[13,"Consume","","",271,null],[8,"Visitor","","",null,null],[11,"visit_mir","","",272,null],[11,"visit_basic_block_data","","",272,null],[11,"visit_scope_data","","",272,null],[11,"visit_statement","","",272,null],[11,"visit_assign","","",272,null],[11,"visit_terminator","","",272,null],[11,"visit_terminator_kind","","",272,null],[11,"visit_rvalue","","",272,null],[11,"visit_operand","","",272,null],[11,"visit_lvalue","","",272,null],[11,"visit_projection","","",272,null],[11,"visit_projection_elem","","",272,null],[11,"visit_branch","","",272,null],[11,"visit_constant","","",272,null],[11,"visit_literal","","",272,null],[11,"visit_def_id","","",272,null],[11,"visit_span","","",272,null],[11,"visit_fn_output","","",272,null],[11,"visit_ty","","",272,null],[11,"visit_substs","","",272,null],[11,"visit_closure_substs","","",272,null],[11,"visit_const_val","","",272,null],[11,"visit_const_usize","","",272,null],[11,"visit_typed_const_val","","",272,null],[11,"visit_var_decl","","",272,null],[11,"visit_temp_decl","","",272,null],[11,"visit_arg_decl","","",272,null],[11,"visit_scope_id","","",272,null],[11,"super_mir","","",272,null],[11,"super_basic_block_data","","",272,null],[11,"super_scope_data","","",272,null],[11,"super_statement","","",272,null],[11,"super_assign","","",272,null],[11,"super_terminator","","",272,null],[11,"super_terminator_kind","","",272,null],[11,"super_rvalue","","",272,null],[11,"super_operand","","",272,null],[11,"super_lvalue","","",272,null],[11,"super_projection","","",272,null],[11,"super_projection_elem","","",272,null],[11,"super_var_decl","","",272,null],[11,"super_temp_decl","","",272,null],[11,"super_arg_decl","","",272,null],[11,"super_scope_id","","",272,null],[11,"super_branch","","",272,null],[11,"super_constant","","",272,null],[11,"super_typed_const_val","","",272,null],[11,"super_literal","","",272,null],[11,"super_def_id","","",272,null],[11,"super_span","","",272,null],[11,"super_fn_output","","",272,null],[11,"super_ty","","",272,null],[11,"super_substs","","",272,null],[11,"super_closure_substs","","",272,null],[11,"super_const_val","","",272,null],[11,"super_const_usize","","",272,null],[8,"MutVisitor","","",null,null],[11,"visit_mir","","",273,null],[11,"visit_basic_block_data","","",273,null],[11,"visit_scope_data","","",273,null],[11,"visit_statement","","",273,null],[11,"visit_assign","","",273,null],[11,"visit_terminator","","",273,null],[11,"visit_terminator_kind","","",273,null],[11,"visit_rvalue","","",273,null],[11,"visit_operand","","",273,null],[11,"visit_lvalue","","",273,null],[11,"visit_projection","","",273,null],[11,"visit_projection_elem","","",273,null],[11,"visit_branch","","",273,null],[11,"visit_constant","","",273,null],[11,"visit_literal","","",273,null],[11,"visit_def_id","","",273,null],[11,"visit_span","","",273,null],[11,"visit_fn_output","","",273,null],[11,"visit_ty","","",273,null],[11,"visit_substs","","",273,null],[11,"visit_closure_substs","","",273,null],[11,"visit_const_val","","",273,null],[11,"visit_const_usize","","",273,null],[11,"visit_typed_const_val","","",273,null],[11,"visit_var_decl","","",273,null],[11,"visit_temp_decl","","",273,null],[11,"visit_arg_decl","","",273,null],[11,"visit_scope_id","","",273,null],[11,"super_mir","","",273,null],[11,"super_basic_block_data","","",273,null],[11,"super_scope_data","","",273,null],[11,"super_statement","","",273,null],[11,"super_assign","","",273,null],[11,"super_terminator","","",273,null],[11,"super_terminator_kind","","",273,null],[11,"super_rvalue","","",273,null],[11,"super_operand","","",273,null],[11,"super_lvalue","","",273,null],[11,"super_projection","","",273,null],[11,"super_projection_elem","","",273,null],[11,"super_var_decl","","",273,null],[11,"super_temp_decl","","",273,null],[11,"super_arg_decl","","",273,null],[11,"super_scope_id","","",273,null],[11,"super_branch","","",273,null],[11,"super_constant","","",273,null],[11,"super_typed_const_val","","",273,null],[11,"super_literal","","",273,null],[11,"super_def_id","","",273,null],[11,"super_span","","",273,null],[11,"super_fn_output","","",273,null],[11,"super_ty","","",273,null],[11,"super_substs","","",273,null],[11,"super_closure_substs","","",273,null],[11,"super_const_val","","",273,null],[11,"super_const_usize","","",273,null],[11,"fmt","","",271,null],[11,"clone","","",271,null],[0,"transform","rustc::mir","",null,null],[3,"Passes","rustc::mir::transform","A manager for MIR passes.",null,null],[4,"MirSource","","Where a specific Mir comes from.",null,null],[13,"Fn","","Functions and methods.",274,null],[13,"Const","","Constants and associated constants.",274,null],[13,"Static","","Initializer of a `static` item.",274,null],[13,"Promoted","","Promoted rvalues within a function.",274,null],[8,"Pass","","Various information about pass.",null,null],[11,"dep_node","","",275,null],[8,"MirMapPass","","A pass which inspects the whole MirMap.",null,null],[10,"run_pass","","",276,null],[8,"MirPass","","A pass which inspects Mir of functions in isolation.",null,null],[11,"run_pass_on_promoted","","",277,null],[10,"run_pass","","",277,null],[11,"clone","","",274,null],[11,"from_node","","",274,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"}],"output":{"name":"mirsource"}}],[11,"item_id","","",274,null],[11,"new","","",278,{"inputs":[],"output":{"name":"passes"}}],[11,"run_passes","","",278,null],[11,"push_pass","","Pushes a built-in pass.",278,null],[11,"extend","","",278,null],[0,"mir_map","rustc::mir","",null,null],[3,"MirMap","rustc::mir::mir_map","",null,null],[12,"map","","",279,null],[0,"session","rustc","",null,null],[3,"Session","rustc::session","",null,null],[12,"target","","",280,null],[12,"host","","",280,null],[12,"opts","","",280,null],[12,"cstore","","",280,null],[12,"parse_sess","","",280,null],[12,"entry_fn","","",280,null],[12,"entry_type","","",280,null],[12,"plugin_registrar_fn","","",280,null],[12,"default_sysroot","","",280,null],[12,"local_crate_source_file","","",280,null],[12,"working_dir","","",280,null],[12,"lint_store","","",280,null],[12,"lints","","",280,null],[12,"plugin_llvm_passes","","",280,null],[12,"mir_passes","","",280,null],[12,"plugin_attributes","","",280,null],[12,"crate_types","","",280,null],[12,"dependency_formats","","",280,null],[12,"crate_disambiguator","","",280,null],[12,"features","","",280,null],[12,"recursion_limit","","The maximum recursion limit for potentially infinitely recursive\noperations such as auto-dereference and monomorphization.",280,null],[12,"injected_allocator","","The metadata::creader module may inject an allocator/panic_runtime\ndependency if it didn&#39;t already find one, and this tracks what was\ninjected.",280,null],[12,"injected_panic_runtime","","",280,null],[12,"available_macros","","Names of all bang-style macros and syntax extensions\navailable in this crate",280,null],[12,"imported_macro_spans","","Map from imported macro spans (which consist of\nthe localized span for the macro body) to the\nmacro name and defintion span in the source crate.",280,null],[5,"build_session","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_with_codemap","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"registry"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"build_session_","","",null,{"inputs":[{"name":"options"},{"name":"option"},{"name":"handler"},{"name":"rc"},{"name":"rc"}],"output":{"name":"session"}}],[5,"early_error","","",null,{"inputs":[{"name":"erroroutputtype"},{"name":"str"}],"output":null}],[5,"early_warn","","",null,{"inputs":[{"name":"erroroutputtype"},{"name":"str"}],"output":null}],[5,"compile_result_from_err_count","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"compileresult"}}],[5,"bug_fmt","","",null,{"inputs":[{"name":"str"},{"name":"u32"},{"name":"arguments"}],"output":null}],[5,"span_bug_fmt","","",null,{"inputs":[{"name":"str"},{"name":"u32"},{"name":"s"},{"name":"arguments"}],"output":null}],[0,"config","","Contains infrastructure for configuring the compiler, including parsing\ncommand line options.",null,null],[3,"Config","rustc::session::config","",null,null],[12,"target","","",281,null],[12,"int_type","","",281,null],[12,"uint_type","","",281,null],[3,"Options","","",null,null],[12,"crate_types","","",282,null],[12,"gc","","",282,null],[12,"optimize","","",282,null],[12,"debug_assertions","","",282,null],[12,"debuginfo","","",282,null],[12,"lint_opts","","",282,null],[12,"lint_cap","","",282,null],[12,"describe_lints","","",282,null],[12,"output_types","","",282,null],[12,"search_paths","","",282,null],[12,"libs","","",282,null],[12,"maybe_sysroot","","",282,null],[12,"target_triple","","",282,null],[12,"cfg","","",282,null],[12,"test","","",282,null],[12,"parse_only","","",282,null],[12,"no_trans","","",282,null],[12,"error_format","","",282,null],[12,"treat_err_as_bug","","",282,null],[12,"continue_parse_after_error","","",282,null],[12,"mir_opt_level","","",282,null],[12,"incremental","","if Some, enable incremental compilation, using the given\ndirectory to store intermediate results",282,null],[12,"no_analysis","","",282,null],[12,"debugging_opts","","",282,null],[12,"prints","","",282,null],[12,"cg","","",282,null],[12,"externs","","",282,null],[12,"crate_name","","",282,null],[12,"alt_std_name","","An optional name to use as the crate for std during std injection,\nwritten `extern crate std = &quot;name&quot;`. Default to &quot;std&quot;. Used by\nout-of-tree drivers.",282,null],[12,"unstable_features","","Indicates how the compiler should treat unstable features",282,null],[3,"OutputFilenames","","",null,null],[12,"out_directory","","",283,null],[12,"out_filestem","","",283,null],[12,"single_output_file","","",283,null],[12,"extra","","",283,null],[12,"outputs","","",283,null],[3,"CodegenOptions","","",null,null],[12,"ar","","",284,null],[12,"linker","","",284,null],[12,"link_args","","",284,null],[12,"link_dead_code","","",284,null],[12,"lto","","",284,null],[12,"target_cpu","","",284,null],[12,"target_feature","","",284,null],[12,"passes","","",284,null],[12,"llvm_args","","",284,null],[12,"save_temps","","",284,null],[12,"rpath","","",284,null],[12,"no_prepopulate_passes","","",284,null],[12,"no_vectorize_loops","","",284,null],[12,"no_vectorize_slp","","",284,null],[12,"soft_float","","",284,null],[12,"prefer_dynamic","","",284,null],[12,"no_integrated_as","","",284,null],[12,"no_redzone","","",284,null],[12,"relocation_model","","",284,null],[12,"code_model","","",284,null],[12,"metadata","","",284,null],[12,"extra_filename","","",284,null],[12,"codegen_units","","",284,null],[12,"remark","","",284,null],[12,"no_stack_check","","",284,null],[12,"debuginfo","","",284,null],[12,"opt_level","","",284,null],[12,"debug_assertions","","",284,null],[12,"inline_threshold","","",284,null],[12,"panic","","",284,null],[3,"DebuggingOptions","","",null,null],[12,"verbose","","",285,null],[12,"time_passes","","",285,null],[12,"count_llvm_insns","","",285,null],[12,"time_llvm_passes","","",285,null],[12,"input_stats","","",285,null],[12,"trans_stats","","",285,null],[12,"asm_comments","","",285,null],[12,"no_verify","","",285,null],[12,"borrowck_stats","","",285,null],[12,"no_landing_pads","","",285,null],[12,"debug_llvm","","",285,null],[12,"count_type_sizes","","",285,null],[12,"meta_stats","","",285,null],[12,"print_link_args","","",285,null],[12,"gc","","",285,null],[12,"print_llvm_passes","","",285,null],[12,"ast_json","","",285,null],[12,"ast_json_noexpand","","",285,null],[12,"ls","","",285,null],[12,"save_analysis","","",285,null],[12,"save_analysis_csv","","",285,null],[12,"print_move_fragments","","",285,null],[12,"flowgraph_print_loans","","",285,null],[12,"flowgraph_print_moves","","",285,null],[12,"flowgraph_print_assigns","","",285,null],[12,"flowgraph_print_all","","",285,null],[12,"print_region_graph","","",285,null],[12,"parse_only","","",285,null],[12,"no_trans","","",285,null],[12,"treat_err_as_bug","","",285,null],[12,"continue_parse_after_error","","",285,null],[12,"incremental","","",285,null],[12,"dump_dep_graph","","",285,null],[12,"query_dep_graph","","",285,null],[12,"no_analysis","","",285,null],[12,"extra_plugins","","",285,null],[12,"unstable_options","","",285,null],[12,"print_enum_sizes","","",285,null],[12,"force_overflow_checks","","",285,null],[12,"force_dropflag_checks","","",285,null],[12,"trace_macros","","",285,null],[12,"enable_nonzeroing_move_hints","","",285,null],[12,"keep_mtwt_tables","","",285,null],[12,"keep_ast","","",285,null],[12,"show_span","","",285,null],[12,"print_trans_items","","",285,null],[12,"mir_opt_level","","",285,null],[12,"dump_mir","","",285,null],[12,"orbit","","",285,null],[3,"RustcOptGroup","","",null,null],[12,"opt_group","","",286,null],[12,"stability","","",286,null],[4,"OptLevel","","",null,null],[13,"No","","",287,null],[13,"Less","","",287,null],[13,"Default","","",287,null],[13,"Aggressive","","",287,null],[13,"Size","","",287,null],[13,"SizeMin","","",287,null],[4,"DebugInfoLevel","","",null,null],[13,"NoDebugInfo","","",288,null],[13,"LimitedDebugInfo","","",288,null],[13,"FullDebugInfo","","",288,null],[4,"OutputType","","",null,null],[13,"Bitcode","","",289,null],[13,"Assembly","","",289,null],[13,"LlvmAssembly","","",289,null],[13,"Object","","",289,null],[13,"Exe","","",289,null],[13,"DepInfo","","",289,null],[4,"ErrorOutputType","","",null,null],[13,"HumanReadable","","",290,null],[13,"Json","","",290,null],[4,"PrintRequest","","",null,null],[13,"FileNames","","",291,null],[13,"Sysroot","","",291,null],[13,"CrateName","","",291,null],[13,"Cfg","","",291,null],[13,"TargetList","","",291,null],[4,"Input","","",null,null],[13,"File","","Load source from file",292,null],[13,"Str","","",292,null],[12,"name","rustc::session::config::Input","String that is shown in place of a filename",292,null],[12,"input","","Anonymous source string",292,null],[4,"EntryFnType","rustc::session::config","",null,null],[13,"EntryMain","","",293,null],[13,"EntryStart","","",293,null],[13,"EntryNone","","",293,null],[4,"CrateType","","",null,null],[13,"CrateTypeExecutable","","",294,null],[13,"CrateTypeDylib","","",294,null],[13,"CrateTypeRlib","","",294,null],[13,"CrateTypeStaticlib","","",294,null],[4,"Passes","","",null,null],[13,"SomePasses","","",295,null],[13,"AllPasses","","",295,null],[4,"PanicStrategy","","",null,null],[13,"Unwind","","",296,null],[13,"Abort","","",296,null],[4,"OptionStability","","",null,null],[13,"Stable","","",297,null],[13,"UnstableButNotReally","","",297,null],[13,"Unstable","","",297,null],[5,"host_triple","","",null,{"inputs":[],"output":{"name":"str"}}],[5,"basic_options","","Some reasonable defaults",null,{"inputs":[],"output":{"name":"options"}}],[5,"basic_codegen_options","","",null,{"inputs":[],"output":{"name":"codegenoptions"}}],[5,"build_codegen_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"codegenoptions"}}],[5,"basic_debugging_options","","",null,{"inputs":[],"output":{"name":"debuggingoptions"}}],[5,"build_debugging_options","","",null,{"inputs":[{"name":"matches"},{"name":"erroroutputtype"}],"output":{"name":"debuggingoptions"}}],[5,"default_lib_output","","",null,{"inputs":[],"output":{"name":"cratetype"}}],[5,"default_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"crateconfig"}}],[5,"append_configuration","","",null,{"inputs":[{"name":"crateconfig"},{"name":"internedstring"}],"output":null}],[5,"build_configuration","","",null,{"inputs":[{"name":"session"}],"output":{"name":"crateconfig"}}],[5,"build_target_config","","",null,{"inputs":[{"name":"options"},{"name":"handler"}],"output":{"name":"config"}}],[5,"rustc_short_optgroups","","Returns the &quot;short&quot; subset of the rustc command line options,\nincluding metadata for each option, such as whether the option is\npart of the stable long-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"rustc_optgroups","","Returns all rustc command line options, including metadata for\neach option, such as whether the option is part of the stable\nlong-term interface for rustc.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"parse_cfgspecs","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"crateconfig"}}],[5,"build_session_options","","",null,{"inputs":[{"name":"matches"}],"output":{"name":"options"}}],[5,"get_unstable_features_setting","","",null,{"inputs":[],"output":{"name":"unstablefeatures"}}],[5,"parse_crate_types_from_list","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[0,"nightly_options","","",null,null],[5,"is_unstable_enabled","rustc::session::config::nightly_options","",null,{"inputs":[{"name":"matches"}],"output":{"name":"bool"}}],[5,"is_nightly_build","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"check_nightly_options","","",null,null],[6,"CodegenSetter","rustc::session::config","",null,null],[6,"DebuggingSetter","","",null,null],[17,"CG_OPTIONS","","",null,null],[17,"DB_OPTIONS","","",null,null],[11,"eq","","",287,null],[11,"clone","","",287,null],[11,"eq","","",288,null],[11,"clone","","",288,null],[11,"hash","","",289,null],[11,"eq","","",289,null],[11,"clone","","",289,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"fmt","","",290,null],[11,"clone","","",290,null],[11,"default","","",290,{"inputs":[],"output":{"name":"erroroutputtype"}}],[11,"clone","","",282,null],[11,"eq","","",291,null],[11,"clone","","",291,null],[11,"filestem","","",292,null],[11,"clone","","",283,null],[11,"path","","",283,null],[11,"temp_path","","",283,null],[11,"with_extension","","",283,null],[11,"filestem","","",283,null],[11,"build_dep_graph","","True if there is a reason to build the dep graph.",282,null],[11,"eq","","",293,null],[11,"clone","","",293,null],[11,"fmt","","",294,null],[11,"hash","","",294,null],[11,"cmp","","",294,null],[11,"clone","","",294,null],[11,"partial_cmp","","",294,null],[11,"eq","","",294,null],[11,"clone","","",295,null],[11,"is_empty","","",295,null],[11,"eq","","",296,null],[11,"clone","","",296,null],[11,"desc","","",296,null],[11,"clone","","",284,null],[11,"clone","","",285,null],[11,"fmt","","",297,null],[11,"eq","","",297,null],[11,"clone","","",297,null],[11,"eq","","",286,null],[11,"ne","","",286,null],[11,"clone","","",286,null],[11,"is_stable","","",286,null],[11,"stable","","",286,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"unstable","","",286,{"inputs":[{"name":"optgroup"}],"output":{"name":"rustcoptgroup"}}],[11,"fmt","","",294,null],[0,"filesearch","rustc::session","",null,null],[3,"FileSearch","rustc::session::filesearch","",null,null],[12,"sysroot","","",298,null],[12,"search_paths","","",298,null],[12,"triple","","",298,null],[12,"kind","","",298,null],[4,"FileMatch","","",null,null],[13,"FileMatches","","",299,null],[13,"FileDoesntMatch","","",299,null],[5,"relative_target_lib_path","","",null,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"get_or_default_sysroot","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"rustlibdir","","",null,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",299,null],[11,"for_each_lib_search_path","","",298,null],[11,"get_lib_path","","",298,null],[11,"search","","",298,null],[11,"new","","",298,{"inputs":[{"name":"path"},{"name":"str"},{"name":"searchpaths"},{"name":"pathkind"}],"output":{"name":"filesearch"}}],[11,"get_dylib_search_paths","","",298,null],[11,"get_tools_search_paths","","",298,null],[0,"search_paths","rustc::session","",null,null],[3,"SearchPaths","rustc::session::search_paths","",null,null],[3,"Iter","","",null,null],[4,"PathKind","","",null,null],[13,"Native","","",300,null],[13,"Crate","","",300,null],[13,"Dependency","","",300,null],[13,"Framework","","",300,null],[13,"ExternFlag","","",300,null],[13,"All","","",300,null],[11,"fmt","","",301,null],[11,"clone","","",301,null],[11,"fmt","","",300,null],[11,"clone","","",300,null],[11,"eq","","",300,null],[11,"new","","",301,{"inputs":[],"output":{"name":"searchpaths"}}],[11,"add_path","","",301,null],[11,"iter","","",301,null],[11,"next","","",302,null],[6,"CompileResult","rustc::session","",null,null],[11,"struct_span_warn","","",280,null],[11,"struct_span_warn_with_code","","",280,null],[11,"struct_warn","","",280,null],[11,"struct_span_err","","",280,null],[11,"struct_span_err_with_code","","",280,null],[11,"struct_err","","",280,null],[11,"struct_span_fatal","","",280,null],[11,"struct_span_fatal_with_code","","",280,null],[11,"struct_fatal","","",280,null],[11,"span_fatal","","",280,null],[11,"span_fatal_with_code","","",280,null],[11,"fatal","","",280,null],[11,"span_err_or_warn","","",280,null],[11,"span_err","","",280,null],[11,"span_err_with_code","","",280,null],[11,"err","","",280,null],[11,"err_count","","",280,null],[11,"has_errors","","",280,null],[11,"abort_if_errors","","",280,null],[11,"track_errors","","",280,null],[11,"span_warn","","",280,null],[11,"span_warn_with_code","","",280,null],[11,"warn","","",280,null],[11,"opt_span_warn","","",280,null],[11,"delay_span_bug","","Delay a span_bug() call until abort_if_errors()",280,null],[11,"note_without_error","","",280,null],[11,"span_note_without_error","","",280,null],[11,"span_unimpl","","",280,null],[11,"unimpl","","",280,null],[11,"add_lint","","",280,null],[11,"reserve_node_ids","","",280,null],[11,"diagnostic","","",280,null],[11,"codemap","","",280,null],[11,"verbose","","",280,null],[11,"time_passes","","",280,null],[11,"count_llvm_insns","","",280,null],[11,"count_type_sizes","","",280,null],[11,"time_llvm_passes","","",280,null],[11,"trans_stats","","",280,null],[11,"meta_stats","","",280,null],[11,"asm_comments","","",280,null],[11,"no_verify","","",280,null],[11,"borrowck_stats","","",280,null],[11,"print_llvm_passes","","",280,null],[11,"lto","","",280,null],[11,"no_landing_pads","","",280,null],[11,"unstable_options","","",280,null],[11,"print_enum_sizes","","",280,null],[11,"nonzeroing_move_hints","","",280,null],[11,"sysroot","","",280,null],[11,"target_filesearch","","",280,null],[11,"host_filesearch","","",280,null],[11,"next_node_id","","",280,null],[11,"peek_node_id","","",280,null],[11,"diagnostic","","",280,null],[0,"traits","rustc","Trait Resolution. See the Book for more.",null,null],[3,"TraitErrorKey","rustc::traits","",null,null],[3,"FulfillmentContext","","The fulfillment context is used to drive trait resolution.  It\nconsists of a list of obligations that must be (eventually)\nsatisfied. The job is to track which are satisfied, which yielded\nerrors, and which are still pending. At any point, users can call\n`select_where_possible`, and the fulfilment context will try to do\nselection, retaining only those obligations that remain\nambiguous. This may be helpful in pushing type inference\nalong. Once all type inference constraints have been generated, the\nmethod `select_all_or_error` can be used to report any remaining\nambiguous cases as errors.",null,null],[3,"GlobalFulfilledPredicates","","",null,null],[3,"RegionObligation","","",null,null],[12,"sub_region","","",303,null],[12,"sup_type","","",303,null],[12,"cause","","",303,null],[3,"MismatchedProjectionTypes","","",null,null],[12,"err","","",304,null],[3,"Normalized","","",null,null],[12,"value","","",305,null],[12,"obligations","","",305,null],[3,"EvaluationCache","","",null,null],[3,"SelectionContext","","",null,null],[3,"SelectionCache","","",null,null],[3,"OverlapError","","Information pertinent to an overlapping impl error.",null,null],[12,"with_impl","","",306,null],[12,"trait_desc","","",306,null],[12,"self_desc","","",306,null],[3,"SpecializesCache","","",null,null],[3,"SupertraitDefIds","","",null,null],[3,"Obligation","","An `Obligation` represents some trait reference (e.g. `int:Eq`) for\nwhich the vtable must be found.  The process of finding a vtable is\ncalled &quot;resolving&quot; the `Obligation`. This process consists of\neither identifying an `impl` (e.g., `impl Eq for int`) that\nprovides the required vtable, or else finding a bound that is in\nscope. The eventual result is usually a `Selection` (defined below).",null,null],[12,"cause","","",307,null],[12,"recursion_depth","","",307,null],[12,"predicate","","",307,null],[3,"ObligationCause","","Why did we incur this obligation? Used for error reporting.",null,null],[12,"span","","",308,null],[12,"body_id","","",308,null],[12,"code","","",308,null],[3,"DerivedObligationCause","","",null,null],[3,"FulfillmentError","","",null,null],[12,"obligation","","",309,null],[12,"code","","",309,null],[3,"VtableImplData","","Identifies a particular impl in the source, along with a set of\nsubstitutions from the impl&#39;s type/lifetime parameters. The\n`nested` vector corresponds to the nested obligations attached to\nthe impl&#39;s type parameters.",null,null],[12,"impl_def_id","","",310,null],[12,"substs","","",310,null],[12,"nested","","",310,null],[3,"VtableClosureData","","",null,null],[12,"closure_def_id","","",311,null],[12,"substs","","",311,null],[12,"nested","","Nested obligations. This can be non-empty if the closure\nsignature contains associated types.",311,null],[3,"VtableDefaultImplData","","",null,null],[12,"trait_def_id","","",312,null],[12,"nested","","",312,null],[3,"VtableBuiltinData","","",null,null],[12,"nested","","",313,null],[3,"VtableObjectData","","A vtable for some object-safe trait `Foo` automatically derived\nfor the object type `Foo`.",null,null],[12,"upcast_trait_ref","","`Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.",314,null],[12,"vtable_base","","The vtable is formed by concatenating together the method lists of\nthe base object trait and all supertraits; this is the start of\n`upcast_trait_ref`&#39;s methods in that vtable.",314,null],[12,"nested","","",314,null],[3,"VtableFnPointerData","","",null,null],[12,"fn_ty","","",315,null],[12,"nested","","",315,null],[4,"OrphanCheckErr","","",null,null],[13,"NoLocalInputType","","",316,null],[13,"UncoveredTy","","",316,null],[4,"ProjectionMode","","Depending on the stage of compilation, we want projection to be\nmore or less conservative.",null,null],[13,"Topmost","","FIXME (#32205)\nAt coherence-checking time, we&#39;re still constructing the\nspecialization graph, and thus we only project\nnon-`default` associated types that are defined directly in\nthe applicable impl. (This behavior should be improved over\ntime, to allow for successful projections modulo cycles\nbetween different impls).",317,null],[13,"AnyFinal","","At type-checking time, we refuse to project any associated\ntype that is marked `default`. Non-`default` (&quot;final&quot;) types\nare always projected. This is necessary in general for\nsoundness of specialization. However, we *could* allow\nprojections in fully-monomorphic cases. We choose not to,\nbecause we prefer for `default type` to force the type\ndefinition to be treated abstractly by any consumers of the\nimpl. Concretely, that means that the following example will\nfail to compile:",317,null],[13,"Any","","At trans time, all projections will succeed.",317,null],[4,"ObjectSafetyViolation","","",null,null],[13,"SizedSelf","","Self : Sized declared on the trait",318,null],[13,"SupertraitSelf","","Supertrait reference references `Self` an in illegal location\n(e.g. `trait Foo : Bar&lt;Self&gt;`)",318,null],[13,"Method","","Method has something illegal",318,null],[4,"MethodViolationCode","","Reasons a method might not be object-safe.",null,null],[13,"StaticMethod","","e.g., `fn foo()`",319,null],[13,"ReferencesSelf","","e.g., `fn foo(&amp;self, x: Self)` or `fn foo(&amp;self) -&gt; Self`",319,null],[13,"Generic","","e.g., `fn foo&lt;A&gt;()`",319,null],[4,"MethodMatchResult","","",null,null],[13,"MethodMatched","","",320,null],[13,"MethodAmbiguous","","",320,null],[13,"MethodDidNotMatch","","",320,null],[4,"MethodMatchedData","","",null,null],[13,"PreciseMethodMatch","","",321,null],[13,"CoerciveMethodMatch","","",321,null],[4,"ObligationCauseCode","","",null,null],[13,"MiscObligation","","Not well classified or should be obvious from span.",322,null],[13,"SliceOrArrayElem","","A slice or array is WF only if `T: Sized`",322,null],[13,"TupleElem","","A tuple is WF only if its middle elements are Sized",322,null],[13,"ProjectionWf","","This is the trait reference from the given projection",322,null],[13,"ItemObligation","","In an impl of trait X for type Y, type Y must\nalso implement all supertraits of X.",322,null],[13,"ReferenceOutlivesReferent","","A type like `&amp;&#39;a T` is WF only if `T: &#39;a`.",322,null],[13,"ObjectCastObligation","","Obligation incurred due to an object cast.",322,null],[13,"AssignmentLhsSized","","Various cases where expressions must be sized/copy/etc:",322,null],[13,"StructInitializerSized","","",322,null],[13,"VariableType","","",322,null],[13,"ReturnType","","",322,null],[13,"RepeatVec","","",322,null],[13,"ClosureCapture","","",322,null],[13,"FieldSized","","",322,null],[13,"SharedStatic","","",322,null],[13,"BuiltinDerivedObligation","","",322,null],[13,"ImplDerivedObligation","","",322,null],[13,"CompareImplMethodObligation","","",322,null],[4,"SelectionError","","",null,null],[13,"Unimplemented","","",323,null],[13,"OutputTypeParameterMismatch","","",323,null],[13,"TraitNotObjectSafe","","",323,null],[4,"FulfillmentErrorCode","","",null,null],[13,"CodeSelectionError","","",324,null],[13,"CodeProjectionError","","",324,null],[13,"CodeAmbiguity","","",324,null],[4,"Vtable","","Given the successful resolution of an obligation, the `Vtable`\nindicates where the vtable comes from. Note that while we call this\na &quot;vtable&quot;, it does not necessarily indicate dynamic dispatch at\nruntime. `Vtable` instances just tell the compiler where to find\nmethods, but in generic code those methods are typically statically\ndispatched -- only when an object is constructed is a `Vtable`\ninstance reified into an actual vtable.",null,null],[13,"VtableImpl","","Vtable identifying a particular impl.",325,null],[13,"VtableDefaultImpl","","Vtable for default trait implementations\nThis carries the information and nested obligations with regards\nto a default implementation for a trait `Trait`. The nested obligations\nensure the trait implementation holds for all the constituent types.",325,null],[13,"VtableParam","","Successful resolution to an obligation provided by the caller\nfor some type parameter. The `Vec&lt;N&gt;` represents the\nobligations incurred from normalizing the where-clause (if\nany).",325,null],[13,"VtableObject","","Virtual calls through an object",325,null],[13,"VtableBuiltin","","Successful resolution for a builtin trait.",325,null],[13,"VtableClosure","","Vtable automatically generated for a closure. The def ID is the ID\nof the closure expression. This is a `VtableImpl` in spirit, but the\nimpl is generated by the compiler and does not appear in the source.",325,null],[13,"VtableFnPointer","","Same as above, but for a fn pointer type with the given signature.",325,null],[5,"orphan_check","","Checks the coherence orphan rules. `impl_def_id` should be the\ndef-id of a trait impl. To pass, either the trait must be local, or else\ntwo conditions must be satisfied:",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"result"}}],[5,"overlapping_impls","","If there are types that satisfy both impls, returns a suitably-freshened\n`ImplHeader` with those types substituted",null,{"inputs":[{"name":"inferctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"option"}}],[5,"normalize","","Normalizes any associated type projections in `value`, replacing\nthem with a fully resolved type where possible. The return value\ncombines the normalized result and any additional obligations that\nwere incurred as result.",null,{"inputs":[{"name":"selectioncontext"},{"name":"obligationcause"},{"name":"t"}],"output":{"name":"normalized"}}],[5,"specializes","","Is impl1 a specialization of impl2?",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"},{"name":"defid"}],"output":{"name":"bool"}}],[5,"translate_substs","","Given a subst for the requested impl, translate it to a subst\nappropriate for the actual item definition (whether it be in that impl,\na parent impl, or the trait).\nWhen we have selected one impl, but are actually using item definitions from\na parent impl providing a default, we need a way to translate between the\ntype parameters of the two impls. Here the `source_impl` is the one we&#39;ve\nselected, and `source_substs` is a substitution of its generics (and\npossibly some relevant `FnSpace` variables as well). And `target_node` is\nthe impl/trait we&#39;re actually going to get the definition from. The resulting\nsubstitution will map from `target_node`&#39;s generics to `source_impl`&#39;s\ngenerics as instantiated by `source_subst`.",null,{"inputs":[{"name":"inferctxt"},{"name":"defid"},{"name":"substs"},{"name":"node"}],"output":{"name":"substs"}}],[5,"elaborate_predicates","","",null,{"inputs":[{"name":"tyctxt"},{"name":"vec"}],"output":{"name":"elaborator"}}],[5,"supertraits","","",null,{"inputs":[{"name":"tyctxt"},{"name":"polytraitref"}],"output":{"name":"supertraits"}}],[5,"supertrait_def_ids","","",null,{"inputs":[{"name":"tyctxt"},{"name":"defid"}],"output":{"name":"supertraitdefids"}}],[5,"transitive_bounds","","",null,null],[5,"predicates_for_generics","","Creates predicate obligations from the generic bounds.",null,{"inputs":[{"name":"obligationcause"},{"name":"instantiatedpredicates"}],"output":{"name":"predicateobligations"}}],[5,"type_known_to_meet_builtin_bound","","Determines whether the type `ty` is known to meet `bound` and\nreturns true if so. Returns false if `ty` either does not meet\n`bound` or is not known to meet bound (note that this is\nconservative towards *no impl*, which is the opposite of the\n`evaluate` methods).",null,{"inputs":[{"name":"inferctxt"},{"name":"ty"},{"name":"builtinbound"},{"name":"span"}],"output":{"name":"bool"}}],[5,"normalize_param_env_or_error","","Normalizes the parameter environment, reporting errors if they occur.",null,{"inputs":[{"name":"tyctxt"},{"name":"parameterenvironment"},{"name":"obligationcause"}],"output":{"name":"parameterenvironment"}}],[5,"fully_normalize","","",null,{"inputs":[{"name":"inferctxt"},{"name":"obligationcause"},{"name":"t"}],"output":{"name":"result"}}],[0,"specialization_graph","","",null,null],[3,"Graph","rustc::traits::specialization_graph","A per-trait graph of impls in specialization order. At the moment, this\ngraph forms a tree rooted with the trait itself, with all other nodes\nrepresenting impls, and parent-child relationships representing\nspecializations.",null,null],[3,"Ancestors","","",null,null],[3,"NodeItem","","",null,null],[12,"node","","",326,null],[12,"item","","",326,null],[3,"TypeDefs","","",null,null],[3,"FnDefs","","",null,null],[3,"ConstDefs","","",null,null],[4,"Node","","A node in the specialization graph is either an impl or a trait\ndefinition; either can serve as a source of item definitions.\nThere is always exactly one trait definition node: the root.",null,null],[13,"Impl","","",327,null],[13,"Trait","","",327,null],[4,"NodeItems","","An iterator over the items defined within a trait or impl.",null,null],[13,"Impl","","",328,null],[12,"tcx","rustc::traits::specialization_graph::NodeItems","",328,null],[12,"items","","",328,null],[12,"idx","","",328,null],[13,"Trait","rustc::traits::specialization_graph","",328,null],[12,"items","rustc::traits::specialization_graph::NodeItems","",328,null],[12,"idx","","",328,null],[5,"ancestors","rustc::traits::specialization_graph","Walk up the specialization ancestors of a given impl, starting with that\nimpl itself.",null,{"inputs":[{"name":"traitdef"},{"name":"defid"}],"output":{"name":"ancestors"}}],[11,"new","","",329,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",329,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",329,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",329,null],[11,"clone","","",327,null],[11,"fmt","","",327,null],[11,"is_from_trait","","",327,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",327,null],[11,"def_id","","",327,null],[11,"next","","",328,null],[11,"next","","",330,null],[11,"map","","",326,null],[11,"next","","",331,null],[11,"next","","",332,null],[11,"next","","",333,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",330,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",330,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",330,null],[11,"hash","rustc::traits","",334,null],[11,"eq","","",334,null],[11,"ne","","",334,null],[11,"fmt","","",334,null],[11,"report_fulfillment_errors","rustc::infer","",126,null],[11,"report_fulfillment_errors_as_warnings","","",126,null],[11,"report_overflow_error","","Reports that an overflow has occurred and halts compilation. We\nhalt compilation unconditionally because it is important that\noverflows never be masked -- they basically represent computations\nwhose result could not be truly determined and thus we can&#39;t say\nif the program type checks or not -- and they are unusual\noccurrences in any case.",126,null],[11,"report_overflow_error_cycle","","Reports that a cycle was detected which led to overflow and halts\ncompilation. This is equivalent to `report_overflow_error` except\nthat we can give a more helpful error message (and, in particular,\nwe do not suggest increasing the overflow limit, which is not\ngoing to help).",126,null],[11,"report_selection_error","","",126,null],[11,"clone","rustc::traits","",303,null],[11,"new","","Creates a new fulfillment context.",335,{"inputs":[],"output":{"name":"fulfillmentcontext"}}],[11,"normalize_projection_type","","&quot;Normalize&quot; a projection type `&lt;SomeType as SomeTrait&gt;::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `&lt;SomeType as SomeTrait&gt;::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we&#39;ll unify `$0` with\n`projection_ty` again.",335,null],[11,"register_builtin_bound","","",335,null],[11,"register_region_obligation","","",335,null],[11,"register_predicate_obligation","","",335,null],[11,"register_rfc1592_obligation","","",335,null],[11,"region_obligations","","",335,null],[11,"select_rfc1592_obligations","","",335,null],[11,"select_all_or_error","","",335,null],[11,"select_where_possible","","",335,null],[11,"pending_obligations","","",335,null],[11,"new","","",336,{"inputs":[{"name":"depgraph"}],"output":{"name":"globalfulfilledpredicates"}}],[11,"check_duplicate","","",336,null],[11,"check_duplicate_trait","","",336,null],[11,"eq","","",317,null],[11,"clone","","",317,null],[11,"fmt","","",317,null],[11,"is_topmost","","",317,null],[11,"is_any_final","","",317,null],[11,"is_any","","",317,null],[11,"clone","","",304,null],[11,"clone","","",305,null],[11,"with","","",305,null],[11,"hash","","",318,null],[11,"eq","","",318,null],[11,"ne","","",318,null],[11,"fmt","","",318,null],[11,"clone","","",318,null],[11,"hash","","",319,null],[11,"eq","","",319,null],[11,"fmt","","",319,null],[11,"clone","","",319,null],[11,"clone","","",337,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"clone","","",338,null],[11,"new","","",339,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"intercrate","","",339,{"inputs":[{"name":"inferctxt"}],"output":{"name":"selectioncontext"}}],[11,"infcx","","",339,null],[11,"tcx","","",339,null],[11,"param_env","","",339,null],[11,"closure_typer","","",339,null],[11,"projection_mode","","",339,null],[11,"select","","Attempts to satisfy the obligation. If successful, this will affect the surrounding\ntype environment by performing unification.",339,null],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",339,null],[11,"evaluate_obligation_conservatively","","Evaluates whether the obligation `obligation` can be satisfied,\nand returns `false` if not certain. However, this is not entirely\naccurate if inference variables are involved.",339,null],[11,"new","","",337,{"inputs":[],"output":{"name":"selectioncache"}}],[11,"new","","",338,{"inputs":[],"output":{"name":"evaluationcache"}}],[11,"may_apply","","",320,null],[11,"new","rustc::traits::specialization_graph","",329,{"inputs":[],"output":{"name":"graph"}}],[11,"insert","","Insert a local impl into the specialization graph. If an existing impl\nconflicts with it (has overlap, but neither specializes the other),\ninformation about the area of overlap is returned in the `Err`.",329,null],[11,"record_impl_from_cstore","","Insert cached metadata mapping from a child impl back to its parent.",329,null],[11,"parent","","The parent of a given impl, which is the def id of the trait when the\nimpl is a &quot;specialization root&quot;.",329,null],[11,"clone","","",327,null],[11,"fmt","","",327,null],[11,"is_from_trait","","",327,null],[11,"items","","Iterate over the items defined directly by the given (impl or trait) node.",327,null],[11,"def_id","","",327,null],[11,"next","","",328,null],[11,"next","","",330,null],[11,"map","","",326,null],[11,"next","","",331,null],[11,"next","","",332,null],[11,"next","","",333,null],[11,"type_defs","","Search the items from the given ancestors, returning each type definition\nwith the given name.",330,null],[11,"fn_defs","","Search the items from the given ancestors, returning each fn definition\nwith the given name.",330,null],[11,"const_defs","","Search the items from the given ancestors, returning each const\ndefinition with the given name.",330,null],[11,"new","rustc::traits","",340,{"inputs":[],"output":{"name":"self"}}],[11,"check","","",340,null],[11,"insert","","",340,null],[11,"fmt","","",305,null],[11,"fmt","","",303,null],[11,"fmt","","",307,null],[11,"fmt","","",325,null],[11,"fmt","","",310,null],[11,"fmt","","",311,null],[11,"fmt","","",313,null],[11,"fmt","","",312,null],[11,"fmt","","",314,null],[11,"fmt","","",315,null],[11,"fmt","","",309,null],[11,"fmt","","",324,null],[11,"fmt","","",304,null],[11,"lift_to_tcx","","",323,null],[11,"lift_to_tcx","","",325,null],[11,"super_fold_with","","",307,null],[11,"super_visit_with","","",307,null],[11,"super_fold_with","","",310,null],[11,"super_visit_with","","",310,null],[11,"super_fold_with","","",311,null],[11,"super_visit_with","","",311,null],[11,"super_fold_with","","",312,null],[11,"super_visit_with","","",312,null],[11,"super_fold_with","","",313,null],[11,"super_visit_with","","",313,null],[11,"super_fold_with","","",314,null],[11,"super_visit_with","","",314,null],[11,"super_fold_with","","",315,null],[11,"super_visit_with","","",315,null],[11,"super_fold_with","","",325,null],[11,"super_visit_with","","",325,null],[11,"super_fold_with","","",305,null],[11,"super_visit_with","","",305,null],[11,"next","","",341,null],[6,"Supertraits","","",null,null],[6,"PredicateObligation","","",null,null],[6,"TraitObligation","","",null,null],[6,"Obligations","","",null,null],[6,"PredicateObligations","","",null,null],[6,"TraitObligations","","",null,null],[6,"Selection","","",null,null],[6,"SelectionResult","","When performing resolution, it is typically the case that there\ncan be one of three outcomes:",null,null],[11,"eq","","",307,null],[11,"ne","","",307,null],[11,"clone","","",307,null],[11,"eq","","",308,null],[11,"ne","","",308,null],[11,"fmt","","",308,null],[11,"clone","","",308,null],[11,"eq","","",322,null],[11,"ne","","",322,null],[11,"fmt","","",322,null],[11,"clone","","",322,null],[11,"eq","","",342,null],[11,"ne","","",342,null],[11,"fmt","","",342,null],[11,"clone","","",342,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"clone","","",324,null],[11,"clone","","",325,null],[11,"eq","","",310,null],[11,"ne","","",310,null],[11,"clone","","",310,null],[11,"eq","","",311,null],[11,"ne","","",311,null],[11,"clone","","",311,null],[11,"clone","","",312,null],[11,"clone","","",313,null],[11,"clone","","",314,null],[11,"eq","","",314,null],[11,"ne","","",314,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"clone","","",315,null],[11,"new","","",307,{"inputs":[{"name":"obligationcause"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"misc","","",307,{"inputs":[{"name":"span"},{"name":"nodeid"},{"name":"o"}],"output":{"name":"obligation"}}],[11,"with","","",307,null],[11,"new","","",308,{"inputs":[{"name":"span"},{"name":"nodeid"},{"name":"obligationcausecode"}],"output":{"name":"obligationcause"}}],[11,"misc","","",308,{"inputs":[{"name":"span"},{"name":"nodeid"}],"output":{"name":"obligationcause"}}],[11,"dummy","","",308,{"inputs":[],"output":{"name":"obligationcause"}}],[11,"nested_obligations","","",325,null],[11,"map","","",325,null],[0,"ty","rustc","",null,null],[3,"Binder","rustc::ty","Binder is a binder for higher-ranked lifetimes. It is part of the\ncompiler&#39;s representation for things like `for&lt;&#39;a&gt; Fn(&amp;&#39;a isize)`\n(which would be represented by the type `PolyTraitRef ==\nBinder&lt;TraitRef&gt;`). Note that when we skolemize, instantiate,\nerase, or otherwise &quot;discharge&quot; these bound regions, we change the\ntype from `Binder&lt;T&gt;` to just `T` (see\ne.g. `liberate_late_bound_regions`).",null,null],[12,"0","","",343,null],[3,"DebruijnIndex","","A [De Bruijn index][dbi] is a standard means of representing\nregions (and perhaps later types) in a higher-ranked setting. In\nparticular, imagine a type like this:",null,null],[12,"depth","","",344,null],[3,"BuiltinBounds","","",null,null],[3,"ExistentialBounds","","Bounds suitable for an existentially quantified type parameter\nsuch as those that appear in object types or closure types.",null,null],[12,"region_bound","","",345,null],[12,"builtin_bounds","","",345,null],[12,"projection_bounds","","",345,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",346,null],[12,"abi","","",346,null],[12,"sig","","",346,null],[3,"FnSig","","Signature of a function type, which I have arbitrarily\ndecided to use to refer to the input/output types.",null,null],[12,"inputs","","",347,null],[12,"output","","",347,null],[12,"variadic","","",347,null],[3,"ClosureTy","","",null,null],[12,"unsafety","","",348,null],[12,"abi","","",348,null],[12,"sig","","",348,null],[3,"ParamTy","","",null,null],[12,"space","","",349,null],[12,"idx","","",349,null],[12,"name","","",349,null],[3,"ProjectionTy","","Represents the projection of an associated type. In explicit UFCS\nform this would be written `&lt;T as Trait&lt;..&gt;&gt;::N`.",null,null],[12,"trait_ref","","The trait reference `T as Trait&lt;..&gt;`.",350,null],[12,"item_name","","The name `N` of the associated type.",350,null],[3,"TraitTy","","",null,null],[12,"principal","","",351,null],[12,"bounds","","",351,null],[3,"ClosureSubsts","","A closure can be modeled as a struct that looks like:",null,null],[12,"func_substs","","Lifetime and type parameters from the enclosing function.\nThese are separated out because trans wants to pass them around\nwhen monomorphizing.",352,null],[12,"upvar_tys","","The types of the upvars. The list parallels the freevars and\n`upvar_borrows` lists. These are kept distinct so that we can\neasily index into them.",352,null],[3,"TypeAndMut","","",null,null],[12,"ty","","",353,null],[12,"mutbl","","",353,null],[3,"TraitRef","","A complete reference to a trait. These take numerous guises in syntax,\nbut perhaps the most recognizable form is in a where clause:",null,null],[12,"def_id","","",354,null],[12,"substs","","",354,null],[3,"EarlyBoundRegion","","",null,null],[12,"space","","",355,null],[12,"index","","",355,null],[12,"name","","",355,null],[3,"FreeRegion","","A &quot;free&quot; region `fr` can be interpreted as &quot;some region\nat least as big as the scope `fr.scope`&quot;.",null,null],[12,"scope","","",356,null],[12,"bound_region","","",356,null],[3,"TyVid","","",null,null],[12,"index","","",357,null],[3,"IntVid","","",null,null],[12,"index","","",358,null],[3,"FloatVid","","",null,null],[12,"index","","",359,null],[3,"RegionVid","","",null,null],[12,"index","","",360,null],[3,"SkolemizedRegionVid","","",null,null],[12,"index","","",361,null],[3,"TypeContents","","Type contents is how the type checker reasons about kinds.\nThey track what kinds of things are found within a type.  You can\nthink of them as kind of an &quot;anti-kind&quot;.  They track the kinds of values\nand thinks that are contained in types.  Having a larger contents for\na type tends to rule that type *out* from various kinds.  For example,\na type that contains a reference is not sendable.",null,null],[12,"bits","","",362,null],[3,"TyCtxt","","The data structure to keep track of all the information that typechecker\ngenerates so that so that it can be reused and doesn&#39;t have to be redone\nlater on.",null,null],[3,"CtxtArenas","","Internal storage",null,null],[3,"Tables","","",null,null],[12,"node_types","","Stores the types for various nodes in the AST.  Note that this table\nis not guaranteed to be populated until after typeck.  See\ntypeck::check::fn_ctxt for details.",363,null],[12,"item_substs","","Stores the type parameters which were substituted to obtain the type\nof this node.  This only applies to nodes that refer to entities\nparameterized by type parameters, such as generic fns, types, or\nother items.",363,null],[12,"adjustments","","",363,null],[12,"method_map","","",363,null],[12,"upvar_capture_map","","Borrows",363,null],[12,"closure_tys","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",363,null],[12,"closure_kinds","","Records the type of each closure. The def ID is the ID of the\nexpression defining the closure.",363,null],[12,"liberated_fn_sigs","","For each fn, records the &quot;liberated&quot; types of its arguments\nand return type. Liberated means that all bound regions\n(including late-bound regions) are replaced with free\nequivalents. This table is not used in trans (since regions\nare erased there) and hence is not serialized to metadata.",363,null],[12,"fru_field_types","","For each FRU expression, record the normalized types of the fields\nof the struct - this is needed because it is non-trivial to\nnormalize while preserving regions. This table is used only in\nMIR construction and hence is not serialized to metadata.",363,null],[3,"CrateAnalysis","","The complete set of all analyses described in this module. This is\nproduced by the driver and fed to trans and later passes.",null,null],[12,"export_map","","",364,null],[12,"access_levels","","",364,null],[12,"reachable","","",364,null],[12,"name","","",364,null],[12,"glob_map","","",364,null],[3,"ImplHeader","","The &quot;header&quot; of an impl is everything outside the body: a Self type, a trait\nref (in the case of a trait impl), and a set of predicates (from the\nbounds/where clauses).",null,null],[12,"impl_def_id","","",365,null],[12,"self_ty","","",365,null],[12,"trait_ref","","",365,null],[12,"predicates","","",365,null],[3,"Method","","",null,null],[12,"name","","",366,null],[12,"generics","","",366,null],[12,"predicates","","",366,null],[12,"fty","","",366,null],[12,"explicit_self","","",366,null],[12,"vis","","",366,null],[12,"defaultness","","",366,null],[12,"def_id","","",366,null],[12,"container","","",366,null],[3,"AssociatedConst","","",null,null],[12,"name","","",367,null],[12,"ty","","",367,null],[12,"vis","","",367,null],[12,"defaultness","","",367,null],[12,"def_id","","",367,null],[12,"container","","",367,null],[12,"has_value","","",367,null],[3,"AssociatedType","","",null,null],[12,"name","","",368,null],[12,"ty","","",368,null],[12,"vis","","",368,null],[12,"defaultness","","",368,null],[12,"def_id","","",368,null],[12,"container","","",368,null],[3,"ItemVariances","","",null,null],[12,"types","","",369,null],[12,"regions","","",369,null],[3,"MethodCallee","","",null,null],[12,"def_id","","Impl method ID, for inherent methods, or trait method ID, otherwise.",370,null],[12,"ty","","",370,null],[12,"substs","","",370,null],[3,"MethodCall","","With method calls, we store some extra information in\nside tables (i.e method_map). We use\nMethodCall as a key to index into these tables instead of\njust directly using the expression&#39;s NodeId. The reason\nfor this being that we may apply adjustments (coercions)\nwith the resulting expression also needing to use the\nside tables. The problem with this is that we don&#39;t\nassign a separate NodeId to this new expression\nand so it would clash with the base expression if both\nneeded to add to the side tables. Thus to disambiguate\nwe also keep track of whether there&#39;s an adjustment in\nour key.",null,null],[12,"expr_id","","",371,null],[12,"autoderef","","",371,null],[3,"CReaderCacheKey","","",null,null],[12,"cnum","","",372,null],[12,"pos","","",372,null],[3,"TypeFlags","","",null,null],[3,"TyS","","",null,null],[12,"sty","","",373,null],[12,"flags","","",373,null],[3,"UpvarId","","Upvars do not get their own node-id. Instead, we use the pair of\nthe original var id (that is, the root variable that is referenced\nby the upvar) and the id of the closure expression.",null,null],[12,"var_id","","",374,null],[12,"closure_expr_id","","",374,null],[3,"UpvarBorrow","","",null,null],[12,"kind","","The kind of borrow: by-ref upvars have access to shared\nimmutable borrows, which are not part of the normal language\nsyntax.",375,null],[12,"region","","Region of the resulting reference.",375,null],[3,"ClosureUpvar","","",null,null],[12,"def","","",376,null],[12,"span","","",376,null],[12,"ty","","",376,null],[3,"TypeParameterDef","","",null,null],[12,"name","","",377,null],[12,"def_id","","",377,null],[12,"space","","",377,null],[12,"index","","",377,null],[12,"default_def_id","","",377,null],[12,"default","","",377,null],[12,"object_lifetime_default","","",377,null],[3,"RegionParameterDef","","",null,null],[12,"name","","",378,null],[12,"def_id","","",378,null],[12,"space","","",378,null],[12,"index","","",378,null],[12,"bounds","","",378,null],[3,"Generics","","Information about the formal type/lifetime parameters associated\nwith an item or method. Analogous to hir::Generics.",null,null],[12,"types","","",379,null],[12,"regions","","",379,null],[3,"GenericPredicates","","Bounds on generics.",null,null],[12,"predicates","","",380,null],[3,"TraitPredicate","","",null,null],[12,"trait_ref","","",381,null],[3,"EquatePredicate","","",null,null],[12,"0","","",382,null],[12,"1","","",382,null],[3,"OutlivesPredicate","","",null,null],[12,"0","","",383,null],[12,"1","","",383,null],[3,"ProjectionPredicate","","This kind of predicate has no *direct* correspondent in the\nsyntax, but it roughly corresponds to the syntactic forms:",null,null],[12,"projection_ty","","",384,null],[12,"ty","","",384,null],[3,"InstantiatedPredicates","","Represents the bounds declared on a particular set of type\nparameters.  Should eventually be generalized into a flag list of\nwhere clauses.  You can obtain a `InstantiatedPredicates` list from a\n`GenericPredicates` by using the `instantiate` method. Note that this method\nreflects an important semantic invariant of `InstantiatedPredicates`: while\nthe `GenericPredicates` are expressed in terms of the bound type\nparameters of the impl/trait/whatever, an `InstantiatedPredicates` instance\nrepresented a set of bounds for some particular instantiation,\nmeaning that the generic parameters have been substituted with\ntheir values.",null,null],[12,"predicates","","",385,null],[3,"ParameterEnvironment","","When type checking, we use the `ParameterEnvironment` to track\ndetails about the type/lifetime parameters that are in scope.\nIt primarily stores the bounds information.",null,null],[12,"free_substs","","See `construct_free_substs` for details.",386,null],[12,"implicit_region_bound","","Each type parameter has an implicit region bound that\nindicates it must outlive at least the function body (the user\nmay specify stronger requirements). This field indicates the\nregion of the callee.",386,null],[12,"caller_bounds","","Obligations that the caller must satisfy. This is basically\nthe set of bounds on the in-scope type parameters, translated\ninto Obligations, and elaborated and normalized.",386,null],[12,"free_id_outlive","","Scope that is attached to free regions for this scope. This\nis usually the id of the fn body, but for more abstract scopes\nlike structs we often use the node-id of the struct.",386,null],[3,"TypeScheme","","A &quot;type scheme&quot;, in ML terminology, is a type combined with some\nset of generic types that the type is, well, generic over. In Rust\nterms, it is the &quot;type&quot; of a fn item or struct -- this type will\ninclude various generic parameters that must be substituted when\nthe item/struct is referenced. That is called converting the type\nscheme to a monotype.",null,null],[12,"generics","","",387,null],[12,"ty","","",387,null],[3,"AdtFlags","","",null,null],[3,"VariantDefData","","",null,null],[12,"did","","The variant&#39;s DefId. If this is a tuple-like struct,\nthis is the DefId of the struct&#39;s ctor.",388,null],[12,"name","","",388,null],[12,"disr_val","","",388,null],[12,"fields","","",388,null],[12,"kind","","",388,null],[3,"FieldDefData","","",null,null],[12,"did","","The field&#39;s DefId. NOTE: the fields of tuple-like enum variants\nare not real items, and don&#39;t have entries in tcache etc.",389,null],[12,"name","","",389,null],[12,"vis","","",389,null],[3,"AdtDefData","","The definition of an abstract data type - a struct or enum.",null,null],[12,"did","","",390,null],[12,"variants","","",390,null],[3,"ItemSubsts","","Records the substitutions used to translate the polytype for an\nitem into the monotype of an item reference.",null,null],[12,"substs","","",391,null],[4,"BuiltinBound","","",null,null],[13,"Send","","",392,null],[13,"Sized","","",392,null],[13,"Copy","","",392,null],[13,"Sync","","",392,null],[4,"FnOutput","","",null,null],[13,"FnConverging","","",393,null],[13,"FnDiverging","","",393,null],[4,"InferTy","","",null,null],[13,"TyVar","","",394,null],[13,"IntVar","","",394,null],[13,"FloatVar","","",394,null],[13,"FreshTy","","A `FreshTy` is one that is generated as a replacement for an\nunbound type variable. This is convenient for caching etc. See\n`infer::freshen` for more details.",394,null],[13,"FreshIntTy","","",394,null],[13,"FreshFloatTy","","",394,null],[4,"TypeVariants","","",null,null],[13,"TyBool","","The primitive boolean type. Written as `bool`.",395,null],[13,"TyChar","","The primitive character type; holds a Unicode scalar value\n(a non-surrogate code point).  Written as `char`.",395,null],[13,"TyInt","","A primitive signed integer type. For example, `i32`.",395,null],[13,"TyUint","","A primitive unsigned integer type. For example, `u32`.",395,null],[13,"TyFloat","","A primitive floating-point type. For example, `f64`.",395,null],[13,"TyEnum","","An enumerated type, defined with `enum`.",395,null],[13,"TyStruct","","A structure type, defined with `struct`.",395,null],[13,"TyBox","","`Box&lt;T&gt;`; this is nominally a struct in the documentation, but is\nspecial-cased internally. For example, it is possible to implicitly\nmove the contents of a box out of that box, and methods of any type\ncan have type `Box&lt;Self&gt;`.",395,null],[13,"TyStr","","The pointee of a string slice. Written as `str`.",395,null],[13,"TyArray","","An array with the given length. Written as `[T; n]`.",395,null],[13,"TySlice","","The pointee of an array slice.  Written as `[T]`.",395,null],[13,"TyRawPtr","","A raw pointer. Written as `*mut T` or `*const T`",395,null],[13,"TyRef","","A reference; a pointer with an associated lifetime. Written as\n`&amp;a mut T` or `&amp;&#39;a T`.",395,null],[13,"TyFnDef","","The anonymous type of a function declaration/definition. Each\nfunction has a unique type.",395,null],[13,"TyFnPtr","","A pointer to a function.  Written as `fn() -&gt; i32`.\nFIXME: This is currently also used to represent the callee of a method;\nsee ty::MethodCallee etc.",395,null],[13,"TyTrait","","A trait, defined with `trait`.",395,null],[13,"TyClosure","","The anonymous type of a closure. Used to represent the type of\n`|a| a`.",395,null],[13,"TyTuple","","A tuple type.  For example, `(i32, bool)`.",395,null],[13,"TyProjection","","The projection of an associated type.  For example,\n`&lt;T as Trait&lt;..&gt;&gt;::N`.",395,null],[13,"TyParam","","A type parameter; for example, `T` in `fn f&lt;T&gt;(x: T) {}",395,null],[13,"TyInfer","","A type variable used during type-checking.",395,null],[13,"TyError","","A placeholder for a type which could not be computed; this is\npropagated to avoid useless error messages.",395,null],[4,"BoundRegion","","",null,null],[13,"BrAnon","","An anonymous region parameter for a given fn (&amp;T)",396,null],[13,"BrNamed","","Named region parameters for functions (a in &amp;&#39;a T)",396,null],[13,"BrFresh","","Fresh bound identifiers created during GLB computations.",396,null],[13,"BrEnv","","",396,null],[4,"Region","","Representation of regions.",null,null],[13,"ReEarlyBound","","",397,null],[13,"ReLateBound","","",397,null],[13,"ReFree","","When checking a function body, the types of all arguments and so forth\nthat refer to bound region parameters are modified to refer to free\nregion parameters.",397,null],[13,"ReScope","","A concrete region naming some statically determined extent\n(e.g. an expression or sequence of statements) within the\ncurrent function.",397,null],[13,"ReStatic","","Static data that has an &quot;infinite&quot; lifetime. Top in the region lattice.",397,null],[13,"ReVar","","A region variable.  Should not exist after typeck.",397,null],[13,"ReSkolemized","","A skolemized region - basically the higher-ranked version of ReFree.\nShould not exist after typeck.",397,null],[13,"ReEmpty","","Empty lifetime is for data that is never accessed.\nBottom in the region lattice. We treat ReEmpty somewhat\nspecially; at least right now, we do not generate instances of\nit during the GLB computations, but rather\ngenerate an error instead. This is to improve error messages.\nThe only way to get an instance of ReEmpty is to have a region\nvariable with no constraints.",397,null],[4,"DtorKind","","",null,null],[13,"NoDtor","","",398,null],[13,"TraitDtor","","",398,null],[4,"ImplOrTraitItemContainer","","",null,null],[13,"TraitContainer","","",399,null],[13,"ImplContainer","","",399,null],[4,"ImplOrTraitItem","","",null,null],[13,"ConstTraitItem","","",400,null],[13,"MethodTraitItem","","",400,null],[13,"TypeTraitItem","","",400,null],[4,"ImplOrTraitItemId","","",null,null],[13,"ConstTraitItemId","","",401,null],[13,"MethodTraitItemId","","",401,null],[13,"TypeTraitItemId","","",401,null],[4,"Visibility","","",null,null],[13,"Public","","Visible everywhere (including in other crates).",402,null],[13,"Restricted","","Visible only in the given crate-local module.",402,null],[13,"PrivateExternal","","Not visible anywhere in the local crate. This is the visibility of private external items.",402,null],[4,"Variance","","",null,null],[13,"Covariant","","",403,null],[13,"Invariant","","",403,null],[13,"Contravariant","","",403,null],[13,"Bivariant","","",403,null],[4,"FragmentInfo","","Describes the fragment-state associated with a NodeId.",null,null],[13,"Moved","","",404,null],[12,"var","rustc::ty::FragmentInfo","",404,null],[12,"move_expr","","",404,null],[13,"Assigned","rustc::ty","",404,null],[12,"var","rustc::ty::FragmentInfo","",404,null],[12,"assign_expr","","",404,null],[12,"assignee_id","","",404,null],[4,"BorrowKind","rustc::ty","",null,null],[13,"ImmBorrow","","Data must be immutable and is aliasable.",405,null],[13,"UniqueImmBorrow","","Data must be immutable but not aliasable.  This kind of borrow\ncannot currently be expressed by the user and is used only in\nimplicit closure bindings. It is needed when you the closure\nis borrowing or mutating a mutable referent, e.g.:",405,null],[13,"MutBorrow","","Data is mutable and not aliasable.",405,null],[4,"UpvarCapture","","Information describing the capture of an upvar. This is computed\nduring `typeck`, specifically by `regionck`.",null,null],[13,"ByValue","","Upvar is captured by value. This is always true when the\nclosure is labeled `move`, but can also be true in other cases\ndepending on inference.",406,null],[13,"ByRef","","Upvar is captured by reference.",406,null],[4,"IntVarValue","","",null,null],[13,"IntType","","",407,null],[13,"UintType","","",407,null],[4,"ObjectLifetimeDefault","","Default region to use for the bound of objects that are\nsupplied as the value for this type parameter. This is derived\nfrom `T:&#39;a` annotations appearing in the type definition.  If\nthis is `None`, then the default is inherited from the\nsurrounding context. See RFC #599 for details.",null,null],[13,"Ambiguous","","Require an explicit annotation. Occurs when multiple\n`T:&#39;a` constraints are found.",408,null],[13,"BaseDefault","","Use the base default, typically &#39;static, but in a fn body it is a fresh variable",408,null],[13,"Specific","","Use the given region as the default.",408,null],[4,"Predicate","","",null,null],[13,"Trait","","Corresponds to `where Foo : Bar&lt;A,B,C&gt;`. `Foo` here would be\nthe `Self` type of the trait reference and `A`, `B`, and `C`\nwould be the parameters in the `TypeSpace`.",409,null],[13,"Rfc1592","","A predicate created by RFC1592",409,null],[13,"Equate","","where `T1 == T2`.",409,null],[13,"RegionOutlives","","where &#39;a : &#39;b",409,null],[13,"TypeOutlives","","where T : &#39;a",409,null],[13,"Projection","","where &lt;T as TraitRef&gt;::Name == X, approximately.\nSee `ProjectionPredicate` struct for details.",409,null],[13,"WellFormed","","no syntax: T WF",409,null],[13,"ObjectSafe","","trait must be object-safe",409,null],[13,"ClosureKind","","No direct syntax. May be thought of as `where T : FnFoo&lt;...&gt;` for some &#39;TypeSpace&#39;\nsubstitutions `...` and T being a closure type.  Satisfied (or refuted) once we know the\nclosure&#39;s kind.",409,null],[4,"AdtKind","","",null,null],[13,"Struct","","",410,null],[13,"Enum","","",410,null],[4,"VariantKind","","",null,null],[13,"Struct","","",411,null],[13,"Tuple","","",411,null],[13,"Unit","","",411,null],[4,"ClosureKind","","",null,null],[13,"Fn","","",412,null],[13,"FnMut","","",412,null],[13,"FnOnce","","",412,null],[4,"LvaluePreference","","",null,null],[13,"PreferMutLvalue","","",413,null],[13,"NoPreference","","",413,null],[4,"ExplicitSelfCategory","","The category of explicit self.",null,null],[13,"Static","","",414,null],[13,"ByValue","","",414,null],[13,"ByReference","","",414,null],[13,"ByBox","","",414,null],[0,"tls","","",null,null],[5,"enter_global","rustc::ty::tls","",null,{"inputs":[{"name":"globalctxt"},{"name":"f"}],"output":{"name":"r"}}],[5,"enter","","",null,{"inputs":[{"name":"globalctxt"},{"name":"ctxtinterners"},{"name":"f"}],"output":{"name":"r"}}],[5,"with","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"with_opt","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"adjustment","rustc::ty","",null,null],[3,"AutoDerefRef","rustc::ty::adjustment","Represents coercing a pointer to a different kind of pointer - where &#39;kind&#39;\nhere means either or both of raw vs borrowed vs unique and fat vs thin.",null,null],[12,"autoderefs","","Step 1. Apply a number of dereferences, producing an lvalue.",415,null],[12,"autoref","","Step 2. Optionally produce a pointer/reference from the value.",415,null],[12,"unsize","","Step 3. Unsize a pointer/reference value, e.g. `&amp;[T; n]` to\n`&amp;[T]`. The stored type is the target pointer type. Note that\nthe source could be a thin or fat pointer.",415,null],[4,"AutoAdjustment","","",null,null],[13,"AdjustReifyFnPointer","","",416,null],[13,"AdjustUnsafeFnPointer","","",416,null],[13,"AdjustMutToConstPointer","","",416,null],[13,"AdjustDerefRef","","",416,null],[4,"AutoRef","","",null,null],[13,"AutoPtr","","Convert from T to &amp;T.",417,null],[13,"AutoUnsafe","","Convert from T to *T.\nValue to thin pointer.",417,null],[4,"CustomCoerceUnsized","","",null,null],[13,"Struct","","Records the index of the field being coerced.",418,null],[11,"clone","","",416,null],[11,"clone","","",415,null],[11,"is_identity","","",416,null],[11,"is_identity","","",415,null],[11,"fmt","","",417,null],[11,"eq","","",417,null],[11,"ne","","",417,null],[11,"clone","","",417,null],[11,"fmt","","",418,null],[11,"decode","","",418,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",418,null],[11,"clone","","",418,null],[11,"adjust","rustc::ty","See `expr_ty_adjusted`",373,null],[11,"adjust_for_autoderef","","",373,null],[11,"adjust_for_autoref","","",373,null],[0,"cast","","",null,null],[4,"IntTy","rustc::ty::cast","Types that are represented as ints.",null,null],[13,"U","","",419,null],[13,"I","","",419,null],[13,"CEnum","","",419,null],[13,"Bool","","",419,null],[13,"Char","","",419,null],[4,"CastTy","","",null,null],[13,"Int","","Various types that are represented as ints and handled mostly\nin the same way, merged for easier matching.",420,null],[13,"Float","","Floating-Point types",420,null],[13,"FnPtr","","Function Pointers",420,null],[13,"Ptr","","Raw pointers",420,null],[13,"RPtr","","References",420,null],[4,"CastKind","","Cast Kind. See RFC 401 (or librustc_typeck/check/cast.rs)",null,null],[13,"CoercionCast","","",421,null],[13,"PtrPtrCast","","",421,null],[13,"PtrAddrCast","","",421,null],[13,"AddrPtrCast","","",421,null],[13,"NumericCast","","",421,null],[13,"EnumCast","","",421,null],[13,"PrimIntCast","","",421,null],[13,"U8CharCast","","",421,null],[13,"ArrayPtrCast","","",421,null],[13,"FnPtrPtrCast","","",421,null],[13,"FnPtrAddrCast","","",421,null],[11,"eq","","",419,null],[11,"ne","","",419,null],[11,"fmt","","",419,null],[11,"clone","","",419,null],[11,"eq","","",420,null],[11,"ne","","",420,null],[11,"fmt","","",420,null],[11,"clone","","",420,null],[11,"decode","","",421,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",421,null],[11,"fmt","","",421,null],[11,"clone","","",421,null],[11,"from_ty","","",420,{"inputs":[{"name":"ty"}],"output":{"name":"option"}}],[0,"error","rustc::ty","",null,null],[3,"ExpectedFound","rustc::ty::error","",null,null],[12,"expected","","",422,null],[12,"found","","",422,null],[4,"TypeError","","",null,null],[13,"Mismatch","","",423,null],[13,"UnsafetyMismatch","","",423,null],[13,"AbiMismatch","","",423,null],[13,"Mutability","","",423,null],[13,"BoxMutability","","",423,null],[13,"PtrMutability","","",423,null],[13,"RefMutability","","",423,null],[13,"VecMutability","","",423,null],[13,"TupleSize","","",423,null],[13,"FixedArraySize","","",423,null],[13,"TyParamSize","","",423,null],[13,"ArgCount","","",423,null],[13,"RegionsDoesNotOutlive","","",423,null],[13,"RegionsNotSame","","",423,null],[13,"RegionsNoOverlap","","",423,null],[13,"RegionsInsufficientlyPolymorphic","","",423,null],[13,"RegionsOverlyPolymorphic","","",423,null],[13,"Sorts","","",423,null],[13,"IntegerAsChar","","",423,null],[13,"IntMismatch","","",423,null],[13,"FloatMismatch","","",423,null],[13,"Traits","","",423,null],[13,"BuiltinBoundsMismatch","","",423,null],[13,"VariadicMismatch","","",423,null],[13,"CyclicTy","","",423,null],[13,"ConvergenceMismatch","","",423,null],[13,"ProjectionNameMismatched","","",423,null],[13,"ProjectionBoundsLength","","",423,null],[13,"TyParamDefaultMismatch","","",423,null],[4,"UnconstrainedNumeric","","",null,null],[13,"UnconstrainedFloat","","",424,null],[13,"UnconstrainedInt","","",424,null],[13,"Neither","","",424,null],[11,"fmt","","",422,null],[11,"clone","","",422,null],[11,"fmt","","",423,null],[11,"clone","","",423,null],[11,"fmt","","",424,null],[11,"hash","","",424,null],[11,"eq","","",424,null],[11,"decode","","",424,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",424,null],[11,"clone","","",424,null],[11,"fmt","","",423,null],[11,"note_and_explain_type_err","rustc::ty","",425,null],[0,"fast_reject","","",null,null],[4,"SimplifiedType","rustc::ty::fast_reject","See `simplify_type",null,null],[13,"BoolSimplifiedType","","",426,null],[13,"CharSimplifiedType","","",426,null],[13,"IntSimplifiedType","","",426,null],[13,"UintSimplifiedType","","",426,null],[13,"FloatSimplifiedType","","",426,null],[13,"EnumSimplifiedType","","",426,null],[13,"StrSimplifiedType","","",426,null],[13,"VecSimplifiedType","","",426,null],[13,"PtrSimplifiedType","","",426,null],[13,"TupleSimplifiedType","","",426,null],[13,"TraitSimplifiedType","","",426,null],[13,"StructSimplifiedType","","",426,null],[13,"ClosureSimplifiedType","","",426,null],[13,"FunctionSimplifiedType","","",426,null],[13,"ParameterSimplifiedType","","",426,null],[5,"simplify_type","","Tries to simplify a type by dropping type parameters, deref&#39;ing away any reference types, etc.\nThe idea is to get something simple that we can use to quickly decide if two types could unify\nduring method lookup.",null,{"inputs":[{"name":"tyctxt"},{"name":"ty"},{"name":"bool"}],"output":{"name":"option"}}],[11,"hash","","",426,null],[11,"eq","","",426,null],[11,"ne","","",426,null],[11,"fmt","","",426,null],[11,"clone","","",426,null],[0,"fold","rustc::ty","Generalized type folding mechanism. The setup is a bit convoluted\nbut allows for convenient usage. Let T be an instance of some\n&quot;foldable type&quot; (one which implements `TypeFoldable`) and F be an\ninstance of a &quot;folder&quot; (a type which implements `TypeFolder`). Then\nthe setup is intended to be:",null,null],[3,"BottomUpFolder","rustc::ty::fold","",null,null],[12,"tcx","","",427,null],[12,"fldop","","",427,null],[3,"RegionFolder","","Folds over the substructure of a type, visiting its component\ntypes and all regions that occur *free* within it.",null,null],[5,"shift_region","","",null,{"inputs":[{"name":"region"},{"name":"u32"}],"output":{"name":"region"}}],[5,"shift_regions","","",null,{"inputs":[{"name":"tyctxt"},{"name":"u32"},{"name":"t"}],"output":{"name":"t"}}],[8,"TypeFoldable","","The TypeFoldable trait is implemented for every type that can be folded.\nBasically, every type that has a corresponding method in TypeFolder.",null,null],[10,"super_fold_with","","",428,null],[11,"fold_with","","",428,null],[10,"super_visit_with","","",428,null],[11,"visit_with","","",428,null],[11,"has_regions_escaping_depth","","",428,null],[11,"has_escaping_regions","","",428,null],[11,"has_type_flags","","",428,null],[11,"has_projection_types","","",428,null],[11,"references_error","","",428,null],[11,"has_param_types","","",428,null],[11,"has_self_ty","","",428,null],[11,"has_infer_types","","",428,null],[11,"needs_infer","","",428,null],[11,"needs_subst","","",428,null],[11,"has_closure_types","","",428,null],[11,"has_erasable_regions","","",428,null],[11,"is_global","","Indicates whether this value references only &#39;global&#39;\ntypes/lifetimes that are the same regardless of what fn we are\nin. This is used for caching. Errs on the side of returning\nfalse.",428,null],[8,"TypeFolder","","The TypeFolder trait defines the actual *folding*. There is a\nmethod defined for every foldable type. Each of these has a\ndefault implementation that does an &quot;identity&quot; fold. Within each\nidentity fold, it should invoke `foo.fold_with(self)` to fold each\nsub-item.",null,null],[10,"tcx","","",429,null],[11,"fold_binder","","",429,null],[11,"fold_ty","","",429,null],[11,"fold_mt","","",429,null],[11,"fold_trait_ref","","",429,null],[11,"fold_impl_header","","",429,null],[11,"fold_substs","","",429,null],[11,"fold_fn_sig","","",429,null],[11,"fold_output","","",429,null],[11,"fold_bare_fn_ty","","",429,null],[11,"fold_closure_ty","","",429,null],[11,"fold_region","","",429,null],[11,"fold_existential_bounds","","",429,null],[11,"fold_autoref","","",429,null],[8,"TypeVisitor","","",null,null],[11,"visit_binder","","",430,null],[11,"visit_ty","","",430,null],[11,"visit_region","","",430,null],[11,"tcx","","",427,null],[11,"fold_ty","","",427,null],[11,"collect_regions","rustc::ty","Collects the free and escaping regions in `value` into `region_set`. Returns\nwhether any late-bound regions were skipped",425,null],[11,"fold_regions","","Folds the escaping and free regions in `value` using `f`, and\nsets `skipped_regions` to true if any late-bound region was found\nand skipped.",425,null],[11,"new","rustc::ty::fold","",431,{"inputs":[{"name":"tyctxt"},{"name":"bool"},{"name":"f"}],"output":{"name":"regionfolder"}}],[11,"tcx","","",431,null],[11,"fold_binder","","",431,null],[11,"fold_region","","",431,null],[11,"replace_late_bound_regions","rustc::ty","",425,null],[11,"liberate_late_bound_regions","","Replace any late-bound regions bound in `value` with free variants attached to scope-id\n`scope_id`.",425,null],[11,"flatten_late_bound_regions","","Flattens two binding levels into one. So `for&lt;&#39;a&gt; for&lt;&#39;b&gt; Foo`\nbecomes `for&lt;&#39;a,&#39;b&gt; Foo`.",425,null],[11,"no_late_bound_regions","","",425,null],[11,"collect_constrained_late_bound_regions","","Returns a set of all late-bound regions that are constrained\nby `value`, meaning that if we instantiate those LBR with\nvariables and equate `value` with something else, those\nvariables will also be equated.",425,null],[11,"collect_referenced_late_bound_regions","","Returns a set of all late-bound regions that appear in `value` anywhere.",425,null],[11,"erase_late_bound_regions","","Replace any late-bound regions bound in `value` with `&#39;static`. Useful in trans but also\nmethod lookup and a few other places where precise region relationships are not required.",425,null],[11,"anonymize_late_bound_regions","","Rewrite any late-bound regions so that they are anonymous.  Region numbers are\nassigned starting at 1 and increasing monotonically in the order traversed\nby the fold operation.",425,null],[11,"erase_regions","","Returns an equivalent value with all free regions removed (note\nthat late-bound regions remain, because they are important for\nsubtyping, but they are anonymized and normalized as well)..",425,null],[0,"item_path","","",null,null],[4,"RootMode","rustc::ty::item_path","",null,null],[13,"Local","","Try to make a path relative to the local crate.  In\nparticular, local paths have no prefix, and if the path comes\nfrom an extern crate, start with the path to the `extern\ncrate` declaration.",432,null],[13,"Absolute","","Always prepend the crate name to the path, forming an absolute\npath from within a given set of crates.",432,null],[5,"characteristic_def_id_of_type","","As a heuristic, when we see an impl, if we see that the\n&#39;self-type&#39; is a type defined in the same module as the impl,\nwe can omit including the path to the impl itself. This\nfunction tries to find a &quot;characteristic def-id&quot; for a\ntype. It&#39;s just a heuristic so it makes some questionable\ndecisions and we may want to adjust it later.",null,{"inputs":[{"name":"ty"}],"output":{"name":"option"}}],[8,"ItemPathBuffer","","Unifying Trait for different kinds of item paths we might\nconstruct. The basic interface is that components get pushed: the\ninstance can also customize how we handle the root of a crate.",null,null],[10,"root_mode","","",433,null],[10,"push","","",433,null],[11,"item_path_str","rustc::ty","Returns a string identifying this def-id. This string is\nsuitable for user output. It is relative to the current crate\nroot.",425,null],[11,"node_path_str","","Returns a string identifying this local node-id.",425,null],[11,"absolute_item_path_str","","Returns a string identifying this def-id. This string is\nsuitable for user output. It always begins with a crate identifier.",425,null],[11,"push_krate_path","","Returns the &quot;path&quot; to a particular crate. This can proceed in\nvarious ways, depending on the `root_mode` of the `buffer`.\n(See `RootMode` enum for more details.)",425,null],[11,"try_push_visible_item_path","","If possible, this pushes a global path resolving to `external_def_id` that is visible\nfrom at least one local module and returns true. If the crate defining `external_def_id` is\ndeclared with an `extern crate`, the path is guarenteed to use the `extern crate`.",425,null],[11,"push_item_path","","",425,null],[11,"fmt","rustc::ty::item_path","",432,null],[0,"layout","rustc::ty","",null,null],[3,"TargetDataLayout","rustc::ty::layout","Parsed [Data layout](http://llvm.org/docs/LangRef.html#data-layout)\nfor a target, which contains everything needed to compute layouts.",null,null],[12,"endian","","",434,null],[12,"i1_align","","",434,null],[12,"i8_align","","",434,null],[12,"i16_align","","",434,null],[12,"i32_align","","",434,null],[12,"i64_align","","",434,null],[12,"f32_align","","",434,null],[12,"f64_align","","",434,null],[12,"pointer_size","","",434,null],[12,"pointer_align","","",434,null],[12,"aggregate_align","","",434,null],[12,"vector_align","","Alignments for vector types.",434,null],[3,"Size","","Size of a type in bytes.",null,null],[3,"Align","","Alignment of a type in bytes, both ABI-mandated and preferred.\nSince alignments are always powers of 2, we can pack both in one byte,\ngiving each a nibble (4 bits) for a maximum alignment of 2^15 = 32768.",null,null],[3,"Struct","","A structure, a product type in ADT terms.",null,null],[12,"align","","",435,null],[12,"packed","","If true, no alignment padding is used.",435,null],[12,"sized","","If true, the size is exact, otherwise it&#39;s only a lower bound.",435,null],[12,"offset_after_field","","Offsets for the first byte after each field.\nThat is, field_offset(i) = offset_after_field[i - 1] and the\nwhole structure&#39;s size is the last offset, excluding padding.",435,null],[4,"Endian","","Endianness of the target, which must match cfg(target-endian).",null,null],[13,"Little","","",436,null],[13,"Big","","",436,null],[4,"Integer","","Integers, also used for enum discriminants.",null,null],[13,"I1","","",437,null],[13,"I8","","",437,null],[13,"I16","","",437,null],[13,"I32","","",437,null],[13,"I64","","",437,null],[4,"Primitive","","Fundamental unit of memory access and layout.",null,null],[13,"Int","","",438,null],[13,"F32","","",438,null],[13,"F64","","",438,null],[13,"Pointer","","",438,null],[4,"Layout","","Type layout, from which size and alignment can be cheaply computed.\nFor ADTs, it also includes field placement and enum optimizations.\nNOTE: Because Layout is interned, redundant information should be\nkept to a minimum, e.g. it includes no sub-component Ty or Layout.",null,null],[13,"Scalar","","TyBool, TyChar, TyInt, TyUint, TyFloat, TyRawPtr, TyRef or TyFnPtr.",439,null],[12,"value","rustc::ty::layout::Layout","",439,null],[12,"non_zero","","",439,null],[13,"Vector","rustc::ty::layout","SIMD vectors, from TyStruct marked with #[repr(simd)].",439,null],[12,"element","rustc::ty::layout::Layout","",439,null],[12,"count","","",439,null],[13,"Array","rustc::ty::layout","TyArray, TySlice or TyStr.",439,null],[12,"sized","rustc::ty::layout::Layout","If true, the size is exact, otherwise it&#39;s only a lower bound.",439,null],[12,"align","","",439,null],[12,"size","","",439,null],[13,"FatPointer","rustc::ty::layout","TyRawPtr or TyRef with a !Sized pointee.",439,null],[12,"metadata","rustc::ty::layout::Layout","",439,null],[12,"non_zero","","",439,null],[13,"CEnum","rustc::ty::layout","C-like enums; basically an integer.",439,null],[12,"discr","rustc::ty::layout::Layout","",439,null],[12,"signed","","",439,null],[12,"min","","",439,null],[12,"max","","",439,null],[13,"Univariant","rustc::ty::layout","Single-case enums, and structs/tuples.",439,null],[12,"variant","rustc::ty::layout::Layout","",439,null],[12,"non_zero","","",439,null],[13,"General","rustc::ty::layout","General-case enums: for each case there is a struct, and they\nall start with a field for the discriminant.",439,null],[12,"discr","rustc::ty::layout::Layout","",439,null],[12,"variants","","",439,null],[12,"size","","",439,null],[12,"align","","",439,null],[13,"RawNullablePointer","rustc::ty::layout","Two cases distinguished by a nullable pointer: the case with discriminant\n`nndiscr` must have single field which is known to be nonnull due to its type.\nThe other case is known to be zero sized. Hence we represent the enum\nas simply a nullable pointer: if not null it indicates the `nndiscr` variant,\notherwise it indicates the other case.",439,null],[12,"nndiscr","rustc::ty::layout::Layout","",439,null],[12,"value","","",439,null],[13,"StructWrappedNullablePointer","rustc::ty::layout","Two cases distinguished by a nullable pointer: the case with discriminant\n`nndiscr` is represented by the struct `nonnull`, where the `discrfield`th\nfield is known to be nonnull due to its type; if that field is null, then\nit represents the other case, which is known to be zero sized.",439,null],[12,"nndiscr","rustc::ty::layout::Layout","",439,null],[12,"nonnull","","",439,null],[12,"discrfield","","",439,null],[4,"LayoutError","rustc::ty::layout","",null,null],[13,"Unknown","","",440,null],[13,"SizeOverflow","","",440,null],[4,"SizeSkeleton","","Type size &quot;skeleton&quot;, i.e. the only information determining a type&#39;s size.\nWhile this is conservative, (aside from constant sizes, only pointers,\nnewtypes thereof and null pointer optimized enums are allowed), it is\nenough to statically check common usecases of transmute.",null,null],[13,"Known","","Any statically computable Layout.",441,null],[13,"Pointer","","A potentially-fat pointer.",441,null],[12,"non_zero","rustc::ty::layout::SizeSkeleton","",441,null],[12,"tail","","",441,null],[6,"FieldPath","rustc::ty::layout","Path through fields of nested structures.",null,null],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a trait object, this is the address of the box.\n- For a slice, this is the base address.",null,null],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a trait object, this is the address of the vtable.\n- For a slice, this is the length.",null,null],[11,"default","","",434,{"inputs":[],"output":{"name":"targetdatalayout"}}],[11,"parse","","",434,{"inputs":[{"name":"session"}],"output":{"name":"targetdatalayout"}}],[11,"obj_size_bound","","Return exclusive upper bound on object size.",434,null],[11,"ptr_sized_integer","","",434,null],[11,"clone","","",436,null],[11,"fmt","","",442,null],[11,"hash","","",442,null],[11,"cmp","","",442,null],[11,"partial_cmp","","",442,null],[11,"lt","","",442,null],[11,"le","","",442,null],[11,"gt","","",442,null],[11,"ge","","",442,null],[11,"eq","","",442,null],[11,"ne","","",442,null],[11,"clone","","",442,null],[11,"from_bits","","",442,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"from_bytes","","",442,{"inputs":[{"name":"u64"}],"output":{"name":"size"}}],[11,"bytes","","",442,null],[11,"bits","","",442,null],[11,"abi_align","","",442,null],[11,"checked_add","","",442,null],[11,"checked_mul","","",442,null],[11,"fmt","","",443,null],[11,"hash","","",443,null],[11,"eq","","",443,null],[11,"ne","","",443,null],[11,"clone","","",443,null],[11,"from_bits","","",443,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"from_bytes","","",443,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"result"}}],[11,"abi","","",443,null],[11,"pref","","",443,null],[11,"min","","",443,null],[11,"max","","",443,null],[11,"fmt","","",437,null],[11,"hash","","",437,null],[11,"cmp","","",437,null],[11,"partial_cmp","","",437,null],[11,"eq","","",437,null],[11,"clone","","",437,null],[11,"fit_signed","","Find the smallest Integer type which can represent the signed value.",437,{"inputs":[{"name":"i64"}],"output":{"name":"integer"}}],[11,"fit_unsigned","","Find the smallest Integer type which can represent the unsigned value.",437,{"inputs":[{"name":"u64"}],"output":{"name":"integer"}}],[11,"from_attr","","Get the Integer type from an attr::IntType.",437,{"inputs":[{"name":"targetdatalayout"},{"name":"inttype"}],"output":{"name":"integer"}}],[11,"repr_discr","","Find the appropriate Integer type and signedness for the given\nsigned discriminant range and #[repr] attribute.\nN.B.: u64 values above i64::MAX will be treated as signed, but\nthat shouldn&#39;t affect anything, other than maybe debuginfo.",437,null],[11,"fmt","","",438,null],[11,"hash","","",438,null],[11,"eq","","",438,null],[11,"ne","","",438,null],[11,"clone","","",438,null],[11,"size","","",438,null],[11,"align","","",438,null],[11,"fmt","","",435,null],[11,"hash","","",435,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"new","","",435,{"inputs":[{"name":"targetdatalayout"},{"name":"bool"}],"output":{"name":"struct"}}],[11,"extend","","Extend the Struct with more fields.",435,null],[11,"min_size","","Get the size without trailing alignment padding.",435,null],[11,"stride","","Get the size with trailing aligment padding.",435,null],[11,"would_be_zero_sized","","Determine whether a structure would be zero-sized, given its fields.",435,{"inputs":[{"name":"targetdatalayout"},{"name":"i"}],"output":{"name":"result"}}],[11,"non_zero_field_in_type","","Find the path leading to a non-zero leaf field, starting from\nthe given type and recursing through aggregates.",435,{"inputs":[{"name":"inferctxt"},{"name":"ty"}],"output":{"name":"result"}}],[11,"non_zero_field_path","","Find the path leading to a non-zero leaf field, starting from\nthe given set of fields and recursing through aggregates.",435,{"inputs":[{"name":"inferctxt"},{"name":"i"}],"output":{"name":"result"}}],[11,"hash","","",439,null],[11,"eq","","",439,null],[11,"ne","","",439,null],[11,"fmt","","",439,null],[11,"fmt","","",440,null],[11,"clone","","",440,null],[11,"fmt","","",440,null],[11,"compute_uncached","","",439,{"inputs":[{"name":"ty"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"is_unsized","","Returns true if the layout corresponds to an unsized type.",439,null],[11,"size","","",439,null],[11,"align","","",439,null],[11,"fmt","","",441,null],[11,"clone","","",441,null],[11,"compute","","",441,{"inputs":[{"name":"ty"},{"name":"inferctxt"}],"output":{"name":"result"}}],[11,"same_size","","",441,null],[0,"_match","rustc::ty","",null,null],[3,"Match","rustc::ty::_match","A type &quot;A&quot; *matches* &quot;B&quot; if the fresh types in B could be\nsubstituted with values so as to make it equal to A. Matching is\nintended to be used only on freshened types, and it basically\nindicates if the non-freshened versions of A and B could have been\nunified.",null,null],[11,"new","","",444,{"inputs":[{"name":"tyctxt"}],"output":{"name":"match"}}],[11,"tag","","",444,null],[11,"tcx","","",444,null],[11,"a_is_expected","","",444,null],[11,"relate_with_variance","","",444,null],[11,"regions","","",444,null],[11,"tys","","",444,null],[11,"binders","","",444,null],[0,"maps","rustc::ty","",null,null],[3,"ImplOrTraitItems","rustc::ty::maps","",null,null],[3,"Tcache","","",null,null],[3,"Predicates","","",null,null],[3,"SuperPredicates","","",null,null],[3,"TraitItemDefIds","","",null,null],[3,"ImplTraitRefs","","",null,null],[3,"TraitDefs","","",null,null],[3,"AdtDefs","","",null,null],[3,"ItemVariances","","",null,null],[3,"InherentImpls","","",null,null],[3,"ImplItems","","",null,null],[3,"TraitItems","","",null,null],[3,"ReprHints","","",null,null],[3,"InlinedClosures","","",null,null],[11,"to_dep_node","","",445,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",446,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",447,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",448,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",449,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",450,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",451,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",452,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",453,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",454,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",455,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",456,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",457,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[11,"to_dep_node","","",458,{"inputs":[{"name":"defid"}],"output":{"name":"depnode"}}],[0,"outlives","rustc::ty","",null,null],[4,"Component","rustc::ty::outlives","",null,null],[13,"Region","","",459,null],[13,"Param","","",459,null],[13,"UnresolvedInferenceVariable","","",459,null],[13,"Projection","","",459,null],[13,"EscapingProjection","","",459,null],[11,"fmt","","",459,null],[11,"outlives_components","rustc::infer","Returns all the things that must outlive `&#39;a` for the condition\n`ty0: &#39;a` to hold.",126,null],[0,"relate","rustc::ty","Generalized type relating mechanism. A type relation R relates a\npair of values (A, B). A and B are usually types or regions but\ncan be other things. Examples of type relations are subtyping,\ntype equality, etc.",null,null],[4,"Cause","rustc::ty::relate","",null,null],[13,"ExistentialRegionBound","","",460,null],[5,"relate_substs","","",null,{"inputs":[{"name":"r"},{"name":"option"},{"name":"substs"},{"name":"substs"}],"output":{"name":"relateresult"}}],[5,"super_relate_tys","","The main &quot;type relation&quot; routine. Note that this does not handle\ninference artifacts, so you should filter those out before calling\nit.",null,{"inputs":[{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[5,"expected_found","","",null,{"inputs":[{"name":"r"},{"name":"t"},{"name":"t"}],"output":{"name":"expectedfound"}}],[5,"expected_found_bool","","",null,{"inputs":[{"name":"bool"},{"name":"t"},{"name":"t"}],"output":{"name":"expectedfound"}}],[6,"RelateResult","","",null,null],[8,"TypeRelation","","",null,null],[10,"tcx","","",461,null],[10,"tag","","Returns a static string we can use for printouts.",461,null],[10,"a_is_expected","","Returns true if the value `a` is the &quot;expected&quot; type in the\nrelation. Just affects error messages.",461,null],[11,"with_cause","","",461,null],[11,"relate","","Generic relation routine suitable for most anything.",461,null],[11,"relate_zip","","Relete elements of two slices pairwise.",461,null],[10,"relate_with_variance","","Switch variance for the purpose of relating `a` and `b`.",461,null],[10,"tys","","",461,null],[10,"regions","","",461,null],[10,"binders","","",461,null],[8,"Relate","","",null,null],[10,"relate","","",462,{"inputs":[{"name":"r"},{"name":"self"},{"name":"self"}],"output":{"name":"relateresult"}}],[11,"fmt","","",460,null],[11,"clone","","",460,null],[11,"relate","rustc::ty","",353,{"inputs":[{"name":"r"},{"name":"typeandmut"},{"name":"typeandmut"}],"output":{"name":"relateresult"}}],[11,"relate","","",347,{"inputs":[{"name":"r"},{"name":"fnsig"},{"name":"fnsig"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::hir","",76,{"inputs":[{"name":"r"},{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"relateresult"}}],[11,"relate","syntax::abi","",463,{"inputs":[{"name":"r"},{"name":"abi"},{"name":"abi"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::ty","",350,{"inputs":[{"name":"r"},{"name":"projectionty"},{"name":"projectionty"}],"output":{"name":"relateresult"}}],[11,"relate","","",384,{"inputs":[{"name":"r"},{"name":"projectionpredicate"},{"name":"projectionpredicate"}],"output":{"name":"relateresult"}}],[11,"relate","collections::vec","",268,{"inputs":[{"name":"r"},{"name":"vec"},{"name":"vec"}],"output":{"name":"relateresult"}}],[11,"relate","rustc::ty","",345,{"inputs":[{"name":"r"},{"name":"existentialbounds"},{"name":"existentialbounds"}],"output":{"name":"relateresult"}}],[11,"relate","","",464,{"inputs":[{"name":"r"},{"name":"builtinbounds"},{"name":"builtinbounds"}],"output":{"name":"relateresult"}}],[11,"relate","","",354,{"inputs":[{"name":"r"},{"name":"traitref"},{"name":"traitref"}],"output":{"name":"relateresult"}}],[11,"relate","","",352,{"inputs":[{"name":"r"},{"name":"closuresubsts"},{"name":"closuresubsts"}],"output":{"name":"relateresult"}}],[11,"relate","","",397,{"inputs":[{"name":"r"},{"name":"region"},{"name":"region"}],"output":{"name":"relateresult"}}],[11,"relate","","",343,{"inputs":[{"name":"r"},{"name":"binder"},{"name":"binder"}],"output":{"name":"relateresult"}}],[11,"relate","alloc::rc","",465,{"inputs":[{"name":"r"},{"name":"rc"},{"name":"rc"}],"output":{"name":"relateresult"}}],[11,"relate","alloc::boxed","",466,{"inputs":[{"name":"r"},{"name":"box"},{"name":"box"}],"output":{"name":"relateresult"}}],[0,"subst","rustc::ty","",null,null],[3,"Substs","rustc::ty::subst","A substitution mapping type/region parameters to new values. We\nidentify each in-scope parameter by an *index* and a *parameter\nspace* (which indices where the parameter is defined; see\n`ParamSpace`).",null,null],[12,"types","","",467,null],[12,"regions","","",467,null],[3,"VecPerParamSpace","","Vector of things sorted by param space. Used to keep\nthe set of things declared on the type, self, or method\ndistinct.",null,null],[3,"SeparateVecsPerParamSpace","","The `split` function converts one `VecPerParamSpace` into this\n`SeparateVecsPerParamSpace` structure.",null,null],[12,"types","","",468,null],[12,"selfs","","",468,null],[12,"fns","","",468,null],[3,"EnumeratedItems","","",null,null],[4,"ParamSpace","","",null,null],[13,"TypeSpace","","",469,null],[13,"SelfSpace","","",469,null],[13,"FnSpace","","",469,null],[8,"Subst","","",null,null],[11,"subst","","",470,null],[10,"subst_spanned","","",470,null],[11,"hash","","",467,null],[11,"eq","","",467,null],[11,"ne","","",467,null],[11,"clone","","",467,null],[11,"new","","",467,{"inputs":[{"name":"vecperparamspace"},{"name":"vecperparamspace"}],"output":{"name":"substs"}}],[11,"new_type","","",467,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"substs"}}],[11,"new_trait","","",467,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"ty"}],"output":{"name":"substs"}}],[11,"empty","","",467,{"inputs":[],"output":{"name":"substs"}}],[11,"is_noop","","",467,null],[11,"type_for_def","","",467,null],[11,"self_ty","","",467,null],[11,"with_self_ty","","",467,null],[11,"erase_regions","","",467,null],[11,"with_method","","",467,null],[11,"with_method_from","","",467,null],[11,"with_method_from_subst","","",467,null],[11,"to_trait_ref","","Creates a trait-ref out of this substs, ignoring the FnSpace substs",467,null],[11,"encode","","",467,null],[11,"decode","","",467,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",469,null],[11,"decode","","",469,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",469,null],[11,"hash","","",469,null],[11,"clone","","",469,null],[11,"eq","","",469,null],[11,"cmp","","",469,null],[11,"partial_cmp","","",469,null],[11,"all","","",469,null],[11,"to_uint","","",469,null],[11,"from_uint","","",469,{"inputs":[{"name":"usize"}],"output":{"name":"paramspace"}}],[11,"decode","","",471,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",471,null],[11,"hash","","",471,null],[11,"clone","","",471,null],[11,"eq","","",471,null],[11,"ne","","",471,null],[11,"fmt","","",471,null],[11,"empty","","",471,{"inputs":[],"output":{"name":"vecperparamspace"}}],[11,"new","","`t` is the type space.\n`s` is the self space.\n`f` is the fn space.",471,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"vecperparamspace"}}],[11,"push","","Appends `value` to the vector associated with `space`.",471,null],[11,"extend","","Appends `values` to the vector associated with `space`.",471,null],[11,"pop","","",471,null],[11,"truncate","","",471,null],[11,"replace","","",471,null],[11,"get_self","","",471,null],[11,"len","","",471,null],[11,"is_empty_in","","",471,null],[11,"get_slice","","",471,null],[11,"get_mut_slice","","",471,null],[11,"opt_get","","",471,null],[11,"get","","",471,null],[11,"iter","","",471,null],[11,"into_iter","","",471,null],[11,"iter_enumerated","","",471,null],[11,"as_slice","","",471,null],[11,"into_vec","","",471,null],[11,"all_vecs","","",471,null],[11,"all","","",471,null],[11,"any","","",471,null],[11,"is_empty","","",471,null],[11,"map","","",471,null],[11,"map_enumerated","","",471,null],[11,"split","","",471,null],[11,"with_slice","","",471,null],[11,"clone","","",472,null],[11,"next","","",472,null],[11,"size_hint","","",472,null],[11,"into_iter","","",471,null],[0,"trait_def","rustc::ty","",null,null],[3,"TraitDef","rustc::ty::trait_def","As `TypeScheme` but for a trait ref.",null,null],[12,"unsafety","","",473,null],[12,"paren_sugar","","If `true`, then this trait had the `#[rustc_paren_sugar]`\nattribute, indicating that it should be used with `Foo()`\nsugar. This is a temporary thing -- eventually any trait wil\nbe usable with the sugar (or without it).",473,null],[12,"generics","","Generic type definitions. Note that `Self` is listed in here\nas having a single bound, the trait itself (e.g., in the trait\n`Eq`, there is a single bound `Self : Eq`). This is so that\ndefault methods get to assume that the `Self` parameters\nimplements the trait.",473,null],[12,"trait_ref","","",473,null],[12,"associated_type_names","","A list of the associated types defined in this trait. Useful\nfor resolving `X::Foo` type markers.",473,null],[12,"specialization_graph","","The specialization order for impls of this trait.",473,null],[12,"flags","","Various flags",473,null],[3,"TraitFlags","","",null,null],[11,"new","","",473,{"inputs":[{"name":"unsafety"},{"name":"bool"},{"name":"generics"},{"name":"traitref"},{"name":"vec"}],"output":{"name":"traitdef"}}],[11,"def_id","","",473,null],[11,"object_safety","","",473,null],[11,"set_object_safety","","",473,null],[11,"record_local_impl","","Records a trait-to-implementation mapping for a crate-local impl.",473,null],[11,"record_remote_impl","","Records a trait-to-implementation mapping for a non-local impl.",473,null],[11,"add_impl_for_specialization","","Adds a local impl into the specialization graph, returning an error with\noverlap information if the impl overlaps but does not specialize an\nexisting impl.",473,null],[11,"ancestors","","",473,null],[11,"for_each_impl","","",473,null],[11,"for_each_relevant_impl","","Iterate over every impl that could possibly match the\nself-type `self_ty`.",473,null],[11,"hash","","",474,null],[11,"cmp","","",474,null],[11,"partial_cmp","","",474,null],[11,"lt","","",474,null],[11,"le","","",474,null],[11,"gt","","",474,null],[11,"ge","","",474,null],[11,"clone","","",474,null],[11,"eq","","",474,null],[11,"ne","","",474,null],[18,"NO_TRAIT_FLAGS","rustc::ty","",474,null],[18,"HAS_DEFAULT_IMPL","","",474,null],[18,"IS_OBJECT_SAFE","","",474,null],[18,"OBJECT_SAFETY_VALID","","",474,null],[18,"IMPLS_VALID","","",474,null],[11,"empty","rustc::ty::trait_def","Returns an empty set of flags.",474,{"inputs":[],"output":{"name":"traitflags"}}],[11,"all","","Returns the set containing all flags.",474,{"inputs":[],"output":{"name":"traitflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",474,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",474,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",474,{"inputs":[{"name":"u32"}],"output":{"name":"traitflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",474,null],[11,"is_all","","Returns `true` if all flags are currently set.",474,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",474,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",474,null],[11,"insert","","Inserts the specified flags in-place.",474,null],[11,"remove","","Removes the specified flags in-place.",474,null],[11,"toggle","","Toggles the specified flags in-place.",474,null],[11,"bitor","","Returns the union of the two sets of flags.",474,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",474,null],[11,"bitand","","Returns the intersection between the two sets of flags.",474,null],[11,"sub","","Returns the set difference of the two sets of flags.",474,null],[11,"not","","Returns the complement of this set of flags.",474,null],[0,"walk","rustc::ty","An iterator over the type substructure.\nWARNING: this does not keep track of the region depth.",null,null],[3,"TypeWalker","rustc::ty::walk","",null,null],[5,"walk_shallow","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"intoiter"}}],[11,"new","","",475,{"inputs":[{"name":"ty"}],"output":{"name":"typewalker"}}],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",475,null],[11,"next","","",475,null],[0,"wf","rustc::ty","",null,null],[4,"ImpliedBound","rustc::ty::wf","Implied bounds are region relationships that we deduce\nautomatically.  The idea is that (e.g.) a caller must check that a\nfunction&#39;s argument types are well-formed immediately before\ncalling that fn, and hence the *callee* can assume that its\nargument types are well-formed. This may imply certain relationships\nbetween generic parameters. For example:",null,null],[13,"RegionSubRegion","","",476,null],[13,"RegionSubParam","","",476,null],[13,"RegionSubProjection","","",476,null],[5,"obligations","","Returns the set of obligations needed to make `ty` well-formed.\nIf `ty` contains unresolved inference variables, this may include\nfurther WF obligations. However, if `ty` IS an unresolved\ninference variable, returns `None`, because we are not able to\nmake any progress at all. This is to prevent &quot;livelock&quot; where we\nsay &quot;$0 is WF if $0 is WF&quot;.",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"ty"},{"name":"span"}],"output":{"name":"option"}}],[5,"trait_obligations","","Returns the obligations that make this trait reference\nwell-formed.  For example, if there is a trait `Set` defined like\n`trait Set&lt;K:Eq&gt;`, then the trait reference `Foo: Set&lt;Bar&gt;` is WF\nif `Bar: Eq`.",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"traitref"},{"name":"span"}],"output":{"name":"vec"}}],[5,"predicate_obligations","","",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"predicate"},{"name":"span"}],"output":{"name":"vec"}}],[5,"implied_bounds","","Compute the implied bounds that a callee/impl can assume based on\nthe fact that caller/projector has ensured that `ty` is WF.  See\nthe `ImpliedBound` type for more details.",null,{"inputs":[{"name":"inferctxt"},{"name":"nodeid"},{"name":"ty"},{"name":"span"}],"output":{"name":"vec"}}],[5,"object_region_bounds","","Given an object type like `SomeTrait+Send`, computes the lifetime\nbounds that must hold on the elided self type. These are derived\nfrom the declarations of `SomeTrait`, `Send`, and friends -- if\nthey declare `trait SomeTrait : &#39;static`, for example, then\n`&#39;static` would appear in the list. The hard work is done by\n`ty::required_region_bounds`, see that for more information.",null,{"inputs":[{"name":"tyctxt"},{"name":"polytraitref"},{"name":"builtinbounds"}],"output":{"name":"vec"}}],[11,"fmt","","",476,null],[0,"util","rustc::ty","misc. type-system utilities too small to deserve their own file",null,null],[4,"CopyImplementationError","rustc::ty::util","",null,null],[13,"InfrigingField","","",477,null],[13,"InfrigingVariant","","",477,null],[13,"NotAnAdt","","",477,null],[13,"HasDestructor","","",477,null],[4,"Representability","","Describes whether a type is representable. For types that are not\nrepresentable, &#39;SelfRecursive&#39; and &#39;ContainsRecursive&#39; are used to\ndistinguish between types that are recursive with themselves and types that\ncontain a different recursive type. These cases can therefore be treated\ndifferently when reporting errors.",null,null],[13,"Representable","","",478,null],[13,"ContainsRecursive","","",478,null],[13,"SelfRecursive","","",478,null],[8,"IntTypeExt","","",null,null],[10,"to_ty","","",479,null],[10,"disr_incr","","",479,null],[10,"assert_ty_matches","","",479,null],[10,"initial_discriminant","","",479,null],[11,"to_ty","syntax::attr","",480,null],[11,"initial_discriminant","","",480,null],[11,"assert_ty_matches","","",480,null],[11,"disr_incr","","",480,null],[11,"clone","rustc::ty::util","",477,null],[11,"fmt","","",478,null],[11,"eq","","",478,null],[11,"cmp","","",478,null],[11,"partial_cmp","","",478,null],[11,"clone","","",478,null],[11,"can_type_implement_copy","rustc::ty","",386,null],[11,"pat_contains_ref_binding","","",425,null],[11,"arm_contains_ref_binding","","",425,null],[11,"positional_element_ty","","Returns the type of element at index `i` in tuple or tuple-like type `t`.\nFor an enum `t`, `variant` is None only if `t` is a univariant enum.",425,null],[11,"named_element_ty","","Returns the type of element at field `n` in struct or struct-like type `t`.\nFor an enum `t`, `variant` must be some def id.",425,null],[11,"enum_repr_type","","Returns the IntType representation.\nThis used to ensure `int_ty` doesn&#39;t contain `usize` and `isize`\nby converting them to their actual types. That doesn&#39;t happen anymore.",425,null],[11,"struct_tail","","Returns the deeply last field of nested structures, or the same type,\nif not a structure at all. Corresponds to the only possible unsized\nfield, and its type can be used to determine unsizing strategy.",425,null],[11,"struct_lockstep_tails","","Same as applying struct_tail on `source` and `target`, but only\nkeeps going as long as the two types are instances of the same\nstructure definitions.\nFor `(Foo&lt;Foo&lt;T&gt;&gt;, Foo&lt;Trait&gt;)`, the result will be `(Foo&lt;T&gt;, Trait)`,\nwhereas struct_tail produces `T`, and `Trait`, respectively.",425,null],[11,"required_region_bounds","","Given a set of predicates that apply to an object type, returns\nthe region bounds that the (erased) `Self` type must\noutlive. Precisely *because* the `Self` type is erased, the\nparameter `erased_self_ty` must be supplied to indicate what type\nhas been used to represent `Self` in the predicates\nthemselves. This should really be a unique type; `FreshTy(0)` is a\npopular choice.",425,null],[11,"hash_crate_independent","","Creates a hash of the type `Ty` which will be the same no matter what crate\ncontext it&#39;s calculated within. This is used by the `type_id` intrinsic.",425,null],[11,"is_adt_dtorck","","Returns true if this ADT is a dtorck type.",425,null],[11,"moves_by_default","","",373,null],[11,"is_sized","","",373,null],[11,"layout","","",373,null],[11,"is_representable","","Check whether a type is representable. This means it cannot contain unboxed\nstructural recursion. This check is needed for structs and enums.",373,null],[11,"clone","","",362,null],[11,"when","","",362,null],[11,"intersects","","",362,null],[11,"owns_owned","","",362,null],[11,"interior_param","","",362,null],[11,"interior_unsafe","","",362,null],[11,"needs_drop","","",362,null],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",362,null],[11,"union","","",362,null],[11,"has_dtor","","",362,null],[11,"bitor","","",362,null],[11,"bitand","","",362,null],[11,"sub","","",362,null],[11,"fmt","","",362,null],[11,"type_contents","","",373,null],[11,"new","","",481,{"inputs":[],"output":{"name":"ctxtarenas"}}],[11,"empty","","",363,{"inputs":[],"output":{"name":"tables"}}],[11,"clone","","",425,null],[11,"deref","","",425,null],[11,"crate_name","","",425,null],[11,"crate_disambiguator","","",425,null],[11,"type_parameter_def","","",425,null],[11,"node_types","","",425,null],[11,"node_type_insert","","",425,null],[11,"intern_trait_def","","",425,null],[11,"alloc_trait_def","","",425,null],[11,"intern_adt_def","","",425,null],[11,"intern_stability","","",425,null],[11,"intern_layout","","",425,null],[11,"store_free_region_map","","",425,null],[11,"free_region_map","","",425,null],[11,"lift","","",425,null],[11,"lift_to_global","","Like lift, but only tries in the global tcx.",425,null],[11,"create_and_enter","","Create a type context and call the closure with a `TyCtxt` reference\nto the context. The closure enforces that the type context and any interned\nvalue (types, substs, etc.) can only be used while `ty::tls` has a valid\nreference to the context, to allow formatting values that need it.",425,{"inputs":[{"name":"session"},{"name":"ctxtarenas"},{"name":"refcell"},{"name":"namedregionmap"},{"name":"map"},{"name":"freevarmap"},{"name":"nodeset"},{"name":"regionmaps"},{"name":"languageitems"},{"name":"index"},{"name":"str"},{"name":"f"}],"output":{"name":"r"}}],[11,"print_debug_stats","","",425,null],[11,"mk_type_list","","",425,null],[11,"mk_substs","","",425,null],[11,"mk_bare_fn","","",425,null],[11,"mk_region","","",425,null],[11,"safe_to_unsafe_fn_ty","","Create an unsafe fn ty based on a safe fn ty.",425,null],[11,"mk_ty","","",425,null],[11,"mk_mach_int","","",425,null],[11,"mk_mach_uint","","",425,null],[11,"mk_mach_float","","",425,null],[11,"mk_str","","",425,null],[11,"mk_static_str","","",425,null],[11,"mk_enum","","",425,null],[11,"mk_box","","",425,null],[11,"mk_ptr","","",425,null],[11,"mk_ref","","",425,null],[11,"mk_mut_ref","","",425,null],[11,"mk_imm_ref","","",425,null],[11,"mk_mut_ptr","","",425,null],[11,"mk_imm_ptr","","",425,null],[11,"mk_nil_ptr","","",425,null],[11,"mk_array","","",425,null],[11,"mk_slice","","",425,null],[11,"mk_tup","","",425,null],[11,"mk_nil","","",425,null],[11,"mk_bool","","",425,null],[11,"mk_fn_def","","",425,null],[11,"mk_fn_ptr","","",425,null],[11,"mk_trait","","",425,null],[11,"mk_projection","","",425,null],[11,"mk_struct","","",425,null],[11,"mk_closure","","",425,null],[11,"mk_closure_from_closure_substs","","",425,null],[11,"mk_var","","",425,null],[11,"mk_int_var","","",425,null],[11,"mk_float_var","","",425,null],[11,"mk_infer","","",425,null],[11,"mk_param","","",425,null],[11,"mk_self_type","","",425,null],[11,"mk_param_from_def","","",425,null],[11,"trait_items","","",425,null],[11,"lookup_repr_hints","","Obtain the representation annotation for a struct definition.",425,null],[11,"lift_to_tcx","core::option","",482,null],[11,"lift_to_tcx","core::result","",483,null],[11,"lift_to_tcx","collections::vec","",268,null],[11,"lift_to_tcx","rustc::ty","",397,null],[11,"lift_to_tcx","","",354,null],[11,"lift_to_tcx","","",381,null],[11,"lift_to_tcx","","",382,null],[11,"lift_to_tcx","","",383,null],[11,"lift_to_tcx","","",384,null],[11,"lift_to_tcx","","",409,null],[11,"lift_to_tcx","","",343,null],[11,"lift_to_tcx","","",352,null],[11,"lift_to_tcx","","",391,null],[11,"lift_to_tcx","rustc::ty::adjustment","",417,null],[11,"lift_to_tcx","rustc::ty","",393,null],[11,"lift_to_tcx","","",347,null],[11,"lift_to_tcx","","",348,null],[11,"lift_to_tcx","rustc::ty::error","",422,null],[11,"lift_to_tcx","rustc::infer::type_variable","",160,null],[11,"lift_to_tcx","rustc::ty::error","",423,null],[11,"super_fold_with","rustc::hir","",76,null],[11,"super_visit_with","","",76,null],[11,"super_fold_with","syntax::abi","",463,null],[11,"super_visit_with","","",463,null],[11,"super_fold_with","core::option","",482,null],[11,"super_visit_with","","",482,null],[11,"super_fold_with","alloc::rc","",465,null],[11,"super_visit_with","","",465,null],[11,"super_fold_with","alloc::boxed","",466,null],[11,"super_visit_with","","",466,null],[11,"super_fold_with","collections::vec","",268,null],[11,"super_visit_with","","",268,null],[11,"super_fold_with","rustc::ty","",343,null],[11,"fold_with","","",343,null],[11,"super_visit_with","","",343,null],[11,"visit_with","","",343,null],[11,"super_fold_with","syntax::ptr","",484,null],[11,"super_visit_with","","",484,null],[11,"super_fold_with","rustc::ty::subst","",471,null],[11,"super_visit_with","","",471,null],[11,"super_fold_with","rustc::ty","",351,null],[11,"super_visit_with","","",351,null],[11,"super_fold_with","","",348,null],[11,"fold_with","","",348,null],[11,"super_visit_with","","",348,null],[11,"super_fold_with","","",353,null],[11,"fold_with","","",353,null],[11,"super_visit_with","","",353,null],[11,"super_fold_with","","",393,null],[11,"fold_with","","",393,null],[11,"super_visit_with","","",393,null],[11,"super_fold_with","","",347,null],[11,"fold_with","","",347,null],[11,"super_visit_with","","",347,null],[11,"super_fold_with","","",354,null],[11,"fold_with","","",354,null],[11,"super_visit_with","","",354,null],[11,"super_fold_with","","",365,null],[11,"fold_with","","",365,null],[11,"super_visit_with","","",365,null],[11,"super_fold_with","","",397,null],[11,"fold_with","","",397,null],[11,"super_visit_with","","",397,null],[11,"visit_with","","",397,null],[11,"super_fold_with","","",352,null],[11,"super_visit_with","","",352,null],[11,"super_fold_with","","",391,null],[11,"super_visit_with","","",391,null],[11,"super_fold_with","rustc::ty::adjustment","",417,null],[11,"fold_with","","",417,null],[11,"super_visit_with","","",417,null],[11,"super_fold_with","rustc::ty","",464,null],[11,"super_visit_with","","",464,null],[11,"super_fold_with","","",345,null],[11,"fold_with","","",345,null],[11,"super_visit_with","","",345,null],[11,"super_fold_with","","",377,null],[11,"super_visit_with","","",377,null],[11,"super_fold_with","","",408,null],[11,"super_visit_with","","",408,null],[11,"super_fold_with","","",378,null],[11,"super_visit_with","","",378,null],[11,"super_fold_with","","",379,null],[11,"super_visit_with","","",379,null],[11,"super_fold_with","","",380,null],[11,"super_visit_with","","",380,null],[11,"super_fold_with","","",409,null],[11,"super_visit_with","","",409,null],[11,"super_fold_with","","",384,null],[11,"super_visit_with","","",384,null],[11,"super_fold_with","","",350,null],[11,"super_visit_with","","",350,null],[11,"super_fold_with","","",385,null],[11,"super_visit_with","","",385,null],[11,"super_fold_with","","",382,null],[11,"super_visit_with","","",382,null],[11,"super_fold_with","","",381,null],[11,"super_visit_with","","",381,null],[11,"super_fold_with","","",383,null],[11,"super_visit_with","","",383,null],[11,"super_fold_with","","",376,null],[11,"super_visit_with","","",376,null],[11,"super_fold_with","","",386,null],[11,"super_visit_with","","",386,null],[11,"super_fold_with","","",387,null],[11,"super_visit_with","","",387,null],[11,"fmt","","",353,null],[11,"hash","","",353,null],[11,"eq","","",353,null],[11,"ne","","",353,null],[11,"clone","","",353,null],[11,"decode","","",356,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",356,null],[11,"hash","","",356,null],[11,"cmp","","",356,null],[11,"partial_cmp","","",356,null],[11,"lt","","",356,null],[11,"le","","",356,null],[11,"gt","","",356,null],[11,"ge","","",356,null],[11,"eq","","",356,null],[11,"ne","","",356,null],[11,"clone","","",356,null],[11,"decode","","",396,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",396,null],[11,"hash","","",396,null],[11,"cmp","","",396,null],[11,"partial_cmp","","",396,null],[11,"lt","","",396,null],[11,"le","","",396,null],[11,"gt","","",396,null],[11,"ge","","",396,null],[11,"eq","","",396,null],[11,"ne","","",396,null],[11,"clone","","",396,null],[11,"fmt","","",395,null],[11,"hash","","",395,null],[11,"eq","","",395,null],[11,"ne","","",395,null],[11,"clone","","",395,null],[11,"fmt","","",352,null],[11,"hash","","",352,null],[11,"eq","","",352,null],[11,"ne","","",352,null],[11,"clone","","",352,null],[11,"encode","","",352,null],[11,"decode","","",352,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",351,null],[11,"eq","","",351,null],[11,"ne","","",351,null],[11,"clone","","",351,null],[11,"principal_def_id","","",351,null],[11,"principal_trait_ref_with_self_ty","","Object types don&#39;t have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",351,null],[11,"projection_bounds_with_self_ty","","",351,null],[11,"hash","","",354,null],[11,"eq","","",354,null],[11,"ne","","",354,null],[11,"clone","","",354,null],[11,"fmt","","",343,null],[11,"hash","","",343,null],[11,"eq","","",343,null],[11,"ne","","",343,null],[11,"clone","","",343,null],[11,"skip_binder","","Skips the binder and returns the &quot;bound&quot; value. This is a\nrisky thing to do because it&#39;s easy to get confused about\ndebruijn indices and the like. It is usually better to\ndischarge the binder using `no_late_bound_regions` or\n`replace_late_bound_regions` or something like\nthat. `skip_binder` is only valid when you are either\nextracting data that has nothing to do with bound regions, you\nare doing some sort of test that does not involve bound\nregions, or you are being very careful about your depth\naccounting.",343,null],[11,"as_ref","","",343,null],[11,"map_bound_ref","","",343,null],[11,"map_bound","","",343,null],[11,"fmt","","",485,null],[11,"fmt","","",350,null],[11,"hash","","",350,null],[11,"eq","","",350,null],[11,"ne","","",350,null],[11,"clone","","",350,null],[11,"sort_key","","",350,null],[11,"fmt","","",346,null],[11,"hash","","",346,null],[11,"eq","","",346,null],[11,"ne","","",346,null],[11,"clone","","",346,null],[11,"hash","","",348,null],[11,"eq","","",348,null],[11,"ne","","",348,null],[11,"clone","","",348,null],[11,"decode","","",393,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",393,null],[11,"fmt","","",393,null],[11,"hash","","",393,null],[11,"eq","","",393,null],[11,"ne","","",393,null],[11,"clone","","",393,null],[11,"diverges","","",393,null],[11,"unwrap","","",393,null],[11,"unwrap_or","","",393,null],[11,"hash","","",347,null],[11,"eq","","",347,null],[11,"ne","","",347,null],[11,"clone","","",347,null],[11,"hash","","",349,null],[11,"eq","","",349,null],[11,"ne","","",349,null],[11,"clone","","",349,null],[11,"new","","",349,{"inputs":[{"name":"paramspace"},{"name":"u32"},{"name":"name"}],"output":{"name":"paramty"}}],[11,"for_self","","",349,{"inputs":[],"output":{"name":"paramty"}}],[11,"for_def","","",349,{"inputs":[{"name":"typeparameterdef"}],"output":{"name":"paramty"}}],[11,"to_ty","","",349,null],[11,"is_self","","",349,null],[11,"fmt","","",344,null],[11,"decode","","",344,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",344,null],[11,"hash","","",344,null],[11,"eq","","",344,null],[11,"ne","","",344,null],[11,"clone","","",344,null],[11,"decode","","",397,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",397,null],[11,"hash","","",397,null],[11,"eq","","",397,null],[11,"ne","","",397,null],[11,"clone","","",397,null],[11,"fmt","","",355,null],[11,"decode","","",355,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",355,null],[11,"hash","","",355,null],[11,"eq","","",355,null],[11,"ne","","",355,null],[11,"clone","","",355,null],[11,"hash","","",357,null],[11,"eq","","",357,null],[11,"ne","","",357,null],[11,"clone","","",357,null],[11,"hash","","",358,null],[11,"eq","","",358,null],[11,"ne","","",358,null],[11,"clone","","",358,null],[11,"hash","","",359,null],[11,"eq","","",359,null],[11,"ne","","",359,null],[11,"clone","","",359,null],[11,"hash","","",360,null],[11,"decode","","",360,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",360,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"clone","","",360,null],[11,"decode","","",361,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",361,null],[11,"hash","","",361,null],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"clone","","",361,null],[11,"hash","","",394,null],[11,"eq","","",394,null],[11,"ne","","",394,null],[11,"clone","","",394,null],[11,"clone","","",345,null],[11,"hash","","",345,null],[11,"eq","","",345,null],[11,"ne","","",345,null],[11,"new","","",345,{"inputs":[{"name":"region"},{"name":"builtinbounds"},{"name":"vec"}],"output":{"name":"self"}}],[11,"fmt","","",464,null],[11,"hash","","",464,null],[11,"eq","","",464,null],[11,"ne","","",464,null],[11,"clone","","",464,null],[11,"empty","","",464,{"inputs":[],"output":{"name":"builtinbounds"}}],[11,"iter","","",464,null],[11,"to_predicates","","",464,null],[11,"new","collections::enum_set","Returns an empty `EnumSet`.",486,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",486,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",486,null],[11,"clear","","",486,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",486,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",486,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",486,null],[11,"union","","Returns the union of both `EnumSets`.",486,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",486,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",486,null],[11,"remove","","Removes an enum from the EnumSet",486,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",486,null],[11,"iter","","Returns an iterator over an `EnumSet`.",486,null],[11,"clone","collections::binary_heap","",487,null],[11,"clone_from","","",487,null],[11,"default","","",487,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",487,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",487,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",487,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",487,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",487,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",487,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",487,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",487,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",487,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",487,null],[11,"push","","Pushes an item onto the binary heap.",487,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",487,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",487,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",487,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",487,null],[11,"len","","Returns the length of the binary heap.",487,null],[11,"is_empty","","Checks if the binary heap is empty.",487,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",487,null],[11,"clear","","Drops all items from the binary heap.",487,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",487,null],[11,"clone","","",488,null],[11,"next","","",488,null],[11,"size_hint","","",488,null],[11,"next_back","","",488,null],[11,"clone","","",489,null],[11,"next","","",489,null],[11,"size_hint","","",489,null],[11,"next_back","","",489,null],[11,"next","","",490,null],[11,"size_hint","","",490,null],[11,"next_back","","",490,null],[11,"from","","",487,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",268,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",487,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",487,null],[11,"extend","","",487,null],[11,"extend","","",487,null],[11,"drop","collections::btree::map","",491,null],[11,"clone","","",491,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",491,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",491,null],[11,"get","","Returns a reference to the value corresponding to the key.",491,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",491,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",491,null],[11,"insert","","Inserts a key-value pair into the map.",491,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",491,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",491,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",491,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",491,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",491,null],[11,"next","","",492,null],[11,"size_hint","","",492,null],[11,"next_back","","",492,null],[11,"len","","",492,null],[11,"clone","","",492,null],[11,"next","","",493,null],[11,"size_hint","","",493,null],[11,"next_back","","",493,null],[11,"len","","",493,null],[11,"into_iter","","",491,null],[11,"drop","","",494,null],[11,"next","","",494,null],[11,"size_hint","","",494,null],[11,"next_back","","",494,null],[11,"len","","",494,null],[11,"next","","",495,null],[11,"size_hint","","",495,null],[11,"next_back","","",495,null],[11,"len","","",495,null],[11,"clone","","",495,null],[11,"next","","",496,null],[11,"size_hint","","",496,null],[11,"next_back","","",496,null],[11,"len","","",496,null],[11,"clone","","",496,null],[11,"next","","",497,null],[11,"next","","",498,null],[11,"size_hint","","",498,null],[11,"next_back","","",498,null],[11,"len","","",498,null],[11,"next_back","","",497,null],[11,"clone","","",497,null],[11,"next","","",499,null],[11,"next_back","","",499,null],[11,"from_iter","","",491,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",491,null],[11,"extend","","",491,null],[11,"hash","","",491,null],[11,"default","","",491,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",491,null],[11,"partial_cmp","","",491,null],[11,"cmp","","",491,null],[11,"fmt","","",491,null],[11,"index","","",491,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",491,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",491,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",491,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",491,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",491,null],[11,"len","","Returns the number of elements in the map.",491,null],[11,"is_empty","","Returns true if the map contains no elements.",491,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",500,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",500,null],[11,"key","","Returns a reference to this entry&#39;s key.",500,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",501,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",501,null],[11,"key","","Gets a reference to the key in the entry.",502,null],[11,"get","","Gets a reference to the value in the entry.",502,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",502,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",502,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",502,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",502,null],[11,"partial_cmp","collections::btree::set","",503,null],[11,"lt","","",503,null],[11,"le","","",503,null],[11,"gt","","",503,null],[11,"ge","","",503,null],[11,"cmp","","",503,null],[11,"eq","","",503,null],[11,"ne","","",503,null],[11,"hash","","",503,null],[11,"clone","","",503,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",503,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",503,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",503,null],[11,"difference","","Visits the values representing the difference, in ascending order.",503,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",503,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",503,null],[11,"union","","Visits the values representing the union, in ascending order.",503,null],[11,"len","","Returns the number of elements in the set.",503,null],[11,"is_empty","","Returns true if the set contains no elements.",503,null],[11,"clear","","Clears the set, removing all values.",503,null],[11,"contains","","Returns `true` if the set contains a value.",503,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",503,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",503,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",503,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",503,null],[11,"insert","","Adds a value to the set.",503,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",503,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",503,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",503,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",503,null],[11,"from_iter","","",503,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",503,null],[11,"extend","","",503,null],[11,"extend","","",503,null],[11,"default","","",503,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",503,null],[11,"clone","","",504,null],[11,"next","","",504,null],[11,"size_hint","","",504,null],[11,"next_back","","",504,null],[11,"len","","",504,null],[11,"next","","",505,null],[11,"size_hint","","",505,null],[11,"next_back","","",505,null],[11,"len","","",505,null],[11,"clone","","",506,null],[11,"next","","",506,null],[11,"next_back","","",506,null],[11,"clone","","",507,null],[11,"next","","",507,null],[11,"size_hint","","",507,null],[11,"clone","","",508,null],[11,"next","","",508,null],[11,"size_hint","","",508,null],[11,"clone","","",509,null],[11,"next","","",509,null],[11,"size_hint","","",509,null],[11,"clone","","",510,null],[11,"next","","",510,null],[11,"size_hint","","",510,null],[11,"borrow","collections::borrow","",511,null],[11,"clone","","",511,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",511,null],[11,"into_owned","","Extracts the owned data.",511,null],[11,"deref","","",511,null],[11,"cmp","","",511,null],[11,"eq","","",511,null],[11,"partial_cmp","","",511,null],[11,"fmt","","",511,null],[11,"fmt","","",511,null],[11,"hash","","",511,null],[11,"as_ref","","",511,null],[11,"hash","collections::enum_set","",486,null],[11,"cmp","","",486,null],[11,"partial_cmp","","",486,null],[11,"lt","","",486,null],[11,"le","","",486,null],[11,"gt","","",486,null],[11,"ge","","",486,null],[11,"eq","","",486,null],[11,"ne","","",486,null],[11,"clone","","",486,null],[11,"fmt","","",486,null],[11,"sub","","",486,null],[11,"bitor","","",486,null],[11,"bitand","","",486,null],[11,"bitxor","","",486,null],[11,"clone","","",512,null],[11,"next","","",512,null],[11,"size_hint","","",512,null],[11,"from_iter","","",486,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",486,null],[11,"extend","","",486,null],[11,"clone","collections::linked_list","",513,null],[11,"clone","","",514,null],[11,"default","","",515,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",515,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",515,null],[11,"iter","","Provides a forward iterator.",515,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",515,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",515,null],[11,"len","","Returns the length of the `LinkedList`.",515,null],[11,"clear","","Removes all elements from the `LinkedList`.",515,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",515,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",515,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",515,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",515,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",515,null],[11,"push_front","","Adds an element first in the list.",515,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",515,null],[11,"push_back","","Appends an element to the back of a list",515,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",515,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",515,null],[11,"front_place","","Returns a place for insertion at the front of the list.",515,null],[11,"back_place","","Returns a place for insertion at the back of the list.",515,null],[11,"drop","","",515,null],[11,"next","","",513,null],[11,"size_hint","","",513,null],[11,"next_back","","",513,null],[11,"next","","",516,null],[11,"size_hint","","",516,null],[11,"next_back","","",516,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",516,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",516,null],[11,"next","","",514,null],[11,"size_hint","","",514,null],[11,"next_back","","",514,null],[11,"from_iter","","",515,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",515,null],[11,"extend","","",515,null],[11,"extend","","",515,null],[11,"eq","","",515,null],[11,"ne","","",515,null],[11,"partial_cmp","","",515,null],[11,"cmp","","",515,null],[11,"clone","","",515,null],[11,"fmt","","",515,null],[11,"hash","","",515,null],[11,"make_place","","",517,null],[11,"pointer","","",517,null],[11,"finalize","","",517,null],[11,"make_place","","",518,null],[11,"pointer","","",518,null],[11,"finalize","","",518,null],[11,"start","core::ops","",519,null],[11,"end","","",520,null],[11,"start","","",521,null],[11,"end","","",521,null],[11,"borrow","collections::vec","",268,null],[11,"borrow_mut","","",268,null],[11,"clone","collections::str","",522,null],[11,"next","","",522,null],[11,"size_hint","","",522,null],[11,"borrow","collections::string","",523,null],[11,"fmt","core::str::pattern","",524,null],[11,"eq","","",524,null],[11,"ne","","",524,null],[11,"clone","","",524,null],[11,"fmt","","",525,null],[11,"clone","","",525,null],[11,"haystack","","",525,null],[11,"next","","",525,null],[11,"next_match","","",525,null],[11,"next_reject","","",525,null],[11,"next_back","","",525,null],[11,"next_match_back","","",525,null],[11,"next_reject_back","","",525,null],[11,"fmt","","",526,null],[11,"clone","","",526,null],[11,"haystack","","",526,null],[11,"next","","",526,null],[11,"next_match","","",526,null],[11,"next_reject","","",526,null],[11,"next_back","","",526,null],[11,"next_match_back","","",526,null],[11,"next_reject_back","","",526,null],[11,"clone","","",527,null],[11,"fmt","","",527,null],[11,"haystack","","",527,null],[11,"next","","",527,null],[11,"next_match","","",527,null],[11,"next_reject","","",527,null],[11,"next_back","","",527,null],[11,"next_match_back","","",527,null],[11,"next_reject_back","","",527,null],[11,"fmt","","",528,null],[11,"clone","","",528,null],[11,"haystack","","",528,null],[11,"next","","",528,null],[11,"next_match","","",528,null],[11,"next_back","","",528,null],[11,"next_match_back","","",528,null],[11,"cmp","collections::string","",523,null],[11,"partial_cmp","","",523,null],[11,"lt","","",523,null],[11,"le","","",523,null],[11,"gt","","",523,null],[11,"ge","","",523,null],[11,"fmt","","",529,null],[11,"fmt","","",530,null],[11,"new","","Creates a new empty `String`.",523,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",523,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",523,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",523,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",523,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",523,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",523,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",523,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",523,null],[11,"as_str","","Extracts a string slice containing the entire string.",523,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",523,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",523,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",523,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",523,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",523,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",523,null],[11,"push","","Appends the given `char` to the end of this `String`.",523,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",523,null],[11,"truncate","","Shortens this `String` to the specified length.",523,null],[11,"pop","","Removes the last character from the string buffer and returns it.",523,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",523,null],[11,"insert","","Inserts a character into this `String` at a byte position.",523,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",523,null],[11,"len","","Returns the length of this `String`, in bytes.",523,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",523,null],[11,"clear","","Truncates this `String`, removing all contents.",523,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",523,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",523,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",529,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",529,null],[11,"fmt","","",529,null],[11,"fmt","","",530,null],[11,"clone","","",523,null],[11,"clone_from","","",523,null],[11,"from_iter","","",523,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",523,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",523,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",523,null],[11,"extend","","",523,null],[11,"extend","","",523,null],[11,"extend","","",523,null],[11,"eq","","",523,null],[11,"ne","","",523,null],[11,"eq","","",523,null],[11,"ne","","",523,null],[11,"eq","","",523,null],[11,"ne","","",523,null],[11,"eq","collections::borrow","",511,null],[11,"ne","","",511,null],[11,"eq","","",511,null],[11,"ne","","",511,null],[11,"eq","","",511,null],[11,"ne","","",511,null],[11,"eq","collections::string","",523,null],[11,"ne","","",523,null],[11,"default","","",523,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",523,null],[11,"fmt","","",523,null],[11,"hash","","",523,null],[11,"add","","",523,null],[11,"index","","",523,null],[11,"index","","",523,null],[11,"index","","",523,null],[11,"index","","",523,null],[11,"index","","",523,null],[11,"index","","",523,null],[11,"index_mut","","",523,null],[11,"index_mut","","",523,null],[11,"index_mut","","",523,null],[11,"index_mut","","",523,null],[11,"index_mut","","",523,null],[11,"index_mut","","",523,null],[11,"deref","","",523,null],[11,"deref_mut","","",523,null],[11,"from_str","","",523,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",531,null],[11,"fmt","","",531,null],[11,"fmt","","",531,null],[11,"eq","","",531,null],[11,"as_ref","","",523,null],[11,"as_ref","","",523,null],[11,"from","","",523,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",511,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",511,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",523,null],[11,"write_str","","",523,null],[11,"write_char","","",523,null],[11,"drop","","",532,null],[11,"next","","",532,null],[11,"size_hint","","",532,null],[11,"next_back","","",532,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",268,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",268,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",268,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",268,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",268,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",268,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",268,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",268,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",268,null],[11,"as_slice","","Extracts a slice containing the entire vector.",268,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",268,null],[11,"set_len","","Sets the length of a vector.",268,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",268,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",268,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",268,null],[11,"retain","","Retains only the elements specified by the predicate.",268,null],[11,"push","","Appends an element to the back of a collection.",268,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",268,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",268,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",268,null],[11,"clear","","Clears the vector, removing all values.",268,null],[11,"len","","Returns the number of elements in the vector.",268,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",268,null],[11,"split_off","","Splits the collection into two at the given index.",268,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",268,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",268,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",268,null],[11,"clone","","",268,null],[11,"clone_from","","",268,null],[11,"hash","","",268,null],[11,"index","","",268,null],[11,"index_mut","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"index_mut","","",268,null],[11,"deref","","",268,null],[11,"deref_mut","","",268,null],[11,"from_iter","","",268,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",268,null],[11,"extend","","",268,null],[11,"extend","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","collections::borrow","",511,null],[11,"ne","","",511,null],[11,"eq","","",511,null],[11,"ne","","",511,null],[11,"eq","","",511,null],[11,"ne","","",511,null],[11,"eq","collections::vec","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"eq","","",268,null],[11,"ne","","",268,null],[11,"partial_cmp","","",268,null],[11,"cmp","","",268,null],[11,"drop","","",268,null],[11,"default","","",268,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",268,null],[11,"as_ref","","",268,null],[11,"as_mut","","",268,null],[11,"as_ref","","",268,null],[11,"as_mut","","",268,null],[11,"from","","",268,null],[11,"from","","",268,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",511,null],[11,"from","","",511,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",511,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",533,null],[11,"size_hint","","",533,null],[11,"count","","",533,null],[11,"next_back","","",533,null],[11,"clone","","",533,null],[11,"drop","","",533,null],[11,"next","","",534,null],[11,"size_hint","","",534,null],[11,"next_back","","",534,null],[11,"drop","","",534,null],[11,"clone","collections::vec_deque","",535,null],[11,"drop","","",535,null],[11,"default","","",535,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",535,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",535,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",535,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",535,null],[11,"swap","","Swaps elements at indices `i` and `j`.",535,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",535,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",535,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",535,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",535,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",535,null],[11,"iter","","Returns a front-to-back iterator.",535,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",535,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",535,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",535,null],[11,"len","","Returns the number of elements in the `VecDeque`.",535,null],[11,"is_empty","","Returns true if the buffer contains no elements",535,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",535,null],[11,"clear","","Clears the buffer, removing all values.",535,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",535,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",535,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",535,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",535,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",535,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",535,null],[11,"push_front","","Inserts an element first in the sequence.",535,null],[11,"push_back","","Appends an element to the back of a buffer",535,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",535,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",535,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",535,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",535,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",535,null],[11,"split_off","","Splits the collection into two at the given index.",535,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",535,null],[11,"retain","","Retains only the elements specified by the predicate.",535,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",535,null],[11,"clone","","",536,null],[11,"next","","",536,null],[11,"size_hint","","",536,null],[11,"next_back","","",536,null],[11,"next","","",537,null],[11,"size_hint","","",537,null],[11,"next_back","","",537,null],[11,"clone","","",538,null],[11,"next","","",538,null],[11,"size_hint","","",538,null],[11,"next_back","","",538,null],[11,"drop","","",539,null],[11,"next","","",539,null],[11,"size_hint","","",539,null],[11,"next_back","","",539,null],[11,"eq","","",535,null],[11,"partial_cmp","","",535,null],[11,"cmp","","",535,null],[11,"hash","","",535,null],[11,"index","","",535,null],[11,"index_mut","","",535,null],[11,"from_iter","","",535,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",535,null],[11,"extend","","",535,null],[11,"extend","","",535,null],[11,"fmt","","",535,null],[11,"from","","",535,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",268,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",540,null],[11,"ne","","",540,null],[11,"hash","","",540,null],[11,"fmt","","",540,null],[11,"clone","","",540,null],[11,"clone","alloc::boxed","",541,null],[11,"pointer","","",542,null],[11,"make_place","","",542,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",542,null],[11,"finalize","","",466,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",541,null],[11,"drop","","",542,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",466,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",466,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",466,null],[11,"default","","",466,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",466,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",466,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",466,null],[11,"clone","","",466,null],[11,"eq","","",466,null],[11,"ne","","",466,null],[11,"partial_cmp","","",466,null],[11,"lt","","",466,null],[11,"le","","",466,null],[11,"ge","","",466,null],[11,"gt","","",466,null],[11,"cmp","","",466,null],[11,"hash","","",466,null],[11,"from","","",466,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",466,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",466,null],[11,"fmt","","",466,null],[11,"fmt","","",466,null],[11,"fmt","","",466,null],[11,"deref","","",466,null],[11,"deref_mut","","",466,null],[11,"next","","",466,null],[11,"size_hint","","",466,null],[11,"next_back","","",466,null],[11,"call_once","","",466,null],[11,"call_once","","",466,null],[11,"clone","","",466,null],[11,"borrow","","",466,null],[11,"borrow_mut","","",466,null],[11,"as_ref","","",466,null],[11,"as_mut","","",466,null],[11,"deref","rustc::ty","",464,null],[11,"deref_mut","","",464,null],[11,"fmt","","",392,null],[11,"hash","","",392,null],[11,"decode","","",392,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",392,null],[11,"encode","","",392,null],[11,"clone","","",392,null],[11,"to_usize","","",392,null],[11,"from_usize","","",392,{"inputs":[{"name":"usize"}],"output":{"name":"builtinbound"}}],[11,"try_add_builtin_trait","","Checks whether `trait_ref` refers to one of the builtin\ntraits, like `Send`, and adds the corresponding\nbound to the set `builtin_bounds` if so. Returns true if `trait_ref`\nis a builtin trait.",425,null],[11,"new","","",344,{"inputs":[{"name":"u32"}],"output":{"name":"debruijnindex"}}],[11,"shifted","","",344,null],[11,"is_bound","","",397,null],[11,"needs_infer","","",397,null],[11,"escapes_depth","","",397,null],[11,"from_depth","","Returns the depth of `self` from the (1-based) binding level `depth`",397,null],[11,"as_opt_param_ty","","",373,null],[11,"is_nil","","",373,null],[11,"is_empty","","",373,null],[11,"is_primitive","","",373,null],[11,"is_ty_var","","",373,null],[11,"is_phantom_data","","",373,null],[11,"is_bool","","",373,null],[11,"is_param","","",373,null],[11,"is_self","","",373,null],[11,"is_slice","","",373,null],[11,"is_structural","","",373,null],[11,"is_simd","","",373,null],[11,"sequence_element_type","","",373,null],[11,"simd_type","","",373,null],[11,"simd_size","","",373,null],[11,"is_region_ptr","","",373,null],[11,"is_unsafe_ptr","","",373,null],[11,"is_unique","","",373,null],[11,"is_scalar","","",373,null],[11,"is_floating_point","","Returns true if this type is a floating point type and false otherwise.",373,null],[11,"is_trait","","",373,null],[11,"is_integral","","",373,null],[11,"is_fresh","","",373,null],[11,"is_uint","","",373,null],[11,"is_char","","",373,null],[11,"is_fp","","",373,null],[11,"is_numeric","","",373,null],[11,"is_signed","","",373,null],[11,"is_machine","","",373,null],[11,"has_concrete_skeleton","","",373,null],[11,"builtin_deref","","",373,null],[11,"builtin_index","","",373,null],[11,"fn_sig","","",373,null],[11,"fn_abi","","Returns the ABI of the given function.",373,null],[11,"fn_args","","",373,null],[11,"fn_ret","","",373,null],[11,"is_fn","","",373,null],[11,"ty_to_def_id","","",373,null],[11,"ty_adt_def","","",373,null],[11,"regions","","Returns the regions directly referenced from this type (but\nnot types reachable from this type via `walk_tys`). This\nignores late-bound regions binders.",373,null],[6,"PolyFnSig","","",null,null],[6,"PolyFnOutput","","",null,null],[6,"PolyTraitRef","","",null,null],[6,"Disr","","",null,null],[6,"MethodMap","","",null,null],[6,"Ty","","",null,null],[6,"UpvarCaptureMap","","",null,null],[6,"PolyTraitPredicate","","",null,null],[6,"PolyEquatePredicate","","",null,null],[6,"PolyOutlivesPredicate","","",null,null],[6,"PolyRegionOutlivesPredicate","","",null,null],[6,"PolyTypeOutlivesPredicate","","",null,null],[6,"PolyProjectionPredicate","","",null,null],[6,"AdtDef","","",null,null],[6,"VariantDef","","",null,null],[6,"FieldDef","","",null,null],[6,"AdtDefMaster","","",null,null],[6,"VariantDefMaster","","",null,null],[6,"FieldDefMaster","","",null,null],[8,"Lift","","A trait implemented for all X&lt;&#39;a&gt; types which can be safely and\nefficiently converted to X&lt;&#39;tcx&gt; as long as they are part of the\nprovided TyCtxt&lt;&#39;tcx&gt;.\nThis can be done, for example, for Ty&lt;&#39;tcx&gt; or &amp;&#39;tcx Substs&lt;&#39;tcx&gt;\nby looking them up in their respective interners.",null,null],[16,"Lifted","","",543,null],[10,"lift_to_tcx","","",543,null],[8,"NodeIdTree","","",null,null],[10,"is_descendant_of","","",544,null],[8,"ToPolyTraitRef","","",null,null],[10,"to_poly_trait_ref","","",545,null],[8,"ToPredicate","","",null,null],[10,"to_predicate","","",546,null],[11,"clone","","",364,null],[11,"clone","","",398,null],[11,"is_present","","",398,null],[11,"has_drop_flag","","",398,null],[11,"fmt","","",399,null],[11,"eq","","",399,null],[11,"ne","","",399,null],[11,"clone","","",399,null],[11,"id","","",399,null],[11,"fmt","","",365,null],[11,"hash","","",365,null],[11,"eq","","",365,null],[11,"ne","","",365,null],[11,"clone","","",365,null],[11,"with_fresh_ty_vars","","",365,{"inputs":[{"name":"selectioncontext"},{"name":"defid"}],"output":{"name":"implheader"}}],[11,"clone","","",400,null],[11,"def","","",400,null],[11,"def_id","","",400,null],[11,"name","","",400,null],[11,"vis","","",400,null],[11,"container","","",400,null],[11,"as_opt_method","","",400,null],[11,"fmt","","",401,null],[11,"clone","","",401,null],[11,"def_id","","",401,null],[11,"eq","","",402,null],[11,"ne","","",402,null],[11,"fmt","","",402,null],[11,"clone","","",402,null],[11,"is_descendant_of","rustc::hir::map","",103,null],[11,"from_hir","rustc::ty","",402,{"inputs":[{"name":"visibility"},{"name":"nodeid"},{"name":"tyctxt"}],"output":{"name":"self"}}],[11,"is_accessible_from","","Returns true if an item with this visibility is accessible from the given block.",402,null],[11,"is_at_least","","Returns true if this visibility is at least as accessible as the given visibility",402,null],[11,"fmt","","",366,null],[11,"clone","","",366,null],[11,"new","","",366,{"inputs":[{"name":"name"},{"name":"generics"},{"name":"genericpredicates"},{"name":"barefnty"},{"name":"explicitselfcategory"},{"name":"visibility"},{"name":"defaultness"},{"name":"defid"},{"name":"implortraititemcontainer"}],"output":{"name":"method"}}],[11,"container_id","","",366,null],[11,"eq","","",366,null],[11,"hash","","",366,null],[11,"fmt","","",367,null],[11,"clone","","",367,null],[11,"fmt","","",368,null],[11,"clone","","",368,null],[11,"encode","","",369,null],[11,"decode","","",369,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",369,null],[11,"ne","","",369,null],[11,"clone","","",369,null],[11,"encode","","",403,null],[11,"decode","","",403,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",403,null],[11,"clone","","",403,null],[11,"fmt","","",370,null],[11,"clone","","",370,null],[11,"fmt","","",371,null],[11,"hash","","",371,null],[11,"eq","","",371,null],[11,"ne","","",371,null],[11,"clone","","",371,null],[11,"expr","","",371,{"inputs":[{"name":"nodeid"}],"output":{"name":"methodcall"}}],[11,"autoderef","","",371,{"inputs":[{"name":"nodeid"},{"name":"u32"}],"output":{"name":"methodcall"}}],[11,"hash","","",372,null],[11,"eq","","",372,null],[11,"ne","","",372,null],[11,"clone","","",372,null],[11,"fmt","","",404,null],[11,"clone","","",404,null],[11,"hash","","",485,null],[11,"cmp","","",485,null],[11,"partial_cmp","","",485,null],[11,"lt","","",485,null],[11,"le","","",485,null],[11,"gt","","",485,null],[11,"ge","","",485,null],[11,"clone","","",485,null],[11,"eq","","",485,null],[11,"ne","","",485,null],[18,"HAS_PARAMS","rustc","",485,null],[18,"HAS_SELF","","",485,null],[18,"HAS_TY_INFER","","",485,null],[18,"HAS_RE_INFER","","",485,null],[18,"HAS_RE_EARLY_BOUND","","",485,null],[18,"HAS_FREE_REGIONS","","",485,null],[18,"HAS_TY_ERR","","",485,null],[18,"HAS_PROJECTION","","",485,null],[18,"HAS_TY_CLOSURE","","",485,null],[18,"HAS_LOCAL_NAMES","","",485,null],[18,"KEEP_IN_LOCAL_TCX","","",485,null],[18,"NEEDS_SUBST","","",485,null],[18,"NOMINAL_FLAGS","","",485,null],[18,"SIZEDNESS_CACHED","","",485,null],[18,"IS_SIZED","","",485,null],[18,"MOVENESS_CACHED","","",485,null],[18,"MOVES_BY_DEFAULT","","",485,null],[11,"empty","rustc::ty","Returns an empty set of flags.",485,{"inputs":[],"output":{"name":"typeflags"}}],[11,"all","","Returns the set containing all flags.",485,{"inputs":[],"output":{"name":"typeflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",485,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",485,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",485,{"inputs":[{"name":"u32"}],"output":{"name":"typeflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",485,null],[11,"is_all","","Returns `true` if all flags are currently set.",485,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",485,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",485,null],[11,"insert","","Inserts the specified flags in-place.",485,null],[11,"remove","","Removes the specified flags in-place.",485,null],[11,"toggle","","Toggles the specified flags in-place.",485,null],[11,"bitor","","Returns the union of the two sets of flags.",485,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",485,null],[11,"bitand","","Returns the intersection between the two sets of flags.",485,null],[11,"sub","","Returns the set difference of the two sets of flags.",485,null],[11,"not","","Returns the complement of this set of flags.",485,null],[11,"eq","","",373,null],[11,"hash","","",373,null],[11,"encode","","",547,null],[11,"decode","","",547,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",374,null],[11,"eq","","",374,null],[11,"ne","","",374,null],[11,"clone","","",374,null],[11,"decode","","",405,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",405,null],[11,"fmt","","",405,null],[11,"hash","","",405,null],[11,"eq","","",405,null],[11,"clone","","",405,null],[11,"fmt","","",406,null],[11,"clone","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",375,null],[11,"eq","","",375,null],[11,"ne","","",375,null],[11,"clone","","",376,null],[11,"eq","","",407,null],[11,"ne","","",407,null],[11,"clone","","",407,null],[11,"clone","","",408,null],[11,"clone","","",377,null],[11,"clone","","",378,null],[11,"to_early_bound_region","","",378,null],[11,"to_bound_region","","",378,null],[11,"fmt","","",379,null],[11,"clone","","",379,null],[11,"empty","","",379,{"inputs":[],"output":{"name":"generics"}}],[11,"is_empty","","",379,null],[11,"has_type_params","","",379,null],[11,"has_region_params","","",379,null],[11,"clone","","",380,null],[11,"empty","","",380,{"inputs":[],"output":{"name":"genericpredicates"}}],[11,"instantiate","","",380,null],[11,"instantiate_supertrait","","",380,null],[11,"hash","","",409,null],[11,"eq","","",409,null],[11,"ne","","",409,null],[11,"clone","","",409,null],[11,"subst_supertrait","","Performs a substitution suitable for going from a\npoly-trait-ref to supertraits that must hold if that\npoly-trait-ref holds. This is slightly different from a normal\nsubstitution in terms of what happens with bound regions.  See\nlengthy comment below for details.",409,null],[11,"hash","","",381,null],[11,"eq","","",381,null],[11,"ne","","",381,null],[11,"clone","","",381,null],[11,"def_id","","",381,null],[11,"input_types","","",381,null],[11,"self_ty","","",381,null],[11,"def_id","","",548,null],[11,"dep_node","","",548,null],[11,"fmt","","",382,null],[11,"hash","","",382,null],[11,"eq","","",382,null],[11,"ne","","",382,null],[11,"clone","","",382,null],[11,"fmt","","",383,null],[11,"hash","","",383,null],[11,"eq","","",383,null],[11,"ne","","",383,null],[11,"clone","","",383,null],[11,"hash","","",384,null],[11,"eq","","",384,null],[11,"ne","","",384,null],[11,"clone","","",384,null],[11,"item_name","","",549,null],[11,"sort_key","","",549,null],[11,"to_poly_trait_ref","","",354,null],[11,"to_poly_trait_ref","","",548,null],[11,"to_poly_trait_ref","","",549,null],[11,"to_predicate","","",354,null],[11,"to_predicate","","",550,null],[11,"to_predicate","","",551,null],[11,"to_predicate","","",552,null],[11,"to_predicate","","",553,null],[11,"to_predicate","","",549,null],[11,"walk_tys","","Iterates over the types in this predicate. Note that in all\ncases this is skipping over a binder, so late-bound regions\nwith depth 0 are bound by the predicate.",409,null],[11,"to_opt_poly_trait_ref","","",409,null],[11,"clone","","",385,null],[11,"empty","","",385,{"inputs":[],"output":{"name":"instantiatedpredicates"}}],[11,"is_empty","","",385,null],[11,"new","","",354,{"inputs":[{"name":"defid"},{"name":"substs"}],"output":{"name":"traitref"}}],[11,"self_ty","","",354,null],[11,"input_types","","",354,null],[11,"clone","","",386,null],[11,"with_caller_bounds","","",386,null],[11,"for_item","","Construct a parameter environment given an item, impl item, or trait item",386,{"inputs":[{"name":"tyctxt"},{"name":"nodeid"}],"output":{"name":"parameterenvironment"}}],[11,"fmt","","",387,null],[11,"clone","","",387,null],[11,"hash","","",554,null],[11,"cmp","","",554,null],[11,"partial_cmp","","",554,null],[11,"lt","","",554,null],[11,"le","","",554,null],[11,"gt","","",554,null],[11,"ge","","",554,null],[11,"clone","","",554,null],[11,"eq","","",554,null],[11,"ne","","",554,null],[18,"NO_ADT_FLAGS","rustc","",554,null],[18,"IS_ENUM","","",554,null],[18,"IS_DTORCK","","",554,null],[18,"IS_DTORCK_VALID","","",554,null],[18,"IS_PHANTOM_DATA","","",554,null],[18,"IS_SIMD","","",554,null],[18,"IS_FUNDAMENTAL","","",554,null],[18,"IS_NO_DROP_FLAG","","",554,null],[11,"empty","rustc::ty","Returns an empty set of flags.",554,{"inputs":[],"output":{"name":"adtflags"}}],[11,"all","","Returns the set containing all flags.",554,{"inputs":[],"output":{"name":"adtflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",554,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",554,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",554,{"inputs":[{"name":"u32"}],"output":{"name":"adtflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",554,null],[11,"is_all","","Returns `true` if all flags are currently set.",554,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",554,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",554,null],[11,"insert","","Inserts the specified flags in-place.",554,null],[11,"remove","","Removes the specified flags in-place.",554,null],[11,"toggle","","Toggles the specified flags in-place.",554,null],[11,"bitor","","Returns the union of the two sets of flags.",554,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",554,null],[11,"bitand","","Returns the intersection between the two sets of flags.",554,null],[11,"sub","","Returns the set difference of the two sets of flags.",554,null],[11,"not","","Returns the complement of this set of flags.",554,null],[11,"eq","","",390,null],[11,"hash","","",390,null],[11,"encode","","",555,null],[11,"decode","","",555,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",410,null],[11,"fmt","","",410,null],[11,"clone","","",410,null],[11,"decode","","",411,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",411,null],[11,"fmt","","",411,null],[11,"hash","","",411,null],[11,"eq","","",411,null],[11,"clone","","",411,null],[11,"from_variant_data","","",411,{"inputs":[{"name":"variantdata"}],"output":{"name":"self"}}],[11,"adt_kind","","Returns the kind of the ADT - Struct or Enum.",390,null],[11,"is_dtorck","","Returns whether this is a dtorck type. If this returns\ntrue, this type being safe for destruction requires it to be\nalive; Otherwise, only the contents are required to be.",390,null],[11,"is_fundamental","","Returns whether this type is #[fundamental] for the purposes\nof coherence checking.",390,null],[11,"is_simd","","",390,null],[11,"is_phantom_data","","Returns true if this is PhantomData&lt;T&gt;.",390,null],[11,"has_dtor","","Returns whether this type has a destructor.",390,null],[11,"struct_variant","","Asserts this is a struct and returns the struct&#39;s unique\nvariant.",390,null],[11,"type_scheme","","",390,null],[11,"predicates","","",390,null],[11,"all_fields","","Returns an iterator over all fields contained\nby this ADT.",390,null],[11,"is_empty","","",390,null],[11,"is_univariant","","",390,null],[11,"is_payloadfree","","",390,null],[11,"variant_with_id","","",390,null],[11,"variant_index_with_id","","",390,null],[11,"variant_of_def","","",390,null],[11,"destructor","","",390,null],[11,"set_destructor","","",390,null],[11,"dtor_kind","","",390,null],[11,"sized_constraint","","Returns a simpler type such that `Self: Sized` if and only\nif that type is Sized, or `TyErr` if this type is recursive.",390,null],[11,"kind","","",388,null],[11,"is_tuple_struct","","",388,null],[11,"find_field_named","","",388,null],[11,"index_of_field_named","","",388,null],[11,"field_named","","",388,null],[11,"new","","",389,{"inputs":[{"name":"defid"},{"name":"name"},{"name":"visibility"}],"output":{"name":"self"}}],[11,"ty","","",389,null],[11,"unsubst_ty","","",389,null],[11,"fulfill_ty","","",389,null],[11,"clone","","",391,null],[11,"decode","","",412,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",412,null],[11,"fmt","","",412,null],[11,"hash","","",412,null],[11,"eq","","",412,null],[11,"cmp","","",412,null],[11,"partial_cmp","","",412,null],[11,"clone","","",412,null],[11,"trait_did","","",412,null],[11,"extends","","True if this a type that impls this closure kind\nmust also implement `other`.",412,null],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",373,null],[11,"walk_shallow","","Iterator that walks the immediate children of `self`.  Hence\n`Foo&lt;Bar&lt;i32&gt;, u32&gt;` yields the sequence `[Bar&lt;i32&gt;, u32]`\n(but not `i32`, like `walk`).",373,null],[11,"maybe_walk","","Walks `ty` and any types appearing within `ty`, invoking the\ncallback `f` on each type. If the callback returns false, then the\nchildren of the current type are ignored.",373,null],[11,"is_noop","","",391,null],[11,"eq","","",413,null],[11,"fmt","","",413,null],[11,"clone","","",413,null],[11,"from_mutbl","","",413,{"inputs":[{"name":"mutability"}],"output":{"name":"self"}}],[11,"from_mutbl","","",405,{"inputs":[{"name":"mutability"}],"output":{"name":"borrowkind"}}],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&amp;m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",405,null],[11,"to_user_str","","",405,null],[11,"node_id_to_type","","",425,null],[11,"node_id_to_type_opt","","",425,null],[11,"node_id_item_substs","","",425,null],[11,"pat_ty","","",425,null],[11,"pat_ty_opt","","",425,null],[11,"expr_ty","","",425,null],[11,"expr_ty_opt","","",425,null],[11,"expr_ty_adjusted","","Returns the type of `expr`, considering any `AutoAdjustment`\nentry recorded for that expression.",425,null],[11,"expr_ty_adjusted_opt","","",425,null],[11,"expr_span","","",425,null],[11,"local_var_name_str","","",425,null],[11,"resolve_expr","","",425,null],[11,"expr_is_lval","","",425,null],[11,"provided_trait_methods","","",425,null],[11,"associated_consts","","",425,null],[11,"trait_impl_polarity","","",425,null],[11,"custom_coerce_unsized_kind","","",425,null],[11,"impl_or_trait_item","","",425,null],[11,"trait_item_def_ids","","",425,null],[11,"impl_trait_ref","","Returns the trait-ref corresponding to a given impl, or None if it is\nan inherent impl.",425,null],[11,"is_impl","","Returns whether this DefId refers to an impl",425,null],[11,"trait_ref_to_def_id","","",425,null],[11,"def_key","","",425,null],[11,"def_path","","Returns the `DefPath` of an item. Note that if `id` is not\nlocal to this crate -- or is inlined into this crate -- the\nresult will be a non-local `DefPath`.",425,null],[11,"item_name","","",425,null],[11,"register_item_type","","",425,null],[11,"lookup_item_type","","",425,null],[11,"lookup_trait_def","","Given the did of a trait, returns its canonical trait ref.",425,null],[11,"lookup_adt_def_master","","Given the did of an ADT, return a master reference to its\ndefinition. Unless you are planning on fulfilling the ADT&#39;s fields,\nuse lookup_adt_def instead.",425,null],[11,"lookup_adt_def","","Given the did of an ADT, return a reference to its definition.",425,null],[11,"lookup_predicates","","Given the did of an item, returns its full set of predicates.",425,null],[11,"lookup_super_predicates","","Given the did of a trait, returns its superpredicates.",425,null],[11,"type_needs_drop_given_env","","If `type_needs_drop` returns true, then `ty` is definitely\nnon-copy and *might* have a destructor attached; if it returns\nfalse, then `ty` definitely has no destructor (i.e. no drop glue).",425,null],[11,"get_attrs","","Get the attributes of a definition.",425,null],[11,"has_attr","","Determine whether an item is annotated with an attribute",425,null],[11,"lookup_packed","","Determine whether an item is annotated with `#[repr(packed)]`",425,null],[11,"lookup_simd","","Determine whether an item is annotated with `#[simd]`",425,null],[11,"item_variances","","",425,null],[11,"trait_has_default_impl","","",425,null],[11,"record_trait_has_default_impl","","Records a trait-to-implementation mapping.",425,null],[11,"populate_implementations_for_primitive_if_necessary","","Load primitive inherent implementations if necessary",425,null],[11,"populate_inherent_implementations_for_type_if_necessary","","Populates the type context with all the inherent implementations for\nthe given type if necessary.",425,null],[11,"populate_implementations_for_trait_if_necessary","","Populates the type context with all the implementations for the given\ntrait if necessary.",425,null],[11,"closure_kind","","",425,null],[11,"closure_type","","",425,null],[11,"trait_id_of_impl","","Given the def_id of an impl, return the def_id of the trait it implements.\nIf it implements no trait, return `None`.",425,null],[11,"impl_of_method","","If the given def ID describes a method belonging to an impl, return the\nID of the impl that the method belongs to. Otherwise, return `None`.",425,null],[11,"trait_of_item","","If the given def ID describes an item belonging to a trait (either a\ndefault method or an implementation of a trait method), return the ID of\nthe trait that the method belongs to. Otherwise, return `None`.",425,null],[11,"trait_item_of_item","","If the given def ID describes an item belonging to a trait, (either a\ndefault method or an implementation of a trait method), return the ID of\nthe method inside trait definition (this means that if the given def ID\nis already that of the original trait method, then the return value is\nthe same).\nOtherwise, return `None`.",425,null],[11,"empty_parameter_environment","","Construct a parameter environment suitable for static contexts or other contexts where there\nare no free type/lifetime parameters in scope.",425,null],[11,"construct_free_substs","","Constructs and returns a substitution that can be applied to move from\nthe &quot;outer&quot; view of a type or method to the &quot;inner&quot; view.\nIn general, this means converting from bound parameters to\nfree parameters. Since we currently represent bound/free type\nparameters in the same way, this only has an effect on regions.",425,null],[11,"construct_parameter_environment","","See `ParameterEnvironment` struct def&#39;n for details.\nIf you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\nfor the `free_id_outlive` parameter. (But note that that is not always quite right.)",425,null],[11,"is_method_call","","",425,null],[11,"is_overloaded_autoderef","","",425,null],[11,"upvar_capture","","",425,null],[11,"visit_all_items_in_krate","","",425,null],[11,"span_of_impl","","Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\nwith the name of the crate containing the impl.",425,null],[11,"fmt","","",414,null],[11,"eq","","",414,null],[11,"ne","","",414,null],[11,"clone","","",414,null],[11,"with_freevars","","",425,null],[0,"util","rustc","",null,null],[0,"sha2","rustc::util","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant.",null,null],[11,"new_in","rustc_back::tempdir","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",556,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",556,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",556,null],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",556,null],[11,"close","","Close and remove the temporary directory",556,null],[11,"drop","","",556,null],[11,"new","rustc_back::sha2","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",557,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",557,null],[11,"result","","",557,null],[11,"reset","","",557,null],[11,"output_bits","","",557,null],[11,"fmt","rustc_back::target","",558,null],[11,"clone","","",558,null],[11,"fmt","","",559,null],[11,"clone","","",559,null],[11,"default","","Create a set of &quot;sane defaults&quot; for any target. This is still\nincomplete, and if used for compilation, will certainly not work.",559,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn &quot;System&quot; into the correct ABI for this target.",558,null],[11,"from_json","","Load a target descriptor from a JSON object.",558,{"inputs":[{"name":"json"}],"output":{"name":"target"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",558,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"drop","rustc_back::dynamic_lib","",560,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",560,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",560,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",560,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",560,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",560,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",560,null],[8,"Digest","rustc::util::sha2","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",561,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",561,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",561,null],[10,"output_bits","","Get the output size in bits.",561,null],[11,"input_str","","Convenience function that feeds a string into a digest.",561,null],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",561,null],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",561,null],[3,"Sha256","","The SHA-256 hash algorithm",null,null],[0,"common","rustc::util","",null,null],[3,"ErrorReported","rustc::util::common","",null,null],[3,"Indenter","","",null,null],[5,"time","","",null,{"inputs":[{"name":"bool"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[5,"indent","","",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"indenter","","",null,{"inputs":[],"output":{"name":"indenter"}}],[5,"loop_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[5,"block_query","","",null,{"inputs":[{"name":"block"},{"name":"p"}],"output":{"name":"bool"}}],[5,"path2cstr","","",null,{"inputs":[{"name":"path"}],"output":{"name":"cstring"}}],[17,"FN_OUTPUT_NAME","","",null,null],[8,"MemoizationMap","","",null,null],[16,"Key","","",562,null],[16,"Value","","",562,null],[10,"memoize","","If `key` is present in the map, return the valuee,\notherwise invoke `op` and store the value in the map.",562,null],[11,"fmt","","",563,null],[11,"clone","","",563,null],[11,"drop","","",564,null],[11,"memoize","core::cell","",7,null],[0,"ppaux","rustc::util","",null,null],[4,"Ns","rustc::util::ppaux","Namespace of the path given to parameterized to print.",null,null],[13,"Type","","",565,null],[13,"Value","","",565,null],[5,"verbose","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"parameterized","","",null,null],[11,"eq","","",565,null],[11,"clone","","",565,null],[11,"fmt","rustc::ty","",351,null],[11,"fmt","","",377,null],[11,"fmt","","",378,null],[11,"fmt","","",373,null],[11,"fmt","","",353,null],[11,"fmt","rustc::ty::subst","",467,null],[11,"fmt","rustc::ty","",391,null],[11,"fmt","","",354,null],[11,"fmt","rustc::ty::trait_def","",473,null],[11,"fmt","rustc::ty","",390,null],[11,"fmt","rustc::ty::adjustment","",416,null],[11,"fmt","","",415,null],[11,"fmt","rustc::ty","",351,null],[11,"fmt","","",409,null],[11,"fmt","","",396,null],[11,"fmt","","",396,null],[11,"fmt","","",397,null],[11,"fmt","","",348,null],[11,"fmt","","",376,null],[11,"fmt","","",386,null],[11,"fmt","","",408,null],[11,"fmt","","",397,null],[11,"fmt","","",356,null],[11,"fmt","","",403,null],[11,"fmt","","",369,null],[11,"fmt","","",380,null],[11,"fmt","","",385,null],[11,"fmt","","",400,null],[11,"fmt","","",347,null],[11,"fmt","","",345,null],[11,"fmt","","",464,null],[11,"fmt","","",357,null],[11,"fmt","","",358,null],[11,"fmt","","",359,null],[11,"fmt","","",360,null],[11,"fmt","","",347,null],[11,"fmt","","",394,null],[11,"fmt","","",407,null],[11,"fmt","","",343,null],[11,"fmt","","",343,null],[11,"fmt","","",343,null],[11,"fmt","","",343,null],[11,"fmt","","",343,null],[11,"fmt","","",343,null],[11,"fmt","","",354,null],[11,"fmt","","",395,null],[11,"fmt","","",373,null],[11,"fmt","","",374,null],[11,"fmt","","",375,null],[11,"fmt","","",394,null],[11,"fmt","","",414,null],[11,"fmt","","",349,null],[11,"fmt","","",349,null],[11,"fmt","","",383,null],[11,"fmt","","",382,null],[11,"fmt","","",381,null],[11,"fmt","","",381,null],[11,"fmt","","",384,null],[11,"fmt","","",384,null],[11,"fmt","","",350,null],[11,"fmt","","",412,null],[11,"fmt","","",409,null],[0,"nodemap","rustc::util","An efficient hash map for node IDs",null,null],[11,"clone","rustc_data_structures::bitvec","",566,null],[11,"new","","",566,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"contains","","",566,null],[11,"insert","","Returns true if the bit has changed.",566,null],[11,"insert_all","","",566,null],[11,"grow","","",566,null],[11,"iter","","Iterates over indexes of set bits in a sorted order",566,null],[11,"next","","",567,null],[11,"from_iter","","",566,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",568,null],[11,"new","","",568,{"inputs":[{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",568,null],[11,"contains","","Do the bits from `source` contain `target`?",568,null],[11,"intersection","","Returns those indices that are reachable from both `a` and\n`b`. This is an O(n) operation where `n` is the number of\nelements (somewhat independent from the actual size of the\nintersection, in particular).",568,null],[11,"merge","","Add the bits from `read` to the bits from `write`,\nreturn true if anything changed.",568,null],[11,"reverse","rustc_data_structures::graph","",569,null],[11,"reverse","","",570,null],[11,"fmt","","",570,null],[11,"hash","","",571,null],[11,"fmt","","",571,null],[11,"eq","","",571,null],[11,"ne","","",571,null],[11,"clone","","",571,null],[11,"hash","","",572,null],[11,"fmt","","",572,null],[11,"eq","","",572,null],[11,"ne","","",572,null],[11,"clone","","",572,null],[11,"eq","","",573,null],[11,"ne","","",573,null],[11,"fmt","","",573,null],[11,"clone","","",573,null],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",571,null],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",572,null],[11,"new","","",574,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",574,null],[11,"len_nodes","","",574,null],[11,"all_edges","","",574,null],[11,"len_edges","","",574,null],[11,"next_node_index","","",574,null],[11,"add_node","","",574,null],[11,"mut_node_data","","",574,null],[11,"node_data","","",574,null],[11,"node","","",574,null],[11,"next_edge_index","","",574,null],[11,"add_edge","","",574,null],[11,"mut_edge_data","","",574,null],[11,"edge_data","","",574,null],[11,"edge","","",574,null],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",574,null],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",574,null],[11,"each_node","","Iterates over all edges defined in the graph.",574,null],[11,"each_edge","","Iterates over all edges defined in the graph",574,null],[11,"outgoing_edges","","",574,null],[11,"incoming_edges","","",574,null],[11,"adjacent_edges","","",574,null],[11,"successor_nodes","","",574,null],[11,"predecessor_nodes","","",574,null],[11,"iterate_until_fixed_point","","",574,null],[11,"depth_traverse","","",574,null],[11,"next","","",575,null],[11,"next","","",576,null],[11,"next","","",577,null],[11,"next","","",578,null],[11,"source","","",570,null],[11,"target","","",570,null],[11,"source_or_target","","",570,null],[11,"eq","rustc_data_structures::ivar","",579,null],[11,"ne","","",579,null],[11,"new","","",579,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",579,null],[11,"fulfill","","",579,null],[11,"is_fulfilled","","",579,null],[11,"unwrap","","",579,null],[11,"fmt","","",579,null],[11,"clone","","",579,null],[11,"fmt","rustc_data_structures::obligation_forest","",580,null],[11,"eq","","",581,null],[11,"ne","","",581,null],[11,"fmt","","",581,null],[11,"new","","",582,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not\nyet been fully resolved.",582,null],[11,"start_snapshot","","",582,null],[11,"commit_snapshot","","",582,null],[11,"rollback_snapshot","","",582,null],[11,"in_snapshot","","",582,null],[11,"register_obligation","","Registers an obligation",582,null],[11,"to_errors","","Convert all remaining obligations to the given error.",582,null],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",582,null],[11,"process_obligations","","Perform a pass through the obligation list. This must\nbe called in a loop until `outcome.stalled` is false.",582,null],[11,"new","rustc_data_structures::snapshot_vec","",583,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",583,null],[11,"len","","",583,null],[11,"push","","",583,null],[11,"get","","",583,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",583,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",583,null],[11,"start_snapshot","","",583,null],[11,"actions_since_snapshot","","",583,null],[11,"rollback_to","","",583,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",583,null],[11,"deref","","",583,null],[11,"deref_mut","","",583,null],[11,"index","","",583,null],[11,"index_mut","","",583,null],[11,"extend","","",583,null],[11,"clone","rustc_data_structures::transitive_relation","",584,null],[11,"new","","",584,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"add","","Indicate that `a &lt; b` (where `&lt;` is this relation)",584,null],[11,"contains","","Check whether `a &lt; target` (transitively)",584,null],[11,"postdom_upper_bound","","Picks what I am referring to as the &quot;postdominating&quot;\nupper-bound for `a` and `b`. This is usually the least upper\nbound, but in cases where there is no single least upper\nbound, it is the &quot;mutual immediate postdominator&quot;, if you\nimagine a graph where `a &lt; b` means `a -&gt; b`.",584,null],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",584,null],[11,"fmt","rustc_data_structures::unify","",585,null],[11,"clone","","",585,null],[11,"eq","","",585,null],[11,"ne","","",585,null],[11,"new","","",586,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a &quot;LIFO&quot; (stack) order.",586,null],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",586,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",586,null],[11,"new_key","","",586,null],[11,"union","","",586,null],[11,"find","","",586,null],[11,"find_value","","",586,null],[11,"unioned","","",586,null],[11,"unify_var_var","","",586,null],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",586,null],[11,"has_value","","",586,null],[11,"probe","","",586,null],[11,"unsolved_variables","","",586,null],[11,"default","rustc_data_structures::fnv","",587,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",587,null],[11,"finish","","",587,null],[11,"with_capacity","rustc_data_structures::veccell","",588,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",588,null],[11,"swap","","",588,null],[6,"FnvHashMap","rustc::util::nodemap","",null,null],[6,"FnvHashSet","","",null,null],[5,"NodeMap","","",null,{"inputs":[],"output":{"name":"nodemap"}}],[5,"DefIdMap","","",null,{"inputs":[],"output":{"name":"defidmap"}}],[5,"NodeSet","","",null,{"inputs":[],"output":{"name":"nodeset"}}],[5,"DefIdSet","","",null,{"inputs":[],"output":{"name":"defidset"}}],[6,"NodeMap","","",null,null],[6,"DefIdMap","","",null,null],[6,"NodeSet","","",null,null],[6,"DefIdSet","","",null,null],[0,"num","rustc::util","",null,null],[8,"ToPrimitive","rustc::util::num","",null,null],[10,"to_i8","","",589,null],[10,"to_i16","","",589,null],[10,"to_i32","","",589,null],[10,"to_i64","","",589,null],[10,"to_u8","","",589,null],[10,"to_u16","","",589,null],[10,"to_u32","","",589,null],[10,"to_u64","","",589,null],[0,"fs","rustc::util","",null,null],[5,"fix_windows_verbatim_for_gcc","rustc::util::fs","",null,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[17,"DIAGNOSTICS","rustc","",null,null],[14,"bug!","","",null,null],[14,"span_bug!","","",null,null],[14,"lint_initializer!","","Build a `Lint` initializer.",null,null],[14,"declare_lint!","","Declare a static item of type `&amp;&#39;static Lint`.",null,null],[14,"lint_array!","","Declare a static `LintArray` and return it as an expression.",null,null],[11,"print_node","rustc::hir::print","",120,null],[11,"compare","rustc::ty::relate","",590,null],[11,"note_and_explain_region","rustc::ty","",425,null],[11,"resolve","","",547,null],[11,"resolve","","",354,null],[11,"resolve","","",550,null],[11,"index","","",358,null],[11,"from_index","","",358,{"inputs":[{"name":"u32"}],"output":{"name":"intvid"}}],[11,"tag","","",358,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"index","","",360,null],[11,"from_index","","",360,{"inputs":[{"name":"u32"}],"output":{"name":"regionvid"}}],[11,"tag","","",360,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"to_type","","",407,null],[11,"index","","",359,null],[11,"from_index","","",359,{"inputs":[{"name":"u32"}],"output":{"name":"floatvid"}}],[11,"tag","","",359,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"index","","",357,null],[11,"from_index","","",357,{"inputs":[{"name":"u32"}],"output":{"name":"tyvid"}}],[11,"tag","","",357,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[11,"infer_ctxt","","",425,null],[11,"normalizing_infer_ctxt","","",425,null],[11,"borrowck_fake_infer_ctxt","","Fake InferCtxt with the global tcx. Used by pre-MIR borrowck\nfor MemCategorizationContext/ExprUseVisitor.\nIf any inference functionality is used, ICEs will occur.",425,null],[11,"trans_normalize","","",547,null],[11,"trans_normalize","","",347,null],[11,"trans_normalize","","",393,null],[11,"trans_normalize","","",352,null],[11,"trans_normalize","","",550,null],[11,"trans_normalize","rustc::mir::tcx","",270,null],[11,"normalize_associated_type","rustc::ty","",425,null],[11,"current_level","rustc::lint","Get the level of `lint` at the current position of the lint\ntraversal.",178,null],[11,"level_src","","",178,null],[11,"lookup_and_emit","","",178,null],[11,"lookup","","",178,null],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",178,null],[11,"struct_span_lint","","",178,null],[11,"span_lint_note","","Emit a lint and note at the appropriate level, for a particular span.",178,null],[11,"span_lint_help","","Emit a lint and help at the appropriate level, for a particular span.",178,null],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",178,null],[11,"with_lint_attrs","","Merge the lints specified by any lint attributes into the\ncurrent lint context, call the provided function, then reset the\nlints in effect to their previous state.",178,null],[11,"prohibit_type_params","rustc::ty","",425,null],[11,"prohibit_projection","","",425,null],[11,"prim_ty_to_ty","","",425,null],[11,"ast_ty_to_prim_ty","","If a type in the AST is a primitive type, return the ty::Ty corresponding\nto it.",425,null],[11,"lookup_stability","","Lookup the stability for a node, loading external crate\nmetadata as necessary.",425,null],[11,"lookup_deprecation","","",425,null],[11,"recursive_type_with_infinite_size_error","","",425,null],[11,"report_object_safety_error","","",425,null],[11,"is_object_safe","","",425,null],[11,"astconv_object_safety_violations","","Returns the object safety violations that affect\nastconv - currently, Self in supertraits. This is needed\nbecause `object_safety_violations` can&#39;t be used during\ntype collection.",425,null],[11,"object_safety_violations","","",425,null],[11,"is_vtable_safe_method","","We say a method is *vtable safe* if it can be invoked on a trait\nobject.  Note that object-safe traits can have some\nnon-vtable-safe methods, so long as they require `Self:Sized` or\notherwise ensure that they cannot be used when `Self=Trait`.",425,null],[11,"trait_ref_for_builtin_bound","","",425,null],[11,"predicate_for_trait_def","","",425,null],[11,"predicate_for_builtin_bound","","",425,null],[11,"upcast_choices","","Cast a trait reference into a reference to one of its super\ntraits; returns `None` if `target_trait_def_id` is not a\nsupertrait.",425,null],[11,"count_own_vtable_entries","","Given a trait `trait_ref`, returns the number of vtable entries\nthat come from `trait_ref`, excluding its supertraits. Used in\ncomputing the vtable base for an upcast trait of a trait object.",425,null],[11,"get_vtable_index_of_object_method","","Given an upcast trait object described by `object`, returns the\nindex of the method `method_def_id` (which should be part of\n`object.upcast_trait_ref`) within the vtable for `object`.",425,null],[11,"closure_trait_ref_and_return_type","","",425,null],[11,"relate","","",547,{"inputs":[{"name":"r"},{"name":"ty"},{"name":"ty"}],"output":{"name":"relateresult"}}],[11,"lift_to_tcx","","",547,null],[11,"super_fold_with","","",547,null],[11,"fold_with","","",547,null],[11,"super_visit_with","","",547,null],[11,"visit_with","","",547,null],[11,"self_ty","","",550,null],[11,"def_id","","",550,null],[11,"substs","","",550,null],[11,"input_types","","",550,null],[11,"to_poly_trait_predicate","","",550,null],[11,"diverges","","",591,null],[11,"inputs","","",592,null],[11,"input","","",592,null],[11,"output","","",592,null],[11,"variadic","","",592,null]],"paths":[[3,"CFG"],[3,"CFGEdgeData"],[4,"CFGNodeData"],[3,"LabelledCFG"],[3,"DepGraphQuery"],[4,"DepNode"],[3,"DepTrackingMap"],[3,"RefCell"],[3,"DepGraph"],[8,"DepTrackingMapConfig"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"MacroDef"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"ItemId"],[3,"Item"],[3,"ForeignItem"],[3,"Freevar"],[3,"TraitCandidate"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"Decl_"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"Expr_"],[4,"MatchSource"],[4,"CaptureClause"],[4,"TraitItem_"],[4,"ImplItemKind"],[4,"PrimTy"],[4,"Ty_"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"Visibility"],[4,"VariantData"],[4,"Item_"],[4,"ForeignItem_"],[3,"PathResolution"],[3,"Export"],[4,"Def"],[3,"DefId"],[3,"DefIndex"],[8,"Folder"],[3,"IdRange"],[3,"IdRangeComputingVisitor"],[4,"FnKind"],[8,"Visitor"],[8,"IdVisitingOperation"],[3,"IdVisitor"],[8,"Resolver"],[3,"DummyResolver"],[3,"LoweringContext"],[3,"Forest"],[3,"Map"],[4,"Node"],[4,"MapEntry"],[3,"FnParts"],[4,"Code"],[8,"MaybeFnLike"],[3,"FnLikeNode"],[3,"DefKey"],[3,"DisambiguatedDefPathData"],[3,"DefData"],[3,"DefPath"],[3,"InlinedRootPath"],[4,"DefPathData"],[3,"Definitions"],[8,"FoldOps"],[8,"NodePrinter"],[3,"NodesMatchingSuffix"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[3,"NoAnn"],[3,"Svh"],[3,"InferOk"],[3,"InferCtxt"],[4,"InferTables"],[4,"TypeOrigin"],[4,"ValuePairs"],[4,"SubregionOrigin"],[4,"ParameterOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"FixupError"],[3,"Bivariate"],[3,"CombineFields"],[8,"RelateResultCompare"],[3,"Equate"],[8,"Resolvable"],[3,"Glb"],[8,"LatticeDir"],[3,"Lub"],[3,"SameRegions"],[4,"Constraint"],[4,"Verify"],[4,"GenericKind"],[4,"VerifyBound"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[4,"ProcessedErrorOrigin"],[4,"VarValue"],[3,"TwoRegions"],[3,"RegionVarBindings"],[3,"RegionSnapshot"],[3,"OpportunisticTypeResolver"],[3,"OpportunisticTypeAndRegionResolver"],[3,"TypeFreshener"],[3,"Sub"],[3,"Default"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"RegionVidKey"],[8,"ToType"],[4,"FloatTy"],[8,"TransNormalize"],[3,"TypeTrace"],[3,"InferCtxtBuilder"],[3,"LateContext"],[3,"EarlyContext"],[3,"FutureIncompatibleInfo"],[3,"Lint"],[4,"Level"],[4,"LintSource"],[3,"HardwiredLints"],[3,"LintStore"],[3,"GatherNodeLevels"],[8,"LintContext"],[8,"LintPass"],[8,"LateLintPass"],[8,"EarlyLintPass"],[3,"LintId"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"MutateMode"],[8,"Delegate"],[3,"ExprUseVisitor"],[4,"ConstVal"],[3,"ConstQualif"],[3,"LinkMeta"],[3,"CrateSource"],[3,"ChildItem"],[3,"ExternCrate"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[4,"DefLike"],[4,"InlinedItem"],[4,"InlinedItemRef"],[4,"FoundAst"],[8,"EncodingContext"],[8,"DecodingContext"],[8,"CrateStore"],[3,"DummyCrateStore"],[4,"EntryOrExit"],[4,"KillFrom"],[8,"BitwiseOperator"],[8,"DataFlowOperator"],[3,"DataFlowContext"],[4,"Linkage"],[3,"FreeRegionMap"],[3,"LanguageItems"],[4,"LangItem"],[3,"Upvar"],[3,"cmt_"],[3,"MemCategorizationContext"],[4,"Categorization"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"InteriorOffsetKind"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[4,"deref_kind"],[4,"Aliasability"],[4,"AliasableReason"],[8,"ast_node"],[3,"AccessLevels"],[4,"AccessLevel"],[3,"CallSiteScopeData"],[3,"BlockRemainder"],[4,"CodeExtentData"],[3,"CodeExtent"],[3,"Context"],[3,"RegionMaps"],[4,"DefRegion"],[4,"StabilityLevel"],[3,"Index"],[3,"Mir"],[3,"VarDecl"],[3,"TempDecl"],[3,"ArgDecl"],[3,"UpvarDecl"],[3,"BasicBlockData"],[3,"Terminator"],[3,"Statement"],[3,"Projection"],[3,"ScopeData"],[3,"Constant"],[3,"TypedConstVal"],[4,"Mutability"],[4,"BorrowKind"],[4,"TerminatorKind"],[4,"StatementKind"],[4,"Lvalue"],[4,"ProjectionElem"],[4,"Operand"],[4,"Rvalue"],[4,"CastKind"],[4,"AggregateKind"],[4,"BinOp"],[4,"UnOp"],[4,"Literal"],[3,"BasicBlock"],[3,"Field"],[3,"Vec"],[3,"ScopeId"],[4,"LvalueTy"],[4,"LvalueContext"],[8,"Visitor"],[8,"MutVisitor"],[4,"MirSource"],[8,"Pass"],[8,"MirMapPass"],[8,"MirPass"],[3,"Passes"],[3,"MirMap"],[3,"Session"],[3,"Config"],[3,"Options"],[3,"OutputFilenames"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[3,"RustcOptGroup"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[4,"ErrorOutputType"],[4,"PrintRequest"],[4,"Input"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[4,"PanicStrategy"],[4,"OptionStability"],[3,"FileSearch"],[4,"FileMatch"],[4,"PathKind"],[3,"SearchPaths"],[3,"Iter"],[3,"RegionObligation"],[3,"MismatchedProjectionTypes"],[3,"Normalized"],[3,"OverlapError"],[3,"Obligation"],[3,"ObligationCause"],[3,"FulfillmentError"],[3,"VtableImplData"],[3,"VtableClosureData"],[3,"VtableDefaultImplData"],[3,"VtableBuiltinData"],[3,"VtableObjectData"],[3,"VtableFnPointerData"],[4,"OrphanCheckErr"],[4,"ProjectionMode"],[4,"ObjectSafetyViolation"],[4,"MethodViolationCode"],[4,"MethodMatchResult"],[4,"MethodMatchedData"],[4,"ObligationCauseCode"],[4,"SelectionError"],[4,"FulfillmentErrorCode"],[4,"Vtable"],[3,"NodeItem"],[4,"Node"],[4,"NodeItems"],[3,"Graph"],[3,"Ancestors"],[3,"TypeDefs"],[3,"FnDefs"],[3,"ConstDefs"],[3,"TraitErrorKey"],[3,"FulfillmentContext"],[3,"GlobalFulfilledPredicates"],[3,"SelectionCache"],[3,"EvaluationCache"],[3,"SelectionContext"],[3,"SpecializesCache"],[3,"SupertraitDefIds"],[3,"DerivedObligationCause"],[3,"Binder"],[3,"DebruijnIndex"],[3,"ExistentialBounds"],[3,"BareFnTy"],[3,"FnSig"],[3,"ClosureTy"],[3,"ParamTy"],[3,"ProjectionTy"],[3,"TraitTy"],[3,"ClosureSubsts"],[3,"TypeAndMut"],[3,"TraitRef"],[3,"EarlyBoundRegion"],[3,"FreeRegion"],[3,"TyVid"],[3,"IntVid"],[3,"FloatVid"],[3,"RegionVid"],[3,"SkolemizedRegionVid"],[3,"TypeContents"],[3,"Tables"],[3,"CrateAnalysis"],[3,"ImplHeader"],[3,"Method"],[3,"AssociatedConst"],[3,"AssociatedType"],[3,"ItemVariances"],[3,"MethodCallee"],[3,"MethodCall"],[3,"CReaderCacheKey"],[3,"TyS"],[3,"UpvarId"],[3,"UpvarBorrow"],[3,"ClosureUpvar"],[3,"TypeParameterDef"],[3,"RegionParameterDef"],[3,"Generics"],[3,"GenericPredicates"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionPredicate"],[3,"InstantiatedPredicates"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"VariantDefData"],[3,"FieldDefData"],[3,"AdtDefData"],[3,"ItemSubsts"],[4,"BuiltinBound"],[4,"FnOutput"],[4,"InferTy"],[4,"TypeVariants"],[4,"BoundRegion"],[4,"Region"],[4,"DtorKind"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItem"],[4,"ImplOrTraitItemId"],[4,"Visibility"],[4,"Variance"],[4,"FragmentInfo"],[4,"BorrowKind"],[4,"UpvarCapture"],[4,"IntVarValue"],[4,"ObjectLifetimeDefault"],[4,"Predicate"],[4,"AdtKind"],[4,"VariantKind"],[4,"ClosureKind"],[4,"LvaluePreference"],[4,"ExplicitSelfCategory"],[3,"AutoDerefRef"],[4,"AutoAdjustment"],[4,"AutoRef"],[4,"CustomCoerceUnsized"],[4,"IntTy"],[4,"CastTy"],[4,"CastKind"],[3,"ExpectedFound"],[4,"TypeError"],[4,"UnconstrainedNumeric"],[3,"TyCtxt"],[4,"SimplifiedType"],[3,"BottomUpFolder"],[8,"TypeFoldable"],[8,"TypeFolder"],[8,"TypeVisitor"],[3,"RegionFolder"],[4,"RootMode"],[8,"ItemPathBuffer"],[3,"TargetDataLayout"],[3,"Struct"],[4,"Endian"],[4,"Integer"],[4,"Primitive"],[4,"Layout"],[4,"LayoutError"],[4,"SizeSkeleton"],[3,"Size"],[3,"Align"],[3,"Match"],[3,"ImplOrTraitItems"],[3,"Tcache"],[3,"Predicates"],[3,"SuperPredicates"],[3,"TraitItemDefIds"],[3,"ImplTraitRefs"],[3,"TraitDefs"],[3,"AdtDefs"],[3,"ItemVariances"],[3,"InherentImpls"],[3,"ImplItems"],[3,"TraitItems"],[3,"ReprHints"],[3,"InlinedClosures"],[4,"Component"],[4,"Cause"],[8,"TypeRelation"],[8,"Relate"],[4,"Abi"],[3,"BuiltinBounds"],[3,"Rc"],[3,"Box"],[3,"Substs"],[3,"SeparateVecsPerParamSpace"],[4,"ParamSpace"],[8,"Subst"],[3,"VecPerParamSpace"],[3,"EnumeratedItems"],[3,"TraitDef"],[3,"TraitFlags"],[3,"TypeWalker"],[4,"ImpliedBound"],[4,"CopyImplementationError"],[4,"Representability"],[8,"IntTypeExt"],[4,"IntType"],[3,"CtxtArenas"],[4,"Option"],[4,"Result"],[3,"P"],[3,"TypeFlags"],[3,"EnumSet"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[8,"Lift"],[8,"NodeIdTree"],[8,"ToPolyTraitRef"],[8,"ToPredicate"],[6,"Ty"],[6,"PolyTraitPredicate"],[6,"PolyProjectionPredicate"],[6,"PolyTraitRef"],[6,"PolyEquatePredicate"],[6,"PolyRegionOutlivesPredicate"],[6,"PolyTypeOutlivesPredicate"],[3,"AdtFlags"],[6,"AdtDef"],[3,"TempDir"],[3,"Sha256"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"],[8,"Digest"],[8,"MemoizationMap"],[3,"ErrorReported"],[3,"Indenter"],[4,"Ns"],[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"Outcome"],[3,"Error"],[3,"ObligationForest"],[3,"SnapshotVec"],[3,"TransitiveRelation"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[3,"VecCell"],[8,"ToPrimitive"],[6,"RelateResult"],[6,"PolyFnOutput"],[6,"PolyFnSig"]]};
searchIndex["rustc_const_math"] = {"doc":"Rusty Mathematics","items":[[4,"ConstInt","rustc_const_math","",null,null],[13,"I8","","",0,null],[13,"I16","","",0,null],[13,"I32","","",0,null],[13,"I64","","",0,null],[13,"Isize","","",0,null],[13,"U8","","",0,null],[13,"U16","","",0,null],[13,"U32","","",0,null],[13,"U64","","",0,null],[13,"Usize","","",0,null],[13,"Infer","","",0,null],[13,"InferSigned","","",0,null],[4,"ConstUsize","","Depending on the target only one variant is ever used in a compilation.\nAnything else is an error. This invariant is checked at several locations",null,null],[13,"Us32","","",1,null],[13,"Us64","","",1,null],[4,"ConstIsize","","Depending on the target only one variant is ever used in a compilation.\nAnything else is an error. This invariant is checked at several locations",null,null],[13,"Is32","","",2,null],[13,"Is64","","",2,null],[4,"ConstMathErr","","",null,null],[13,"NotInRange","","",3,null],[13,"CmpBetweenUnequalTypes","","",3,null],[13,"UnequalTypes","","",3,null],[13,"Overflow","","",3,null],[13,"ShiftNegative","","",3,null],[13,"DivisionByZero","","",3,null],[13,"RemainderByZero","","",3,null],[13,"UnsignedNegation","","",3,null],[13,"ULitOutOfRange","","",3,null],[13,"LitOutOfRange","","",3,null],[4,"Op","","",null,null],[13,"Add","","",4,null],[13,"Sub","","",4,null],[13,"Mul","","",4,null],[13,"Div","","",4,null],[13,"Rem","","",4,null],[13,"Shr","","",4,null],[13,"Shl","","",4,null],[13,"Neg","","",4,null],[13,"BitAnd","","",4,null],[13,"BitOr","","",4,null],[13,"BitXor","","",4,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"infer","","If either value is `Infer` or `InferSigned`, try to turn the value into the type of\nthe other value. If both values have no type, don&#39;t do anything",0,null],[11,"erase_type","","Turn this value into an `Infer` or an `InferSigned`",0,null],[11,"description","","Description of the type, not the value",0,null],[11,"to_u64_unchecked","","Erases the type and returns a u64.\nThis is not the same as `-5i8 as u64` but as `-5i8 as i64 as u64`",0,null],[11,"to_u32","","Converts the value to a `u32` if it&#39;s in the range 0...std::u32::MAX",0,null],[11,"to_u64","","Converts the value to a `u64` if it&#39;s &gt;= 0",0,null],[11,"is_negative","","",0,null],[11,"try_cmp","","Compares the values if they are of the same type",0,null],[11,"wrap_incr","","Adds 1 to the value and wraps around if the maximum for the type is reached",0,null],[11,"int_type","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"bitand","","",0,null],[11,"bitor","","",0,null],[11,"bitxor","","",0,null],[11,"div","","",0,null],[11,"rem","","",0,null],[11,"shl","","",0,null],[11,"shr","","",0,null],[11,"neg","","",0,null],[11,"not","","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"as_u64","","",1,null],[11,"new","","",1,{"inputs":[{"name":"u64"},{"name":"uintty"}],"output":{"name":"result"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"as_i64","","",2,null],[11,"new","","",2,{"inputs":[{"name":"i64"},{"name":"intty"}],"output":{"name":"result"}}],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"description","","",3,null]],"paths":[[4,"ConstInt"],[4,"ConstUsize"],[4,"ConstIsize"],[4,"ConstMathErr"],[4,"Op"]]};
searchIndex["syntax_ext"] = {"doc":"Syntax extensions in the Rust compiler.","items":[[5,"register_builtins","syntax_ext","",null,{"inputs":[{"name":"syntaxenv"}],"output":null}],[0,"deriving","","The compiler code necessary to implement the `#[derive]` extensions.",null,null],[5,"register_all","syntax_ext::deriving","",null,{"inputs":[{"name":"syntaxenv"}],"output":null}],[0,"bounds","","",null,null],[5,"expand_deriving_unsafe_bound","syntax_ext::deriving::bounds","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_copy","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"clone","syntax_ext::deriving","",null,null],[5,"expand_deriving_clone","syntax_ext::deriving::clone","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"encodable","syntax_ext::deriving","The compiler code necessary to implement the `#[derive(Encodable)]`\n(and `Decodable`, in decodable.rs) extension.  The idea here is that\ntype-defining items may be tagged with `#[derive(Encodable, Decodable)]`.",null,null],[5,"expand_deriving_rustc_encodable","syntax_ext::deriving::encodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_encodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"decodable","syntax_ext::deriving","The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.",null,null],[5,"expand_deriving_rustc_decodable","syntax_ext::deriving::decodable","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"expand_deriving_decodable","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"hash","syntax_ext::deriving","",null,null],[5,"expand_deriving_hash","syntax_ext::deriving::hash","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"debug","syntax_ext::deriving","",null,null],[5,"expand_deriving_debug","syntax_ext::deriving::debug","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"default","syntax_ext::deriving","",null,null],[5,"expand_deriving_default","syntax_ext::deriving::default","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_partial_eq","syntax_ext::deriving::partial_eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"eq","syntax_ext::deriving","",null,null],[5,"expand_deriving_eq","syntax_ext::deriving::eq","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[0,"partial_ord","syntax_ext::deriving","",null,null],[4,"OrderingOp","syntax_ext::deriving::partial_ord","",null,null],[13,"PartialCmpOp","","",0,null],[13,"LtOp","","",0,null],[13,"LeOp","","",0,null],[13,"GtOp","","",0,null],[13,"GeOp","","",0,null],[5,"expand_deriving_partial_ord","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"some_ordering_collapsed","","",null,null],[5,"cs_partial_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[11,"clone","","",0,null],[0,"ord","syntax_ext::deriving","",null,null],[5,"expand_deriving_ord","syntax_ext::deriving::ord","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[5,"ordering_collapsed","","",null,null],[5,"cs_cmp","","",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[0,"generic","syntax_ext::deriving","Some code that abstracts away much of the boilerplate of writing\n`derive` instances for traits. Among other things it manages getting\naccess to the fields of the 4 different sorts of structs and enum\nvariants, as well as creating the method and impl ast instances.",null,null],[3,"TraitDef","syntax_ext::deriving::generic","",null,null],[12,"span","","The span for the current #[derive(Foo)] header.",1,null],[12,"attributes","","",1,null],[12,"path","","Path of the trait, including any type parameters",1,null],[12,"additional_bounds","","Additional bounds required of any type parameters of the type,\nother than the current trait",1,null],[12,"generics","","Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`",1,null],[12,"is_unsafe","","Is it an `unsafe` trait?",1,null],[12,"methods","","",1,null],[12,"associated_types","","",1,null],[3,"MethodDef","","",null,null],[12,"name","","name of the method",2,null],[12,"generics","","List of generics, e.g. `R: rand::Rng`",2,null],[12,"explicit_self","","Whether there is a self argument (outer Option) i.e. whether\nthis is a static function, and whether it is a pointer (inner\nOption)",2,null],[12,"args","","Arguments other than the self argument",2,null],[12,"ret_ty","","Return type",2,null],[12,"attributes","","",2,null],[12,"is_unsafe","","",2,null],[12,"unify_fieldless_variants","","Can we combine fieldless variants for enums into a single match arm?",2,null],[12,"combine_substructure","","",2,null],[3,"Substructure","","All the data about the data structure/method being derived upon.",null,null],[12,"type_ident","","ident of self",3,null],[12,"method_ident","","ident of the method",3,null],[12,"self_args","","dereferenced access to any `Self_` or `Ptr(Self_, _)` arguments",3,null],[12,"nonself_args","","verbatim access to any other arguments",3,null],[12,"fields","","",3,null],[3,"FieldInfo","","Summary of the relevant parts of a struct/enum field.",null,null],[12,"span","","",4,null],[12,"name","","None for tuple structs/normal enum variants, Some for normal\nstructs/struct enum variants.",4,null],[12,"self_","","The expression corresponding to this field of `self`\n(specifically, a reference to it).",4,null],[12,"other","","The expressions corresponding to references to this field in\nthe other `Self` arguments.",4,null],[12,"attrs","","The attributes on the field",4,null],[4,"StaticFields","","Fields for a static method",null,null],[13,"Unnamed","","Tuple structs/enum variants like this.",5,null],[13,"Named","","Normal structs/struct variants.",5,null],[4,"SubstructureFields","","A summary of the possible sets of fields.",null,null],[13,"Struct","","",6,null],[13,"EnumMatching","","Matching variants of the enum: variant index, ast::Variant,\nfields: the field name is only non-`None` in the case of a struct\nvariant.",6,null],[13,"EnumNonMatchingCollapsed","","Non-matching variants of the enum, but with all state hidden from\nthe consequent code.  The first component holds `Ident`s for all of\nthe `Self` arguments; the second component is a slice of all of the\nvariants for the enum itself, and the third component is a list of\n`Ident`s bound to the variant index values for each of the actual\ninput `Self` arguments.",6,null],[13,"StaticStruct","","A static method where `Self` is a struct.",6,null],[13,"StaticEnum","","A static method where `Self` is an enum.",6,null],[5,"combine_substructure","","",null,{"inputs":[{"name":"combinesubstructurefunc"}],"output":{"name":"refcell"}}],[5,"cs_fold","","Fold the fields. `use_foldl` controls whether this is done\nleft-to-right (`true`) or right-to-left (`false`).",null,{"inputs":[{"name":"bool"},{"name":"f"},{"name":"p"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"cs_same_method","","Call the method that is being derived on all the fields, and then\nprocess the collected results. i.e.",null,{"inputs":[{"name":"f"},{"name":"enumnonmatchcollapsedfunc"},{"name":"extctxt"},{"name":"span"},{"name":"substructure"}],"output":{"name":"p"}}],[5,"is_type_without_fields","","Return true if the type has no value fields\n(for an enum, no variant has any fields)",null,{"inputs":[{"name":"annotatable"}],"output":{"name":"bool"}}],[0,"ty","","A mini version of ast::Ty, which is easier to use, and features an explicit `Self` type to use\nwhen specifying impls to be derived.",null,null],[3,"Path","syntax_ext::deriving::generic::ty","A path, e.g. `::std::option::Option::&lt;i32&gt;` (global). Has support\nfor type parameters and a lifetime.",null,null],[12,"path","","",7,null],[12,"lifetime","","",7,null],[12,"params","","",7,null],[12,"global","","",7,null],[3,"LifetimeBounds","","Lifetimes and bounds on type parameters",null,null],[12,"lifetimes","","",8,null],[12,"bounds","","",8,null],[4,"PtrTy","","The types of pointers",null,null],[13,"Borrowed","","&amp;&#39;lifetime mut",9,null],[13,"Raw","","*mut",9,null],[4,"Ty","","A type. Supports pointers, Self, and literals",null,null],[13,"Self_","","",10,null],[13,"Ptr","","&amp;/Box/ Ty",10,null],[13,"Literal","","mod::mod::Type&lt;[lifetime], [Params...]&gt;, including a plain type\nparameter, and things like `i32`",10,null],[13,"Tuple","","includes unit",10,null],[5,"borrowed_ptrty","","",null,{"inputs":[],"output":{"name":"ptrty"}}],[5,"borrowed","","",null,{"inputs":[{"name":"box"}],"output":{"name":"ty"}}],[5,"borrowed_explicit_self","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"borrowed_self","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"nil_ty","","",null,{"inputs":[],"output":{"name":"ty"}}],[5,"get_explicit_self","","",null,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",7,{"inputs":[{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",7,{"inputs":[{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",7,null],[11,"to_path","","",7,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"to_ty","","",10,null],[11,"to_path","","",10,null],[11,"clone","","",8,null],[11,"empty","","",8,{"inputs":[],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",8,null],[6,"CombineSubstructureFunc","syntax_ext::deriving::generic","Combine the values of all the fields together. The last argument is\nall the fields of all the structures.",null,null],[6,"EnumNonMatchCollapsedFunc","","Deal with non-matching enum variants.  The tuple is a list of\nidentifiers (one for each `Self` argument, which could be any of the\nvariants since they have been collapsed together) and the identifiers\nholding the variant index value for each of the `Self` arguments.  The\nlast argument is all the non-`Self` args of the method being derived.",null,null],[11,"expand","","",1,null]],"paths":[[4,"OrderingOp"],[3,"TraitDef"],[3,"MethodDef"],[3,"Substructure"],[3,"FieldInfo"],[4,"StaticFields"],[4,"SubstructureFields"],[3,"Path"],[3,"LifetimeBounds"],[4,"PtrTy"],[4,"Ty"]]};
searchIndex["rustc_back"] = {"doc":"Some stuff used by rustc that doesn&#39;t have many dependencies","items":[[0,"tempdir","rustc_back","",null,null],[3,"TempDir","rustc_back::tempdir","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion.",null,null],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",0,null],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",0,null],[11,"close","","Close and remove the temporary directory",0,null],[11,"drop","","",0,null],[0,"rpath","rustc_back","",null,null],[3,"RPathConfig","rustc_back::rpath","",null,null],[12,"used_crates","","",1,null],[12,"out_filename","","",1,null],[12,"is_like_osx","","",1,null],[12,"has_rpath","","",1,null],[12,"linker_is_gnu","","",1,null],[12,"get_install_prefix_lib_path","","",1,null],[5,"get_rpath_flags","","",null,{"inputs":[{"name":"rpathconfig"}],"output":{"name":"vec"}}],[0,"sha2","rustc_back","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant.",null,null],[3,"Sha256","rustc_back::sha2","The SHA-256 hash algorithm",null,null],[8,"Digest","","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions.",null,null],[10,"input","","Provide message data.",2,null],[10,"result","","Retrieve the digest result. This method may be called multiple times.",2,null],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",2,null],[10,"output_bits","","Get the output size in bits.",2,null],[11,"input_str","","Convenience function that feeds a string into a digest.",2,null],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",2,null],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",2,null],[11,"new","","Construct a new instance of a SHA-256 digest.\nDo not – under any circumstances – use this where timing attacks might be possible!",3,{"inputs":[],"output":{"name":"sha256"}}],[11,"input","","",3,null],[11,"result","","",3,null],[11,"reset","","",3,null],[11,"output_bits","","",3,null],[0,"target","rustc_back","[Flexible target specification.](https://github.com/rust-lang/rfcs/pull/131)",null,null],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target.",null,null],[12,"llvm_target","","Target triple to pass to LLVM.",4,null],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",4,null],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",4,null],[12,"target_os","","OS name to use for conditional compilation.",4,null],[12,"target_env","","Environment name to use for conditional compilation.",4,null],[12,"target_vendor","","Vendor name to use for conditional compilation.",4,null],[12,"arch","","Architecture to use for ABI considerations. Valid options: &quot;x86&quot;,\n&quot;x86_64&quot;, &quot;arm&quot;, &quot;aarch64&quot;, &quot;mips&quot;, &quot;powerpc&quot;, and &quot;powerpc64&quot;.",4,null],[12,"data_layout","","[Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.",4,null],[12,"options","","Optional settings with defaults.",4,null],[3,"TargetOptions","","Optional aspects of a target specification.",null,null],[12,"is_builtin","","Whether the target is built-in or loaded from a custom target specification.",5,null],[12,"linker","","Linker to invoke. Defaults to &quot;cc&quot;.",5,null],[12,"ar","","Archive utility to use when managing archives. Defaults to &quot;ar&quot;.",5,null],[12,"pre_link_args","","Linker arguments that are unconditionally passed *before* any\nuser-defined libraries.",5,null],[12,"pre_link_objects_exe","","Objects to link before all others, always found within the\nsysroot folder.",5,null],[12,"pre_link_objects_dll","","",5,null],[12,"late_link_args","","Linker arguments that are unconditionally passed after any\nuser-defined but before post_link_objects.  Standard platform\nlibraries that should be always be linked to, usually go here.",5,null],[12,"post_link_objects","","Objects to link after all others, always found within the\nsysroot folder.",5,null],[12,"post_link_args","","Linker arguments that are unconditionally passed *after* any\nuser-defined libraries.",5,null],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\nto &quot;generic&quot;.",5,null],[12,"features","","Default target features to pass to LLVM. These features will *always* be\npassed, and cannot be disabled even via `-C`. Corresponds to `llc\n-mattr=$features`.",5,null],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",5,null],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static\nlibraries. Defaults to false.",5,null],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc\n-relocation-model=$relocation_model`. Defaults to &quot;pic&quot;.",5,null],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to &quot;default&quot;.",5,null],[12,"disable_redzone","","Do not emit code that uses the &quot;red zone&quot;, if the ABI has one. Defaults to false.",5,null],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",5,null],[12,"function_sections","","Emit each function in its own section. Defaults to true.",5,null],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to &quot;lib&quot;.",5,null],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to &quot;.so&quot;.",5,null],[12,"exe_suffix","","String to append to the name of every executable.",5,null],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to &quot;lib&quot;.",5,null],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to &quot;.a&quot;.",5,null],[12,"target_family","","OS family to use for conditional compilation. Valid options: &quot;unix&quot;, &quot;windows&quot;.",5,null],[12,"is_like_osx","","Whether the target toolchain is like OSX&#39;s. Only useful for compiling against iOS/OS X, in\nparticular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",5,null],[12,"is_like_solaris","","Whether the target toolchain is like Solaris&#39;s.\nOnly useful for compiling against Illumos/Solaris,\nas they have a different set of linker flags. Defaults to false.",5,null],[12,"is_like_windows","","Whether the target toolchain is like Windows&#39;. Only useful for compiling against Windows,\nonly really used for figuring out how to find libraries, since Windows uses its own\nlibrary naming convention. Defaults to false.",5,null],[12,"is_like_msvc","","",5,null],[12,"is_like_android","","Whether the target toolchain is like Android&#39;s. Only useful for compiling against Android.\nDefaults to false.",5,null],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",5,null],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",5,null],[12,"no_compiler_rt","","Whether to disable linking to compiler-rt. Defaults to false, as LLVM\nwill emit references to the functions that compiler-rt provides.",5,null],[12,"no_default_libraries","","Whether to disable linking to the default libraries, typically corresponds\nto `-nodefaultlibs`. Defaults to true.",5,null],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent\nif the default relocation model of position independent code is not\nchanged. This is a requirement to take advantage of ASLR, as otherwise\nthe functions in the executable are not randomized and can be used\nduring an exploit of a vulnerability in any code.",5,null],[12,"archive_format","","Format that archives should be emitted in. This affects whether we use\nLLVM to assemble an archive or fall back to the system linker, and\ncurrently only &quot;gnu&quot; is used to fall into LLVM. Unknown strings cause\nthe system linker to be used.",5,null],[12,"allow_asm","","Is asm!() allowed? Defaults to true.",5,null],[12,"custom_unwind_resume","","Whether the target uses a custom unwind resumption routine.\nBy default LLVM lowers `resume` instructions into calls to `_Unwind_Resume`\ndefined in libgcc.  If this option is enabled, the target must provide\n`eh_unwind_resume` lang item.",5,null],[12,"lib_allocation_crate","","Default crate for allocation symbols to link against",5,null],[12,"exe_allocation_crate","","",5,null],[12,"has_elf_tls","","Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for\nthis target.",5,null],[12,"obj_is_bitcode","","",5,null],[12,"max_atomic_width","","Maximum integer size in bits that this target can perform atomic\noperations on.",5,null],[17,"TARGETS","","List of supported targets",null,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"default","","Create a set of &quot;sane defaults&quot; for any target. This is still\nincomplete, and if used for compilation, will certainly not work.",5,{"inputs":[],"output":{"name":"targetoptions"}}],[11,"adjust_abi","","Given a function ABI, turn &quot;System&quot; into the correct ABI for this target.",4,null],[11,"from_json","","Load a target descriptor from a JSON object.",4,{"inputs":[{"name":"json"}],"output":{"name":"target"}}],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target\ntriple. Note that it could also just be a bare filename already, so also\ncheck for that. If one of the hardcoded targets we know about, just\nreturn it directly.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"slice","rustc_back","",null,null],[5,"ref_slice","rustc_back::slice","",null,null],[5,"mut_ref_slice","","",null,null],[0,"dynamic_lib","rustc_back","Dynamic library facilities.",null,null],[3,"DynamicLibrary","rustc_back::dynamic_lib","",null,null],[11,"drop","","",6,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",6,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",6,{"inputs":[{"name":"path"}],"output":null}],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",6,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",6,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",6,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",6,null]],"paths":[[3,"TempDir"],[3,"RPathConfig"],[8,"Digest"],[3,"Sha256"],[3,"Target"],[3,"TargetOptions"],[3,"DynamicLibrary"]]};
searchIndex["syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"util","syntax","",null,null],[0,"interner","syntax::util","An &quot;interner&quot; is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa.",null,null],[3,"Interner","syntax::util::interner","",null,null],[3,"RcStr","","",null,null],[3,"StrInterner","","A StrInterner differs from Interner&lt;String&gt; in that it accepts\n&amp;str rather than RcStr, resulting in less allocation.",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"interner"}}],[11,"prefill","","",0,null],[11,"intern","","",0,null],[11,"gensym","","",0,null],[11,"get","","",0,null],[11,"len","","",0,null],[11,"find","","",0,null],[11,"clear","","",0,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"new","","",1,{"inputs":[{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"borrow","","",1,null],[11,"deref","","",1,null],[11,"new","","",2,{"inputs":[],"output":{"name":"strinterner"}}],[11,"prefill","","",2,null],[11,"intern","","",2,null],[11,"gensym","","",2,null],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",2,null],[11,"get","","",2,null],[11,"len","","",2,null],[11,"find","","",2,null],[11,"clear","","",2,null],[11,"reset","","",2,null],[0,"lev_distance","syntax::util","",null,null],[5,"lev_distance","syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names\nAs a loose rule to avoid the obviously incorrect suggestions, it takes\nan optional limit for the maximum allowable edit distance, which defaults\nto one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntax::util","",null,null],[3,"NodeCounter","syntax::util::node_count","",null,null],[12,"count","","",3,null],[11,"new","","",3,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",3,null],[11,"visit_mod","","",3,null],[11,"visit_foreign_item","","",3,null],[11,"visit_item","","",3,null],[11,"visit_local","","",3,null],[11,"visit_block","","",3,null],[11,"visit_stmt","","",3,null],[11,"visit_arm","","",3,null],[11,"visit_pat","","",3,null],[11,"visit_decl","","",3,null],[11,"visit_expr","","",3,null],[11,"visit_ty","","",3,null],[11,"visit_generics","","",3,null],[11,"visit_fn","","",3,null],[11,"visit_trait_item","","",3,null],[11,"visit_impl_item","","",3,null],[11,"visit_trait_ref","","",3,null],[11,"visit_ty_param_bound","","",3,null],[11,"visit_poly_trait_ref","","",3,null],[11,"visit_variant_data","","",3,null],[11,"visit_struct_field","","",3,null],[11,"visit_enum_def","","",3,null],[11,"visit_variant","","",3,null],[11,"visit_lifetime","","",3,null],[11,"visit_lifetime_def","","",3,null],[11,"visit_explicit_self","","",3,null],[11,"visit_mac","","",3,null],[11,"visit_path","","",3,null],[11,"visit_path_list_item","","",3,null],[11,"visit_path_parameters","","",3,null],[11,"visit_assoc_type_binding","","",3,null],[11,"visit_attribute","","",3,null],[11,"visit_macro_def","","",3,null],[0,"parser","syntax::util","",null,null],[4,"AssocOp","syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",4,null],[13,"Subtract","","`-`",4,null],[13,"Multiply","","`*`",4,null],[13,"Divide","","`/`",4,null],[13,"Modulus","","`%`",4,null],[13,"LAnd","","`&amp;&amp;`",4,null],[13,"LOr","","`||`",4,null],[13,"BitXor","","`^`",4,null],[13,"BitAnd","","`&amp;`",4,null],[13,"BitOr","","`|`",4,null],[13,"ShiftLeft","","`&lt;&lt;`",4,null],[13,"ShiftRight","","`&gt;&gt;`",4,null],[13,"Equal","","`==`",4,null],[13,"Less","","`&lt;`",4,null],[13,"LessEqual","","`&lt;=`",4,null],[13,"NotEqual","","`!=`",4,null],[13,"Greater","","`&gt;`",4,null],[13,"GreaterEqual","","`&gt;=`",4,null],[13,"Assign","","`=`",4,null],[13,"Inplace","","`&lt;-`",4,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",4,null],[13,"As","","`as`",4,null],[13,"DotDot","","`..` range",4,null],[13,"DotDotDot","","`...` range",4,null],[13,"Colon","","`:`",4,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",5,null],[13,"Right","","The operator is right-associative",5,null],[13,"None","","The operator is not associative",5,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"from_token","","Create a new AssocOP from a token",4,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",4,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",4,null],[11,"fixity","","Gets the fixity of this operator",4,null],[11,"is_comparison","","",4,null],[11,"is_assign_like","","",4,null],[11,"to_ast_binop","","",4,null],[0,"small_vector","syntax::util","",null,null],[3,"SmallVector","syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",6,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",6,null],[11,"pop","","",6,null],[11,"push","","",6,null],[11,"push_all","","",6,null],[11,"get","","",6,null],[11,"expect_one","","",6,null],[11,"len","","",6,null],[11,"is_empty","","",6,null],[11,"into_iter","","",6,null],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"move_flat_map","","",6,null],[0,"move_map","syntax::util","",null,null],[8,"MoveMap","syntax::util::move_map","",null,null],[11,"move_map","","",8,null],[10,"move_flat_map","","",8,null],[11,"move_flat_map","collections::vec","",9,null],[0,"diagnostics","syntax","",null,null],[0,"macros","syntax::diagnostics","",null,null],[0,"plugin","","",null,null],[3,"ErrorInfo","syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",10,null],[12,"use_site","","",10,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"registry","syntax::diagnostics","",null,null],[3,"Registry","syntax::diagnostics::registry","",null,null],[11,"clone","","",11,null],[11,"new","","",11,null],[11,"find_description","","",11,null],[0,"metadata","syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",12,null],[12,"use_site","","",12,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",13,null],[12,"line","","",13,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"encode","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"encode","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"from_span","","Create an error location from a span.",13,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"errors","syntax","",null,null],[3,"CodeSuggestion","syntax::errors","",null,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also\nused as the argument to panic at the moment, but that will eventually\nnot be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc.",null,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting.",null,null],[12,"can_emit_warnings","","",14,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",15,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary\nof hypothetical source code, where each `String` is spliced\ninto the lines in place of the code covered by each span.",15,null],[4,"Level","","",null,null],[13,"Bug","","",16,null],[13,"Fatal","","",16,null],[13,"PhaseFatal","","",16,null],[13,"Error","","",16,null],[13,"Warning","","",16,null],[13,"Note","","",16,null],[13,"Help","","",16,null],[13,"Cancelled","","",16,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"emitter","","",null,null],[3,"BasicEmitter","syntax::errors::emitter","A basic emitter for when we don&#39;t have access to a codemap or registry. Used\nfor reporting very early errors, etc.",null,null],[3,"EmitterWriter","","",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",17,null],[13,"Always","","",17,null],[13,"Never","","",17,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors. Do not implement this directly:\nimplement `CoreEmitter` instead.",null,null],[10,"emit","","Emit a standalone diagnostic message.",18,null],[10,"emit_struct","","Emit a structured diagnostic.",18,null],[8,"CoreEmitter","","",null,null],[10,"emit_message","","",19,null],[11,"eq","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",17,null],[11,"emit_message","","",20,null],[11,"stderr","","",20,{"inputs":[{"name":"colorconfig"}],"output":{"name":"basicemitter"}}],[11,"emit_message","","",21,null],[11,"stderr","","",21,{"inputs":[{"name":"colorconfig"},{"name":"option"},{"name":"rc"}],"output":{"name":"emitterwriter"}}],[11,"new","","",21,{"inputs":[{"name":"box"},{"name":"option"},{"name":"rc"}],"output":{"name":"emitterwriter"}}],[0,"json","syntax::errors","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntax::errors::json","",null,null],[11,"basic","","",22,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"stderr","","",22,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",22,null],[11,"emit_struct","","",22,null],[0,"snippet","syntax::errors","",null,null],[3,"SnippetData","syntax::errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"RenderedLine","","",null,null],[12,"text","","",23,null],[12,"kind","","",23,null],[3,"StyledString","","",null,null],[12,"text","","",24,null],[12,"style","","",24,null],[3,"StyledBuffer","","",null,null],[4,"Style","","",null,null],[13,"FileNameStyle","","",25,null],[13,"LineAndColumn","","",25,null],[13,"LineNumber","","",25,null],[13,"Quotation","","",25,null],[13,"UnderlinePrimary","","",25,null],[13,"UnderlineSecondary","","",25,null],[13,"LabelPrimary","","",25,null],[13,"LabelSecondary","","",25,null],[13,"NoStyle","","",25,null],[4,"RenderedLineKind","","",null,null],[13,"PrimaryFileName","","",26,null],[13,"OtherFileName","","",26,null],[13,"SourceText","","",26,null],[12,"file","syntax::errors::snippet::RenderedLineKind","",26,null],[12,"line_index","","",26,null],[13,"Annotations","syntax::errors::snippet","",26,null],[13,"Elision","","",26,null],[8,"StringSource","","",null,null],[10,"make_string","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"fmt","","",23,null],[11,"fmt","","",24,null],[11,"fmt","","",30,null],[11,"eq","","",25,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"new","","",28,{"inputs":[{"name":"rc"},{"name":"option"}],"output":{"name":"self"}}],[11,"push","","",28,null],[11,"render_lines","","",28,null],[11,"make_string","collections::string","",31,null],[11,"make_string","collections::vec","",9,null],[11,"from","syntax::errors::snippet","",23,null],[11,"from","","",23,null],[11,"clone","syntax::errors","",15,null],[11,"clone","","",32,null],[11,"splice_lines","","Returns the assembled code suggestion.",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"description","","",33,null],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"description","","",34,null],[11,"clone","","",35,null],[11,"emit","","Emit the diagnostic.",35,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",35,null],[11,"cancelled","","",35,null],[11,"is_fatal","","",35,null],[11,"span_label","","Add a span/label to be included in the resulting snippet.\nThis is pushed onto the `MultiSpan` that was created when the\ndiagnostic was first built. If you don&#39;t call this function at\nall, and you just supplied a `Span` to create the diagnostic,\nthen the snippet will just include that `Span`, which is\ncalled the primary span.",35,null],[11,"note_expected_found","","",35,null],[11,"note","","",35,null],[11,"span_note","","",35,null],[11,"warn","","",35,null],[11,"span_warn","","",35,null],[11,"help","","",35,null],[11,"span_help","","",35,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",35,null],[11,"set_span","","",35,null],[11,"code","","",35,null],[11,"message","","",35,null],[11,"level","","",35,null],[11,"fmt","","",35,null],[11,"drop","","",35,null],[11,"with_tty_emitter","","",14,{"inputs":[{"name":"colorconfig"},{"name":"option"},{"name":"bool"},{"name":"bool"},{"name":"rc"}],"output":{"name":"handler"}}],[11,"with_emitter","","",14,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",14,null],[11,"struct_dummy","","",14,null],[11,"struct_span_warn","","",14,null],[11,"struct_span_warn_with_code","","",14,null],[11,"struct_warn","","",14,null],[11,"struct_span_err","","",14,null],[11,"struct_span_err_with_code","","",14,null],[11,"struct_err","","",14,null],[11,"struct_span_fatal","","",14,null],[11,"struct_span_fatal_with_code","","",14,null],[11,"struct_fatal","","",14,null],[11,"cancel","","",14,null],[11,"span_fatal","","",14,null],[11,"span_fatal_with_code","","",14,null],[11,"span_err","","",14,null],[11,"span_err_with_code","","",14,null],[11,"span_warn","","",14,null],[11,"span_warn_with_code","","",14,null],[11,"span_bug","","",14,null],[11,"delay_span_bug","","",14,null],[11,"span_bug_no_panic","","",14,null],[11,"span_note_without_error","","",14,null],[11,"span_unimpl","","",14,null],[11,"fatal","","",14,null],[11,"err","","",14,null],[11,"warn","","",14,null],[11,"note_without_error","","",14,null],[11,"bug","","",14,null],[11,"unimpl","","",14,null],[11,"bump_err_count","","",14,null],[11,"err_count","","",14,null],[11,"has_errors","","",14,null],[11,"abort_if_errors","","",14,null],[11,"emit","","",14,null],[11,"emit_with_code","","",14,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"fmt","","",16,null],[0,"syntax","syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntax::abi","",null,null],[4,"Os","","",null,null],[13,"Windows","","",36,null],[13,"Macos","","",36,null],[13,"Linux","","",36,null],[13,"Android","","",36,null],[13,"Freebsd","","",36,null],[13,"iOS","","",36,null],[13,"Dragonfly","","",36,null],[13,"Bitrig","","",36,null],[13,"Netbsd","","",36,null],[13,"Openbsd","","",36,null],[13,"NaCl","","",36,null],[13,"Solaris","","",36,null],[4,"Abi","","",null,null],[13,"Cdecl","","",37,null],[13,"Stdcall","","",37,null],[13,"Fastcall","","",37,null],[13,"Vectorcall","","",37,null],[13,"Aapcs","","",37,null],[13,"Win64","","",37,null],[13,"Rust","","",37,null],[13,"C","","",37,null],[13,"System","","",37,null],[13,"RustIntrinsic","","",37,null],[13,"RustCall","","",37,null],[13,"PlatformIntrinsic","","",37,null],[4,"Architecture","","",null,null],[13,"X86","","",38,null],[13,"X86_64","","",38,null],[13,"Arm","","",38,null],[13,"Mips","","",38,null],[13,"Mipsel","","",38,null],[4,"AbiArchitecture","","",null,null],[13,"Rust","","Not a real ABI (e.g., intrinsic)",39,null],[13,"All","","An ABI that specifies cross-platform defaults (e.g., &quot;C&quot;)",39,null],[13,"Archs","","Multiple architectures (bitset)",39,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",36,null],[11,"eq","","",36,null],[11,"clone","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",37,null],[11,"hash","","",37,null],[11,"eq","","",37,null],[11,"fmt","","",38,null],[11,"eq","","",38,null],[11,"clone","","",38,null],[11,"clone","","",40,null],[11,"clone","","",39,null],[11,"index","","",37,null],[11,"data","","",37,null],[11,"name","","",37,null],[11,"fmt","","",37,null],[11,"fmt","","",36,null],[0,"ast","syntax","",null,null],[3,"Name","syntax::ast","A name is a part of an identifier, representing a string or gensym. It&#39;s\nthe result of interning.",null,null],[12,"0","","",41,null],[3,"SyntaxContext","","A SyntaxContext represents a chain of macro-expandings\nand renamings. Each macro expansion corresponds to\na fresh u32. This u32 is a reference to a table stored\nin thread-local storage.\nThe special value EMPTY_CTXT is used to indicate an empty\nsyntax context.",null,null],[12,"0","","",42,null],[3,"Ident","","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., &quot;Macros That Work Together&quot;",null,null],[12,"name","","",43,null],[12,"ctxt","","",43,null],[3,"Lifetime","","",null,null],[12,"id","","",44,null],[12,"span","","",44,null],[12,"name","","",44,null],[3,"LifetimeDef","","A lifetime definition, eg `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"lifetime","","",45,null],[12,"bounds","","",45,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name; for instance:\nstd::cmp::PartialEq  .  It&#39;s represented as a sequence of identifiers,\nalong with a bunch of supporting information.",null,null],[12,"span","","",46,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",46,null],[12,"segments","","The segments in the path: the things separated by `::`.",46,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of\ntypes.",null,null],[12,"identifier","","The identifier portion of this path segment.",47,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",47,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",48,null],[12,"types","","The type parameters for this path segment, if present.",48,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.\ne.g., `Foo&lt;A=Bar&gt;`.",48,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"span","","Overall span",49,null],[12,"inputs","","`(A,B)`",49,null],[12,"output","","`C`",49,null],[3,"TyParam","","",null,null],[12,"ident","","",50,null],[12,"id","","",50,null],[12,"bounds","","",50,null],[12,"default","","",50,null],[12,"span","","",50,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",51,null],[12,"ty_params","","",51,null],[12,"where_clause","","",51,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",52,null],[12,"predicates","","",52,null],[3,"WhereBoundPredicate","","A type bound, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",null,null],[12,"span","","",53,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",53,null],[12,"bounded_ty","","The type being bounded",53,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",53,null],[3,"WhereRegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",null,null],[12,"span","","",54,null],[12,"lifetime","","",54,null],[12,"bounds","","",54,null],[3,"WhereEqPredicate","","An equality predicate (unsupported), e.g. `T=int`",null,null],[12,"id","","",55,null],[12,"span","","",55,null],[12,"path","","",55,null],[12,"ty","","",55,null],[3,"Crate","","",null,null],[12,"module","","",56,null],[12,"attrs","","",56,null],[12,"config","","",56,null],[12,"span","","",56,null],[12,"exported_macros","","",56,null],[3,"Block","","",null,null],[12,"stmts","","Statements in a block",57,null],[12,"expr","","An expression at the end of the block\nwithout a semicolon, if any",57,null],[12,"id","","",57,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",57,null],[12,"span","","",57,null],[3,"Pat","","",null,null],[12,"id","","",58,null],[12,"node","","",58,null],[12,"span","","",58,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",59,null],[12,"pat","","The pattern the field is destructured to",59,null],[12,"is_shorthand","","",59,null],[3,"Local","","Local represents a `let` statement, e.g., `let &lt;pat&gt;:&lt;ty&gt; = &lt;expr&gt;;`",null,null],[12,"pat","","",60,null],[12,"ty","","",60,null],[12,"init","","Initializer expression to set the value, if any",60,null],[12,"id","","",60,null],[12,"span","","",60,null],[12,"attrs","","",60,null],[3,"Arm","","represents one arm of a &#39;match&#39;",null,null],[12,"attrs","","",61,null],[12,"pats","","",61,null],[12,"guard","","",61,null],[12,"body","","",61,null],[3,"Field","","",null,null],[12,"ident","","",62,null],[12,"expr","","",62,null],[12,"span","","",62,null],[3,"Expr","","An expression",null,null],[12,"id","","",63,null],[12,"node","","",63,null],[12,"span","","",63,null],[12,"attrs","","",63,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",64,null],[12,"position","","",64,null],[3,"Delimited","","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",65,null],[12,"open_span","","The span covering the opening delimiter",65,null],[12,"tts","","The delimited sequence of token trees",65,null],[12,"close_span","","The span covering the closing delimiter",65,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",66,null],[12,"separator","","The optional separator",66,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",66,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",66,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",67,null],[12,"tts","","",67,null],[12,"ctxt","","",67,null],[3,"MutTy","","",null,null],[12,"ty","","",68,null],[12,"mutbl","","",68,null],[3,"MethodSig","","Represents a method&#39;s signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",69,null],[12,"constness","","",69,null],[12,"abi","","",69,null],[12,"decl","","",69,null],[12,"generics","","",69,null],[12,"explicit_self","","",69,null],[3,"TraitItem","","Represents an item declaration within a trait declaration,\npossibly including a default implementation. A trait item is\neither required (meaning it doesn&#39;t have an implementation, just a\nsignature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",70,null],[12,"ident","","",70,null],[12,"attrs","","",70,null],[12,"node","","",70,null],[12,"span","","",70,null],[3,"ImplItem","","",null,null],[12,"id","","",71,null],[12,"ident","","",71,null],[12,"vis","","",71,null],[12,"defaultness","","",71,null],[12,"attrs","","",71,null],[12,"node","","",71,null],[12,"span","","",71,null],[3,"TypeBinding","","",null,null],[12,"id","","",72,null],[12,"ident","","",72,null],[12,"ty","","",72,null],[12,"span","","",72,null],[3,"Ty","","",null,null],[12,"id","","",73,null],[12,"node","","",73,null],[12,"span","","",73,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",74,null],[12,"abi","","",74,null],[12,"lifetimes","","",74,null],[12,"decl","","",74,null],[3,"InlineAsmOutput","","",null,null],[12,"constraint","","",75,null],[12,"expr","","",75,null],[12,"is_rw","","",75,null],[12,"is_indirect","","",75,null],[3,"InlineAsm","","",null,null],[12,"asm","","",76,null],[12,"asm_str_style","","",76,null],[12,"outputs","","",76,null],[12,"inputs","","",76,null],[12,"clobbers","","",76,null],[12,"volatile","","",76,null],[12,"alignstack","","",76,null],[12,"dialect","","",76,null],[12,"expn_id","","",76,null],[3,"Arg","","represents an argument in a function header",null,null],[12,"ty","","",77,null],[12,"pat","","",77,null],[12,"id","","",77,null],[3,"FnDecl","","Represents the header (not the body) of a function declaration",null,null],[12,"inputs","","",78,null],[12,"output","","",78,null],[12,"variadic","","",78,null],[3,"Mod","","",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",79,null],[12,"items","","",79,null],[3,"ForeignMod","","",null,null],[12,"abi","","",80,null],[12,"items","","",80,null],[3,"EnumDef","","",null,null],[12,"variants","","",81,null],[3,"Variant_","","",null,null],[12,"name","","",82,null],[12,"attrs","","",82,null],[12,"data","","",82,null],[12,"disr_expr","","Explicit discriminant, eg `Foo = 1`",82,null],[3,"AttrId","","",null,null],[12,"0","","",83,null],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",84,null],[12,"style","","",84,null],[12,"value","","",84,null],[12,"is_sugared_doc","","",84,null],[3,"TraitRef","","TraitRef&#39;s appear in impls.",null,null],[12,"path","","",85,null],[12,"ref_id","","",85,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",86,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",86,null],[12,"span","","",86,null],[3,"StructField","","",null,null],[12,"span","","",87,null],[12,"ident","","",87,null],[12,"vis","","",87,null],[12,"id","","",87,null],[12,"ty","","",87,null],[12,"attrs","","",87,null],[3,"Item","","An item",null,null],[12,"ident","","",88,null],[12,"attrs","","",88,null],[12,"id","","",88,null],[12,"node","","",88,null],[12,"vis","","",88,null],[12,"span","","",88,null],[3,"ForeignItem","","",null,null],[12,"ident","","",89,null],[12,"attrs","","",89,null],[12,"node","","",89,null],[12,"id","","",89,null],[12,"span","","",89,null],[12,"vis","","",89,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",90,null],[12,"attrs","","",90,null],[12,"id","","",90,null],[12,"span","","",90,null],[12,"imported_from","","",90,null],[12,"export","","",90,null],[12,"use_locally","","",90,null],[12,"allow_internal_unstable","","",90,null],[12,"body","","",90,null],[4,"PathParameters","","",null,null],[13,"AngleBracketed","","The `&lt;&#39;a, A,B,C&gt;` in `foo::bar::baz::&lt;&#39;a, A,B,C&gt;`",91,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -&gt; C`",91,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe &quot;special&quot; built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",92,null],[13,"RegionTyParamBound","","",92,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",93,null],[13,"Maybe","","",93,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",94,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",94,null],[13,"EqPredicate","","An equality predicate (unsupported)",94,null],[4,"MetaItemKind","","",null,null],[13,"Word","","",95,null],[13,"List","","",95,null],[13,"NameValue","","",95,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",96,null],[13,"ByValue","","",96,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",97,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable,\nor a unit struct/variant pattern, or a const pattern (in the last two cases\nthe third field must be `None`).",97,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\nThe `bool` is `true` in the presence of a `..`.",97,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, z)`.\n&quot;None&quot; means a `Variant(..)` pattern where we don&#39;t bind the fields to names.",97,null],[13,"Path","","A path pattern.\nSuch pattern can be resolved to a unit struct/variant or a constant.",97,null],[13,"QPath","","An associated const named using the qualified path `&lt;T&gt;::CONST` or\n`&lt;T as Trait&gt;::CONST`. Associated consts from inherent impls can be\nreferred to as simply `T::CONST`, in which case they will end up as\nPatKind::Path, and the resolver will have to sort that out.",97,null],[13,"Tup","","A tuple pattern `(a, b)`",97,null],[13,"Box","","A `box` pattern",97,null],[13,"Ref","","A reference pattern, e.g. `&amp;mut (a, b)`",97,null],[13,"Lit","","A literal",97,null],[13,"Range","","A range pattern, e.g. `1...2`",97,null],[13,"Vec","","`[a, b, ..i, y, z]` is represented as:\n`PatKind::Vec(box [a, b], Some(i), box [y, z])`",97,null],[13,"Mac","","A macro pattern; pre-expansion",97,null],[4,"Mutability","","",null,null],[13,"Mutable","","",98,null],[13,"Immutable","","",98,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",99,null],[13,"Sub","","The `-` operator (subtraction)",99,null],[13,"Mul","","The `*` operator (multiplication)",99,null],[13,"Div","","The `/` operator (division)",99,null],[13,"Rem","","The `%` operator (modulus)",99,null],[13,"And","","The `&amp;&amp;` operator (logical and)",99,null],[13,"Or","","The `||` operator (logical or)",99,null],[13,"BitXor","","The `^` operator (bitwise xor)",99,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",99,null],[13,"BitOr","","The `|` operator (bitwise or)",99,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",99,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",99,null],[13,"Eq","","The `==` operator (equality)",99,null],[13,"Lt","","The `&lt;` operator (less than)",99,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",99,null],[13,"Ne","","The `!=` operator (not equal to)",99,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",99,null],[13,"Gt","","The `&gt;` operator (greater than)",99,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",100,null],[13,"Not","","The `!` operator for logical inversion",100,null],[13,"Neg","","The `-` operator for negation",100,null],[4,"StmtKind","","",null,null],[13,"Decl","","Could be an item or a local (let) binding:",101,null],[13,"Expr","","Expr without trailing semi-colon (must have unit type):",101,null],[13,"Semi","","Expr with trailing semi-colon (may have any type):",101,null],[13,"Mac","","",101,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",102,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",102,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",102,null],[4,"DeclKind","","",null,null],[13,"Local","","A local (let) binding:",103,null],[13,"Item","","An item binding:",103,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",104,null],[13,"Unsafe","","",104,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",105,null],[13,"UserProvided","","",105,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",106,null],[13,"Closed","","Inclusive at the beginning and end",106,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",107,null],[13,"InPlace","","First expr is the place; second expr is the value.",107,null],[13,"Vec","","An array (`[a, b, c, d]`)",107,null],[13,"Call","","A function call",107,null],[13,"MethodCall","","A method call (`x.foo::&lt;Bar, Baz&gt;(a, b, c, d)`)",107,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",107,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",107,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",107,null],[13,"Lit","","A literal (For example: `1`, `&quot;foo&quot;`)",107,null],[13,"Cast","","A cast (`foo as f64`)",107,null],[13,"Type","","",107,null],[13,"If","","An `if` block, with an optional else block",107,null],[13,"IfLet","","An `if let` expression with an optional else block",107,null],[13,"While","","A while loop, with an optional label",107,null],[13,"WhileLet","","A while-let loop, with an optional label",107,null],[13,"ForLoop","","A for loop, with an optional label",107,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",107,null],[13,"Match","","A `match` block.",107,null],[13,"Closure","","A closure (for example, `move |a, b, c| {a + b + c}`)",107,null],[13,"Block","","A block (`{ ... }`)",107,null],[13,"Assign","","An assignment (`a = foo()`)",107,null],[13,"AssignOp","","An assignment with an operator",107,null],[13,"Field","","Access of a named struct field (`obj.foo`)",107,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",107,null],[13,"Index","","An indexing operation (`foo[2]`)",107,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",107,null],[13,"Path","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",107,null],[13,"AddrOf","","A referencing operation (`&amp;a` or `&amp;mut a`)",107,null],[13,"Break","","A `break`, with an optional label to break",107,null],[13,"Again","","A `continue`, with an optional label",107,null],[13,"Ret","","A `return`, with an optional value to be returned",107,null],[13,"InlineAsm","","Output of the `asm!()` macro",107,null],[13,"Mac","","A macro invocation; pre-expansion",107,null],[13,"Struct","","A struct literal expression.",107,null],[13,"Repeat","","An array literal constructed from one repeated element.",107,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",107,null],[13,"Try","","`expr?`",107,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",108,null],[13,"Ref","","",108,null],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences.",null,null],[13,"ZeroOrMore","","",109,null],[13,"OneOrMore","","",109,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",110,null],[13,"Delimited","","A delimited sequence of token trees",110,null],[13,"Sequence","","A kleene-style repetition sequence with a span",110,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `&quot;foo&quot;`",111,null],[13,"Raw","","A raw string, like `r##&quot;foo&quot;##`",111,null],[4,"LitIntType","","",null,null],[13,"Signed","","",112,null],[13,"Unsigned","","",112,null],[13,"Unsuffixed","","",112,null],[4,"LitKind","","",null,null],[13,"Str","","A string literal (`&quot;foo&quot;`)",113,null],[13,"ByteStr","","A byte string (`b&quot;foo&quot;`)",113,null],[13,"Byte","","A byte char (`b&#39;f&#39;`)",113,null],[13,"Char","","A character literal (`&#39;a&#39;`)",113,null],[13,"Int","","An integer literal (`1`)",113,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",113,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",113,null],[13,"Bool","","A boolean literal",113,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",114,null],[13,"Method","","",114,null],[13,"Type","","",114,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",115,null],[13,"Method","","",115,null],[13,"Type","","",115,null],[13,"Macro","","",115,null],[4,"IntTy","","",null,null],[13,"Is","","",116,null],[13,"I8","","",116,null],[13,"I16","","",116,null],[13,"I32","","",116,null],[13,"I64","","",116,null],[4,"UintTy","","",null,null],[13,"Us","","",117,null],[13,"U8","","",117,null],[13,"U16","","",117,null],[13,"U32","","",117,null],[13,"U64","","",117,null],[4,"FloatTy","","",null,null],[13,"F32","","",118,null],[13,"F64","","",118,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Vec","","",119,null],[13,"FixedLengthVec","","A fixed length array (`[T; n]`)",119,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",119,null],[13,"Rptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",119,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",119,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",119,null],[13,"Path","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;Vec&lt;T&gt; as SomeTrait&gt;::SomeType`.",119,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",119,null],[13,"PolyTraitRef","","A type like `for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a Bar&gt;`",119,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",119,null],[13,"Typeof","","Unused for now",119,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",119,null],[13,"Mac","","",119,null],[4,"AsmDialect","","",null,null],[13,"Att","","",120,null],[13,"Intel","","",120,null],[4,"SelfKind","","Represents the kind of &#39;self&#39; associated with a method.\nString representation of `Ident` here is always &quot;self&quot;, but hygiene contexts may differ.",null,null],[13,"Static","","No self",121,null],[13,"Value","","`self`, `mut self`",121,null],[13,"Region","","`&amp;&#39;lt self`, `&amp;&#39;lt mut self`",121,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",121,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",122,null],[13,"Normal","","",122,null],[4,"Constness","","",null,null],[13,"Const","","",123,null],[13,"NotConst","","",123,null],[4,"Defaultness","","",null,null],[13,"Default","","",124,null],[13,"Final","","",124,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",125,null],[13,"Negative","","`impl !Trait for Type`",125,null],[4,"FunctionRetTy","","",null,null],[13,"None","","Functions with return type `!`that always\nraise an error or exit (i.e. never return to the caller)",126,null],[13,"Default","","Return type is not specified.",126,null],[13,"Ty","","Everything else",126,null],[4,"PathListItemKind","","",null,null],[13,"Ident","","",127,null],[12,"name","syntax::ast::PathListItemKind","",127,null],[12,"rename","","renamed in list, eg `use foo::{bar as baz};`",127,null],[12,"id","","",127,null],[13,"Mod","syntax::ast","",127,null],[12,"rename","syntax::ast::PathListItemKind","renamed in list, eg `use foo::{self as baz};`",127,null],[12,"id","","",127,null],[4,"ViewPath_","syntax::ast","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",128,null],[13,"ViewPathGlob","","`foo::bar::*`",128,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",128,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","",129,null],[13,"Inner","","",129,null],[4,"Visibility","","",null,null],[13,"Public","","",130,null],[13,"Crate","","",130,null],[13,"Restricted","","",130,null],[12,"path","syntax::ast::Visibility","",130,null],[12,"id","","",130,null],[13,"Inherited","syntax::ast","",130,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","",131,null],[13,"Tuple","","",131,null],[13,"Unit","","",131,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name,",132,null],[13,"Use","","A `use` or `pub use` item",132,null],[13,"Static","","A `static` item",132,null],[13,"Const","","A `const` item",132,null],[13,"Fn","","A function declaration",132,null],[13,"Mod","","A module",132,null],[13,"ForeignMod","","An external module",132,null],[13,"Ty","","A type alias, e.g. `type Foo = Bar&lt;u8&gt;`",132,null],[13,"Enum","","An enum definition, e.g. `enum Foo&lt;A, B&gt; {C&lt;A&gt;, D&lt;B&gt;}`",132,null],[13,"Struct","","A struct definition, e.g. `struct Foo&lt;A&gt; {x: A}`",132,null],[13,"Trait","","Represents a Trait Declaration",132,null],[13,"DefaultImpl","","",132,null],[13,"Impl","","An implementation, eg `impl&lt;A&gt; Trait for Foo { .. }`",132,null],[13,"Mac","","A macro invocation (which includes macro definition)",132,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",133,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",133,null],[6,"Mrk","","A mark represents a unique id associated with a macro expansion",null,null],[6,"CrateNum","","",null,null],[6,"NodeId","","",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation",null,null],[6,"MetaItem","","",null,null],[6,"BinOp","","",null,null],[6,"Stmt","","A statement",null,null],[6,"Decl","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"Attribute","","Meta-data associated with an item",null,null],[17,"EMPTY_CTXT","","",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids.",null,null],[8,"NodeIdAssigner","","",null,null],[10,"next_node_id","","",134,null],[10,"peek_node_id","","",134,null],[11,"diagnostic","","",134,null],[11,"hash","","",41,null],[11,"cmp","","",41,null],[11,"partial_cmp","","",41,null],[11,"lt","","",41,null],[11,"le","","",41,null],[11,"gt","","",41,null],[11,"ge","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"fmt","","",42,null],[11,"hash","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"as_str","","",41,null],[11,"unhygienize","","",41,null],[11,"fmt","","",41,null],[11,"fmt","","",41,null],[11,"encode","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",43,{"inputs":[{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"ident"}}],[11,"with_empty_ctxt","","",43,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"eq","","",43,null],[11,"hash","","",43,null],[11,"fmt","","",43,null],[11,"fmt","","",43,null],[11,"encode","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"clone","","",45,null],[11,"hash","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"fmt","","",46,null],[11,"from_ident","","",46,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"fmt","","",47,null],[11,"hash","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",47,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"none","","",91,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",91,null],[11,"has_lifetimes","","",91,null],[11,"has_types","","",91,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",91,null],[11,"lifetimes","","",91,null],[11,"bindings","","",91,null],[11,"fmt","","",48,null],[11,"hash","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"clone","","",48,null],[11,"fmt","","",49,null],[11,"hash","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",49,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"clone","","",92,null],[11,"fmt","","",93,null],[11,"hash","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",93,null],[11,"eq","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",50,null],[11,"hash","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[11,"fmt","","",51,null],[11,"hash","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"is_lt_parameterized","","",51,null],[11,"is_type_parameterized","","",51,null],[11,"is_parameterized","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"generics"}}],[11,"fmt","","",52,null],[11,"hash","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"clone","","",52,null],[11,"fmt","","",94,null],[11,"hash","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",53,null],[11,"hash","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"clone","","",53,null],[11,"fmt","","",54,null],[11,"hash","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"clone","","",54,null],[11,"fmt","","",55,null],[11,"hash","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"clone","","",55,null],[11,"fmt","","",56,null],[11,"hash","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"fmt","","",95,null],[11,"hash","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",95,null],[11,"clone","","",95,null],[11,"eq","","",95,null],[11,"fmt","","",57,null],[11,"hash","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"hash","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"walk","","",58,null],[11,"fmt","","",59,null],[11,"hash","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",96,null],[11,"hash","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"hash","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",97,null],[11,"eq","","",97,null],[11,"ne","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,null],[11,"eq","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,null],[11,"eq","","",99,null],[11,"clone","","",99,null],[11,"to_string","","",99,null],[11,"lazy","","",99,null],[11,"is_shift","","",99,null],[11,"is_comparison","","",99,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",99,null],[11,"fmt","","",100,null],[11,"hash","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",100,null],[11,"eq","","",100,null],[11,"clone","","",100,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",100,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",100,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"fmt","","",135,null],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,null],[11,"eq","","",101,null],[11,"ne","","",101,null],[11,"clone","","",101,null],[11,"id","","",101,null],[11,"attrs","","",101,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",102,null],[11,"eq","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",60,null],[11,"hash","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"clone","","",60,null],[11,"attrs","","",60,null],[11,"fmt","","",103,null],[11,"hash","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"attrs","","",136,null],[11,"fmt","","",61,null],[11,"hash","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",104,null],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"clone","","",104,null],[11,"fmt","","",105,null],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,null],[11,"eq","","",105,null],[11,"clone","","",105,null],[11,"hash","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"attrs","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",106,null],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,null],[11,"eq","","",106,null],[11,"clone","","",106,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"clone","","",107,null],[11,"fmt","","",64,null],[11,"hash","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,null],[11,"eq","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",65,null],[11,"hash","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"clone","","",65,null],[11,"open_token","","Returns the opening delimiter as a token.",65,null],[11,"close_token","","Returns the closing delimiter as a token.",65,null],[11,"open_tt","","Returns the opening delimiter as a token tree.",65,null],[11,"close_tt","","Returns the closing delimiter as a token tree.",65,null],[11,"fmt","","",66,null],[11,"hash","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",109,null],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",109,null],[11,"eq","","",109,null],[11,"clone","","",109,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,null],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"clone","","",110,null],[11,"len","","",110,null],[11,"get_tt","","",110,null],[11,"get_span","","Returns the `Span` corresponding to this token tree.",110,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",110,null],[11,"fmt","","",67,null],[11,"hash","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",111,null],[11,"hash","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",111,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"clone","","",111,null],[11,"fmt","","",112,null],[11,"hash","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"clone","","",112,null],[11,"fmt","","",113,null],[11,"hash","","",113,null],[11,"decode","","",113,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",113,null],[11,"eq","","",113,null],[11,"ne","","",113,null],[11,"clone","","",113,null],[11,"is_str","","Returns true if this literal is a string and false otherwise.",113,null],[11,"fmt","","",68,null],[11,"hash","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",69,null],[11,"hash","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"hash","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",114,null],[11,"hash","","",114,null],[11,"decode","","",114,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",114,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"clone","","",114,null],[11,"fmt","","",71,null],[11,"hash","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",115,null],[11,"hash","","",115,null],[11,"decode","","",115,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"clone","","",115,null],[11,"hash","","",116,null],[11,"decode","","",116,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",116,null],[11,"eq","","",116,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"ty_to_string","","",116,null],[11,"val_to_string","","",116,null],[11,"ty_max","","",116,null],[11,"bit_width","","",116,null],[11,"hash","","",117,null],[11,"decode","","",117,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",117,null],[11,"eq","","",117,null],[11,"clone","","",117,null],[11,"ty_to_string","","",117,null],[11,"val_to_string","","",117,null],[11,"ty_max","","",117,null],[11,"bit_width","","",117,null],[11,"fmt","","",117,null],[11,"fmt","","",117,null],[11,"hash","","",118,null],[11,"decode","","",118,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",118,null],[11,"eq","","",118,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"fmt","","",118,null],[11,"ty_to_string","","",118,null],[11,"bit_width","","",118,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"hash","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"fmt","","",74,null],[11,"hash","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"fmt","","",119,null],[11,"hash","","",119,null],[11,"decode","","",119,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"clone","","",119,null],[11,"fmt","","",120,null],[11,"hash","","",120,null],[11,"decode","","",120,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",120,null],[11,"eq","","",120,null],[11,"clone","","",120,null],[11,"fmt","","",75,null],[11,"hash","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"hash","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"hash","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"fmt","","",121,null],[11,"hash","","",121,null],[11,"decode","","",121,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"new_self","","",77,{"inputs":[{"name":"span"},{"name":"mutability"},{"name":"ident"}],"output":{"name":"arg"}}],[11,"to_self","","",77,null],[11,"from_self","","",77,{"inputs":[{"name":"explicitself"},{"name":"span"},{"name":"mutability"}],"output":{"name":"arg"}}],[11,"fmt","","",78,null],[11,"hash","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",122,null],[11,"hash","","",122,null],[11,"decode","","",122,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",122,null],[11,"eq","","",122,null],[11,"clone","","",122,null],[11,"fmt","","",123,null],[11,"hash","","",123,null],[11,"decode","","",123,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",123,null],[11,"eq","","",123,null],[11,"clone","","",123,null],[11,"fmt","","",124,null],[11,"hash","","",124,null],[11,"decode","","",124,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",124,null],[11,"eq","","",124,null],[11,"clone","","",124,null],[11,"fmt","","",122,null],[11,"hash","","",125,null],[11,"decode","","",125,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",125,null],[11,"eq","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"fmt","","",126,null],[11,"hash","","",126,null],[11,"decode","","",126,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"span","","",126,null],[11,"fmt","","",79,null],[11,"hash","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",80,null],[11,"hash","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",80,null],[11,"eq","","",80,null],[11,"ne","","",80,null],[11,"clone","","",80,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"clone","","",81,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"fmt","","",127,null],[11,"hash","","",127,null],[11,"decode","","",127,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",127,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"id","","",127,null],[11,"name","","",127,null],[11,"rename","","",127,null],[11,"fmt","","",128,null],[11,"hash","","",128,null],[11,"decode","","",128,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",129,null],[11,"hash","","",129,null],[11,"decode","","",129,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",129,null],[11,"eq","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",83,null],[11,"hash","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"hash","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"hash","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"hash","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",130,null],[11,"hash","","",130,null],[11,"decode","","",130,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",130,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",87,null],[11,"hash","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",131,null],[11,"hash","","",131,null],[11,"decode","","",131,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"clone","","",131,null],[11,"fields","","",131,null],[11,"id","","",131,null],[11,"is_struct","","",131,null],[11,"is_tuple","","",131,null],[11,"is_unit","","",131,null],[11,"fmt","","",88,null],[11,"hash","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"attrs","","",88,null],[11,"fmt","","",132,null],[11,"hash","","",132,null],[11,"decode","","",132,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"clone","","",132,null],[11,"descriptive_variant","","",132,null],[11,"fmt","","",89,null],[11,"hash","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",133,null],[11,"hash","","",133,null],[11,"decode","","",133,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",133,null],[11,"eq","","",133,null],[11,"ne","","",133,null],[11,"clone","","",133,null],[11,"descriptive_variant","","",133,null],[11,"fmt","","",90,null],[11,"hash","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[0,"attr","syntax","",null,null],[3,"Stability","syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",137,null],[12,"feature","","",137,null],[12,"rustc_depr","","",137,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",138,null],[12,"reason","","",138,null],[3,"Deprecation","","",null,null],[12,"since","","",139,null],[12,"note","","",139,null],[4,"InlineAttr","","",null,null],[13,"None","","",140,null],[13,"Hint","","",140,null],[13,"Always","","",140,null],[13,"Never","","",140,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",141,null],[12,"reason","syntax::attr::StabilityLevel","",141,null],[12,"issue","","",141,null],[13,"Stable","syntax::attr","",141,null],[12,"since","syntax::attr::StabilityLevel","",141,null],[4,"ReprAttr","syntax::attr","",null,null],[13,"ReprAny","","",142,null],[13,"ReprInt","","",142,null],[13,"ReprExtern","","",142,null],[13,"ReprPacked","","",142,null],[13,"ReprSimd","","",142,null],[4,"IntType","","",null,null],[13,"SignedInt","","",143,null],[13,"UnsignedInt","","",143,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"internedstring"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem.",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"last_meta_item_value_str_by_name","","",null,null],[5,"sort_meta_items","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,null],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"require_unique_names","","",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[6,"ThinAttributes","","A list of attributes, behind a optional box as\na space optimization.",null,null],[8,"AttrMetaMethods","","",null,null],[11,"check_name","","",144,null],[10,"name","","Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=&quot;bar&quot;]` and `#[foo(bar)]`",144,null],[10,"value_str","","Gets the string value if self is a MetaItemKind::NameValue variant\ncontaining a string, otherwise None.",144,null],[10,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",144,null],[10,"span","","",144,null],[8,"AttributeMethods","","",null,null],[10,"meta","","",145,null],[10,"with_desugared_doc","","",145,null],[8,"ThinAttributesExt","","",null,null],[10,"map_thin_attrs","","",146,null],[10,"prepend","","",146,null],[10,"append","","",146,null],[10,"update","","",146,null],[10,"as_attr_slice","","",146,null],[10,"into_attr_vec","","",146,null],[8,"AttributesExt","","",null,null],[10,"into_thin_attrs","","",147,null],[8,"WithAttrs","","A cheap way to add Attributes to an AST node.",null,null],[10,"with_attrs","","",148,null],[11,"check_name","","",149,null],[11,"name","","",149,null],[11,"value_str","","",149,null],[11,"meta_item_list","","",149,null],[11,"span","","",149,null],[11,"name","","",150,null],[11,"value_str","","",150,null],[11,"meta_item_list","","",150,null],[11,"span","","",150,null],[11,"meta","","Extract the MetaItem from inside this Attribute.",149,null],[11,"with_desugared_doc","","Convert self to a normal #[doc=&quot;foo&quot;] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",149,null],[11,"eq","","",140,null],[11,"clone","","",140,null],[11,"hash","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"fmt","","",137,null],[11,"clone","","",137,null],[11,"decode","","",137,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",137,null],[11,"hash","","",141,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"partial_cmp","","",141,null],[11,"lt","","",141,null],[11,"le","","",141,null],[11,"gt","","",141,null],[11,"ge","","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"decode","","",141,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",141,null],[11,"hash","","",138,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"partial_cmp","","",138,null],[11,"lt","","",138,null],[11,"le","","",138,null],[11,"gt","","",138,null],[11,"ge","","",138,null],[11,"eq","","",138,null],[11,"ne","","",138,null],[11,"decode","","",138,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",138,null],[11,"hash","","",139,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"partial_cmp","","",139,null],[11,"lt","","",139,null],[11,"le","","",139,null],[11,"gt","","",139,null],[11,"ge","","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"decode","","",139,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",139,null],[11,"is_unstable","","",141,null],[11,"is_stable","","",141,null],[11,"clone","","",142,null],[11,"decode","","",142,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",142,null],[11,"fmt","","",142,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"is_ffi_safe","","",142,null],[11,"clone","","",143,null],[11,"decode","","",143,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",143,null],[11,"fmt","","",143,null],[11,"eq","","",143,null],[11,"ne","","",143,null],[11,"hash","","",143,null],[11,"is_signed","","",143,null],[11,"map_thin_attrs","","",151,null],[11,"prepend","","",151,null],[11,"append","","",151,null],[11,"update","","",151,null],[11,"as_attr_slice","","",151,null],[11,"into_attr_vec","","",151,null],[11,"into_thin_attrs","collections::vec","",9,null],[0,"codemap","syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc.",null,null],[3,"BytePos","syntax::codemap","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",152,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary.",null,null],[12,"0","","",153,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",154,null],[12,"hi","","",154,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",154,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",155,null],[12,"is_primary","","Is this a primary span? This is the &quot;locus&quot; of the message,\nand is indicated with a `^^^^` underline, versus `----`.",155,null],[12,"label","","What label should we attach to this span (if any)?",155,null],[3,"Spanned","","",null,null],[12,"node","","",156,null],[12,"span","","",156,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",157,null],[12,"line","","The (1-based) line number",157,null],[12,"col","","The (0-based) column offset",157,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",158,null],[12,"line","","",158,null],[12,"col","","",158,null],[12,"file","","",158,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",159,null],[12,"line","","",159,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",160,null],[12,"pos","","",160,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",161,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",161,null],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",161,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g.\n`let x = foo!();` or `if let Some(y) = x {}`",162,null],[12,"callee","","Information about the expansion.",162,null],[3,"ExpnId","","",null,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",163,null],[12,"start_col","","Column in line where span begins, starting from 0.",163,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",163,null],[3,"FileLines","","",null,null],[12,"file","","",164,null],[12,"lines","","",164,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",165,null],[12,"bytes","","The number of bytes, &gt;=2",165,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn&#39;t\noriginate from files has names between angle brackets by convention,\ne.g. `&lt;anon&gt;`",166,null],[12,"src","","The complete source code",166,null],[12,"start_pos","","The start position of this source in the CodeMap",166,null],[12,"end_pos","","The end position of this source in the CodeMap",166,null],[12,"lines","","Locations of lines beginnings in the source code",166,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",166,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",167,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",168,null],[12,"macro_decl_name","","name of macro that was applied (e.g., &quot;foo!&quot; or &quot;#[derive(Eq)]&quot;)",168,null],[12,"def_site_span","","span where macro was defined (if known)",168,null],[3,"DistinctSources","","",null,null],[3,"MalformedCodemapPositions","","",null,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] &lt;item&gt;",169,null],[13,"MacroBang","","e.g. `format!()`",169,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",170,null],[13,"DistinctSources","","",170,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",171,null],[13,"DistinctSources","","",171,null],[13,"MalformedForCodemap","","",171,null],[13,"SourceNotAvailable","","",171,null],[12,"filename","syntax::codemap::SpanSnippetError","",171,null],[5,"spanned","syntax::codemap","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[5,"mk_sp","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[5,"original_sp","","Return the span itself if it doesn&#39;t come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",172,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",172,null],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",173,null],[10,"read_file","","Read the contents of an UTF-8 file into memory.",173,null],[11,"fmt","","",152,null],[11,"cmp","","",152,null],[11,"partial_cmp","","",152,null],[11,"lt","","",152,null],[11,"le","","",152,null],[11,"gt","","",152,null],[11,"ge","","",152,null],[11,"hash","","",152,null],[11,"eq","","",152,null],[11,"ne","","",152,null],[11,"clone","","",152,null],[11,"fmt","","",153,null],[11,"cmp","","",153,null],[11,"partial_cmp","","",153,null],[11,"lt","","",153,null],[11,"le","","",153,null],[11,"gt","","",153,null],[11,"ge","","",153,null],[11,"hash","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"clone","","",153,null],[11,"from_usize","","",152,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",152,null],[11,"add","","",152,null],[11,"sub","","",152,null],[11,"encode","","",152,null],[11,"decode","","",152,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",153,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",153,null],[11,"add","","",153,null],[11,"sub","","",153,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"hash","","",154,null],[11,"clone","","",154,null],[11,"clone","","",174,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"end_point","","Returns a new span representing just the end-point of this span",154,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",154,null],[11,"contains","","",154,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",154,null],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",154,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",154,null],[11,"fmt","","",156,null],[11,"hash","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"encode","","",156,null],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"clone","","",156,null],[11,"encode","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",154,null],[11,"new","","",174,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",174,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",174,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",174,null],[11,"primary_span","","Selects the first primary span (if any)",174,null],[11,"primary_spans","","Returns all primary spans.",174,null],[11,"span_labels","","Returns the strings to highlight. We always ensure that there\nis an entry for each of the primary spans -- for each primary\nspan P, if there is at least one label with span P, we return\nthose labels (marked as primary). But otherwise we return\n`SpanLabel` instances with empty labels.",174,null],[11,"from","","",174,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"fmt","","",157,null],[11,"fmt","","",158,null],[11,"fmt","","",159,null],[11,"fmt","","",160,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"clone","","",169,null],[11,"fmt","","",161,null],[11,"hash","","",161,null],[11,"clone","","",161,null],[11,"name","","",161,null],[11,"fmt","","",162,null],[11,"hash","","",162,null],[11,"decode","","",175,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",175,null],[11,"hash","","",175,null],[11,"fmt","","",175,null],[11,"clone","","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"from_u32","","",175,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",175,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"eq","","",165,null],[11,"ne","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",165,null],[11,"clone","","",165,null],[11,"encode","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",166,null],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",166,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",166,null],[11,"record_multibyte_char","","",166,null],[11,"is_real_file","","",166,null],[11,"is_imported","","",166,null],[11,"file_exists","","",176,null],[11,"read_file","","",176,null],[11,"new","","",167,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",167,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",167,null],[11,"load_file","","",167,null],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don&#39;t\nintend to set the line information yourself, you should use new_filemap_and_lines.",167,null],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",167,null],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an &quot;imported filemap&quot; is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",167,null],[11,"mk_substr_filename","","",167,null],[11,"lookup_char_pos","","Lookup source information about a BytePos",167,null],[11,"lookup_char_pos_adj","","",167,null],[11,"span_to_string","","",167,null],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",167,null],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for\nthe macro callsite that expanded to it.",167,null],[11,"source_callee","","Return the source callee.",167,null],[11,"span_to_filename","","",167,null],[11,"span_to_lines","","",167,null],[11,"span_to_snippet","","",167,null],[11,"get_filemap","","",167,null],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",167,null],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",167,null],[11,"more_specific_trace","","Check if the backtrace `subtrace` contains `suptrace` as a prefix.",167,null],[11,"record_expansion","","",167,null],[11,"with_expn_info","","",167,null],[11,"span_allows_unstable","","Check if a span is &quot;internal&quot; to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",167,null],[11,"count_lines","","",167,null],[11,"macro_backtrace","","",167,null],[11,"fmt","","",170,null],[11,"eq","","",170,null],[11,"ne","","",170,null],[11,"clone","","",170,null],[11,"fmt","","",171,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"clone","","",171,null],[11,"fmt","","",177,null],[11,"eq","","",177,null],[11,"ne","","",177,null],[11,"clone","","",177,null],[11,"fmt","","",178,null],[11,"eq","","",178,null],[11,"ne","","",178,null],[11,"clone","","",178,null],[0,"config","syntax","",null,null],[3,"CfgDiagReal","syntax::config","",null,null],[12,"diag","","",179,null],[12,"feature_gated_cfgs","","",179,null],[5,"strip_unconfigured_items","","",null,{"inputs":[{"name":"handler"},{"name":"crate"},{"name":"vec"}],"output":{"name":"crate"}}],[5,"strip_items","","",null,{"inputs":[{"name":"handler"},{"name":"crate"},{"name":"f"}],"output":{"name":"crate"}}],[8,"CfgDiag","","",null,null],[10,"emit_error","","",180,null],[10,"flag_gated","","",180,null],[11,"emit_error","","",179,null],[11,"flag_gated","","",179,null],[0,"entry","syntax","",null,null],[4,"EntryPointType","syntax::entry","",null,null],[13,"None","","",181,null],[13,"MainNamed","","",181,null],[13,"MainAttr","","",181,null],[13,"Start","","",181,null],[13,"OtherMain","","",181,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntax","Feature gating",null,null],[3,"Features","syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","spans of #![feature] attrs for stable language features. for error reporting",182,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",182,null],[12,"asm","","",182,null],[12,"concat_idents","","",182,null],[12,"link_args","","",182,null],[12,"log_syntax","","",182,null],[12,"non_ascii_idents","","",182,null],[12,"plugin_registrar","","",182,null],[12,"thread_local","","",182,null],[12,"trace_macros","","",182,null],[12,"intrinsics","","",182,null],[12,"lang_items","","",182,null],[12,"link_llvm_intrinsics","","",182,null],[12,"linkage","","",182,null],[12,"quote","","",182,null],[12,"simd","","",182,null],[12,"rustc_diagnostic_macros","","",182,null],[12,"advanced_slice_patterns","","",182,null],[12,"box_syntax","","",182,null],[12,"placement_in_syntax","","",182,null],[12,"reflect","","",182,null],[12,"unboxed_closures","","",182,null],[12,"pushpop_unsafe","","",182,null],[12,"allocator","","",182,null],[12,"fundamental","","",182,null],[12,"linked_from","","",182,null],[12,"main","","",182,null],[12,"needs_allocator","","",182,null],[12,"on_unimplemented","","",182,null],[12,"plugin","","",182,null],[12,"simd_ffi","","",182,null],[12,"start","","",182,null],[12,"structural_match","","",182,null],[12,"panic_runtime","","",182,null],[12,"needs_panic_runtime","","",182,null],[12,"optin_builtin_traits","","",182,null],[12,"macro_reexport","","",182,null],[12,"staged_api","","",182,null],[12,"unmarked_api","","",182,null],[12,"no_core","","",182,null],[12,"box_patterns","","",182,null],[12,"unsafe_no_drop_flag","","",182,null],[12,"dropck_parametricity","","",182,null],[12,"custom_attribute","","",182,null],[12,"custom_derive","","",182,null],[12,"rustc_attrs","","",182,null],[12,"allow_internal_unstable","","",182,null],[12,"slice_patterns","","",182,null],[12,"associated_consts","","",182,null],[12,"const_fn","","",182,null],[12,"const_indexing","","",182,null],[12,"prelude_import","","",182,null],[12,"static_recursion","","",182,null],[12,"default_type_parameter_fallback","","",182,null],[12,"associated_type_defaults","","",182,null],[12,"type_macros","","",182,null],[12,"repr_simd","","",182,null],[12,"cfg_target_feature","","",182,null],[12,"platform_intrinsics","","",182,null],[12,"unwind_attributes","","",182,null],[12,"naked_functions","","",182,null],[12,"no_debug","","",182,null],[12,"omit_gdb_pretty_printer_section","","",182,null],[12,"cfg_target_vendor","","",182,null],[12,"stmt_expr_attributes","","",182,null],[12,"type_ascription","","",182,null],[12,"cfg_target_thread_local","","",182,null],[12,"abi_vectorcall","","",182,null],[12,"inclusive_range_syntax","","",182,null],[12,"question_mark","","",182,null],[12,"specialization","","",182,null],[12,"pub_restricted","","",182,null],[12,"drop_types_in_const","","",182,null],[12,"cfg_target_has_atomic","","",182,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",183,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",183,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",183,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason\nand function to check if enabled",184,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",184,null],[4,"GatedCfgAttr","","",null,null],[13,"GatedCfg","","",185,null],[13,"GatedAttr","","",185,null],[4,"GateIssue","","",null,null],[13,"Language","","",186,null],[13,"Library","","",186,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",187,null],[13,"Allow","","Allow features to me activated, as on nightly.",187,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this is always required for building Rust itself.",187,null],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"handler"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"get_features","","",null,{"inputs":[{"name":"handler"},{"name":"crate"}],"output":{"name":"features"}}],[5,"check_crate","","",null,null],[17,"KNOWN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",182,{"inputs":[],"output":{"name":"features"}}],[11,"fmt","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"fmt","","",184,null],[11,"eq","","",185,null],[11,"ne","","",185,null],[11,"fmt","","",185,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"fmt","","",188,null],[11,"cmp","","",185,null],[11,"partial_cmp","","",185,null],[11,"check_and_emit","","",185,null],[11,"gate","","",188,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"clone","","",187,null],[0,"fold","syntax","A Folder represents an AST-&gt;AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST.",null,null],[5,"noop_fold_meta_items","syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinattributes"},{"name":"t"}],"output":{"name":"thinattributes"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_explicit_self_kind","","",null,{"inputs":[{"name":"selfkind"},{"name":"t"}],"output":{"name":"selfkind"}}],[5,"noop_fold_explicit_self","","",null,{"inputs":[{"name":"explicitself"},{"name":"t"}],"output":{"name":"explicitself"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",189,null],[11,"fold_meta_items","","",189,null],[11,"fold_meta_item","","",189,null],[11,"fold_view_path","","",189,null],[11,"fold_foreign_item","","",189,null],[11,"fold_item","","",189,null],[11,"fold_item_simple","","",189,null],[11,"fold_struct_field","","",189,null],[11,"fold_item_kind","","",189,null],[11,"fold_trait_item","","",189,null],[11,"fold_impl_item","","",189,null],[11,"fold_fn_decl","","",189,null],[11,"fold_block","","",189,null],[11,"fold_stmt","","",189,null],[11,"fold_arm","","",189,null],[11,"fold_pat","","",189,null],[11,"fold_decl","","",189,null],[11,"fold_expr","","",189,null],[11,"fold_opt_expr","","",189,null],[11,"fold_exprs","","",189,null],[11,"fold_ty","","",189,null],[11,"fold_ty_binding","","",189,null],[11,"fold_mod","","",189,null],[11,"fold_foreign_mod","","",189,null],[11,"fold_variant","","",189,null],[11,"fold_ident","","",189,null],[11,"fold_usize","","",189,null],[11,"fold_path","","",189,null],[11,"fold_path_parameters","","",189,null],[11,"fold_angle_bracketed_parameter_data","","",189,null],[11,"fold_parenthesized_parameter_data","","",189,null],[11,"fold_local","","",189,null],[11,"fold_mac","","",189,null],[11,"fold_explicit_self","","",189,null],[11,"fold_explicit_self_kind","","",189,null],[11,"fold_lifetime","","",189,null],[11,"fold_lifetime_def","","",189,null],[11,"fold_attribute","","",189,null],[11,"fold_arg","","",189,null],[11,"fold_generics","","",189,null],[11,"fold_trait_ref","","",189,null],[11,"fold_poly_trait_ref","","",189,null],[11,"fold_variant_data","","",189,null],[11,"fold_lifetimes","","",189,null],[11,"fold_lifetime_defs","","",189,null],[11,"fold_ty_param","","",189,null],[11,"fold_ty_params","","",189,null],[11,"fold_tt","","",189,null],[11,"fold_tts","","",189,null],[11,"fold_token","","",189,null],[11,"fold_interpolated","","",189,null],[11,"fold_opt_lifetime","","",189,null],[11,"fold_opt_bounds","","",189,null],[11,"fold_bounds","","",189,null],[11,"fold_ty_param_bound","","",189,null],[11,"fold_mt","","",189,null],[11,"fold_field","","",189,null],[11,"fold_where_clause","","",189,null],[11,"fold_where_predicate","","",189,null],[11,"fold_vis","","",189,null],[11,"new_id","","",189,null],[11,"new_span","","",189,null],[0,"parse","syntax","The main parser interface",null,null],[3,"ParseSess","syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",190,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn&#39;t exist",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"},{"name":"bool"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and cfg, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",191,null],[12,"token","","the current token:",191,null],[12,"span","","the span of the current token:",191,null],[12,"last_span","","the span of the prior token:",191,null],[12,"cfg","","",191,null],[12,"last_token","","the previous token or None (only stashed sometimes).",191,null],[12,"buffer","","",191,null],[12,"buffer_start","","",191,null],[12,"buffer_end","","",191,null],[12,"tokens_consumed","","",191,null],[12,"restrictions","","",191,null],[12,"quote_depth","","",191,null],[12,"reader","","",191,null],[12,"interner","","",191,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",191,null],[12,"filename","","Used to determine the path to externally loaded source files",191,null],[12,"mod_path_stack","","",191,null],[12,"open_braces","","Stack of open delimiters and their spans. Used for error message.",191,null],[12,"owns_directory","","Flag if this parser &quot;owns&quot; the directory that it is currently parsing\nin. This will affect how nested files are looked up.",191,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",191,null],[12,"expected_tokens","","",191,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",192,null],[12,"path_exists","","",192,null],[12,"result","","",192,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",193,null],[12,"owns_directory","","",193,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",194,null],[12,"help_msg","","",194,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which\nare parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",195,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar&lt;&#39;a&gt;::Baz&lt;T&gt;`, used in types.\nPaths using this style can be passed into macros expecting `path` nonterminals.",195,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::&lt;&#39;a&gt;::Baz::&lt;T&gt;`, used in expressions or patterns.",195,null],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`.",null,null],[13,"Bare","","",196,null],[13,"Modified","","",196,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",197,null],[13,"Ignore","","",197,null],[4,"TokenType","","",null,null],[13,"Token","","",198,null],[13,"Keyword","","",198,null],[13,"Operator","","",198,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",199,null],[13,"AttributesParsed","","",199,null],[13,"AlreadyParsed","","",199,null],[11,"hash","","",200,null],[11,"cmp","","",200,null],[11,"partial_cmp","","",200,null],[11,"lt","","",200,null],[11,"le","","",200,null],[11,"gt","","",200,null],[11,"ge","","",200,null],[11,"clone","","",200,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[18,"RESTRICTION_STMT_EXPR","syntax::parse","",200,null],[18,"RESTRICTION_NO_STRUCT_LITERAL","","",200,null],[18,"NO_NONINLINE_MOD","","",200,null],[11,"empty","syntax::parse::parser","Returns an empty set of flags.",200,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",200,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",200,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",200,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",200,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",200,null],[11,"is_all","","Returns `true` if all flags are currently set.",200,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",200,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",200,null],[11,"insert","","Inserts the specified flags in-place.",200,null],[11,"remove","","Removes the specified flags in-place.",200,null],[11,"toggle","","Toggles the specified flags in-place.",200,null],[11,"bitor","","Returns the union of the two sets of flags.",200,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",200,null],[11,"bitand","","Returns the intersection between the two sets of flags.",200,null],[11,"sub","","Returns the set difference of the two sets of flags.",200,null],[11,"not","","Returns the complement of this set of flags.",200,null],[11,"eq","","",195,null],[11,"clone","","",195,null],[11,"eq","","",196,null],[11,"clone","","",196,null],[11,"eq","","",197,null],[11,"clone","","",197,null],[11,"clone","","",198,null],[11,"eq","","",198,null],[11,"ne","","",198,null],[11,"from","","",199,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",199,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",191,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self&#39;s reader",191,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self&#39;s reader",191,null],[11,"this_token_descr","","",191,null],[11,"unexpected_last","","",191,null],[11,"unexpected","","",191,null],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",191,null],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",191,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",191,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",191,null],[11,"commit_expr_expecting","","",191,null],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",191,null],[11,"commit_stmt_expecting","","",191,null],[11,"parse_ident","","",191,null],[11,"check","","Check if the next token is `tok`, and return `true` if so.",191,null],[11,"eat","","Consume token &#39;tok&#39; if it exists. Returns true if the given\ntoken was present, false otherwise.",191,null],[11,"check_keyword","","",191,null],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",191,null],[11,"eat_keyword_noexpect","","",191,null],[11,"check_contextual_keyword","","",191,null],[11,"eat_contextual_keyword","","",191,null],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",191,null],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",191,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",191,null],[11,"expect_no_suffix","","",191,null],[11,"expect_gt","","Expect and consume a GT. if a &gt;&gt; is seen, replace it\nwith a single &gt; and continue. If a GT is not seen,\nsignal an error.",191,null],[11,"parse_seq_to_before_gt_or_return","","",191,null],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by &#39;&lt;&#39; and &#39;&gt;&#39;, stopping\nbefore the &#39;&gt;&#39;.",191,null],[11,"parse_seq_to_gt","","",191,null],[11,"parse_seq_to_gt_or_return","","",191,null],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees,\npasses through any errors encountered. Used for error recovery.",191,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",191,null],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",191,null],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",191,null],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",191,null],[11,"parse_seq","","",191,null],[11,"bump","","Advance the parser by one token",191,null],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",191,null],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when\nconsuming a part of a token. For example a single `&lt;` from `&lt;&lt;`.",191,null],[11,"buffer_length","","",191,null],[11,"look_ahead","","",191,null],[11,"fatal","","",191,null],[11,"span_fatal","","",191,null],[11,"span_fatal_help","","",191,null],[11,"bug","","",191,null],[11,"warn","","",191,null],[11,"span_warn","","",191,null],[11,"span_err","","",191,null],[11,"span_bug","","",191,null],[11,"abort_if_errors","","",191,null],[11,"diagnostic","","",191,null],[11,"id_to_interned_str","","",191,null],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",191,null],[11,"get_lifetime","","",191,null],[11,"parse_for_in_type","","",191,null],[11,"parse_ty_path","","",191,null],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",191,null],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&amp;:`, `&amp;mut:`, or `:`).",191,null],[11,"parse_unsafety","","",191,null],[11,"parse_trait_items","","Parse the items in a trait declaration",191,null],[11,"parse_mt","","Parse a possibly mutable type",191,null],[11,"parse_ret_ty","","Parse optional return type [ -&gt; TY ] in function decl",191,null],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",191,null],[11,"parse_ty","","Parse a type.",191,null],[11,"parse_borrowed_pointee","","",191,null],[11,"parse_ptr","","",191,null],[11,"is_named_argument","","",191,null],[11,"parse_arg_general","","This version of parse arg doesn&#39;t necessarily require\nidentifier names.",191,null],[11,"parse_arg","","Parse a single function argument",191,null],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",191,null],[11,"maybe_parse_fixed_length_of_vec","","",191,null],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",191,null],[11,"parse_lit","","Matches lit = true | false | token_lit",191,null],[11,"parse_pat_literal_maybe_minus","","matches &#39;-&#39; lit | lit",191,null],[11,"parse_path_segment_ident","","",191,null],[11,"parse_qualified_path","","Parses qualified path.",191,null],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",191,null],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b&lt;T,U&gt;::c&lt;V,W&gt;`\n- `a::b&lt;T,U&gt;::c(V) -&gt; W`\n- `a::b&lt;T,U&gt;::c(V)`",191,null],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::&lt;T,U&gt;::c`",191,null],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",191,null],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",191,null],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",191,null],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { &#39;,&#39; lifetime_defs } ]` where `lifetime_def  =\nlifetime [&#39;:&#39; lifetimes]`",191,null],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",191,null],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",191,null],[11,"parse_field","","Parse ident COLON expr",191,null],[11,"mk_expr","","",191,null],[11,"mk_unary","","",191,null],[11,"mk_binary","","",191,null],[11,"mk_call","","",191,null],[11,"mk_index","","",191,null],[11,"mk_range","","",191,null],[11,"mk_field","","",191,null],[11,"mk_tup_field","","",191,null],[11,"mk_assign_op","","",191,null],[11,"mk_mac_expr","","",191,null],[11,"mk_lit_u32","","",191,null],[11,"parse_block_expr","","Parse a block or unsafe block",191,null],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",191,null],[11,"parse_dot_or_call_expr_with","","",191,null],[11,"check_unknown_macro_variable","","",191,null],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",191,null],[11,"parse_token_tree","","parse a single token tree from the input.",191,null],[11,"parse_all_token_trees","","",191,null],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",191,null],[11,"parse_assoc_expr","","Parse an associative expression",191,null],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",191,null],[11,"parse_if_expr","","Parse an &#39;if&#39; or &#39;if let&#39; expression (&#39;if&#39; token already eaten)",191,null],[11,"parse_if_let_expr","","Parse an &#39;if let&#39; expression (&#39;if&#39; token already eaten)",191,null],[11,"parse_lambda_expr","","",191,null],[11,"parse_else_expr","","",191,null],[11,"parse_for_expr","","Parse a &#39;for&#39; .. &#39;in&#39; expression (&#39;for&#39; token already eaten)",191,null],[11,"parse_while_expr","","Parse a &#39;while&#39; or &#39;while let&#39; expression (&#39;while&#39; token already eaten)",191,null],[11,"parse_while_let_expr","","Parse a &#39;while let&#39; expression (&#39;while&#39; token already eaten)",191,null],[11,"parse_loop_expr","","",191,null],[11,"parse_arm","","",191,null],[11,"parse_expr","","Parse an expression",191,null],[11,"with_res","","Evaluate the closure with restrictions in place.",191,null],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",191,null],[11,"parse_pat","","Parse a pattern.",191,null],[11,"parse_stmt","","Parse a statement. may include decl.",191,null],[11,"parse_block","","Parse a block. No inner attrs are allowed.",191,null],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",191,null],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",191,null],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",191,null],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",191,null],[11,"parse_fn_front_matter","","parses all the &quot;front matter&quot; for a `fn` declaration, up to\nand including the `fn` keyword:",191,null],[11,"parse_impl_item","","Parse an impl item.",191,null],[11,"parse_record_struct_body","","",191,null],[11,"parse_tuple_struct_body","","",191,null],[11,"parse_single_struct_field","","Parse a structure field declaration",191,null],[11,"submod_path_from_attr","","",191,null],[11,"default_submod_path","","Returns either a path to a module, or .",191,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",191,null],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",191,null],[11,"parse_optional_str","","",191,null],[11,"parse_str","","",191,null],[0,"lexer","syntax::parse","",null,null],[3,"TokenAndSpan","syntax::parse::lexer","",null,null],[12,"tok","","",201,null],[12,"sp","","",201,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",202,null],[12,"pos","","The absolute offset within the codemap of the next character to read",202,null],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",202,null],[12,"col","","The column of the next character to read",202,null],[12,"curr","","The last character to be read",202,null],[12,"filemap","","",202,null],[12,"peek_tok","","",202,null],[12,"peek_span","","",202,null],[12,"fatal_errs","","",202,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntax::parse::lexer::comments","",null,null],[12,"style","","",203,null],[12,"lines","","",203,null],[12,"pos","","",203,null],[3,"Literal","","",null,null],[12,"lit","","",204,null],[12,"pos","","",204,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",205,null],[13,"Trailing","","Code exists to the left of the comment",205,null],[13,"Mixed","","Code before /* foo */ and after the comment",205,null],[13,"BlankLine","","Just a manual blank line &quot;\\n\\n&quot;, for layout",205,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"eq","","",205,null],[11,"clone","","",205,null],[11,"clone","","",203,null],[11,"clone","","",204,null],[8,"Reader","syntax::parse::lexer","",null,null],[10,"is_eof","","",206,null],[10,"try_next_token","","",206,null],[11,"next_token","","",206,null],[10,"fatal","","Report a fatal error with the current span.",206,null],[10,"err","","Report a non-fatal error with the current span.",206,null],[10,"emit_fatal_errors","","",206,null],[11,"unwrap_or_abort","","",206,null],[10,"peek","","",206,null],[11,"try_real_token","","Get a token the parser cares about.",206,null],[11,"real_token","","",206,null],[11,"fmt","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"is_eof","","",202,null],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",202,null],[11,"fatal","","",202,null],[11,"err","","",202,null],[11,"emit_fatal_errors","","",202,null],[11,"peek","","",202,null],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",202,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",202,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",202,null],[11,"fatal_span","","Report a fatal lexical error with a given span.",202,null],[11,"err_span","","Report a lexical error with a given span.",202,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",202,null],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",202,null],[11,"name_from_to","","As name_from, with an explicit endpoint.",202,null],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap&#39;s list of line start offsets.",202,null],[11,"nextch","","",202,null],[11,"nextch_is","","",202,null],[11,"nextnextch","","",202,null],[11,"nextnextch_is","","",202,null],[0,"token","syntax::parse","",null,null],[3,"InternedString","syntax::parse::token","Represents a string stored in the thread-local interner. Because the\ninterner lives for the life of the thread, this can be safely treated as an\nimmortal string, as long as it never crosses between threads.",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",207,null],[13,"Minus","","",207,null],[13,"Star","","",207,null],[13,"Slash","","",207,null],[13,"Percent","","",207,null],[13,"Caret","","",207,null],[13,"And","","",207,null],[13,"Or","","",207,null],[13,"Shl","","",207,null],[13,"Shr","","",207,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",208,null],[13,"Bracket","","A square bracket: `[` or `]`",208,null],[13,"Brace","","A curly brace: `{` or `}`",208,null],[4,"SpecialMacroVar","","",null,null],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was\nimported from, if any.",209,null],[4,"Lit","","",null,null],[13,"Byte","","",210,null],[13,"Char","","",210,null],[13,"Integer","","",210,null],[13,"Float","","",210,null],[13,"Str_","","",210,null],[13,"StrRaw","","",210,null],[13,"ByteStr","","",210,null],[13,"ByteStrRaw","","",210,null],[4,"Token","","",null,null],[13,"Eq","","",211,null],[13,"Lt","","",211,null],[13,"Le","","",211,null],[13,"EqEq","","",211,null],[13,"Ne","","",211,null],[13,"Ge","","",211,null],[13,"Gt","","",211,null],[13,"AndAnd","","",211,null],[13,"OrOr","","",211,null],[13,"Not","","",211,null],[13,"Tilde","","",211,null],[13,"BinOp","","",211,null],[13,"BinOpEq","","",211,null],[13,"At","","",211,null],[13,"Dot","","",211,null],[13,"DotDot","","",211,null],[13,"DotDotDot","","",211,null],[13,"Comma","","",211,null],[13,"Semi","","",211,null],[13,"Colon","","",211,null],[13,"ModSep","","",211,null],[13,"RArrow","","",211,null],[13,"LArrow","","",211,null],[13,"FatArrow","","",211,null],[13,"Pound","","",211,null],[13,"Dollar","","",211,null],[13,"Question","","",211,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",211,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",211,null],[13,"Literal","","",211,null],[13,"Ident","","",211,null],[13,"Underscore","","",211,null],[13,"Lifetime","","",211,null],[13,"Interpolated","","",211,null],[13,"DocComment","","Doc comment",211,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",211,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",211,null],[13,"SpecialVarNt","","A macro variable with special meaning.",211,null],[13,"Whitespace","","Whitespace",211,null],[13,"Comment","","Comment",211,null],[13,"Shebang","","",211,null],[13,"Eof","","",211,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",212,null],[13,"NtBlock","","",212,null],[13,"NtStmt","","",212,null],[13,"NtPat","","",212,null],[13,"NtExpr","","",212,null],[13,"NtTy","","",212,null],[13,"NtIdent","","",212,null],[13,"NtMeta","","Stuff inside brackets for attributes",212,null],[13,"NtPath","","",212,null],[13,"NtTT","","",212,null],[13,"NtArm","","",212,null],[13,"NtImplItem","","",212,null],[13,"NtTraitItem","","",212,null],[13,"NtGenerics","","",212,null],[13,"NtWhereClause","","",212,null],[13,"NtArg","","",212,null],[5,"get_ident_interner","","",null,{"inputs":[],"output":{"name":"rc"}}],[5,"reset_ident_interner","","Reset the ident interner to its initial state.",null,{"inputs":[],"output":null}],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\nthread-local interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[5,"intern","","Maps a string to its interned representation.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"gensym","","gensym&#39;s a new usize, using the current interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"gensym_ident","","Maps a string to a gensym&#39;ed identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"fresh_name","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[5,"fresh_mark","","",null,{"inputs":[],"output":{"name":"mrk"}}],[0,"keywords","","",null,null],[3,"Keyword","syntax::parse::token::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"eq","","",213,null],[11,"ne","","",213,null],[11,"clone","","",213,null],[11,"ident","","",213,null],[11,"name","","",213,null],[6,"IdentInterner","syntax::parse::token","",null,null],[11,"fmt","","",207,null],[11,"hash","","",207,null],[11,"eq","","",207,null],[11,"decode","","",207,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",207,null],[11,"clone","","",207,null],[11,"fmt","","",208,null],[11,"hash","","",208,null],[11,"eq","","",208,null],[11,"decode","","",208,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",208,null],[11,"clone","","",208,null],[11,"fmt","","",209,null],[11,"hash","","",209,null],[11,"eq","","",209,null],[11,"decode","","",209,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",209,null],[11,"clone","","",209,null],[11,"as_str","","",209,null],[11,"fmt","","",210,null],[11,"hash","","",210,null],[11,"eq","","",210,null],[11,"ne","","",210,null],[11,"decode","","",210,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",210,null],[11,"clone","","",210,null],[11,"short_name","","",210,null],[11,"fmt","","",211,null],[11,"hash","","",211,null],[11,"eq","","",211,null],[11,"ne","","",211,null],[11,"decode","","",211,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",211,null],[11,"clone","","",211,null],[11,"is_like_gt","","Returns `true` if the token starts with &#39;&gt;&#39;.",211,null],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",211,null],[11,"is_lit","","Returns `true` if the token is any literal",211,null],[11,"is_ident","","Returns `true` if the token is an identifier.",211,null],[11,"is_interpolated","","Returns `true` if the token is interpolated.",211,null],[11,"is_path","","Returns `true` if the token is an interpolated path.",211,null],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",211,null],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",211,null],[11,"is_path_start","","",211,null],[11,"to_binop","","Maps a token to its corresponding binary operator.",211,null],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",211,null],[11,"is_path_segment_keyword","","",211,null],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",211,null],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",211,null],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",211,null],[11,"mtwt_eq","","Hygienic identifier equality comparison.",211,null],[11,"hash","","",212,null],[11,"eq","","",212,null],[11,"ne","","",212,null],[11,"decode","","",212,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",212,null],[11,"clone","","",212,null],[11,"fmt","","",212,null],[11,"cmp","","",214,null],[11,"partial_cmp","","",214,null],[11,"lt","","",214,null],[11,"le","","",214,null],[11,"gt","","",214,null],[11,"ge","","",214,null],[11,"hash","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"clone","","",214,null],[11,"new","","",214,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",214,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",214,null],[11,"fmt","","",214,null],[11,"fmt","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"decode","","",214,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",214,null],[0,"attr","syntax::parse","",null,null],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",191,null],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",191,null],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",191,null],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",191,null],[0,"common","syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed.",null,null],[12,"sep","","",215,null],[12,"trailing_sep_allowed","","",215,null],[11,"trailing_allowed","","",215,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",215,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: &#39;can this expression\nbe used as a statement without a semicolon&#39; -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn&#39;t parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we&#39;ve already\nseen the semicolon, and thus don&#39;t need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[13,"ClosureKind","","",216,null],[13,"ExternCrateString","","",216,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",217,null],[10,"report","","",217,null],[11,"hash","","",216,null],[11,"eq","","",216,null],[11,"clone","","",216,null],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",191,null],[11,"report","","",191,null],[6,"PResult","syntax::parse","",null,null],[11,"new","","",190,{"inputs":[],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",190,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",190,null],[0,"ptr","syntax","The AST pointer",null,null],[3,"P","syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P&lt;T&gt;` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"cmp","","",218,null],[11,"partial_cmp","","",218,null],[11,"lt","","",218,null],[11,"le","","",218,null],[11,"gt","","",218,null],[11,"ge","","",218,null],[11,"eq","","",218,null],[11,"ne","","",218,null],[11,"hash","","",218,null],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",218,null],[11,"unwrap","","Equivalent to and_then(|x| x)",218,null],[11,"map","","Transform the inner value, consuming `self` and producing a new `P&lt;T&gt;`.",218,null],[11,"deref","","",218,null],[11,"clone","","",218,null],[11,"fmt","","",218,null],[11,"fmt","","",218,null],[11,"fmt","","",218,null],[11,"decode","","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",218,null],[11,"new","","",218,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",218,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",218,null],[11,"default","","",218,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",218,null],[11,"from","","",218,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",218,null],[11,"from_iter","","",218,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",218,null],[11,"encode","","",218,null],[11,"decode","","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntax","Span debugger",null,null],[5,"run","syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntax","",null,null],[5,"maybe_inject_crates_ref","syntax::std_inject","",null,{"inputs":[{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[5,"maybe_inject_prelude","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"}],"output":{"name":"crate"}}],[5,"no_core","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"no_std","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[0,"str","syntax","",null,null],[5,"char_at","syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[0,"test","syntax","",null,null],[5,"modify_for_testing","syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"visit","syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[4,"FnKind","syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern &quot;Abi&quot; fn foo()",219,null],[13,"Method","","fn foo(&amp;self)",219,null],[13,"Closure","","|x, y| {}",219,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_explicit_self","","",null,{"inputs":[{"name":"v"},{"name":"explicitself"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_decl","","",null,{"inputs":[{"name":"v"},{"name":"decl"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",220,null],[11,"visit_ident","","",220,null],[11,"visit_mod","","",220,null],[11,"visit_foreign_item","","",220,null],[11,"visit_item","","",220,null],[11,"visit_local","","",220,null],[11,"visit_block","","",220,null],[11,"visit_stmt","","",220,null],[11,"visit_arm","","",220,null],[11,"visit_pat","","",220,null],[11,"visit_decl","","",220,null],[11,"visit_expr","","",220,null],[11,"visit_expr_post","","",220,null],[11,"visit_ty","","",220,null],[11,"visit_generics","","",220,null],[11,"visit_fn","","",220,null],[11,"visit_trait_item","","",220,null],[11,"visit_impl_item","","",220,null],[11,"visit_trait_ref","","",220,null],[11,"visit_ty_param_bound","","",220,null],[11,"visit_poly_trait_ref","","",220,null],[11,"visit_variant_data","","",220,null],[11,"visit_struct_field","","",220,null],[11,"visit_enum_def","","",220,null],[11,"visit_variant","","",220,null],[11,"visit_lifetime","","",220,null],[11,"visit_lifetime_def","","",220,null],[11,"visit_explicit_self","","",220,null],[11,"visit_mac","","",220,null],[11,"visit_path","","",220,null],[11,"visit_path_list_item","","",220,null],[11,"visit_path_segment","","",220,null],[11,"visit_path_parameters","","",220,null],[11,"visit_assoc_type_binding","","",220,null],[11,"visit_attribute","","",220,null],[11,"visit_macro_def","","",220,null],[11,"visit_vis","","",220,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"clone","","",219,null],[0,"print","syntax","",null,null],[0,"pp","syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton&#39;s\nMesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what&#39;s going\non.",null,null],[12,"out","","",221,null],[4,"Breaks","","",null,null],[13,"Consistent","","",222,null],[13,"Inconsistent","","",222,null],[4,"Token","","",null,null],[13,"String","","",223,null],[13,"Break","","",223,null],[13,"Begin","","",223,null],[13,"End","","",223,null],[13,"Eof","","",223,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",224,null],[13,"Broken","","",224,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"eq","","",222,null],[11,"clone","","",222,null],[11,"clone","","",225,null],[11,"clone","","",226,null],[11,"clone","","",223,null],[11,"is_eof","","",223,null],[11,"is_hardbreak_tok","","",223,null],[11,"fmt","","",223,null],[11,"clone","","",224,null],[11,"clone","","",227,null],[11,"last_token","","",221,null],[11,"replace_last_token","","",221,null],[11,"pretty_print","","",221,null],[11,"check_stream","","",221,null],[11,"scan_push","","",221,null],[11,"scan_pop","","",221,null],[11,"scan_top","","",221,null],[11,"scan_pop_bottom","","",221,null],[11,"advance_right","","",221,null],[11,"advance_left","","",221,null],[11,"check_stack","","",221,null],[11,"print_newline","","",221,null],[11,"indent","","",221,null],[11,"get_top","","",221,null],[11,"print_str","","",221,null],[11,"print","","",221,null],[0,"pprust","syntax::print","",null,null],[3,"NoAnn","syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",228,null],[12,"cur_lit","","",228,null],[3,"State","","",null,null],[12,"s","","",229,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",230,null],[13,"NodeName","","",230,null],[13,"NodeBlock","","",230,null],[13,"NodeItem","","",230,null],[13,"NodeSubItem","","",230,null],[13,"NodeExpr","","",230,null],[13,"NodePat","","",230,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"option"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"explicit_self_to_string","","",null,{"inputs":[{"name":"selfkind"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",231,null],[11,"post","","",231,null],[8,"PrintState","","",null,null],[10,"writer","","",232,null],[10,"boxes","","",232,null],[10,"comments","","",232,null],[10,"cur_cmnt_and_lit","","",232,null],[10,"literals","","",232,null],[11,"word_space","","",232,null],[11,"popen","","",232,null],[11,"pclose","","",232,null],[11,"is_begin","","",232,null],[11,"is_end","","",232,null],[11,"is_bol","","",232,null],[11,"hardbreak_if_not_bol","","",232,null],[11,"rbox","","",232,null],[11,"ibox","","",232,null],[11,"end","","",232,null],[11,"commasep","","",232,null],[11,"next_lit","","",232,null],[11,"maybe_print_comment","","",232,null],[11,"print_comment","","",232,null],[11,"next_comment","","",232,null],[11,"print_literal","","",232,null],[11,"print_string","","",232,null],[11,"print_inner_attributes","","",232,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",232,null],[11,"print_outer_attributes","","",232,null],[11,"print_inner_attributes_inline","","",232,null],[11,"print_outer_attributes_inline","","",232,null],[11,"print_either_attributes","","",232,null],[11,"print_attribute","","",232,null],[11,"print_attribute_inline","","",232,null],[11,"print_meta_item","","",232,null],[11,"space_if_not_bol","","",232,null],[11,"nbsp","","",232,null],[11,"clone","","",233,null],[11,"clone","","",228,null],[11,"new_from_input","","",229,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",229,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",229,null],[11,"boxes","","",229,null],[11,"comments","","",229,null],[11,"cur_cmnt_and_lit","","",229,null],[11,"literals","","",229,null],[11,"cbox","","",229,null],[11,"word_nbsp","","",229,null],[11,"head","","",229,null],[11,"bopen","","",229,null],[11,"bclose_","","",229,null],[11,"bclose_maybe_open","","",229,null],[11,"bclose","","",229,null],[11,"in_cbox","","",229,null],[11,"break_offset_if_not_bol","","",229,null],[11,"synth_comment","","",229,null],[11,"commasep_cmnt","","",229,null],[11,"commasep_exprs","","",229,null],[11,"print_mod","","",229,null],[11,"print_foreign_mod","","",229,null],[11,"print_opt_lifetime","","",229,null],[11,"print_type","","",229,null],[11,"print_foreign_item","","",229,null],[11,"print_item","","Pretty-print an item",229,null],[11,"print_enum_def","","",229,null],[11,"print_variants","","",229,null],[11,"print_visibility","","",229,null],[11,"print_struct","","",229,null],[11,"print_tt","","This doesn&#39;t deserve to be called &quot;pretty&quot; printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it&#39;d be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",229,null],[11,"print_tts","","",229,null],[11,"print_variant","","",229,null],[11,"print_method_sig","","",229,null],[11,"print_trait_item","","",229,null],[11,"print_impl_item","","",229,null],[11,"print_stmt","","",229,null],[11,"print_block","","",229,null],[11,"print_block_unclosed","","",229,null],[11,"print_block_unclosed_with_attrs","","",229,null],[11,"print_block_unclosed_indent","","",229,null],[11,"print_block_with_attrs","","",229,null],[11,"print_block_maybe_unclosed","","",229,null],[11,"print_if","","",229,null],[11,"print_if_let","","",229,null],[11,"print_mac","","",229,null],[11,"check_expr_bin_needs_paren","","",229,null],[11,"print_expr_maybe_paren","","",229,null],[11,"print_expr","","",229,null],[11,"print_local_decl","","",229,null],[11,"print_decl","","",229,null],[11,"print_ident","","",229,null],[11,"print_usize","","",229,null],[11,"print_name","","",229,null],[11,"print_for_decl","","",229,null],[11,"print_pat","","",229,null],[11,"print_fn","","",229,null],[11,"print_fn_args","","",229,null],[11,"print_fn_args_and_ret","","",229,null],[11,"print_fn_block_args","","",229,null],[11,"print_capture_clause","","",229,null],[11,"print_bounds","","",229,null],[11,"print_lifetime","","",229,null],[11,"print_lifetime_def","","",229,null],[11,"print_generics","","",229,null],[11,"print_ty_param","","",229,null],[11,"print_where_clause","","",229,null],[11,"print_view_path","","",229,null],[11,"print_mutability","","",229,null],[11,"print_mt","","",229,null],[11,"print_arg","","",229,null],[11,"print_fn_output","","",229,null],[11,"print_ty_fn","","",229,null],[11,"maybe_print_trailing_comment","","",229,null],[11,"print_remaining_comments","","",229,null],[11,"print_opt_abi_and_extern_if_nondefault","","",229,null],[11,"print_extern_opt_abi","","",229,null],[11,"print_fn_header_info","","",229,null],[11,"print_unsafety","","",229,null],[0,"ext","syntax","",null,null],[0,"base","syntax::ext","",null,null],[3,"MacEager","syntax::ext::base","`MacResult` implementation for the common case where you&#39;ve already\nbuilt each form of AST that you might return.",null,null],[12,"expr","","",234,null],[12,"pat","","",234,null],[12,"items","","",234,null],[12,"impl_items","","",234,null],[12,"stmts","","",234,null],[12,"ty","","",234,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors.",null,null],[3,"BlockInfo","","",null,null],[12,"macros_escape","","Should macros escape from this scope?",235,null],[12,"pending_renames","","What are the pending renames?",235,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-&gt; expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",236,null],[12,"cfg","","",236,null],[12,"backtrace","","",236,null],[12,"ecfg","","",236,null],[12,"crate_root","","",236,null],[12,"feature_gated_cfgs","","",236,null],[12,"mod_path","","",236,null],[12,"exported_macros","","",236,null],[12,"syntax_env","","",236,null],[12,"recursion_count","","",236,null],[12,"filename","","",236,null],[12,"mod_path_stack","","",236,null],[12,"in_block","","",236,null],[3,"SyntaxEnv","","In order to have some notion of scoping for macros,\nwe want to implement the notion of a transformation\nenvironment.",null,null],[12,"names","","All bang-style macro/extension names\nencountered so far; to be used for diagnostics in resolve",237,null],[4,"Annotatable","","",null,null],[13,"Item","","",238,null],[13,"TraitItem","","",238,null],[13,"ImplItem","","",238,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",239,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. More flexible version than Modifier.",239,null],[13,"NormalTT","","A normal, function-like syntax extension.",239,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.",239,null],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",239,null],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",240,null],[8,"MultiItemModifier","","",null,null],[10,"expand","","",241,null],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",242,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",243,null],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",244,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",244,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",244,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",244,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",244,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",244,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",238,null],[11,"fmt","","",238,null],[11,"attrs","","",238,null],[11,"fold_attrs","","",238,null],[11,"expect_item","","",238,null],[11,"map_item_or","","",238,null],[11,"expect_trait_item","","",238,null],[11,"expect_impl_item","","",238,null],[11,"default","","",234,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",234,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",234,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",234,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",234,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",234,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",234,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",234,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",234,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",234,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",234,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",234,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",234,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",245,null],[11,"any","","Create a default MacResult that can be anything.",245,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",245,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",245,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",245,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",245,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",245,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",245,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",245,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",245,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",245,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"new","","",235,{"inputs":[],"output":{"name":"blockinfo"}}],[11,"new","","",236,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"expansionconfig"},{"name":"vec"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",236,null],[11,"new_parser_from_tts","","",236,null],[11,"codemap","","",236,null],[11,"parse_sess","","",236,null],[11,"cfg","","",236,null],[11,"call_site","","",236,null],[11,"backtrace","","",236,null],[11,"original_span","","Original span that caused the current exapnsion to happen.",236,null],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",236,null],[11,"mod_push","","",236,null],[11,"mod_pop","","",236,null],[11,"mod_path","","",236,null],[11,"bt_push","","",236,null],[11,"bt_pop","","",236,null],[11,"insert_macro","","",236,null],[11,"struct_span_warn","","",236,null],[11,"struct_span_err","","",236,null],[11,"struct_span_fatal","","",236,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",236,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",236,null],[11,"span_warn","","",236,null],[11,"span_unimpl","","",236,null],[11,"span_bug","","",236,null],[11,"bug","","",236,null],[11,"trace_macros","","",236,null],[11,"set_trace_macros","","",236,null],[11,"ident_of","","",236,null],[11,"std_path","","",236,null],[11,"name_of","","",236,null],[11,"suggest_macro_name","","",236,null],[11,"push_frame","","",237,null],[11,"pop_frame","","",237,null],[11,"find","","",237,null],[11,"insert","","",237,null],[11,"info","","",237,null],[0,"build","syntax::ext","",null,null],[8,"AstBuilder","syntax::ext::build","",null,null],[10,"path","","",246,null],[10,"path_ident","","",246,null],[10,"path_global","","",246,null],[10,"path_all","","",246,null],[10,"qpath","","",246,null],[10,"qpath_all","","",246,null],[10,"ty_mt","","",246,null],[10,"ty","","",246,null],[10,"ty_path","","",246,null],[10,"ty_sum","","",246,null],[10,"ty_ident","","",246,null],[10,"ty_rptr","","",246,null],[10,"ty_ptr","","",246,null],[10,"ty_option","","",246,null],[10,"ty_infer","","",246,null],[10,"ty_vars","","",246,null],[10,"ty_vars_global","","",246,null],[10,"typaram","","",246,null],[10,"trait_ref","","",246,null],[10,"poly_trait_ref","","",246,null],[10,"typarambound","","",246,null],[10,"lifetime","","",246,null],[10,"lifetime_def","","",246,null],[10,"stmt_expr","","",246,null],[10,"stmt_let","","",246,null],[10,"stmt_let_typed","","",246,null],[10,"stmt_item","","",246,null],[10,"block","","",246,null],[10,"block_expr","","",246,null],[10,"block_all","","",246,null],[10,"expr","","",246,null],[10,"expr_path","","",246,null],[10,"expr_qpath","","",246,null],[10,"expr_ident","","",246,null],[10,"expr_self","","",246,null],[10,"expr_binary","","",246,null],[10,"expr_deref","","",246,null],[10,"expr_unary","","",246,null],[10,"expr_addr_of","","",246,null],[10,"expr_mut_addr_of","","",246,null],[10,"expr_field_access","","",246,null],[10,"expr_tup_field_access","","",246,null],[10,"expr_call","","",246,null],[10,"expr_call_ident","","",246,null],[10,"expr_call_global","","",246,null],[10,"expr_method_call","","",246,null],[10,"expr_block","","",246,null],[10,"expr_cast","","",246,null],[10,"field_imm","","",246,null],[10,"expr_struct","","",246,null],[10,"expr_struct_ident","","",246,null],[10,"expr_lit","","",246,null],[10,"expr_usize","","",246,null],[10,"expr_isize","","",246,null],[10,"expr_u8","","",246,null],[10,"expr_u32","","",246,null],[10,"expr_bool","","",246,null],[10,"expr_vec","","",246,null],[10,"expr_vec_ng","","",246,null],[10,"expr_vec_slice","","",246,null],[10,"expr_str","","",246,null],[10,"expr_some","","",246,null],[10,"expr_none","","",246,null],[10,"expr_break","","",246,null],[10,"expr_tuple","","",246,null],[10,"expr_fail","","",246,null],[10,"expr_unreachable","","",246,null],[10,"expr_ok","","",246,null],[10,"expr_err","","",246,null],[10,"expr_try","","",246,null],[10,"pat","","",246,null],[10,"pat_wild","","",246,null],[10,"pat_lit","","",246,null],[10,"pat_ident","","",246,null],[10,"pat_ident_binding_mode","","",246,null],[10,"pat_enum","","",246,null],[10,"pat_struct","","",246,null],[10,"pat_tuple","","",246,null],[10,"pat_some","","",246,null],[10,"pat_none","","",246,null],[10,"pat_ok","","",246,null],[10,"pat_err","","",246,null],[10,"arm","","",246,null],[10,"arm_unreachable","","",246,null],[10,"expr_match","","",246,null],[10,"expr_if","","",246,null],[10,"expr_loop","","",246,null],[10,"lambda_fn_decl","","",246,null],[10,"lambda","","",246,null],[10,"lambda0","","",246,null],[10,"lambda1","","",246,null],[10,"lambda_expr","","",246,null],[10,"lambda_expr_0","","",246,null],[10,"lambda_expr_1","","",246,null],[10,"lambda_stmts","","",246,null],[10,"lambda_stmts_0","","",246,null],[10,"lambda_stmts_1","","",246,null],[10,"item","","",246,null],[10,"arg","","",246,null],[10,"fn_decl","","",246,null],[10,"item_fn_poly","","",246,null],[10,"item_fn","","",246,null],[10,"variant","","",246,null],[10,"item_enum_poly","","",246,null],[10,"item_enum","","",246,null],[10,"item_struct_poly","","",246,null],[10,"item_struct","","",246,null],[10,"item_mod","","",246,null],[10,"item_static","","",246,null],[10,"item_const","","",246,null],[10,"item_ty_poly","","",246,null],[10,"item_ty","","",246,null],[10,"attribute","","",246,null],[10,"meta_word","","",246,null],[10,"meta_list","","",246,null],[10,"meta_name_value","","",246,null],[10,"item_use","","",246,null],[10,"item_use_simple","","",246,null],[10,"item_use_simple_","","",246,null],[10,"item_use_list","","",246,null],[10,"item_use_glob","","",246,null],[11,"path","syntax::ext::base","",236,null],[11,"path_ident","","",236,null],[11,"path_global","","",236,null],[11,"path_all","","",236,null],[11,"qpath","","Constructs a qualified path.",236,null],[11,"qpath_all","","Constructs a qualified path.",236,null],[11,"ty_mt","","",236,null],[11,"ty","","",236,null],[11,"ty_path","","",236,null],[11,"ty_sum","","",236,null],[11,"ty_ident","","",236,null],[11,"ty_rptr","","",236,null],[11,"ty_ptr","","",236,null],[11,"ty_option","","",236,null],[11,"ty_infer","","",236,null],[11,"typaram","","",236,null],[11,"ty_vars","","",236,null],[11,"ty_vars_global","","",236,null],[11,"trait_ref","","",236,null],[11,"poly_trait_ref","","",236,null],[11,"typarambound","","",236,null],[11,"lifetime","","",236,null],[11,"lifetime_def","","",236,null],[11,"stmt_expr","","",236,null],[11,"stmt_let","","",236,null],[11,"stmt_let_typed","","",236,null],[11,"block","","",236,null],[11,"stmt_item","","",236,null],[11,"block_expr","","",236,null],[11,"block_all","","",236,null],[11,"expr","","",236,null],[11,"expr_path","","",236,null],[11,"expr_qpath","","Constructs a QPath expression.",236,null],[11,"expr_ident","","",236,null],[11,"expr_self","","",236,null],[11,"expr_binary","","",236,null],[11,"expr_deref","","",236,null],[11,"expr_unary","","",236,null],[11,"expr_field_access","","",236,null],[11,"expr_tup_field_access","","",236,null],[11,"expr_addr_of","","",236,null],[11,"expr_mut_addr_of","","",236,null],[11,"expr_call","","",236,null],[11,"expr_call_ident","","",236,null],[11,"expr_call_global","","",236,null],[11,"expr_method_call","","",236,null],[11,"expr_block","","",236,null],[11,"field_imm","","",236,null],[11,"expr_struct","","",236,null],[11,"expr_struct_ident","","",236,null],[11,"expr_lit","","",236,null],[11,"expr_usize","","",236,null],[11,"expr_isize","","",236,null],[11,"expr_u32","","",236,null],[11,"expr_u8","","",236,null],[11,"expr_bool","","",236,null],[11,"expr_vec","","",236,null],[11,"expr_vec_ng","","",236,null],[11,"expr_vec_slice","","",236,null],[11,"expr_str","","",236,null],[11,"expr_cast","","",236,null],[11,"expr_some","","",236,null],[11,"expr_none","","",236,null],[11,"expr_break","","",236,null],[11,"expr_tuple","","",236,null],[11,"expr_fail","","",236,null],[11,"expr_unreachable","","",236,null],[11,"expr_ok","","",236,null],[11,"expr_err","","",236,null],[11,"expr_try","","",236,null],[11,"pat","","",236,null],[11,"pat_wild","","",236,null],[11,"pat_lit","","",236,null],[11,"pat_ident","","",236,null],[11,"pat_ident_binding_mode","","",236,null],[11,"pat_enum","","",236,null],[11,"pat_struct","","",236,null],[11,"pat_tuple","","",236,null],[11,"pat_some","","",236,null],[11,"pat_none","","",236,null],[11,"pat_ok","","",236,null],[11,"pat_err","","",236,null],[11,"arm","","",236,null],[11,"arm_unreachable","","",236,null],[11,"expr_match","","",236,null],[11,"expr_if","","",236,null],[11,"expr_loop","","",236,null],[11,"lambda_fn_decl","","",236,null],[11,"lambda","","",236,null],[11,"lambda0","","",236,null],[11,"lambda1","","",236,null],[11,"lambda_expr","","",236,null],[11,"lambda_expr_0","","",236,null],[11,"lambda_expr_1","","",236,null],[11,"lambda_stmts","","",236,null],[11,"lambda_stmts_0","","",236,null],[11,"lambda_stmts_1","","",236,null],[11,"arg","","",236,null],[11,"fn_decl","","",236,null],[11,"item","","",236,null],[11,"item_fn_poly","","",236,null],[11,"item_fn","","",236,null],[11,"variant","","",236,null],[11,"item_enum_poly","","",236,null],[11,"item_enum","","",236,null],[11,"item_struct","","",236,null],[11,"item_struct_poly","","",236,null],[11,"item_mod","","",236,null],[11,"item_static","","",236,null],[11,"item_const","","",236,null],[11,"item_ty_poly","","",236,null],[11,"item_ty","","",236,null],[11,"attribute","","",236,null],[11,"meta_word","","",236,null],[11,"meta_list","","",236,null],[11,"meta_name_value","","",236,null],[11,"item_use","","",236,null],[11,"item_use_simple","","",236,null],[11,"item_use_simple_","","",236,null],[11,"item_use_list","","",236,null],[11,"item_use_glob","","",236,null],[0,"expand","syntax::ext","",null,null],[3,"IdentRenamer","syntax::ext::expand","A tree-folder that applies every rename in its (mutable) list\nto every identifier, including both bindings and varrefs\n(and lots of things that will turn out to be neither)",null,null],[3,"PatIdentRenamer","","A tree-folder that applies every rename in its list to\nthe idents that are in PatKind::Ident patterns. This is more narrowly\nfocused than IdentRenamer, and is needed for FnDecl,\nwhere we want to rename the args but not the fn name or the generics etc.",null,null],[3,"MacroExpander","","A tree-folder that performs macro expansion",null,null],[12,"cx","","",247,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",248,null],[12,"features","","",248,null],[12,"recursion_limit","","",248,null],[12,"trace_mac","","",248,null],[5,"expand_expr","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_item","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_item_mac","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_block","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_block_elts","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_type","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_crate","","",null,null],[5,"check_for_macros","","Check that there are no macro invocations left in the AST:",null,{"inputs":[{"name":"parsesess"},{"name":"crate"}],"output":null}],[11,"fold_ident","","",249,null],[11,"fold_mac","","",249,null],[11,"fold_pat","","",250,null],[11,"fold_mac","","",250,null],[11,"new","","",247,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_crate","","",247,null],[11,"fold_expr","","",247,null],[11,"fold_pat","","",247,null],[11,"fold_item","","",247,null],[11,"fold_item_kind","","",247,null],[11,"fold_stmt","","",247,null],[11,"fold_block","","",247,null],[11,"fold_arm","","",247,null],[11,"fold_trait_item","","",247,null],[11,"fold_impl_item","","",247,null],[11,"fold_ty","","",247,null],[11,"new_span","","",247,null],[11,"default","","",248,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",248,null],[11,"enable_asm","","",248,null],[11,"enable_log_syntax","","",248,null],[11,"enable_concat_idents","","",248,null],[11,"enable_trace_macros","","",248,null],[11,"enable_allow_internal_unstable","","",248,null],[11,"enable_custom_derive","","",248,null],[11,"enable_pushpop_unsafe","","",248,null],[0,"mtwt","syntax::ext","Machinery for hygienic macros, as described in the MTWT[1] paper.",null,null],[3,"SCTable","syntax::ext::mtwt","The SCTable contains a table of SyntaxContext_&#39;s. It\nrepresents a flattened tree structure, to avoid having\nmanaged pointers everywhere (that caused an ICE).\nthe mark_memo and rename_memo fields are side-tables\nthat ensure that adding the same mark to the same context\ngives you back the same context as before. This shouldn&#39;t\nchange the semantics--everything here is immutable--but\nit should cut down on memory use *a lot*; applying a mark\nto a tree containing 50 identifiers would otherwise generate\n50 new contexts",null,null],[4,"SyntaxContext_","","",null,null],[13,"EmptyCtxt","","",251,null],[13,"Mark","","",251,null],[13,"Rename","","flattening the name and syntaxcontext into the rename...\nHIDDEN INVARIANTS:\n1) the first name in a Rename node\ncan only be a programmer-supplied name.\n2) Every Rename node with a given Name in the\n&quot;to&quot; slot must have the same name and context\nin the &quot;from&quot; slot. In essence, they&#39;re all\npointers to a single &quot;rename&quot; event node.",251,null],[13,"IllegalCtxt","","actually, IllegalCtxt may not be necessary.",251,null],[5,"apply_mark","","Extend a syntax context with a given mark",null,{"inputs":[{"name":"mrk"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"apply_rename","","Extend a syntax context with a given rename",null,{"inputs":[{"name":"ident"},{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"apply_renames","","Apply a list of renamings to a context",null,{"inputs":[{"name":"renamelist"},{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[5,"with_sctable","","Fetch the SCTable from TLS, create one if it doesn&#39;t yet exist.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"display_sctable","","Print out an SCTable for debugging",null,{"inputs":[{"name":"sctable"}],"output":null}],[5,"clear_tables","","Clear the tables from TLD to reclaim memory.",null,{"inputs":[],"output":null}],[5,"reset_tables","","Reset the tables to their initial state",null,{"inputs":[],"output":null}],[5,"resolve","","Resolve a syntax object to a name, per MTWT.",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[5,"marksof","","Compute the marks associated with a syntax context.",null,{"inputs":[{"name":"syntaxcontext"},{"name":"name"}],"output":{"name":"vec"}}],[5,"outer_mark","","Return the outer mark for a context with a mark at the outside.\nFAILS when outside is not a mark.",null,{"inputs":[{"name":"syntaxcontext"}],"output":{"name":"mrk"}}],[6,"RenameList","","A list of ident-&gt;name renamings",null,null],[11,"clone","","",251,null],[11,"fmt","","",251,null],[11,"hash","","",251,null],[11,"decode","","",251,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",251,null],[11,"eq","","",251,null],[11,"ne","","",251,null],[0,"quote","syntax::ext","",null,null],[5,"parse_expr_panic","syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[8,"ToTokens","syntax::ext::quote::rt","",null,null],[10,"to_tokens","","",252,null],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",253,null],[10,"parse_expr","","",253,null],[10,"parse_stmt","","",253,null],[10,"parse_tts","","",253,null],[11,"to_tokens","syntax::ast","",110,null],[11,"to_tokens","collections::vec","",9,null],[11,"to_tokens","syntax::codemap","",156,null],[11,"to_tokens","core::option","",254,null],[11,"to_tokens","syntax::ast","",43,null],[11,"to_tokens","","",46,null],[11,"to_tokens","","",73,null],[11,"to_tokens","","",57,null],[11,"to_tokens","","",51,null],[11,"to_tokens","","",52,null],[11,"to_tokens","syntax::ptr","",218,null],[11,"to_tokens","syntax::ast","",71,null],[11,"to_tokens","syntax::ptr","",218,null],[11,"to_tokens","syntax::ast","",70,null],[11,"to_tokens","syntax::ext::quote::rt","",135,null],[11,"to_tokens","syntax::ptr","",218,null],[11,"to_tokens","","",218,null],[11,"to_tokens","syntax::ast","",61,null],[11,"to_tokens","","",77,null],[11,"to_tokens","syntax::ptr","",218,null],[11,"to_tokens","","",218,null],[11,"to_tokens","syntax::ext::quote::rt","",149,null],[11,"to_tokens","","",255,null],[11,"parse_item","syntax::ext::base","",236,null],[11,"parse_stmt","","",236,null],[11,"parse_expr","","",236,null],[11,"parse_tts","","",236,null],[0,"source_util","syntax::ext","",null,null],[5,"expand_line","syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it&#39;s going to behave\nunhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntax::ext","",null,null],[0,"transcribe","syntax::ext::tt","",null,null],[3,"TtReader","syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",256,null],[12,"cur_tok","","",256,null],[12,"cur_span","","",256,null],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",256,null],[12,"fatal_errs","","",256,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader&#39;s token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",256,null],[0,"macro_parser","syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there&#39;s a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it&#39;s an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we&#39;d need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It&#39;d be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)",null,null],[3,"MatcherPos","syntax::ext::tt::macro_parser","",null,null],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",257,null],[13,"MatchedNonterminal","","",257,null],[4,"ParseResult","","",null,null],[13,"Success","","",258,null],[13,"Failure","","Arm failed to match",258,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",258,null],[5,"count_names","","",null,null],[5,"initial_matcher_pos","","",null,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"box"}}],[5,"nameize","","",null,null],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)",null,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[5,"parse","","",null,null],[5,"parse_nt","","",null,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"nonterminal"}}],[6,"NamedParseResult","","",null,null],[6,"PositionalParseResult","","",null,null],[11,"clone","","",259,null],[0,"macro_rules","syntax::ext::tt","",null,null],[5,"compile","syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"extctxt"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[14,"panictry!","syntax","",null,null],[14,"register_diagnostic!","","",null,null],[14,"span_fatal!","","",null,null],[14,"span_err!","","",null,null],[14,"span_warn!","","",null,null],[14,"span_err_or_warn!","","",null,null],[14,"struct_span_fatal!","","",null,null],[14,"struct_span_err!","","",null,null],[14,"struct_span_warn!","","",null,null],[14,"struct_span_err_or_warn!","","",null,null],[14,"span_note!","","",null,null],[14,"span_help!","","",null,null],[14,"help!","","",null,null],[14,"register_diagnostics!","","",null,null],[14,"register_long_diagnostics!","","",null,null],[14,"walk_list!","","",null,null],[11,"move_flat_map","syntax::ptr","",218,null],[11,"name","","",218,null],[11,"value_str","","",218,null],[11,"meta_item_list","","",218,null],[11,"span","","",218,null],[11,"with_attrs","","",218,null],[11,"with_attrs","","",218,null],[11,"with_attrs","","",218,null],[11,"with_attrs","","",218,null],[11,"with_attrs","","",218,null],[11,"is_eof","syntax::ext::tt::transcribe","",256,null],[11,"try_next_token","","",256,null],[11,"fatal","","",256,null],[11,"err","","",256,null],[11,"emit_fatal_errors","","",256,null],[11,"peek","","",256,null]],"paths":[[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[8,"MoveMap"],[3,"Vec"],[3,"ErrorInfo"],[3,"Registry"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[4,"ColorConfig"],[8,"Emitter"],[8,"CoreEmitter"],[3,"BasicEmitter"],[3,"EmitterWriter"],[3,"JsonEmitter"],[3,"RenderedLine"],[3,"StyledString"],[4,"Style"],[4,"RenderedLineKind"],[8,"StringSource"],[3,"SnippetData"],[3,"FileInfo"],[3,"StyledBuffer"],[3,"String"],[3,"CodeSuggestion"],[3,"FatalError"],[3,"ExplicitBug"],[3,"DiagnosticBuilder"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"AbiData"],[3,"Name"],[3,"SyntaxContext"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Delimited"],[3,"SequenceRepetition"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"DeclKind"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"KleeneOp"],[4,"TokenTree"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"PathListItemKind"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[8,"NodeIdAssigner"],[6,"Stmt"],[6,"Decl"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"AttrMetaMethods"],[8,"AttributeMethods"],[8,"ThinAttributesExt"],[8,"AttributesExt"],[8,"WithAttrs"],[6,"Attribute"],[6,"MetaItem"],[6,"ThinAttributes"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[3,"SpanLabel"],[3,"Spanned"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"LineInfo"],[3,"FileLines"],[3,"MultiByteChar"],[3,"FileMap"],[3,"CodeMap"],[3,"MacroBacktrace"],[4,"ExpnFormat"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[8,"FileLoader"],[3,"MultiSpan"],[3,"ExpnId"],[3,"RealFileLoader"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"CfgDiagReal"],[8,"CfgDiag"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GatedCfgAttr"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"BoundParsingMode"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[3,"DummyResult"],[8,"AstBuilder"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[4,"SyntaxContext_"],[8,"ToTokens"],[8,"ExtParseUtils"],[4,"Option"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex["rbml"] = {"doc":"Really Bad Markup Language (rbml) is an internal serialization format of rustc.\nThis is not intended to be used by users.","items":[[3,"Doc","rbml","Common data structures",null,null],[12,"data","","",0,null],[12,"start","","",0,null],[12,"end","","",0,null],[3,"TaggedDoc","","",null,null],[12,"doc","","",1,null],[4,"EbmlEncoderTag","","",null,null],[13,"EsU8","","",2,null],[13,"EsU16","","",2,null],[13,"EsU32","","",2,null],[13,"EsU64","","",2,null],[13,"EsI8","","",2,null],[13,"EsI16","","",2,null],[13,"EsI32","","",2,null],[13,"EsI64","","",2,null],[13,"EsBool","","",2,null],[13,"EsChar","","",2,null],[13,"EsF32","","",2,null],[13,"EsF64","","",2,null],[13,"EsSub8","","",2,null],[13,"EsSub32","","",2,null],[13,"EsStr","","",2,null],[13,"EsEnum","","",2,null],[13,"EsVec","","",2,null],[13,"EsVecElt","","",2,null],[13,"EsMap","","",2,null],[13,"EsMapKey","","",2,null],[13,"EsMapVal","","",2,null],[13,"EsOpaque","","",2,null],[4,"Error","","",null,null],[13,"IntTooBig","","",3,null],[13,"InvalidTag","","",3,null],[13,"Expected","","",3,null],[13,"IoError","","",3,null],[13,"ApplicationError","","",3,null],[0,"opaque","","",null,null],[3,"Encoder","rbml::opaque","",null,null],[12,"cursor","","",4,null],[3,"Decoder","","",null,null],[12,"data","","",5,null],[11,"new","","",4,{"inputs":[{"name":"cursor"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",4,null],[11,"emit_uint","","",4,null],[11,"emit_u64","","",4,null],[11,"emit_u32","","",4,null],[11,"emit_u16","","",4,null],[11,"emit_u8","","",4,null],[11,"emit_int","","",4,null],[11,"emit_i64","","",4,null],[11,"emit_i32","","",4,null],[11,"emit_i16","","",4,null],[11,"emit_i8","","",4,null],[11,"emit_bool","","",4,null],[11,"emit_f64","","",4,null],[11,"emit_f32","","",4,null],[11,"emit_char","","",4,null],[11,"emit_str","","",4,null],[11,"emit_enum","","",4,null],[11,"emit_enum_variant","","",4,null],[11,"emit_enum_variant_arg","","",4,null],[11,"emit_enum_struct_variant","","",4,null],[11,"emit_enum_struct_variant_field","","",4,null],[11,"emit_struct","","",4,null],[11,"emit_struct_field","","",4,null],[11,"emit_tuple","","",4,null],[11,"emit_tuple_arg","","",4,null],[11,"emit_tuple_struct","","",4,null],[11,"emit_tuple_struct_arg","","",4,null],[11,"emit_option","","",4,null],[11,"emit_option_none","","",4,null],[11,"emit_option_some","","",4,null],[11,"emit_seq","","",4,null],[11,"emit_seq_elt","","",4,null],[11,"emit_map","","",4,null],[11,"emit_map_elt_key","","",4,null],[11,"emit_map_elt_val","","",4,null],[11,"position","","",4,null],[11,"from_rbml","","",4,{"inputs":[{"name":"encoder"}],"output":{"name":"encoder"}}],[11,"new","","",5,null],[11,"position","","",5,null],[11,"advance","","",5,null],[11,"read_nil","","",5,null],[11,"read_u64","","",5,null],[11,"read_u32","","",5,null],[11,"read_u16","","",5,null],[11,"read_u8","","",5,null],[11,"read_uint","","",5,null],[11,"read_i64","","",5,null],[11,"read_i32","","",5,null],[11,"read_i16","","",5,null],[11,"read_i8","","",5,null],[11,"read_int","","",5,null],[11,"read_bool","","",5,null],[11,"read_f64","","",5,null],[11,"read_f32","","",5,null],[11,"read_char","","",5,null],[11,"read_str","","",5,null],[11,"read_enum","","",5,null],[11,"read_enum_variant","","",5,null],[11,"read_enum_variant_arg","","",5,null],[11,"read_enum_struct_variant","","",5,null],[11,"read_enum_struct_variant_field","","",5,null],[11,"read_struct","","",5,null],[11,"read_struct_field","","",5,null],[11,"read_tuple","","",5,null],[11,"read_tuple_arg","","",5,null],[11,"read_tuple_struct","","",5,null],[11,"read_tuple_struct_arg","","",5,null],[11,"read_option","","",5,null],[11,"read_seq","","",5,null],[11,"read_seq_elt","","",5,null],[11,"read_map","","",5,null],[11,"read_map_elt_key","","",5,null],[11,"read_map_elt_val","","",5,null],[11,"error","","",5,null],[0,"leb128","rbml","",null,null],[5,"write_to_vec","rbml::leb128","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u8"}],"output":null}],[5,"write_unsigned_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"u64"}],"output":{"name":"usize"}}],[5,"read_unsigned_leb128","","",null,null],[5,"write_signed_leb128","","",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"i64"}],"output":{"name":"usize"}}],[5,"read_signed_leb128","","",null,null],[0,"reader","rbml","",null,null],[3,"Res","rbml::reader","",null,null],[12,"val","","",6,null],[12,"next","","",6,null],[3,"DocsIterator","","",null,null],[3,"TaggedDocsIterator","","",null,null],[3,"Decoder","","",null,null],[5,"tag_at","","",null,null],[5,"vuint_at","","",null,null],[5,"tag_len_at","","",null,null],[5,"doc_at","","",null,null],[5,"maybe_get_doc","","",null,{"inputs":[{"name":"doc"},{"name":"usize"}],"output":{"name":"option"}}],[5,"get_doc","","",null,{"inputs":[{"name":"doc"},{"name":"usize"}],"output":{"name":"doc"}}],[5,"docs","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"docsiterator"}}],[5,"tagged_docs","","",null,{"inputs":[{"name":"doc"},{"name":"usize"}],"output":{"name":"taggeddocsiterator"}}],[5,"with_doc_data","","",null,{"inputs":[{"name":"doc"},{"name":"f"}],"output":{"name":"t"}}],[5,"doc_as_u8","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"u8"}}],[5,"doc_as_u64","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"u64"}}],[5,"doc_as_u16","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"u16"}}],[5,"doc_as_u32","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"u32"}}],[5,"doc_as_i8","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"i8"}}],[5,"doc_as_i16","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"i16"}}],[5,"doc_as_i32","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"i32"}}],[5,"doc_as_i64","","",null,{"inputs":[{"name":"doc"}],"output":{"name":"i64"}}],[6,"DecodeResult","","",null,null],[11,"clone","","",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"new","","",9,{"inputs":[{"name":"doc"}],"output":{"name":"decoder"}}],[11,"read_opaque","","",9,null],[11,"position","","",9,null],[11,"advance","","",9,null],[11,"read_nil","","",9,null],[11,"read_u64","","",9,null],[11,"read_u32","","",9,null],[11,"read_u16","","",9,null],[11,"read_u8","","",9,null],[11,"read_uint","","",9,null],[11,"read_i64","","",9,null],[11,"read_i32","","",9,null],[11,"read_i16","","",9,null],[11,"read_i8","","",9,null],[11,"read_int","","",9,null],[11,"read_bool","","",9,null],[11,"read_f64","","",9,null],[11,"read_f32","","",9,null],[11,"read_char","","",9,null],[11,"read_str","","",9,null],[11,"read_enum","","",9,null],[11,"read_enum_variant","","",9,null],[11,"read_enum_variant_arg","","",9,null],[11,"read_enum_struct_variant","","",9,null],[11,"read_enum_struct_variant_field","","",9,null],[11,"read_struct","","",9,null],[11,"read_struct_field","","",9,null],[11,"read_tuple","","",9,null],[11,"read_tuple_arg","","",9,null],[11,"read_tuple_struct","","",9,null],[11,"read_tuple_struct_arg","","",9,null],[11,"read_option","","",9,null],[11,"read_seq","","",9,null],[11,"read_seq_elt","","",9,null],[11,"read_map","","",9,null],[11,"read_map_elt_key","","",9,null],[11,"read_map_elt_val","","",9,null],[11,"error","","",9,null],[0,"writer","rbml","",null,null],[3,"Encoder","rbml::writer","",null,null],[12,"writer","","",10,null],[5,"write_vuint","","",null,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[6,"EncodeResult","","",null,null],[11,"new","","",10,{"inputs":[{"name":"cursor"}],"output":{"name":"encoder"}}],[11,"start_tag","","",10,null],[11,"end_tag","","",10,null],[11,"wr_tag","","",10,null],[11,"wr_tagged_bytes","","",10,null],[11,"wr_tagged_u64","","",10,null],[11,"wr_tagged_u32","","",10,null],[11,"wr_tagged_u16","","",10,null],[11,"wr_tagged_u8","","",10,null],[11,"wr_tagged_i64","","",10,null],[11,"wr_tagged_i32","","",10,null],[11,"wr_tagged_i16","","",10,null],[11,"wr_tagged_i8","","",10,null],[11,"wr_tagged_str","","",10,null],[11,"wr_bytes","","",10,null],[11,"wr_str","","",10,null],[11,"mark_stable_position","","Returns the current position while marking it stable, i.e.\ngenerated bytes so far wouldn&#39;t be affected by relaxation.",10,null],[11,"emit_opaque","","",10,null],[11,"emit_nil","","",10,null],[11,"emit_uint","","",10,null],[11,"emit_u64","","",10,null],[11,"emit_u32","","",10,null],[11,"emit_u16","","",10,null],[11,"emit_u8","","",10,null],[11,"emit_int","","",10,null],[11,"emit_i64","","",10,null],[11,"emit_i32","","",10,null],[11,"emit_i16","","",10,null],[11,"emit_i8","","",10,null],[11,"emit_bool","","",10,null],[11,"emit_f64","","",10,null],[11,"emit_f32","","",10,null],[11,"emit_char","","",10,null],[11,"emit_str","","",10,null],[11,"emit_enum","","",10,null],[11,"emit_enum_variant","","",10,null],[11,"emit_enum_variant_arg","","",10,null],[11,"emit_enum_struct_variant","","",10,null],[11,"emit_enum_struct_variant_field","","",10,null],[11,"emit_struct","","",10,null],[11,"emit_struct_field","","",10,null],[11,"emit_tuple","","",10,null],[11,"emit_tuple_arg","","",10,null],[11,"emit_tuple_struct","","",10,null],[11,"emit_tuple_struct_arg","","",10,null],[11,"emit_option","","",10,null],[11,"emit_option_none","","",10,null],[11,"emit_option_some","","",10,null],[11,"emit_seq","","",10,null],[11,"emit_seq_elt","","",10,null],[11,"emit_map","","",10,null],[11,"emit_map_elt_key","","",10,null],[11,"emit_map_elt_val","","",10,null],[11,"clone","rbml","",0,null],[11,"new","","",0,null],[11,"get","","",0,null],[11,"is_empty","","",0,null],[11,"as_str_slice","","",0,null],[11,"as_str","","",0,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null]],"paths":[[3,"Doc"],[3,"TaggedDoc"],[4,"EbmlEncoderTag"],[4,"Error"],[3,"Encoder"],[3,"Decoder"],[3,"Res"],[3,"DocsIterator"],[3,"TaggedDocsIterator"],[3,"Decoder"],[3,"Encoder"]]};
searchIndex["rustc_data_structures"] = {"doc":"Various data structures used by the Rust compiler. The intention\nis that code in here should be not be *specific* to rustc, so that\nit can be easily unit tested and so forth.","items":[[0,"bitvec","rustc_data_structures","",null,null],[3,"BitVector","rustc_data_structures::bitvec","A very simple BitVector type.",null,null],[3,"BitVectorIter","","",null,null],[3,"BitMatrix","","A &quot;bit matrix&quot; is basically a square matrix of booleans\nrepresented as one gigantic bitvector. In other words, it is as if\nyou have N bitvectors, each of length N. Note that `elements` here is `N`/",null,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"bitvector"}}],[11,"contains","","",0,null],[11,"insert","","Returns true if the bit has changed.",0,null],[11,"insert_all","","",0,null],[11,"grow","","",0,null],[11,"iter","","Iterates over indexes of set bits in a sorted order",0,null],[11,"next","","",1,null],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"bitvector"}}],[11,"clone","","",2,null],[11,"new","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"bitmatrix"}}],[11,"add","","",2,null],[11,"contains","","Do the bits from `source` contain `target`?",2,null],[11,"intersection","","Returns those indices that are reachable from both `a` and\n`b`. This is an O(n) operation where `n` is the number of\nelements (somewhat independent from the actual size of the\nintersection, in particular).",2,null],[11,"merge","","Add the bits from `read` to the bits from `write`,\nreturn true if anything changed.",2,null],[0,"graph","rustc_data_structures","A graph module for use in dataflow, region resolution, and elsewhere.",null,null],[3,"Graph","rustc_data_structures::graph","",null,null],[3,"Node","","",null,null],[12,"data","","",3,null],[3,"Edge","","",null,null],[12,"data","","",4,null],[3,"NodeIndex","","",null,null],[12,"0","","",5,null],[3,"EdgeIndex","","",null,null],[12,"0","","",6,null],[3,"Direction","","",null,null],[3,"AdjacentEdges","","",null,null],[3,"AdjacentTargets","","",null,null],[3,"AdjacentSources","","",null,null],[3,"DepthFirstTraversal","","",null,null],[5,"each_edge_index","","",null,{"inputs":[{"name":"edgeindex"},{"name":"f"}],"output":null}],[17,"INVALID_EDGE_INDEX","","",null,null],[17,"OUTGOING","","",null,null],[17,"INCOMING","","",null,null],[11,"reverse","","",3,null],[11,"reverse","","",4,null],[11,"fmt","","",4,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",5,null],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",6,null],[11,"new","","",8,{"inputs":[],"output":{"name":"graph"}}],[11,"all_nodes","","",8,null],[11,"len_nodes","","",8,null],[11,"all_edges","","",8,null],[11,"len_edges","","",8,null],[11,"next_node_index","","",8,null],[11,"add_node","","",8,null],[11,"mut_node_data","","",8,null],[11,"node_data","","",8,null],[11,"node","","",8,null],[11,"next_edge_index","","",8,null],[11,"add_edge","","",8,null],[11,"mut_edge_data","","",8,null],[11,"edge_data","","",8,null],[11,"edge","","",8,null],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",8,null],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",8,null],[11,"each_node","","Iterates over all edges defined in the graph.",8,null],[11,"each_edge","","Iterates over all edges defined in the graph",8,null],[11,"outgoing_edges","","",8,null],[11,"incoming_edges","","",8,null],[11,"adjacent_edges","","",8,null],[11,"successor_nodes","","",8,null],[11,"predecessor_nodes","","",8,null],[11,"iterate_until_fixed_point","","",8,null],[11,"depth_traverse","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"source","","",4,null],[11,"target","","",4,null],[11,"source_or_target","","",4,null],[0,"ivar","rustc_data_structures","",null,null],[3,"Ivar","rustc_data_structures::ivar","A write-once variable. When constructed, it is empty, and\ncan only be set once.",null,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"new","","",13,{"inputs":[],"output":{"name":"ivar"}}],[11,"get","","",13,null],[11,"fulfill","","",13,null],[11,"is_fulfilled","","",13,null],[11,"unwrap","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[0,"obligation_forest","rustc_data_structures","The `ObligationForest` is a utility data structure used in trait\nmatching to track the set of outstanding obligations (those not\nyet resolved to success or error). It also tracks the &quot;backtrace&quot;\nof each pending obligation (why we are trying to figure this out\nin the first place). See README.md for a general overview of how\nto use this class.",null,null],[3,"ObligationForest","rustc_data_structures::obligation_forest","",null,null],[3,"Snapshot","","",null,null],[3,"Outcome","","",null,null],[12,"completed","","Obligations that were completely evaluated, including all\n(transitive) subobligations.",14,null],[12,"errors","","Backtrace of obligations that were found to be in error.",14,null],[12,"stalled","","If true, then we saw no successful obligations, which means\nthere is no point in further iteration. This is based on the\nassumption that when trait matching returns `Err` or\n`Ok(None)`, those results do not affect environmental\ninference state. (Note that if we invoke `process_obligations`\nwith no pending obligations, stalled will be true.)",14,null],[3,"Error","","",null,null],[12,"error","","",15,null],[12,"backtrace","","",15,null],[8,"ForestObligation","","",null,null],[16,"Predicate","","",16,null],[10,"as_predicate","","",16,null],[8,"ObligationProcessor","","",null,null],[16,"Obligation","","",17,null],[16,"Error","","",17,null],[10,"process_obligation","","",17,null],[10,"process_backedge","","",17,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"obligationforest"}}],[11,"len","","Return the total number of nodes in the forest that have not\nyet been fully resolved.",18,null],[11,"start_snapshot","","",18,null],[11,"commit_snapshot","","",18,null],[11,"rollback_snapshot","","",18,null],[11,"in_snapshot","","",18,null],[11,"register_obligation","","Registers an obligation",18,null],[11,"to_errors","","Convert all remaining obligations to the given error.",18,null],[11,"pending_obligations","","Returns the set of obligations that are in a pending state.",18,null],[11,"process_obligations","","Perform a pass through the obligation list. This must\nbe called in a loop until `outcome.stalled` is false.",18,null],[0,"snapshot_vec","rustc_data_structures","A utility class for implementing &quot;snapshottable&quot; things; a snapshottable data structure permits\nyou to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\nto rollback to the start of the snapshot or commit those changes.",null,null],[3,"SnapshotVec","rustc_data_structures::snapshot_vec","",null,null],[3,"Snapshot","","",null,null],[4,"UndoLog","","",null,null],[13,"OpenSnapshot","","Indicates where a snapshot started.",19,null],[13,"CommittedSnapshot","","Indicates a snapshot that has been committed.",19,null],[13,"NewElem","","New variable with given index was created.",19,null],[13,"SetElem","","Variable with given index was changed *from* the given value.",19,null],[13,"Other","","Extensible set of actions",19,null],[8,"SnapshotVecDelegate","","",null,null],[16,"Value","","",20,null],[16,"Undo","","",20,null],[10,"reverse","","",20,{"inputs":[{"name":"vec"},{"name":"undo"}],"output":null}],[11,"new","","",21,{"inputs":[],"output":{"name":"snapshotvec"}}],[11,"record","","",21,null],[11,"len","","",21,null],[11,"push","","",21,null],[11,"get","","",21,null],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",21,null],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",21,null],[11,"start_snapshot","","",21,null],[11,"actions_since_snapshot","","",21,null],[11,"rollback_to","","",21,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",21,null],[11,"deref","","",21,null],[11,"deref_mut","","",21,null],[11,"index","","",21,null],[11,"index_mut","","",21,null],[11,"extend","","",21,null],[0,"transitive_relation","rustc_data_structures","",null,null],[3,"TransitiveRelation","rustc_data_structures::transitive_relation","",null,null],[11,"clone","","",22,null],[11,"new","","",22,{"inputs":[],"output":{"name":"transitiverelation"}}],[11,"add","","Indicate that `a &lt; b` (where `&lt;` is this relation)",22,null],[11,"contains","","Check whether `a &lt; target` (transitively)",22,null],[11,"postdom_upper_bound","","Picks what I am referring to as the &quot;postdominating&quot;\nupper-bound for `a` and `b`. This is usually the least upper\nbound, but in cases where there is no single least upper\nbound, it is the &quot;mutual immediate postdominator&quot;, if you\nimagine a graph where `a &lt; b` means `a -&gt; b`.",22,null],[11,"minimal_upper_bounds","","Returns the set of bounds `X` such that:",22,null],[0,"unify","rustc_data_structures","",null,null],[3,"VarValue","rustc_data_structures::unify","Value of a unification key. We implement Tarjan&#39;s union-find\nalgorithm: when two keys are unified, one of them is converted\ninto a &quot;redirect&quot; pointing at the other. These redirects form a\nDAG: the roots of the DAG (nodes that are not redirected) are each\nassociated with a value of type `V` and a rank. The rank is used\nto keep the DAG relatively balanced, which helps keep the running\ntime of the algorithm under control. For more information, see\n&lt;http://en.wikipedia.org/wiki/Disjoint-set_data_structure&gt;.",null,null],[3,"UnificationTable","","Table of unification keys and their values.",null,null],[3,"Snapshot","","At any time, users may snapshot a unification table.  The changes\nmade during the snapshot may either be *committed* or *rolled back*.",null,null],[8,"UnifyKey","","This trait is implemented by any type that can serve as a type\nvariable. We call such variables *unification keys*. For example,\nthis trait is implemented by `IntVid`, which represents integral\nvariables.",null,null],[16,"Value","","",23,null],[10,"index","","",23,null],[10,"from_index","","",23,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"tag","","",23,{"inputs":[{"name":"option"}],"output":{"name":"str"}}],[8,"Combine","","This trait is implemented for unify values that can be\ncombined. This relation should be a monoid.",null,null],[10,"combine","","",24,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"new","","",26,{"inputs":[],"output":{"name":"unificationtable"}}],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a &quot;LIFO&quot; (stack) order.",26,null],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",26,null],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",26,null],[11,"new_key","","",26,null],[11,"union","","",26,null],[11,"find","","",26,null],[11,"find_value","","",26,null],[11,"unioned","","",26,null],[11,"unify_var_var","","",26,null],[11,"unify_var_value","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",26,null],[11,"has_value","","",26,null],[11,"probe","","",26,null],[11,"unsolved_variables","","",26,null],[0,"fnv","rustc_data_structures","",null,null],[3,"FnvHasher","rustc_data_structures::fnv","A speedy hash algorithm for node ids and def ids. The hashmap in\nlibcollections by default uses SipHash which isn&#39;t quite as speedy as we\nwant. In the compiler we&#39;re not really worried about DOS attempts, so we\njust default to a non-cryptographic hash.",null,null],[5,"FnvHashMap","","",null,{"inputs":[],"output":{"name":"fnvhashmap"}}],[5,"FnvHashSet","","",null,{"inputs":[],"output":{"name":"fnvhashset"}}],[6,"FnvHashMap","","",null,null],[6,"FnvHashSet","","",null,null],[11,"default","","",27,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"write","","",27,null],[11,"finish","","",27,null],[0,"tuple_slice","rustc_data_structures","",null,null],[8,"TupleSlice","rustc_data_structures::tuple_slice","Allows to view uniform tuples as slices",null,null],[10,"as_slice","","",28,null],[10,"as_mut_slice","","",28,null],[0,"veccell","rustc_data_structures","",null,null],[3,"VecCell","rustc_data_structures::veccell","",null,null],[11,"with_capacity","","",29,{"inputs":[{"name":"usize"}],"output":{"name":"veccell"}}],[11,"push","","",29,null],[11,"swap","","",29,null]],"paths":[[3,"BitVector"],[3,"BitVectorIter"],[3,"BitMatrix"],[3,"Node"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"AdjacentEdges"],[3,"AdjacentTargets"],[3,"AdjacentSources"],[3,"DepthFirstTraversal"],[3,"Ivar"],[3,"Outcome"],[3,"Error"],[8,"ForestObligation"],[8,"ObligationProcessor"],[3,"ObligationForest"],[4,"UndoLog"],[8,"SnapshotVecDelegate"],[3,"SnapshotVec"],[3,"TransitiveRelation"],[8,"UnifyKey"],[8,"Combine"],[3,"VarValue"],[3,"UnificationTable"],[3,"FnvHasher"],[8,"TupleSlice"],[3,"VecCell"]]};
searchIndex["serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::enum_set","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"hex","serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",16,null],[13,"InvalidHexLength","","The input had an invalid length",16,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",17,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",18,null],[11,"fmt","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"description","","",16,null],[0,"json","serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",19,null],[13,"U64","","",19,null],[13,"F64","","",19,null],[13,"String","","",19,null],[13,"Boolean","","",19,null],[13,"Array","","",19,null],[13,"Object","","",19,null],[13,"Null","","",19,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",20,null],[13,"InvalidNumber","","",20,null],[13,"EOFWhileParsingObject","","",20,null],[13,"EOFWhileParsingArray","","",20,null],[13,"EOFWhileParsingValue","","",20,null],[13,"EOFWhileParsingString","","",20,null],[13,"KeyMustBeAString","","",20,null],[13,"ExpectedColon","","",20,null],[13,"TrailingCharacters","","",20,null],[13,"TrailingComma","","",20,null],[13,"InvalidEscape","","",20,null],[13,"InvalidUnicodeCodePoint","","",20,null],[13,"LoneLeadingSurrogateInHexEscape","","",20,null],[13,"UnexpectedEndOfHexEscape","","",20,null],[13,"UnrecognizedHex","","",20,null],[13,"NotFourDigit","","",20,null],[13,"NotUtf8","","",20,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",21,null],[13,"IoError","","",21,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",22,null],[13,"ExpectedError","","",22,null],[13,"MissingFieldError","","",22,null],[13,"UnknownVariantError","","",22,null],[13,"ApplicationError","","",22,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",23,null],[13,"BadHashmapKey","","",23,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",24,null],[13,"ObjectEnd","","",24,null],[13,"ArrayStart","","",24,null],[13,"ArrayEnd","","",24,null],[13,"BooleanValue","","",24,null],[13,"I64Value","","",24,null],[13,"U64Value","","",24,null],[13,"F64Value","","",24,null],[13,"StringValue","","",24,null],[13,"NullValue","","",24,null],[13,"Error","","",24,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, StackElement::Key(&quot;foo&quot;), StackElement::Key(&quot;bar&quot;),\nStackElement::Index(3) and StackElement::Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",25,null],[13,"Key","","",25,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[5,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",null,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[5,"from_str","","Decodes a json value from a string",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",26,null],[11,"fmt","","",19,null],[11,"partial_cmp","","",19,null],[11,"lt","","",19,null],[11,"le","","",19,null],[11,"gt","","",19,null],[11,"ge","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",23,null],[11,"clone","","",23,null],[11,"fmt","","",20,null],[11,"fmt","","",21,null],[11,"fmt","","",22,null],[11,"description","","",22,null],[11,"fmt","","",23,null],[11,"description","","",23,null],[11,"from","","",23,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",27,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"emit_nil","","",27,null],[11,"emit_uint","","",27,null],[11,"emit_u64","","",27,null],[11,"emit_u32","","",27,null],[11,"emit_u16","","",27,null],[11,"emit_u8","","",27,null],[11,"emit_int","","",27,null],[11,"emit_i64","","",27,null],[11,"emit_i32","","",27,null],[11,"emit_i16","","",27,null],[11,"emit_i8","","",27,null],[11,"emit_bool","","",27,null],[11,"emit_f64","","",27,null],[11,"emit_f32","","",27,null],[11,"emit_char","","",27,null],[11,"emit_str","","",27,null],[11,"emit_enum","","",27,null],[11,"emit_enum_variant","","",27,null],[11,"emit_enum_variant_arg","","",27,null],[11,"emit_enum_struct_variant","","",27,null],[11,"emit_enum_struct_variant_field","","",27,null],[11,"emit_struct","","",27,null],[11,"emit_struct_field","","",27,null],[11,"emit_tuple","","",27,null],[11,"emit_tuple_arg","","",27,null],[11,"emit_tuple_struct","","",27,null],[11,"emit_tuple_struct_arg","","",27,null],[11,"emit_option","","",27,null],[11,"emit_option_none","","",27,null],[11,"emit_option_some","","",27,null],[11,"emit_seq","","",27,null],[11,"emit_seq_elt","","",27,null],[11,"emit_map","","",27,null],[11,"emit_map_elt_key","","",27,null],[11,"emit_map_elt_val","","",27,null],[11,"new","","Creates a new encoder whose output will be written to the specified writer",28,{"inputs":[{"name":"write"}],"output":{"name":"prettyencoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",28,null],[11,"emit_nil","","",28,null],[11,"emit_uint","","",28,null],[11,"emit_u64","","",28,null],[11,"emit_u32","","",28,null],[11,"emit_u16","","",28,null],[11,"emit_u8","","",28,null],[11,"emit_int","","",28,null],[11,"emit_i64","","",28,null],[11,"emit_i32","","",28,null],[11,"emit_i16","","",28,null],[11,"emit_i8","","",28,null],[11,"emit_bool","","",28,null],[11,"emit_f64","","",28,null],[11,"emit_f32","","",28,null],[11,"emit_char","","",28,null],[11,"emit_str","","",28,null],[11,"emit_enum","","",28,null],[11,"emit_enum_variant","","",28,null],[11,"emit_enum_variant_arg","","",28,null],[11,"emit_enum_struct_variant","","",28,null],[11,"emit_enum_struct_variant_field","","",28,null],[11,"emit_struct","","",28,null],[11,"emit_struct_field","","",28,null],[11,"emit_tuple","","",28,null],[11,"emit_tuple_arg","","",28,null],[11,"emit_tuple_struct","","",28,null],[11,"emit_tuple_struct_arg","","",28,null],[11,"emit_option","","",28,null],[11,"emit_option_none","","",28,null],[11,"emit_option_some","","",28,null],[11,"emit_seq","","",28,null],[11,"emit_seq_elt","","",28,null],[11,"emit_map","","",28,null],[11,"emit_map_elt_key","","",28,null],[11,"emit_map_elt_val","","",28,null],[11,"encode","","",19,null],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",19,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",19,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",19,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",19,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",19,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",19,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",19,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",19,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",19,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",19,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",19,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",19,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",19,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",19,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",19,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",19,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",19,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",19,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",19,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",19,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",19,null],[11,"index","","",19,null],[11,"index","","",19,null],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"fmt","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"new","","",29,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",29,null],[11,"is_empty","","Returns true if the stack is empty.",29,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",29,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",29,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",29,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",29,null],[11,"top","","Returns the top-most element (if any).",29,null],[11,"next","","",30,null],[11,"new","","Creates the JSON parser.",30,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",30,null],[11,"new","","Create a JSON Builder.",31,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",31,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",32,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",32,null],[11,"read_uint","","",32,null],[11,"read_u8","","",32,null],[11,"read_u16","","",32,null],[11,"read_u32","","",32,null],[11,"read_u64","","",32,null],[11,"read_int","","",32,null],[11,"read_i8","","",32,null],[11,"read_i16","","",32,null],[11,"read_i32","","",32,null],[11,"read_i64","","",32,null],[11,"read_f32","","",32,null],[11,"read_f64","","",32,null],[11,"read_bool","","",32,null],[11,"read_char","","",32,null],[11,"read_str","","",32,null],[11,"read_enum","","",32,null],[11,"read_enum_variant","","",32,null],[11,"read_enum_variant_arg","","",32,null],[11,"read_enum_struct_variant","","",32,null],[11,"read_enum_struct_variant_field","","",32,null],[11,"read_struct","","",32,null],[11,"read_struct_field","","",32,null],[11,"read_tuple","","",32,null],[11,"read_tuple_arg","","",32,null],[11,"read_tuple_struct","","",32,null],[11,"read_tuple_struct_arg","","",32,null],[11,"read_option","","",32,null],[11,"read_seq","","",32,null],[11,"read_seq_elt","","",32,null],[11,"read_map","","",32,null],[11,"read_map_elt_key","","",32,null],[11,"read_map_elt_val","","",32,null],[11,"error","","",32,null],[11,"to_json","","",19,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",3,null],[11,"to_json","collections::btree::map","",11,null],[11,"to_json","std::collections::hash::map","",14,null],[11,"to_json","core::option","",4,null],[11,"fmt","serialize::json","Encodes a json value into a string",19,null],[11,"fmt","","Encodes a json value into a string",33,null],[11,"fmt","","Encodes a json value into a string",34,null],[11,"indent","","Set the indentation level for the emitted JSON",35,null],[11,"fmt","","Encodes a json value into a string",35,null],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","serialize","",null,null],[16,"Error","","",36,null],[10,"read_nil","","",36,null],[10,"read_uint","","",36,null],[10,"read_u64","","",36,null],[10,"read_u32","","",36,null],[10,"read_u16","","",36,null],[10,"read_u8","","",36,null],[10,"read_int","","",36,null],[10,"read_i64","","",36,null],[10,"read_i32","","",36,null],[10,"read_i16","","",36,null],[10,"read_i8","","",36,null],[10,"read_bool","","",36,null],[10,"read_f64","","",36,null],[10,"read_f32","","",36,null],[10,"read_char","","",36,null],[10,"read_str","","",36,null],[10,"read_enum","","",36,null],[10,"read_enum_variant","","",36,null],[10,"read_enum_variant_arg","","",36,null],[10,"read_enum_struct_variant","","",36,null],[10,"read_enum_struct_variant_field","","",36,null],[10,"read_struct","","",36,null],[10,"read_struct_field","","",36,null],[10,"read_tuple","","",36,null],[10,"read_tuple_arg","","",36,null],[10,"read_tuple_struct","","",36,null],[10,"read_tuple_struct_arg","","",36,null],[10,"read_option","","",36,null],[10,"read_seq","","",36,null],[10,"read_seq_elt","","",36,null],[10,"read_map","","",36,null],[10,"read_map_elt_key","","",36,null],[10,"read_map_elt_val","","",36,null],[10,"error","","",36,null],[8,"Encoder","","",null,null],[16,"Error","","",37,null],[10,"emit_nil","","",37,null],[10,"emit_uint","","",37,null],[10,"emit_u64","","",37,null],[10,"emit_u32","","",37,null],[10,"emit_u16","","",37,null],[10,"emit_u8","","",37,null],[10,"emit_int","","",37,null],[10,"emit_i64","","",37,null],[10,"emit_i32","","",37,null],[10,"emit_i16","","",37,null],[10,"emit_i8","","",37,null],[10,"emit_bool","","",37,null],[10,"emit_f64","","",37,null],[10,"emit_f32","","",37,null],[10,"emit_char","","",37,null],[10,"emit_str","","",37,null],[10,"emit_enum","","",37,null],[10,"emit_enum_variant","","",37,null],[10,"emit_enum_variant_arg","","",37,null],[10,"emit_enum_struct_variant","","",37,null],[10,"emit_enum_struct_variant_field","","",37,null],[10,"emit_struct","","",37,null],[10,"emit_struct_field","","",37,null],[10,"emit_tuple","","",37,null],[10,"emit_tuple_arg","","",37,null],[10,"emit_tuple_struct","","",37,null],[10,"emit_tuple_struct_arg","","",37,null],[10,"emit_option","","",37,null],[10,"emit_option_none","","",37,null],[10,"emit_option_some","","",37,null],[10,"emit_seq","","",37,null],[10,"emit_seq_elt","","",37,null],[10,"emit_map","","",37,null],[10,"emit_map_elt_key","","",37,null],[10,"emit_map_elt_val","","",37,null],[8,"Decodable","","",null,null],[10,"decode","","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",39,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",40,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",41,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"EnumSet"],[3,"HashMap"],[3,"HashSet"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["test"] = {"doc":"Support code for rustc&#39;s built in unit-test and micro-benchmarking\nframework.","items":[[3,"Bencher","test","Manager of the benchmarking runs.",null,null],[12,"bytes","","",0,null],[3,"TestDesc","","",null,null],[12,"name","","",1,null],[12,"ignore","","",1,null],[12,"should_panic","","",1,null],[3,"TestPaths","","",null,null],[12,"file","","",2,null],[12,"base","","",2,null],[12,"relative_dir","","",2,null],[3,"TestDescAndFn","","",null,null],[12,"desc","","",3,null],[12,"testfn","","",3,null],[3,"Metric","","",null,null],[3,"MetricMap","","",null,null],[3,"TestOpts","","",null,null],[12,"filter","","",4,null],[12,"run_ignored","","",4,null],[12,"run_tests","","",4,null],[12,"bench_benchmarks","","",4,null],[12,"logfile","","",4,null],[12,"nocapture","","",4,null],[12,"color","","",4,null],[12,"quiet","","",4,null],[3,"BenchSamples","","",null,null],[4,"TestName","","",null,null],[13,"StaticTestName","","",5,null],[13,"DynTestName","","",5,null],[4,"TestFn","","",null,null],[13,"StaticTestFn","","",6,null],[13,"StaticBenchFn","","",6,null],[13,"StaticMetricFn","","",6,null],[13,"DynTestFn","","",6,null],[13,"DynMetricFn","","",6,null],[13,"DynBenchFn","","",6,null],[4,"ShouldPanic","","",null,null],[13,"No","","",7,null],[13,"Yes","","",7,null],[13,"YesWithMessage","","",7,null],[4,"ColorConfig","","",null,null],[13,"AutoColor","","",8,null],[13,"AlwaysColor","","",8,null],[13,"NeverColor","","",8,null],[4,"TestResult","","",null,null],[13,"TrOk","","",9,null],[13,"TrFailed","","",9,null],[13,"TrIgnored","","",9,null],[13,"TrMetrics","","",9,null],[13,"TrBench","","",9,null],[5,"test_main","","",null,null],[5,"test_main_static","","",null,null],[5,"parse_opts","","",null,null],[5,"fmt_bench_samples","","",null,{"inputs":[{"name":"benchsamples"}],"output":{"name":"string"}}],[5,"run_tests_console","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"result"}}],[5,"filter_tests","","",null,{"inputs":[{"name":"testopts"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"convert_benchmarks_to_tests","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"run_test","","",null,{"inputs":[{"name":"testopts"},{"name":"bool"},{"name":"testdescandfn"},{"name":"sender"}],"output":null}],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to\npretend to use outputs to assist in avoiding dead-code\nelimination.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"test","","",null,null],[0,"stats","","",null,null],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set.",null,null],[12,"sum","","",10,null],[12,"min","","",10,null],[12,"max","","",10,null],[12,"mean","","",10,null],[12,"median","","",10,null],[12,"var","","",10,null],[12,"std_dev","","",10,null],[12,"std_dev_pct","","",10,null],[12,"median_abs_dev","","",10,null],[12,"median_abs_dev_pct","","",10,null],[12,"quartiles","","",10,null],[12,"iqr","","",10,null],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile\nand below the `pct` percentile with those percentiles themselves. This is a\nway of minimizing the effect of outliers, at the cost of biasing the sample.\nIt differs from trimming in that it does not change the number of samples,\njust changes the values of those that are outliers.",null,null],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples.",null,null],[10,"sum","","Sum of the samples.",11,null],[10,"min","","Minimum value of the samples.",11,null],[10,"max","","Maximum value of the samples.",11,null],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",11,null],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half.\nEqual to `self.percentile(50.0)`.",11,null],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each\nsample from the sample mean. Note that this calculates the _sample variance_ rather than the\npopulation variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n`\nbias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\nthan `n`.",11,null],[10,"std_dev","","Standard deviation: the square root of the sample variance.",11,null],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",11,null],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a\nrobust (distribution-agnostic) estimator of sample variability. Use this in preference to\n`std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled\nby the constant `1.4826` to allow its use as a consistent estimator for the standard\ndeviation.",11,null],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",11,null],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example,\npercentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\nsatisfy `s &lt;= v`.",11,null],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each\nwith 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\nfunction may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\nis otherwise equivalent.",11,null],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\npercentile (3rd quartile). See `quartiles`.",11,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"new","","Construct a new summary of a sample set.",10,null],[0,"bench","test","",null,null],[5,"benchmark","test::bench","",null,{"inputs":[{"name":"f"}],"output":{"name":"benchsamples"}}],[5,"run_once","","",null,{"inputs":[{"name":"f"}],"output":null}],[6,"OptRes","test","Result of parsing the options.",null,null],[6,"MonitorMsg","","",null,null],[8,"TDynBenchFn","","Represents a benchmark function.",null,null],[10,"run","","",12,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",0,null],[11,"hash","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"new","","",13,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"metric"}}],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"clone","","",8,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"new","","",14,{"inputs":[],"output":{"name":"metricmap"}}],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value\nmust be non-negative. The `noise` indicates the uncertainty of the\nmetric, which doubles as the &quot;noise range&quot; of acceptable\npairwise-regressions on this named value, when comparing from one\nmetric to the next using `compare_to_old`.",14,null],[11,"fmt_metrics","","",14,null],[11,"iter","","Callback for benchmark functions to run in their body.",0,null],[11,"ns_elapsed","","",0,null],[11,"ns_per_iter","","",0,null],[11,"bench_n","","",0,null],[11,"auto_bench","","",0,null]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestPaths"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"TestFn"],[4,"ShouldPanic"],[4,"ColorConfig"],[4,"TestResult"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[3,"Metric"],[3,"MetricMap"],[3,"BenchSamples"]]};
searchIndex["log"] = {"doc":"Utilities for program-wide and customizable logging","items":[[3,"LogLevel","log","Wraps the log level with fmt implementations.",null,null],[12,"0","","",0,null],[3,"LogRecord","","A LogRecord is created by the logging macros, and passed as the only\nargument to Loggers.",null,null],[12,"module_path","","The module path of where the LogRecord originated.",1,null],[12,"level","","The LogLevel of this record.",1,null],[12,"args","","The arguments from the log line.",1,null],[12,"file","","The file of where the LogRecord originated.",1,null],[12,"line","","The line number of where the LogRecord originated.",1,null],[5,"set_logger","","Replaces the thread-local logger with the specified logger, returning the old\nlogger.",null,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[0,"macros","","Logging macros",null,null],[17,"MAX_LOG_LEVEL","","Maximum logging level of a module that can be specified. Common logging\nlevels are found in the DEBUG/INFO/WARN/ERROR constants.",null,null],[17,"DEBUG","","Debug log level",null,null],[17,"INFO","","Info log level",null,null],[17,"WARN","","Warn log level",null,null],[17,"ERROR","","Error log level",null,null],[8,"Logger","","A trait used to represent an interface to a thread-local logger. Each thread\ncan have its own custom logger which can respond to logging messages\nhowever it likes.",null,null],[10,"log","","Logs a single message described by the `record`.",2,null],[11,"fmt","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[14,"log!","","The standard logging macro",null,null],[14,"error!","","A convenience macro for logging at the error log level.",null,null],[14,"warn!","","A convenience macro for logging at the warning log level.",null,null],[14,"info!","","A convenience macro for logging at the info log level.",null,null],[14,"debug!","","A convenience macro for logging at the debug log level. This macro will\nbe omitted at compile time in an optimized build unless `-C debug-assertions`\nis passed to the compiler.",null,null],[14,"log_enabled!","","A macro to test whether a log level is enabled for the current module.",null,null]],"paths":[[3,"LogLevel"],[3,"LogRecord"],[8,"Logger"]]};
searchIndex["graphviz"] = {"doc":"Generate files suitable for use with [Graphviz](http://www.graphviz.org/)","items":[[3,"Id","graphviz","`Id` is a Graphviz `ID`.",null,null],[4,"LabelText","","The text for a graphviz label on a node or edge.",null,null],[13,"LabelStr","","This kind of label preserves the text directly as is.",0,null],[13,"EscStr","","This kind of label uses the graphviz label escString type:\nhttp://www.graphviz.org/content/attrs#kescString",0,null],[13,"HtmlStr","","This uses a graphviz [HTML string label][html]. The string is\nprinted exactly as given, but between `&lt;` and `&gt;`. **No\nescaping is performed.**",0,null],[4,"Style","","The style for a node or edge.\nSee http://www.graphviz.org/doc/info/attrs.html#k:style for descriptions.\nNote that some of these are not valid for edges.",null,null],[13,"None","","",1,null],[13,"Solid","","",1,null],[13,"Dashed","","",1,null],[13,"Dotted","","",1,null],[13,"Bold","","",1,null],[13,"Rounded","","",1,null],[13,"Diagonals","","",1,null],[13,"Filled","","",1,null],[13,"Striped","","",1,null],[13,"Wedged","","",1,null],[4,"RenderOption","","",null,null],[13,"NoEdgeLabels","","",2,null],[13,"NoNodeLabels","","",2,null],[13,"NoEdgeStyles","","",2,null],[13,"NoNodeStyles","","",2,null],[5,"escape_html","","Escape tags in such a way that it is suitable for inclusion in a\nGraphviz HTML label.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"default_options","","Returns vec holding all the default render options.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Simple wrapper around `render_opts` that passes a default set of options.)",null,{"inputs":[{"name":"g"},{"name":"w"}],"output":{"name":"result"}}],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Main entry point for the library.)",null,null],[6,"Nodes","","",null,null],[6,"Edges","","",null,null],[8,"Labeller","","Each instance of a type that implements `Label&lt;C&gt;` maps to a\nunique identifier with respect to `C`, which is used to identify\nit in the generated .dot file. They can also provide more\nelaborate (and non-unique) label text that is used in the graphviz\nrendered output.\nThe graph instance is responsible for providing the DOT compatible\nidentifiers for the nodes and (optionally) rendered labels for the nodes and\nedges, as well as an identifier for the graph itself.",null,null],[16,"Node","","",3,null],[16,"Edge","","",3,null],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",3,null],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The\nimplementor is responsible for ensuring that the returned name\nis a valid DOT identifier.",3,null],[11,"node_shape","","Maps `n` to one of the [graphviz `shape` names][1]. If `None`\nis returned, no `shape` attribute is specified.",3,null],[11,"node_label","","Maps `n` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is just the output from `node_id`.",3,null],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is in fact the empty string.",3,null],[11,"node_style","","Maps `n` to a style that will be used in the rendered output.",3,null],[11,"edge_style","","Maps `e` to a style that will be used in the rendered output.",3,null],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges)\nmade up of node handles `N` and edge handles `E`, where each `E`\ncan be mapped to its source and target nodes.",null,null],[16,"Node","","",4,null],[16,"Edge","","",4,null],[10,"nodes","","Returns all the nodes in this graph.",4,null],[10,"edges","","Returns all of the edges in this graph.",4,null],[10,"source","","The source node for `edge`.",4,null],[10,"target","","The target node for `edge`.",4,null],[8,"IntoCow","","",null,null],[10,"into_cow","","",5,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"as_slice","","",1,null],[11,"new","","Creates an `Id` named `name`.",6,{"inputs":[{"name":"name"}],"output":{"name":"result"}}],[11,"as_slice","","",6,null],[11,"name","","",6,null],[11,"label","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"escaped","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"html","","",0,{"inputs":[{"name":"s"}],"output":{"name":"labeltext"}}],[11,"to_dot_string","","Renders text as string suitable for a label in a .dot file.\nThis includes quotes or suitable delimeters.",0,null],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0,null],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"into_cow","collections::string","",7,null],[11,"into_cow","collections::vec","",8,null]],"paths":[[4,"LabelText"],[4,"Style"],[4,"RenderOption"],[8,"Labeller"],[8,"GraphWalk"],[8,"IntoCow"],[3,"Id"],[3,"String"],[3,"Vec"]]};
searchIndex["arena"] = {"doc":"The arena, a fast but limited type of allocator.","items":[[3,"TypedArena","arena","A faster arena that can hold objects of only one type.",null,null],[11,"new","","Creates a new `TypedArena` with preallocated space for many objects.",0,{"inputs":[],"output":{"name":"typedarena"}}],[11,"with_capacity","","Creates a new `TypedArena` with preallocated space for the given number of\nobjects.",0,{"inputs":[{"name":"usize"}],"output":{"name":"typedarena"}}],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",0,null],[11,"clear","","Clears the arena. Deallocates all but the longest chunk which may be reused.",0,null],[11,"drop","","",0,null]],"paths":[[3,"TypedArena"]]};
searchIndex["flate"] = {"doc":"Simple [DEFLATE][def]-based compression. This is a wrapper around the\n[`miniz`][mz] library, which is a one-file pure-C implementation of zlib.","items":[[3,"Error","flate","",null,null],[3,"Bytes","","",null,null],[5,"deflate_bytes","","Compress a buffer, without writing any sort of header on the output.",null,null],[5,"deflate_bytes_zlib","","Compress a buffer, using a header that zlib can understand.",null,null],[5,"inflate_bytes","","Decompress a buffer, without parsing any sort of header on the input.",null,null],[5,"inflate_bytes_zlib","","Decompress a buffer that starts with a zlib header.",null,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"deref","","",1,null],[11,"drop","","",1,null]],"paths":[[3,"Error"],[3,"Bytes"]]};
searchIndex["fmt_macros"] = {"doc":"Macro support for format strings","items":[[3,"Argument","fmt_macros","Representation of an argument specification.",null,null],[12,"position","","Where to find this argument",0,null],[12,"format","","How to format the argument",0,null],[3,"FormatSpec","","Specification for the formatting of an argument in the format string.",null,null],[12,"fill","","Optionally specified character to fill alignment with",1,null],[12,"align","","Optionally specified alignment",1,null],[12,"flags","","Packed version of various flags provided",1,null],[12,"precision","","The integer precision to use",1,null],[12,"width","","The string width requested for the resulting format",1,null],[12,"ty","","The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",1,null],[3,"Parser","","The parser structure for interpreting the input format string. This is\nmodeled as an iterator over `Piece` structures to form a stream of tokens\nbeing output.",null,null],[12,"errors","","Error messages accumulated during parsing",2,null],[4,"Piece","","A piece is a portion of the format string which represents the next part\nto emit. These are emitted as a stream by the `Parser` class.",null,null],[13,"String","","A literal string which should directly be emitted",3,null],[13,"NextArgument","","This describes that formatting should process the next argument (as\nspecified inside) for emission.",3,null],[4,"Position","","Enum describing where an argument for a format can be located.",null,null],[13,"ArgumentNext","","The argument will be in the next position. This is the default.",4,null],[13,"ArgumentIs","","The argument is located at a specific index.",4,null],[13,"ArgumentNamed","","The argument has a name.",4,null],[4,"Alignment","","Enum of alignments which are supported.",null,null],[13,"AlignLeft","","The value will be aligned to the left.",5,null],[13,"AlignRight","","The value will be aligned to the right.",5,null],[13,"AlignCenter","","The value will be aligned in the center.",5,null],[13,"AlignUnknown","","The value will take on a default alignment.",5,null],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these\nflags is defined by the formatters themselves.",null,null],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6,null],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6,null],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers,\nthis means that the number will be prefixed with the supplied string.",6,null],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes,\nand the sign (`+` or `-`) will precede them.",6,null],[4,"Count","","A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer.",null,null],[13,"CountIs","","The count is specified explicitly.",7,null],[13,"CountIsName","","The count is specified by the argument with the given name.",7,null],[13,"CountIsParam","","The count is specified by the argument at the given index.",7,null],[13,"CountIsNextParam","","The count is specified by the next parameter.",7,null],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"eq","","",6,null],[11,"clone","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"next","","",2,null],[11,"new","","Creates a new parser for the given format string",2,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex["rustc_platform_intrinsics"] = {"doc":"","items":[[3,"Intrinsic","rustc_platform_intrinsics","",null,null],[12,"inputs","","",0,null],[12,"output","","",0,null],[12,"definition","","",0,null],[4,"Type","","",null,null],[13,"Void","","",1,null],[13,"Integer","","",1,null],[13,"Float","","",1,null],[13,"Pointer","","",1,null],[13,"Vector","","",1,null],[13,"Aggregate","","",1,null],[4,"IntrinsicDef","","",null,null],[13,"Named","","",2,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"clone","","",1,null],[11,"find","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}]],"paths":[[3,"Intrinsic"],[4,"Type"],[4,"IntrinsicDef"]]};
searchIndex["rustc_llvm"] = {"doc":"","items":[[3,"Attribute","rustc_llvm","",null,null],[3,"Attributes","","",null,null],[3,"TargetData","","",null,null],[12,"lltd","","",0,null],[3,"ObjectFile","","",null,null],[12,"llof","","",1,null],[3,"SectionIter","","",null,null],[12,"llsi","","",2,null],[3,"OperandBundleDef","","",null,null],[4,"CallConv","","",null,null],[13,"CCallConv","","",3,null],[13,"FastCallConv","","",3,null],[13,"ColdCallConv","","",3,null],[13,"X86StdcallCallConv","","",3,null],[13,"X86FastcallCallConv","","",3,null],[13,"X86_64_Win64","","",3,null],[13,"X86_VectorCall","","",3,null],[4,"Visibility","","",null,null],[13,"LLVMDefaultVisibility","","",4,null],[13,"HiddenVisibility","","",4,null],[13,"ProtectedVisibility","","",4,null],[4,"Linkage","","",null,null],[13,"ExternalLinkage","","",5,null],[13,"AvailableExternallyLinkage","","",5,null],[13,"LinkOnceAnyLinkage","","",5,null],[13,"LinkOnceODRLinkage","","",5,null],[13,"WeakAnyLinkage","","",5,null],[13,"WeakODRLinkage","","",5,null],[13,"AppendingLinkage","","",5,null],[13,"InternalLinkage","","",5,null],[13,"PrivateLinkage","","",5,null],[13,"ExternalWeakLinkage","","",5,null],[13,"CommonLinkage","","",5,null],[4,"DiagnosticSeverity","","",null,null],[13,"Error","","",6,null],[13,"Warning","","",6,null],[13,"Remark","","",6,null],[13,"Note","","",6,null],[4,"DLLStorageClassTypes","","",null,null],[13,"DefaultStorageClass","","",7,null],[13,"DLLImportStorageClass","","",7,null],[13,"DLLExportStorageClass","","",7,null],[4,"AttributeSet","","",null,null],[13,"ReturnIndex","","",8,null],[13,"FunctionIndex","","",8,null],[4,"IntPredicate","","",null,null],[13,"IntEQ","","",9,null],[13,"IntNE","","",9,null],[13,"IntUGT","","",9,null],[13,"IntUGE","","",9,null],[13,"IntULT","","",9,null],[13,"IntULE","","",9,null],[13,"IntSGT","","",9,null],[13,"IntSGE","","",9,null],[13,"IntSLT","","",9,null],[13,"IntSLE","","",9,null],[4,"RealPredicate","","",null,null],[13,"RealPredicateFalse","","",10,null],[13,"RealOEQ","","",10,null],[13,"RealOGT","","",10,null],[13,"RealOGE","","",10,null],[13,"RealOLT","","",10,null],[13,"RealOLE","","",10,null],[13,"RealONE","","",10,null],[13,"RealORD","","",10,null],[13,"RealUNO","","",10,null],[13,"RealUEQ","","",10,null],[13,"RealUGT","","",10,null],[13,"RealUGE","","",10,null],[13,"RealULT","","",10,null],[13,"RealULE","","",10,null],[13,"RealUNE","","",10,null],[13,"RealPredicateTrue","","",10,null],[4,"TypeKind","","",null,null],[13,"Void","","",11,null],[13,"Half","","",11,null],[13,"Float","","",11,null],[13,"Double","","",11,null],[13,"X86_FP80","","",11,null],[13,"FP128","","",11,null],[13,"PPC_FP128","","",11,null],[13,"Label","","",11,null],[13,"Integer","","",11,null],[13,"Function","","",11,null],[13,"Struct","","",11,null],[13,"Array","","",11,null],[13,"Pointer","","",11,null],[13,"Vector","","",11,null],[13,"Metadata","","",11,null],[13,"X86_MMX","","",11,null],[4,"AtomicBinOp","","",null,null],[13,"AtomicXchg","","",12,null],[13,"AtomicAdd","","",12,null],[13,"AtomicSub","","",12,null],[13,"AtomicAnd","","",12,null],[13,"AtomicNand","","",12,null],[13,"AtomicOr","","",12,null],[13,"AtomicXor","","",12,null],[13,"AtomicMax","","",12,null],[13,"AtomicMin","","",12,null],[13,"AtomicUMax","","",12,null],[13,"AtomicUMin","","",12,null],[4,"AtomicOrdering","","",null,null],[13,"NotAtomic","","",13,null],[13,"Unordered","","",13,null],[13,"Monotonic","","",13,null],[13,"Acquire","","",13,null],[13,"Release","","",13,null],[13,"AcquireRelease","","",13,null],[13,"SequentiallyConsistent","","",13,null],[4,"SynchronizationScope","","",null,null],[13,"SingleThread","","",14,null],[13,"CrossThread","","",14,null],[4,"FileType","","",null,null],[13,"AssemblyFileType","","",15,null],[13,"ObjectFileType","","",15,null],[4,"MetadataType","","",null,null],[13,"MD_dbg","","",16,null],[13,"MD_tbaa","","",16,null],[13,"MD_prof","","",16,null],[13,"MD_fpmath","","",16,null],[13,"MD_range","","",16,null],[13,"MD_tbaa_struct","","",16,null],[13,"MD_invariant_load","","",16,null],[13,"MD_alias_scope","","",16,null],[13,"MD_noalias","","",16,null],[13,"MD_nontemporal","","",16,null],[13,"MD_mem_parallel_loop_access","","",16,null],[13,"MD_nonnull","","",16,null],[4,"AsmDialect","","",null,null],[13,"AD_ATT","","",17,null],[13,"AD_Intel","","",17,null],[4,"CodeGenOptLevel","","",null,null],[13,"CodeGenLevelNone","","",18,null],[13,"CodeGenLevelLess","","",18,null],[13,"CodeGenLevelDefault","","",18,null],[13,"CodeGenLevelAggressive","","",18,null],[4,"CodeGenOptSize","","",null,null],[13,"CodeGenOptSizeNone","","",19,null],[13,"CodeGenOptSizeDefault","","",19,null],[13,"CodeGenOptSizeAggressive","","",19,null],[4,"RelocMode","","",null,null],[13,"RelocDefault","","",20,null],[13,"RelocStatic","","",20,null],[13,"RelocPIC","","",20,null],[13,"RelocDynamicNoPic","","",20,null],[4,"CodeGenModel","","",null,null],[13,"CodeModelDefault","","",21,null],[13,"CodeModelJITDefault","","",21,null],[13,"CodeModelSmall","","",21,null],[13,"CodeModelKernel","","",21,null],[13,"CodeModelMedium","","",21,null],[13,"CodeModelLarge","","",21,null],[4,"DiagnosticKind","","",null,null],[13,"DK_InlineAsm","","",22,null],[13,"DK_StackSize","","",22,null],[13,"DK_DebugMetadataVersion","","",22,null],[13,"DK_SampleProfile","","",22,null],[13,"DK_OptimizationRemark","","",22,null],[13,"DK_OptimizationRemarkMissed","","",22,null],[13,"DK_OptimizationRemarkAnalysis","","",22,null],[13,"DK_OptimizationFailure","","",22,null],[4,"ArchiveKind","","",null,null],[13,"K_GNU","","",23,null],[13,"K_MIPS64","","",23,null],[13,"K_BSD","","",23,null],[13,"K_COFF","","",23,null],[4,"SupportedPassKind","","Represents the different LLVM passes Rust supports",null,null],[13,"Function","","",24,null],[13,"Module","","",24,null],[13,"Unsupported","","",24,null],[4,"Module_opaque","","",null,null],[4,"Context_opaque","","",null,null],[4,"Type_opaque","","",null,null],[4,"Value_opaque","","",null,null],[4,"Metadata_opaque","","",null,null],[4,"BasicBlock_opaque","","",null,null],[4,"Builder_opaque","","",null,null],[4,"ExecutionEngine_opaque","","",null,null],[4,"MemoryBuffer_opaque","","",null,null],[4,"PassManager_opaque","","",null,null],[4,"PassManagerBuilder_opaque","","",null,null],[4,"Use_opaque","","",null,null],[4,"TargetData_opaque","","",null,null],[4,"ObjectFile_opaque","","",null,null],[4,"SectionIterator_opaque","","",null,null],[4,"Pass_opaque","","",null,null],[4,"TargetMachine_opaque","","",null,null],[4,"Archive_opaque","","",null,null],[4,"ArchiveIterator_opaque","","",null,null],[4,"ArchiveChild_opaque","","",null,null],[4,"Twine_opaque","","",null,null],[4,"DiagnosticInfo_opaque","","",null,null],[4,"DebugLoc_opaque","","",null,null],[4,"SMDiagnostic_opaque","","",null,null],[4,"RustArchiveMember_opaque","","",null,null],[4,"OperandBundleDef_opaque","","",null,null],[4,"RustString_opaque","","",null,null],[5,"SetInstructionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetFunctionCallConv","","",null,{"inputs":[{"name":"valueref"},{"name":"callconv"}],"output":null}],[5,"SetLinkage","","",null,{"inputs":[{"name":"valueref"},{"name":"linkage"}],"output":null}],[5,"SetUniqueComdat","","",null,{"inputs":[{"name":"moduleref"},{"name":"valueref"}],"output":null}],[5,"UnsetComdat","","",null,{"inputs":[{"name":"valueref"}],"output":null}],[5,"SetDLLStorageClass","","",null,{"inputs":[{"name":"valueref"},{"name":"dllstorageclasstypes"}],"output":null}],[5,"SetUnnamedAddr","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"set_thread_local","","",null,{"inputs":[{"name":"valueref"},{"name":"bool"}],"output":null}],[5,"ConstICmp","","",null,{"inputs":[{"name":"intpredicate"},{"name":"valueref"},{"name":"valueref"}],"output":{"name":"valueref"}}],[5,"ConstFCmp","","",null,{"inputs":[{"name":"realpredicate"},{"name":"valueref"},{"name":"valueref"}],"output":{"name":"valueref"}}],[5,"SetFunctionAttribute","","",null,{"inputs":[{"name":"valueref"},{"name":"attribute"}],"output":null}],[5,"RemoveFunctionAttributes","","",null,{"inputs":[{"name":"valueref"},{"name":"attribute"}],"output":null}],[5,"mk_target_data","","",null,{"inputs":[{"name":"str"}],"output":{"name":"targetdata"}}],[5,"mk_section_iter","","",null,{"inputs":[{"name":"objectfileref"}],"output":{"name":"sectioniter"}}],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun.",null,{"inputs":[{"name":"valueref"},{"name":"c_uint"}],"output":{"name":"valueref"}}],[5,"get_params","","",null,{"inputs":[{"name":"valueref"}],"output":{"name":"vec"}}],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream.",null,null],[5,"build_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"option"}}],[5,"twine_to_string","","",null,{"inputs":[{"name":"twineref"}],"output":{"name":"string"}}],[5,"debug_loc_to_string","","",null,{"inputs":[{"name":"contextref"},{"name":"debuglocref"}],"output":{"name":"string"}}],[5,"initialize_available_targets","","",null,{"inputs":[],"output":null}],[5,"last_error","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"LLVMContextCreate","","",null,null],[5,"LLVMContextDispose","","",null,null],[5,"LLVMGetMDKindIDInContext","","",null,null],[5,"LLVMModuleCreateWithNameInContext","","",null,null],[5,"LLVMGetModuleContext","","",null,null],[5,"LLVMCloneModule","","",null,null],[5,"LLVMDisposeModule","","",null,null],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout.",null,null],[5,"LLVMSetDataLayout","","",null,null],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple.",null,null],[5,"LLVMSetTarget","","",null,null],[5,"LLVMDumpModule","","See Module::dump.",null,null],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm.",null,null],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID.",null,null],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext.",null,null],[5,"LLVMInt1TypeInContext","","",null,null],[5,"LLVMInt8TypeInContext","","",null,null],[5,"LLVMInt16TypeInContext","","",null,null],[5,"LLVMInt32TypeInContext","","",null,null],[5,"LLVMInt64TypeInContext","","",null,null],[5,"LLVMIntTypeInContext","","",null,null],[5,"LLVMGetIntTypeWidth","","",null,null],[5,"LLVMFloatTypeInContext","","",null,null],[5,"LLVMDoubleTypeInContext","","",null,null],[5,"LLVMX86FP80TypeInContext","","",null,null],[5,"LLVMFP128TypeInContext","","",null,null],[5,"LLVMPPCFP128TypeInContext","","",null,null],[5,"LLVMFunctionType","","",null,null],[5,"LLVMIsFunctionVarArg","","",null,null],[5,"LLVMGetReturnType","","",null,null],[5,"LLVMCountParamTypes","","",null,null],[5,"LLVMGetParamTypes","","",null,null],[5,"LLVMStructTypeInContext","","",null,null],[5,"LLVMCountStructElementTypes","","",null,null],[5,"LLVMGetStructElementTypes","","",null,null],[5,"LLVMIsPackedStruct","","",null,null],[5,"LLVMRustArrayType","","",null,null],[5,"LLVMPointerType","","",null,null],[5,"LLVMVectorType","","",null,null],[5,"LLVMGetElementType","","",null,null],[5,"LLVMGetArrayLength","","",null,null],[5,"LLVMGetPointerAddressSpace","","",null,null],[5,"LLVMGetPointerToGlobal","","",null,null],[5,"LLVMGetVectorSize","","",null,null],[5,"LLVMVoidTypeInContext","","",null,null],[5,"LLVMLabelTypeInContext","","",null,null],[5,"LLVMMetadataTypeInContext","","",null,null],[5,"LLVMTypeOf","","",null,null],[5,"LLVMGetValueName","","",null,null],[5,"LLVMSetValueName","","",null,null],[5,"LLVMDumpValue","","",null,null],[5,"LLVMReplaceAllUsesWith","","",null,null],[5,"LLVMHasMetadata","","",null,null],[5,"LLVMGetMetadata","","",null,null],[5,"LLVMSetMetadata","","",null,null],[5,"LLVMGetFirstUse","","",null,null],[5,"LLVMGetNextUse","","",null,null],[5,"LLVMGetUser","","",null,null],[5,"LLVMGetUsedValue","","",null,null],[5,"LLVMGetNumOperands","","",null,null],[5,"LLVMGetOperand","","",null,null],[5,"LLVMSetOperand","","",null,null],[5,"LLVMConstNull","","",null,null],[5,"LLVMConstAllOnes","","",null,null],[5,"LLVMConstICmp","","",null,null],[5,"LLVMConstFCmp","","",null,null],[5,"LLVMGetUndef","","",null,null],[5,"LLVMIsConstant","","",null,null],[5,"LLVMIsNull","","",null,null],[5,"LLVMIsUndef","","",null,null],[5,"LLVMConstPointerNull","","",null,null],[5,"LLVMMDStringInContext","","",null,null],[5,"LLVMMDNodeInContext","","",null,null],[5,"LLVMAddNamedMetadataOperand","","",null,null],[5,"LLVMConstInt","","",null,null],[5,"LLVMConstIntOfString","","",null,null],[5,"LLVMConstIntOfStringAndSize","","",null,null],[5,"LLVMConstReal","","",null,null],[5,"LLVMConstRealOfString","","",null,null],[5,"LLVMConstRealOfStringAndSize","","",null,null],[5,"LLVMConstIntGetZExtValue","","",null,null],[5,"LLVMConstIntGetSExtValue","","",null,null],[5,"LLVMConstStringInContext","","",null,null],[5,"LLVMConstStructInContext","","",null,null],[5,"LLVMConstArray","","",null,null],[5,"LLVMConstVector","","",null,null],[5,"LLVMAlignOf","","",null,null],[5,"LLVMSizeOf","","",null,null],[5,"LLVMConstNeg","","",null,null],[5,"LLVMConstNSWNeg","","",null,null],[5,"LLVMConstNUWNeg","","",null,null],[5,"LLVMConstFNeg","","",null,null],[5,"LLVMConstNot","","",null,null],[5,"LLVMConstAdd","","",null,null],[5,"LLVMConstNSWAdd","","",null,null],[5,"LLVMConstNUWAdd","","",null,null],[5,"LLVMConstFAdd","","",null,null],[5,"LLVMConstSub","","",null,null],[5,"LLVMConstNSWSub","","",null,null],[5,"LLVMConstNUWSub","","",null,null],[5,"LLVMConstFSub","","",null,null],[5,"LLVMConstMul","","",null,null],[5,"LLVMConstNSWMul","","",null,null],[5,"LLVMConstNUWMul","","",null,null],[5,"LLVMConstFMul","","",null,null],[5,"LLVMConstUDiv","","",null,null],[5,"LLVMConstSDiv","","",null,null],[5,"LLVMConstExactSDiv","","",null,null],[5,"LLVMConstFDiv","","",null,null],[5,"LLVMConstURem","","",null,null],[5,"LLVMConstSRem","","",null,null],[5,"LLVMConstFRem","","",null,null],[5,"LLVMConstAnd","","",null,null],[5,"LLVMConstOr","","",null,null],[5,"LLVMConstXor","","",null,null],[5,"LLVMConstShl","","",null,null],[5,"LLVMConstLShr","","",null,null],[5,"LLVMConstAShr","","",null,null],[5,"LLVMConstGEP","","",null,null],[5,"LLVMConstInBoundsGEP","","",null,null],[5,"LLVMConstTrunc","","",null,null],[5,"LLVMConstSExt","","",null,null],[5,"LLVMConstZExt","","",null,null],[5,"LLVMConstFPTrunc","","",null,null],[5,"LLVMConstFPExt","","",null,null],[5,"LLVMConstUIToFP","","",null,null],[5,"LLVMConstSIToFP","","",null,null],[5,"LLVMConstFPToUI","","",null,null],[5,"LLVMConstFPToSI","","",null,null],[5,"LLVMConstPtrToInt","","",null,null],[5,"LLVMConstIntToPtr","","",null,null],[5,"LLVMConstBitCast","","",null,null],[5,"LLVMConstZExtOrBitCast","","",null,null],[5,"LLVMConstSExtOrBitCast","","",null,null],[5,"LLVMConstTruncOrBitCast","","",null,null],[5,"LLVMConstPointerCast","","",null,null],[5,"LLVMConstIntCast","","",null,null],[5,"LLVMConstFPCast","","",null,null],[5,"LLVMConstSelect","","",null,null],[5,"LLVMConstExtractElement","","",null,null],[5,"LLVMConstInsertElement","","",null,null],[5,"LLVMConstShuffleVector","","",null,null],[5,"LLVMConstExtractValue","","",null,null],[5,"LLVMConstInsertValue","","",null,null],[5,"LLVMConstInlineAsm","","",null,null],[5,"LLVMBlockAddress","","",null,null],[5,"LLVMGetGlobalParent","","",null,null],[5,"LLVMIsDeclaration","","",null,null],[5,"LLVMGetLinkage","","",null,null],[5,"LLVMSetLinkage","","",null,null],[5,"LLVMGetSection","","",null,null],[5,"LLVMSetSection","","",null,null],[5,"LLVMGetVisibility","","",null,null],[5,"LLVMSetVisibility","","",null,null],[5,"LLVMGetAlignment","","",null,null],[5,"LLVMSetAlignment","","",null,null],[5,"LLVMIsAGlobalVariable","","",null,null],[5,"LLVMAddGlobal","","",null,null],[5,"LLVMAddGlobalInAddressSpace","","",null,null],[5,"LLVMGetNamedGlobal","","",null,null],[5,"LLVMGetOrInsertGlobal","","",null,null],[5,"LLVMGetFirstGlobal","","",null,null],[5,"LLVMGetLastGlobal","","",null,null],[5,"LLVMGetNextGlobal","","",null,null],[5,"LLVMGetPreviousGlobal","","",null,null],[5,"LLVMDeleteGlobal","","",null,null],[5,"LLVMGetInitializer","","",null,null],[5,"LLVMSetInitializer","","",null,null],[5,"LLVMIsThreadLocal","","",null,null],[5,"LLVMSetThreadLocal","","",null,null],[5,"LLVMIsGlobalConstant","","",null,null],[5,"LLVMSetGlobalConstant","","",null,null],[5,"LLVMGetNamedValue","","",null,null],[5,"LLVMAddAlias","","",null,null],[5,"LLVMAddFunction","","",null,null],[5,"LLVMGetNamedFunction","","",null,null],[5,"LLVMGetFirstFunction","","",null,null],[5,"LLVMGetLastFunction","","",null,null],[5,"LLVMGetNextFunction","","",null,null],[5,"LLVMGetPreviousFunction","","",null,null],[5,"LLVMDeleteFunction","","",null,null],[5,"LLVMGetOrInsertFunction","","",null,null],[5,"LLVMGetIntrinsicID","","",null,null],[5,"LLVMGetFunctionCallConv","","",null,null],[5,"LLVMSetFunctionCallConv","","",null,null],[5,"LLVMGetGC","","",null,null],[5,"LLVMSetGC","","",null,null],[5,"LLVMAddDereferenceableAttr","","",null,null],[5,"LLVMAddFunctionAttribute","","",null,null],[5,"LLVMAddFunctionAttrString","","",null,null],[5,"LLVMAddFunctionAttrStringValue","","",null,null],[5,"LLVMRemoveFunctionAttributes","","",null,null],[5,"LLVMRemoveFunctionAttrString","","",null,null],[5,"LLVMGetFunctionAttr","","",null,null],[5,"LLVMRemoveFunctionAttr","","",null,null],[5,"LLVMCountParams","","",null,null],[5,"LLVMGetParams","","",null,null],[5,"LLVMGetParam","","",null,null],[5,"LLVMGetParamParent","","",null,null],[5,"LLVMGetFirstParam","","",null,null],[5,"LLVMGetLastParam","","",null,null],[5,"LLVMGetNextParam","","",null,null],[5,"LLVMGetPreviousParam","","",null,null],[5,"LLVMAddAttribute","","",null,null],[5,"LLVMRemoveAttribute","","",null,null],[5,"LLVMGetAttribute","","",null,null],[5,"LLVMSetParamAlignment","","",null,null],[5,"LLVMBasicBlockAsValue","","",null,null],[5,"LLVMValueIsBasicBlock","","",null,null],[5,"LLVMValueAsBasicBlock","","",null,null],[5,"LLVMGetBasicBlockParent","","",null,null],[5,"LLVMCountBasicBlocks","","",null,null],[5,"LLVMGetBasicBlocks","","",null,null],[5,"LLVMGetFirstBasicBlock","","",null,null],[5,"LLVMGetLastBasicBlock","","",null,null],[5,"LLVMGetNextBasicBlock","","",null,null],[5,"LLVMGetPreviousBasicBlock","","",null,null],[5,"LLVMGetEntryBasicBlock","","",null,null],[5,"LLVMAppendBasicBlockInContext","","",null,null],[5,"LLVMInsertBasicBlockInContext","","",null,null],[5,"LLVMDeleteBasicBlock","","",null,null],[5,"LLVMMoveBasicBlockAfter","","",null,null],[5,"LLVMMoveBasicBlockBefore","","",null,null],[5,"LLVMGetInstructionParent","","",null,null],[5,"LLVMGetFirstInstruction","","",null,null],[5,"LLVMGetLastInstruction","","",null,null],[5,"LLVMGetNextInstruction","","",null,null],[5,"LLVMGetPreviousInstruction","","",null,null],[5,"LLVMInstructionEraseFromParent","","",null,null],[5,"LLVMSetInstructionCallConv","","",null,null],[5,"LLVMGetInstructionCallConv","","",null,null],[5,"LLVMAddInstrAttribute","","",null,null],[5,"LLVMRemoveInstrAttribute","","",null,null],[5,"LLVMSetInstrParamAlignment","","",null,null],[5,"LLVMAddCallSiteAttribute","","",null,null],[5,"LLVMAddDereferenceableCallSiteAttr","","",null,null],[5,"LLVMIsTailCall","","",null,null],[5,"LLVMSetTailCall","","",null,null],[5,"LLVMGetVolatile","","",null,null],[5,"LLVMSetVolatile","","",null,null],[5,"LLVMAddIncoming","","",null,null],[5,"LLVMCountIncoming","","",null,null],[5,"LLVMGetIncomingValue","","",null,null],[5,"LLVMGetIncomingBlock","","",null,null],[5,"LLVMCreateBuilderInContext","","",null,null],[5,"LLVMPositionBuilder","","",null,null],[5,"LLVMPositionBuilderBefore","","",null,null],[5,"LLVMPositionBuilderAtEnd","","",null,null],[5,"LLVMGetInsertBlock","","",null,null],[5,"LLVMClearInsertionPosition","","",null,null],[5,"LLVMInsertIntoBuilder","","",null,null],[5,"LLVMInsertIntoBuilderWithName","","",null,null],[5,"LLVMDisposeBuilder","","",null,null],[5,"LLVMBuildExecutionEngine","","",null,null],[5,"LLVMDisposeExecutionEngine","","",null,null],[5,"LLVMExecutionEngineFinalizeObject","","",null,null],[5,"LLVMRustLoadDynamicLibrary","","",null,null],[5,"LLVMExecutionEngineAddModule","","",null,null],[5,"LLVMExecutionEngineRemoveModule","","",null,null],[5,"LLVMSetCurrentDebugLocation","","",null,null],[5,"LLVMGetCurrentDebugLocation","","",null,null],[5,"LLVMSetInstDebugLocation","","",null,null],[5,"LLVMBuildRetVoid","","",null,null],[5,"LLVMBuildRet","","",null,null],[5,"LLVMBuildAggregateRet","","",null,null],[5,"LLVMBuildBr","","",null,null],[5,"LLVMBuildCondBr","","",null,null],[5,"LLVMBuildSwitch","","",null,null],[5,"LLVMBuildIndirectBr","","",null,null],[5,"LLVMRustBuildInvoke","","",null,null],[5,"LLVMRustBuildLandingPad","","",null,null],[5,"LLVMBuildResume","","",null,null],[5,"LLVMBuildUnreachable","","",null,null],[5,"LLVMRustBuildCleanupPad","","",null,null],[5,"LLVMRustBuildCleanupRet","","",null,null],[5,"LLVMRustBuildCatchPad","","",null,null],[5,"LLVMRustBuildCatchRet","","",null,null],[5,"LLVMRustBuildCatchSwitch","","",null,null],[5,"LLVMRustAddHandler","","",null,null],[5,"LLVMRustSetPersonalityFn","","",null,null],[5,"LLVMAddCase","","",null,null],[5,"LLVMAddDestination","","",null,null],[5,"LLVMAddClause","","",null,null],[5,"LLVMSetCleanup","","",null,null],[5,"LLVMBuildAdd","","",null,null],[5,"LLVMBuildNSWAdd","","",null,null],[5,"LLVMBuildNUWAdd","","",null,null],[5,"LLVMBuildFAdd","","",null,null],[5,"LLVMBuildSub","","",null,null],[5,"LLVMBuildNSWSub","","",null,null],[5,"LLVMBuildNUWSub","","",null,null],[5,"LLVMBuildFSub","","",null,null],[5,"LLVMBuildMul","","",null,null],[5,"LLVMBuildNSWMul","","",null,null],[5,"LLVMBuildNUWMul","","",null,null],[5,"LLVMBuildFMul","","",null,null],[5,"LLVMBuildUDiv","","",null,null],[5,"LLVMBuildSDiv","","",null,null],[5,"LLVMBuildExactSDiv","","",null,null],[5,"LLVMBuildFDiv","","",null,null],[5,"LLVMBuildURem","","",null,null],[5,"LLVMBuildSRem","","",null,null],[5,"LLVMBuildFRem","","",null,null],[5,"LLVMBuildShl","","",null,null],[5,"LLVMBuildLShr","","",null,null],[5,"LLVMBuildAShr","","",null,null],[5,"LLVMBuildAnd","","",null,null],[5,"LLVMBuildOr","","",null,null],[5,"LLVMBuildXor","","",null,null],[5,"LLVMBuildBinOp","","",null,null],[5,"LLVMBuildNeg","","",null,null],[5,"LLVMBuildNSWNeg","","",null,null],[5,"LLVMBuildNUWNeg","","",null,null],[5,"LLVMBuildFNeg","","",null,null],[5,"LLVMBuildNot","","",null,null],[5,"LLVMRustSetHasUnsafeAlgebra","","",null,null],[5,"LLVMBuildAlloca","","",null,null],[5,"LLVMBuildFree","","",null,null],[5,"LLVMBuildLoad","","",null,null],[5,"LLVMBuildStore","","",null,null],[5,"LLVMBuildGEP","","",null,null],[5,"LLVMBuildInBoundsGEP","","",null,null],[5,"LLVMBuildStructGEP","","",null,null],[5,"LLVMBuildGlobalString","","",null,null],[5,"LLVMBuildGlobalStringPtr","","",null,null],[5,"LLVMBuildTrunc","","",null,null],[5,"LLVMBuildZExt","","",null,null],[5,"LLVMBuildSExt","","",null,null],[5,"LLVMBuildFPToUI","","",null,null],[5,"LLVMBuildFPToSI","","",null,null],[5,"LLVMBuildUIToFP","","",null,null],[5,"LLVMBuildSIToFP","","",null,null],[5,"LLVMBuildFPTrunc","","",null,null],[5,"LLVMBuildFPExt","","",null,null],[5,"LLVMBuildPtrToInt","","",null,null],[5,"LLVMBuildIntToPtr","","",null,null],[5,"LLVMBuildBitCast","","",null,null],[5,"LLVMBuildZExtOrBitCast","","",null,null],[5,"LLVMBuildSExtOrBitCast","","",null,null],[5,"LLVMBuildTruncOrBitCast","","",null,null],[5,"LLVMBuildCast","","",null,null],[5,"LLVMBuildPointerCast","","",null,null],[5,"LLVMBuildIntCast","","",null,null],[5,"LLVMBuildFPCast","","",null,null],[5,"LLVMBuildICmp","","",null,null],[5,"LLVMBuildFCmp","","",null,null],[5,"LLVMBuildPhi","","",null,null],[5,"LLVMRustBuildCall","","",null,null],[5,"LLVMBuildSelect","","",null,null],[5,"LLVMBuildVAArg","","",null,null],[5,"LLVMBuildExtractElement","","",null,null],[5,"LLVMBuildInsertElement","","",null,null],[5,"LLVMBuildShuffleVector","","",null,null],[5,"LLVMBuildExtractValue","","",null,null],[5,"LLVMBuildInsertValue","","",null,null],[5,"LLVMBuildIsNull","","",null,null],[5,"LLVMBuildIsNotNull","","",null,null],[5,"LLVMBuildPtrDiff","","",null,null],[5,"LLVMBuildAtomicLoad","","",null,null],[5,"LLVMBuildAtomicStore","","",null,null],[5,"LLVMBuildAtomicCmpXchg","","",null,null],[5,"LLVMBuildAtomicRMW","","",null,null],[5,"LLVMBuildAtomicFence","","",null,null],[5,"LLVMIsATerminatorInst","","",null,null],[5,"LLVMIsAStoreInst","","",null,null],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success.",null,null],[5,"LLVMCreateTargetData","","Creates target data from a target layout string.",null,null],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly.",null,null],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T.",null,null],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T.",null,null],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding.",null,null],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type.",null,null],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type.",null,null],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget.",null,null],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame.",null,null],[5,"LLVMDisposeTargetData","","Disposes target data.",null,null],[5,"LLVMCreatePassManager","","Creates a pass manager.",null,null],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager",null,null],[5,"LLVMDisposePassManager","","Disposes a pass manager.",null,null],[5,"LLVMRunPassManager","","Runs a pass manager on a module.",null,null],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function.",null,null],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager",null,null],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager",null,null],[5,"LLVMInitializePasses","","",null,null],[5,"LLVMAddVerifierPass","","Adds a verification pass.",null,null],[5,"LLVMAddGlobalOptimizerPass","","",null,null],[5,"LLVMAddIPSCCPPass","","",null,null],[5,"LLVMAddDeadArgEliminationPass","","",null,null],[5,"LLVMAddInstructionCombiningPass","","",null,null],[5,"LLVMAddCFGSimplificationPass","","",null,null],[5,"LLVMAddFunctionInliningPass","","",null,null],[5,"LLVMAddFunctionAttrsPass","","",null,null],[5,"LLVMAddScalarReplAggregatesPass","","",null,null],[5,"LLVMAddScalarReplAggregatesPassSSA","","",null,null],[5,"LLVMAddJumpThreadingPass","","",null,null],[5,"LLVMAddConstantPropagationPass","","",null,null],[5,"LLVMAddReassociatePass","","",null,null],[5,"LLVMAddLoopRotatePass","","",null,null],[5,"LLVMAddLICMPass","","",null,null],[5,"LLVMAddLoopUnswitchPass","","",null,null],[5,"LLVMAddLoopDeletionPass","","",null,null],[5,"LLVMAddLoopUnrollPass","","",null,null],[5,"LLVMAddGVNPass","","",null,null],[5,"LLVMAddMemCpyOptPass","","",null,null],[5,"LLVMAddSCCPPass","","",null,null],[5,"LLVMAddDeadStoreEliminationPass","","",null,null],[5,"LLVMAddStripDeadPrototypesPass","","",null,null],[5,"LLVMAddConstantMergePass","","",null,null],[5,"LLVMAddArgumentPromotionPass","","",null,null],[5,"LLVMAddTailCallEliminationPass","","",null,null],[5,"LLVMAddIndVarSimplifyPass","","",null,null],[5,"LLVMAddAggressiveDCEPass","","",null,null],[5,"LLVMAddGlobalDCEPass","","",null,null],[5,"LLVMAddCorrelatedValuePropagationPass","","",null,null],[5,"LLVMAddPruneEHPass","","",null,null],[5,"LLVMAddSimplifyLibCallsPass","","",null,null],[5,"LLVMAddLoopIdiomPass","","",null,null],[5,"LLVMAddEarlyCSEPass","","",null,null],[5,"LLVMAddTypeBasedAliasAnalysisPass","","",null,null],[5,"LLVMAddBasicAliasAnalysisPass","","",null,null],[5,"LLVMPassManagerBuilderCreate","","",null,null],[5,"LLVMPassManagerBuilderDispose","","",null,null],[5,"LLVMPassManagerBuilderSetOptLevel","","",null,null],[5,"LLVMPassManagerBuilderSetSizeLevel","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","","",null,null],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","","",null,null],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","","",null,null],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","","",null,null],[5,"LLVMPassManagerBuilderPopulateModulePassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","","",null,null],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","","",null,null],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer.",null,null],[5,"LLVMCreateObjectFile","","Opens an object file.",null,null],[5,"LLVMDisposeObjectFile","","Closes an object file.",null,null],[5,"LLVMGetSections","","Enumerates the sections in an object file.",null,null],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator.",null,null],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:",null,null],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section.",null,null],[5,"LLVMGetSectionSize","","Returns the current section size.",null,null],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer.",null,null],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it.",null,null],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn&#39;t copy it)",null,null],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","","",null,null],[5,"LLVMIsMultithreaded","","",null,null],[5,"LLVMStartMultithreaded","","",null,null],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call.",null,null],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren&#39;t picking them up.",null,null],[5,"LLVMStructCreateNamed","","",null,null],[5,"LLVMStructSetBody","","",null,null],[5,"LLVMConstNamedStruct","","",null,null],[5,"LLVMSetDebug","","Enables LLVM debug output.",null,null],[5,"LLVMInlineAsm","","Prepares inline assembly.",null,null],[5,"LLVMRustDebugMetadataVersion","","",null,null],[5,"LLVMVersionMajor","","",null,null],[5,"LLVMVersionMinor","","",null,null],[5,"LLVMRustAddModuleFlag","","",null,null],[5,"LLVMDIBuilderCreate","","",null,null],[5,"LLVMDIBuilderDispose","","",null,null],[5,"LLVMDIBuilderFinalize","","",null,null],[5,"LLVMDIBuilderCreateCompileUnit","","",null,null],[5,"LLVMDIBuilderCreateFile","","",null,null],[5,"LLVMDIBuilderCreateSubroutineType","","",null,null],[5,"LLVMDIBuilderCreateFunction","","",null,null],[5,"LLVMDIBuilderCreateBasicType","","",null,null],[5,"LLVMDIBuilderCreatePointerType","","",null,null],[5,"LLVMDIBuilderCreateStructType","","",null,null],[5,"LLVMDIBuilderCreateMemberType","","",null,null],[5,"LLVMDIBuilderCreateLexicalBlock","","",null,null],[5,"LLVMDIBuilderCreateStaticVariable","","",null,null],[5,"LLVMDIBuilderCreateVariable","","",null,null],[5,"LLVMDIBuilderCreateArrayType","","",null,null],[5,"LLVMDIBuilderCreateVectorType","","",null,null],[5,"LLVMDIBuilderGetOrCreateSubrange","","",null,null],[5,"LLVMDIBuilderGetOrCreateArray","","",null,null],[5,"LLVMDIBuilderInsertDeclareAtEnd","","",null,null],[5,"LLVMDIBuilderInsertDeclareBefore","","",null,null],[5,"LLVMDIBuilderCreateEnumerator","","",null,null],[5,"LLVMDIBuilderCreateEnumerationType","","",null,null],[5,"LLVMDIBuilderCreateUnionType","","",null,null],[5,"LLVMSetUnnamedAddr","","",null,null],[5,"LLVMDIBuilderCreateTemplateTypeParameter","","",null,null],[5,"LLVMDIBuilderCreateOpDeref","","",null,null],[5,"LLVMDIBuilderCreateOpPlus","","",null,null],[5,"LLVMDIBuilderCreateNameSpace","","",null,null],[5,"LLVMDIBuilderCreateDebugLocation","","",null,null],[5,"LLVMDICompositeTypeSetTypeArray","","",null,null],[5,"LLVMWriteTypeToString","","",null,null],[5,"LLVMWriteValueToString","","",null,null],[5,"LLVMIsAArgument","","",null,null],[5,"LLVMIsAAllocaInst","","",null,null],[5,"LLVMIsAConstantInt","","",null,null],[5,"LLVMRustPassKind","","",null,null],[5,"LLVMRustFindAndCreatePass","","",null,null],[5,"LLVMRustAddPass","","",null,null],[5,"LLVMRustHasFeature","","",null,null],[5,"LLVMRustCreateTargetMachine","","",null,null],[5,"LLVMRustDisposeTargetMachine","","",null,null],[5,"LLVMRustAddAnalysisPasses","","",null,null],[5,"LLVMRustAddBuilderLibraryInfo","","",null,null],[5,"LLVMRustConfigurePassManagerBuilder","","",null,null],[5,"LLVMRustAddLibraryInfo","","",null,null],[5,"LLVMRustRunFunctionPassManager","","",null,null],[5,"LLVMRustWriteOutputFile","","",null,null],[5,"LLVMRustPrintModule","","",null,null],[5,"LLVMRustSetLLVMOptions","","",null,null],[5,"LLVMRustPrintPasses","","",null,null],[5,"LLVMRustSetNormalizedTarget","","",null,null],[5,"LLVMRustAddAlwaysInlinePass","","",null,null],[5,"LLVMRustLinkInExternalBitcode","","",null,null],[5,"LLVMRustRunRestrictionPass","","",null,null],[5,"LLVMRustMarkAllFunctionsNounwind","","",null,null],[5,"LLVMRustOpenArchive","","",null,null],[5,"LLVMRustArchiveIteratorNew","","",null,null],[5,"LLVMRustArchiveIteratorNext","","",null,null],[5,"LLVMRustArchiveChildName","","",null,null],[5,"LLVMRustArchiveChildData","","",null,null],[5,"LLVMRustArchiveChildFree","","",null,null],[5,"LLVMRustArchiveIteratorFree","","",null,null],[5,"LLVMRustDestroyArchive","","",null,null],[5,"LLVMRustSetDLLStorageClass","","",null,null],[5,"LLVMRustGetSectionName","","",null,null],[5,"LLVMWriteTwineToString","","",null,null],[5,"LLVMContextSetDiagnosticHandler","","",null,null],[5,"LLVMUnpackOptimizationDiagnostic","","",null,null],[5,"LLVMUnpackInlineAsmDiagnostic","","",null,null],[5,"LLVMWriteDiagnosticInfoToString","","",null,null],[5,"LLVMGetDiagInfoSeverity","","",null,null],[5,"LLVMGetDiagInfoKind","","",null,null],[5,"LLVMWriteDebugLocToString","","",null,null],[5,"LLVMSetInlineAsmDiagnosticHandler","","",null,null],[5,"LLVMWriteSMDiagnosticToString","","",null,null],[5,"LLVMRustWriteArchive","","",null,null],[5,"LLVMRustArchiveMemberNew","","",null,null],[5,"LLVMRustArchiveMemberFree","","",null,null],[5,"LLVMRustSetDataLayoutFromTargetMachine","","",null,null],[5,"LLVMRustGetModuleDataLayout","","",null,null],[5,"LLVMRustBuildOperandBundleDef","","",null,null],[5,"LLVMRustFreeOperandBundleDef","","",null,null],[5,"LLVMRustPositionBuilderAtStart","","",null,null],[5,"LLVMRustSetComdat","","",null,null],[5,"LLVMRustUnsetComdat","","",null,null],[0,"archive_ro","","A wrapper around LLVM&#39;s archive (.a) code",null,null],[3,"ArchiveRO","rustc_llvm::archive_ro","",null,null],[3,"Iter","","",null,null],[3,"Child","","",null,null],[11,"open","","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM&#39;s internal `Archive` class\nrather than shelling out to `ar` for everything.",25,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"raw","","",25,null],[11,"iter","","",25,null],[11,"drop","","",25,null],[11,"next","","",26,null],[11,"drop","","",26,null],[11,"name","","",27,null],[11,"data","","",27,null],[11,"raw","","",27,null],[11,"drop","","",27,null],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports.",null,null],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic","",null,null],[12,"kind","","",28,null],[12,"pass_name","","",28,null],[12,"function","","",28,null],[12,"debug_loc","","",28,null],[12,"message","","",28,null],[3,"InlineAsmDiagnostic","","",null,null],[12,"cookie","","",29,null],[12,"message","","",29,null],[12,"instruction","","",29,null],[4,"OptimizationDiagnosticKind","","",null,null],[13,"OptimizationRemark","","",30,null],[13,"OptimizationMissed","","",30,null],[13,"OptimizationAnalysis","","",30,null],[13,"OptimizationFailure","","",30,null],[4,"Diagnostic","","",null,null],[13,"Optimization","","",31,null],[13,"InlineAsm","","",31,null],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",31,null],[11,"clone","","",30,null],[11,"describe","","",30,null],[11,"clone","","",29,null],[11,"unpack","","",31,{"inputs":[{"name":"diagnosticinforef"}],"output":{"name":"diagnostic"}}],[0,"debuginfo","rustc_llvm","",null,null],[4,"DIBuilder_opaque","rustc_llvm::debuginfo","",null,null],[4,"DIDescriptorFlags","","",null,null],[13,"FlagPrivate","","",32,null],[13,"FlagProtected","","",32,null],[13,"FlagFwdDecl","","",32,null],[13,"FlagAppleBlock","","",32,null],[13,"FlagBlockByrefStruct","","",32,null],[13,"FlagVirtual","","",32,null],[13,"FlagArtificial","","",32,null],[13,"FlagExplicit","","",32,null],[13,"FlagPrototyped","","",32,null],[13,"FlagObjcClassComplete","","",32,null],[13,"FlagObjectPointer","","",32,null],[13,"FlagVector","","",32,null],[13,"FlagStaticMember","","",32,null],[13,"FlagIndirectVariable","","",32,null],[13,"FlagLValueReference","","",32,null],[13,"FlagRValueReference","","",32,null],[6,"DIBuilderRef","","",null,null],[6,"DIDescriptor","","",null,null],[6,"DIScope","","",null,null],[6,"DILocation","","",null,null],[6,"DIFile","","",null,null],[6,"DILexicalBlock","","",null,null],[6,"DISubprogram","","",null,null],[6,"DINameSpace","","",null,null],[6,"DIType","","",null,null],[6,"DIBasicType","","",null,null],[6,"DIDerivedType","","",null,null],[6,"DICompositeType","","",null,null],[6,"DIVariable","","",null,null],[6,"DIGlobalVariable","","",null,null],[6,"DIArray","","",null,null],[6,"DISubrange","","",null,null],[6,"DIEnumerator","","",null,null],[6,"DITemplateTypeParameter","","",null,null],[11,"clone","","",32,null],[6,"Opcode","rustc_llvm","",null,null],[6,"Bool","","",null,null],[6,"ModuleRef","","",null,null],[6,"ContextRef","","",null,null],[6,"TypeRef","","",null,null],[6,"ValueRef","","",null,null],[6,"MetadataRef","","",null,null],[6,"BasicBlockRef","","",null,null],[6,"BuilderRef","","",null,null],[6,"ExecutionEngineRef","","",null,null],[6,"MemoryBufferRef","","",null,null],[6,"PassManagerRef","","",null,null],[6,"PassManagerBuilderRef","","",null,null],[6,"UseRef","","",null,null],[6,"TargetDataRef","","",null,null],[6,"ObjectFileRef","","",null,null],[6,"SectionIteratorRef","","",null,null],[6,"PassRef","","",null,null],[6,"TargetMachineRef","","",null,null],[6,"ArchiveRef","","",null,null],[6,"ArchiveIteratorRef","","",null,null],[6,"ArchiveChildRef","","",null,null],[6,"TwineRef","","",null,null],[6,"DiagnosticInfoRef","","",null,null],[6,"DebugLocRef","","",null,null],[6,"SMDiagnosticRef","","",null,null],[6,"RustArchiveMemberRef","","",null,null],[6,"OperandBundleDefRef","","",null,null],[6,"DiagnosticHandler","","",null,null],[6,"InlineAsmDiagHandler","","",null,null],[6,"RustStringRef","","",null,null],[17,"True","","",null,null],[17,"False","","",null,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"hash","","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"fmt","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"attribute"}}],[18,"ZExt","","",33,null],[18,"SExt","","",33,null],[18,"NoReturn","","",33,null],[18,"InReg","","",33,null],[18,"StructRet","","",33,null],[18,"NoUnwind","","",33,null],[18,"NoAlias","","",33,null],[18,"ByVal","","",33,null],[18,"Nest","","",33,null],[18,"ReadNone","","",33,null],[18,"ReadOnly","","",33,null],[18,"NoInline","","",33,null],[18,"AlwaysInline","","",33,null],[18,"OptimizeForSize","","",33,null],[18,"StackProtect","","",33,null],[18,"StackProtectReq","","",33,null],[18,"NoCapture","","",33,null],[18,"NoRedZone","","",33,null],[18,"NoImplicitFloat","","",33,null],[18,"Naked","","",33,null],[18,"InlineHint","","",33,null],[18,"ReturnsTwice","","",33,null],[18,"UWTable","","",33,null],[18,"NonLazyBind","","",33,null],[18,"SanitizeAddress","","",33,null],[18,"MinSize","","",33,null],[18,"NoDuplicate","","",33,null],[18,"StackProtectStrong","","",33,null],[18,"SanitizeThread","","",33,null],[18,"SanitizeMemory","","",33,null],[18,"NoBuiltin","","",33,null],[18,"Returned","","",33,null],[18,"Cold","","",33,null],[18,"Builtin","","",33,null],[18,"OptimizeNone","","",33,null],[18,"InAlloca","","",33,null],[18,"NonNull","","",33,null],[18,"JumpTable","","",33,null],[18,"Convergent","","",33,null],[18,"SafeStack","","",33,null],[18,"NoRecurse","","",33,null],[18,"InaccessibleMemOnly","","",33,null],[18,"InaccessibleMemOrArgMemOnly","","",33,null],[11,"empty","rustc_llvm","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"attribute"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"attribute"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"u64"}],"output":{"name":"attribute"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,null],[11,"is_all","","Returns `true` if all flags are currently set.",33,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,null],[11,"insert","","Inserts the specified flags in-place.",33,null],[11,"remove","","Removes the specified flags in-place.",33,null],[11,"toggle","","Toggles the specified flags in-place.",33,null],[11,"bitor","","Returns the union of the two sets of flags.",33,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,null],[11,"bitand","","Returns the intersection between the two sets of flags.",33,null],[11,"sub","","Returns the set difference of the two sets of flags.",33,null],[11,"not","","Returns the complement of this set of flags.",33,null],[11,"fmt","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"attributes"}}],[11,"clone","","",34,null],[11,"set","","",34,null],[11,"unset","","",34,null],[11,"set_dereferenceable","","",34,null],[11,"unset_dereferenceable","","",34,null],[11,"apply_llfn","","",34,null],[11,"apply_callsite","","",34,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"eq","","",18,null],[11,"clone","","",18,null],[11,"eq","","",19,null],[11,"clone","","",19,null],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"clone","","",24,null],[11,"drop","","",0,null],[11,"new","","",1,{"inputs":[{"name":"memorybufferref"}],"output":{"name":"option"}}],[11,"drop","","",1,null],[11,"drop","","",2,null],[11,"new","","",35,null],[11,"raw","","",35,null],[11,"drop","","",35,null]],"paths":[[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[4,"CallConv"],[4,"Visibility"],[4,"Linkage"],[4,"DiagnosticSeverity"],[4,"DLLStorageClassTypes"],[4,"AttributeSet"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"SynchronizationScope"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"CodeGenOptSize"],[4,"RelocMode"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[4,"ArchiveKind"],[4,"SupportedPassKind"],[3,"ArchiveRO"],[3,"Iter"],[3,"Child"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"DIDescriptorFlags"],[3,"Attribute"],[3,"Attributes"],[3,"OperandBundleDef"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",1,null],[12,"bools","","Map of capability name to boolean value",1,null],[12,"numbers","","Map of capability name to numeric value",1,null],[12,"strings","","Map of capability name to raw (unexpanded) string",1,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","A terminfo creation error.",null,null],[13,"TermUnset","","TermUnset Indicates that the environment doesn&#39;t include enough information to find\nthe terminfo entry.",2,null],[13,"MalformedTerminfo","","MalformedTerminfo indicates that parsing the terminfo entry failed.",2,null],[13,"IoError","","io::Error forwards any io::Errors encountered when finding or reading the terminfo entry.",2,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",3,null],[13,"Number","","",3,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",3,null],[11,"new","","Return a new zero-initialized Variables",4,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",1,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"from_env","","Create a TermInfo based on current environment.",1,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fg","","",5,null],[11,"bg","","",5,null],[11,"attr","","",5,null],[11,"supports_attr","","",5,null],[11,"reset","","",5,null],[11,"get_ref","","",5,null],[11,"get_mut","","",5,null],[11,"into_inner","","",5,null],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",5,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",5,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",5,null],[11,"flush","","",5,null],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal&#39;s output writer type.",6,null],[10,"fg","","Sets the foreground color to the given color.",6,null],[10,"bg","","Sets the background color to the given color.",6,null],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",6,null],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",6,null],[10,"reset","","Resets all terminal attributes and colors to their defaults.",6,null],[10,"get_ref","","Gets an immutable reference to the stream inside",6,null],[10,"get_mut","","Gets a mutable reference to the stream inside",6,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",6,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null]],"paths":[[4,"Attr"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Opt","getopts","A description of a possible option.",null,null],[12,"name","","Name of the option",0,null],[12,"hasarg","","Whether it has an argument",0,null],[12,"occur","","How often it can occur",0,null],[12,"aliases","","Which options it aliases",0,null],[3,"OptGroup","","One group of options, e.g., both `-h` and `--help`, along with\ntheir shared description and properties.",null,null],[12,"short_name","","Short name of the option, e.g. `h` for a `-h` option",1,null],[12,"long_name","","Long name of the option, e.g. `help` for a `--help` option",1,null],[12,"hint","","Hint for argument, e.g. `FILE` for a `-o FILE` option",1,null],[12,"desc","","Description for usage help text",1,null],[12,"hasarg","","Whether option has an argument",1,null],[12,"occur","","How often it can occur",1,null],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",2,null],[4,"Name","","Name of an option. Either a string or a single char.",null,null],[13,"Long","","A string representing the long name of an option.\nFor example: &quot;help&quot;",3,null],[13,"Short","","A char representing the short name of an option.\nFor example: &#39;h&#39;",3,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",4,null],[13,"No","","The option takes no argument.",4,null],[13,"Maybe","","The option argument is optional.",4,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",5,null],[13,"Optional","","The option occurs at most once.",5,null],[13,"Multi","","The option occurs zero or more times.",5,null],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Debug` implementation to output detailed\ninformation.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",6,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",6,null],[13,"OptionMissing","","A required option is not present.",6,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",6,null],[13,"UnexpectedArgument","","There&#39;s an argument being passed to a non-argument option.",6,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",7,null],[13,"UnrecognizedOption_","","",7,null],[13,"OptionMissing_","","",7,null],[13,"OptionDuplicated_","","",7,null],[13,"UnexpectedArgument_","","",7,null],[5,"reqopt","","Create a long option that is required and takes an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optopt","","Create a long option that is optional and takes an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflag","","Create a long option that is optional and does not take an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optflagopt","","Create a long option that is optional and takes an optional argument.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"optgroup"}}],[5,"opt","","Create a generic option group, stating all parameters explicitly",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"optgroup"}}],[5,"getopts","","Parse command line arguments according to the provided options.",null,null],[5,"usage","","Derive a usage message from a set of long options.",null,null],[5,"short_usage","","Derive a short one-line usage summary from a set of long options.",null,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"clone","","",7,null],[11,"long_to_short","","Translate OptGroup into Opt.\n(Both short and long names correspond to different Opts).",1,null],[11,"opt_present","","Returns true if an option was matched.",2,null],[11,"opt_count","","Returns the number of times an option was matched.",2,null],[11,"opts_present","","Returns true if any of several options were matched.",2,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",2,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",2,null],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",2,null],[11,"opt_default","","Returns the matching string, a default, or none.",2,null],[11,"fmt","","",6,null]],"paths":[[3,"Opt"],[3,"OptGroup"],[3,"Matches"],[4,"Name"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"]]};
searchIndex["std"] = {"doc":"# The Rust Standard Library","items":[[0,"any","std","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[11,"is","","Returns true if the boxed type is the same as `T`",0,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",0,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",0,null],[11,"is","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",0,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",0,null],[11,"hash","core::num","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"shl","","",1,null],[11,"shl_assign","","",1,null],[11,"shr","","",1,null],[11,"shr_assign","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"add","","",1,null],[11,"add_assign","","",1,null],[11,"sub","","",1,null],[11,"sub_assign","","",1,null],[11,"mul","","",1,null],[11,"mul_assign","","",1,null],[11,"div","","",1,null],[11,"div_assign","","",1,null],[11,"rem","","",1,null],[11,"rem_assign","","",1,null],[11,"not","","",1,null],[11,"bitxor","","",1,null],[11,"bitxor_assign","","",1,null],[11,"bitor","","",1,null],[11,"bitor_assign","","",1,null],[11,"bitand","","",1,null],[11,"bitand_assign","","",1,null],[11,"neg","","",1,null],[11,"eq","core::num::dec2flt","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","core::num","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"hash","core::nonzero","",6,null],[11,"fmt","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"cmp","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",6,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",6,null],[11,"new","core::ptr","Creates a new `Unique`.",7,null],[11,"get","","Dereferences the content.",7,null],[11,"get_mut","","Mutably dereferences the content.",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"new","","Creates a new `Shared`.",8,null],[11,"clone","","",8,null],[11,"deref","","",8,null],[11,"fmt","","",8,null],[11,"hash","core::marker","",9,null],[11,"eq","","",9,null],[11,"partial_cmp","","",9,null],[11,"cmp","","",9,null],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"from","","",14,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"contains","","# Examples",15,null],[11,"hash","core::cmp","",16,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"clone","","",16,null],[11,"reverse","","Reverse the `Ordering`.",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"fmt","std","",0,null],[11,"fmt","","",0,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",12,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",14,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"next","","",12,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",9,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"Any","std::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",0,null],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"cell","std","Shareable mutable containers.",null,null],[3,"Cell","std::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",32,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",32,null],[13,"Unused","","There are no outstanding borrows on this cell.",32,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","std","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","std::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",118,null],[11,"clone_from","","Performs copy-assignment from `source`.",118,null],[0,"cmp","std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","std::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",119,null],[11,"ne","","This method tests for `!=`.",119,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",16,null],[13,"Equal","","An ordering where a compared value is equal [to another].",16,null],[13,"Greater","","An ordering where a compared value is greater [than another].",16,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",120,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",121,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",121,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",121,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",121,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",121,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"convert","std","Traits for conversions between types.",null,null],[8,"AsRef","std::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",122,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",123,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",124,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",125,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",126,null],[10,"try_into","","Performs the conversion.",126,null],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",127,null],[10,"try_from","","Performs the conversion.",127,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"default","std","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",128,{"inputs":[],"output":{"name":"self"}}],[0,"hash","std","Generic hashing support.",null,null],[8,"Hash","std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",129,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",129,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",130,null],[10,"write","","Writes some data into this `Hasher`",130,null],[11,"write_u8","","Write a single `u8` into this hasher",130,null],[11,"write_u16","","Write a single `u16` into this hasher.",130,null],[11,"write_u32","","Write a single `u32` into this hasher.",130,null],[11,"write_u64","","Write a single `u64` into this hasher.",130,null],[11,"write_usize","","Write a single `usize` into this hasher.",130,null],[11,"write_i8","","Write a single `i8` into this hasher.",130,null],[11,"write_i16","","Write a single `i16` into this hasher.",130,null],[11,"write_i32","","Write a single `i32` into this hasher.",130,null],[11,"write_i64","","Write a single `i64` into this hasher.",130,null],[11,"write_isize","","Write a single `isize` into this hasher.",130,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",131,null],[10,"build_hasher","","Creates a new hasher.",131,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"intrinsics","std","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","std::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"iter","std","Composable external iteration.",null,null],[3,"Rev","std::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",132,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",133,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",134,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",134,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",135,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",136,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",137,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",137,null],[10,"into_iter","","Creates an iterator from a value.",137,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",138,null],[10,"next","","Advances the iterator and returns the next value.",138,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",138,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",138,null],[11,"last","","Consumes the iterator, returning the last element.",138,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",138,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",138,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",138,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",138,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",138,null],[11,"filter_map","","Creates an iterator that both filters and maps.",138,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",138,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",138,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",138,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",138,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",138,null],[11,"take","","Creates an iterator that yields its first `n` elements.",138,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",138,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",138,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",138,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",138,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",138,null],[11,"collect","","Transforms an iterator into a collection.",138,null],[11,"partition","","Consumes an iterator, creating two collections from it.",138,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",138,null],[11,"all","","Tests if every element of the iterator matches a predicate.",138,null],[11,"any","","Tests if any element of the iterator matches a predicate.",138,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",138,null],[11,"position","","Searches for an element in an iterator, returning its index.",138,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",138,null],[11,"max","","Returns the maximum element of an iterator.",138,null],[11,"min","","Returns the minimum element of an iterator.",138,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",138,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",138,null],[11,"rev","","Reverses an iterator&#39;s direction.",138,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",138,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",138,null],[11,"cycle","","Repeats an iterator endlessly.",138,null],[11,"sum","","Sums the elements of an iterator.",138,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",138,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",138,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",138,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",138,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",138,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",138,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",138,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",138,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",138,null],[0,"marker","std","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"mem","std","Basic functions for dealing with memory.",null,null],[5,"forget","std::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"ops","std","Overloadable operators.",null,null],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",139,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",140,null],[10,"add","","The method for the `+` operator",140,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",141,null],[10,"sub","","The method for the `-` operator",141,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",142,null],[10,"mul","","The method for the `*` operator",142,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",143,null],[10,"div","","The method for the `/` operator",143,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",144,null],[10,"rem","","The method for the `%` operator",144,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",145,null],[10,"neg","","The method for the unary `-` operator",145,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",146,null],[10,"not","","The method for the unary `!` operator",146,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",147,null],[10,"bitand","","The method for the `&amp;` operator",147,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",148,null],[10,"bitor","","The method for the `|` operator",148,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",149,null],[10,"bitxor","","The method for the `^` operator",149,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",150,null],[10,"shl","","The method for the `&lt;&lt;` operator",150,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",151,null],[10,"shr","","The method for the `&gt;&gt;` operator",151,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",152,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",153,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",154,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",155,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",156,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",157,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",158,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",159,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",160,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",161,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",162,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",162,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",163,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",11,null],[12,"end","","The upper bound of the range (exclusive).",11,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",12,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",13,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",14,null],[12,"at","std::ops::RangeInclusive","",14,null],[13,"NonEmpty","std::ops","Non-empty range (iteration will yield value(s))",14,null],[12,"start","std::ops::RangeInclusive","",14,null],[12,"end","","",14,null],[3,"RangeToInclusive","std::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",15,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",164,null],[10,"deref","","The method called to dereference a value",164,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",165,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",166,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",167,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",168,null],[10,"call_once","","This is called when the call operator is used.",168,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",169,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",170,null],[10,"make_place","","Creates a fresh place from `self`.",170,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",171,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",171,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",172,null],[16,"Place","","The place that will negotiate the storage of the data.",172,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",172,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",173,{"inputs":[],"output":{"name":"self"}}],[0,"ptr","std","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","std::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","std::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",67,null],[12,"len","","",67,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",68,null],[12,"vtable","","",68,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",174,null],[0,"result","std","Error handling with the `Result` type.",null,null],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",69,null],[13,"Err","","Contains the error value",69,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"option","std","Optional values.",null,null],[4,"Option","std::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",63,null],[13,"Some","","Some value `T`",63,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"boxed","std","A pointer type for heap allocation.",null,null],[17,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[11,"clone","alloc::boxed","",175,null],[11,"pointer","","",176,null],[11,"make_place","","",176,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",176,null],[11,"finalize","","",177,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",175,null],[11,"drop","","",176,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",177,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",177,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",177,null],[11,"default","","",177,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",177,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",177,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",177,null],[11,"clone","","",177,null],[11,"eq","","",177,null],[11,"ne","","",177,null],[11,"partial_cmp","","",177,null],[11,"lt","","",177,null],[11,"le","","",177,null],[11,"ge","","",177,null],[11,"gt","","",177,null],[11,"cmp","","",177,null],[11,"hash","","",177,null],[11,"from","","",177,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",177,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",177,null],[11,"fmt","","",177,null],[11,"fmt","","",177,null],[11,"fmt","","",177,null],[11,"deref","","",177,null],[11,"deref_mut","","",177,null],[11,"next","","",177,null],[11,"size_hint","","",177,null],[11,"next_back","","",177,null],[11,"call_once","","",177,null],[11,"call_once","","",177,null],[11,"clone","","",177,null],[11,"borrow","","",177,null],[11,"borrow_mut","","",177,null],[11,"as_ref","","",177,null],[11,"as_mut","","",177,null],[11,"fmt","alloc::arc","",178,null],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",179,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",179,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",179,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",179,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",179,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",179,null],[11,"deref","","",179,null],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",179,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",179,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",179,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",178,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",178,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",178,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",179,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",179,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",179,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",179,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",179,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",179,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",179,null],[11,"cmp","","",179,null],[11,"fmt","","",179,null],[11,"fmt","","",179,null],[11,"fmt","","",179,null],[11,"default","","",179,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",179,null],[11,"from","","",179,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",178,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",179,null],[11,"as_ref","","",179,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",180,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",180,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",180,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",180,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",180,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",180,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",180,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",180,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",180,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",180,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",180,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",180,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",180,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",180,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",180,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",180,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",180,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",180,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",180,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",180,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",180,null],[11,"hash","","",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"fmt","","",180,null],[11,"from","","",180,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",181,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",181,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",181,null],[11,"fmt","","",181,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",181,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",180,null],[11,"as_ref","","",180,null],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",182,{"inputs":[],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",182,{"inputs":[{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",182,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",182,{"inputs":[{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",182,null],[11,"cap","","Gets the capacity of the allocation.",182,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",182,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",182,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",182,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",182,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",182,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",182,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",182,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",182,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",182,null],[3,"ExchangeHeapSingleton","std::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",183,null],[10,"call_box","","",183,null],[0,"rc","std","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[3,"Rc","std::rc","A reference-counted pointer type over an immutable value.",null,null],[3,"Weak","","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"borrow","std","A module for working with borrowed data.",null,null],[11,"clone","collections::binary_heap","",184,null],[11,"clone_from","","",184,null],[11,"default","","",184,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",184,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",184,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",184,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",184,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",184,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",184,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",184,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",184,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",184,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",184,null],[11,"push","","Pushes an item onto the binary heap.",184,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",184,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",184,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",184,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",184,null],[11,"len","","Returns the length of the binary heap.",184,null],[11,"is_empty","","Checks if the binary heap is empty.",184,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",184,null],[11,"clear","","Drops all items from the binary heap.",184,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",184,null],[11,"clone","","",185,null],[11,"next","","",185,null],[11,"size_hint","","",185,null],[11,"next_back","","",185,null],[11,"clone","","",186,null],[11,"next","","",186,null],[11,"size_hint","","",186,null],[11,"next_back","","",186,null],[11,"next","","",187,null],[11,"size_hint","","",187,null],[11,"next_back","","",187,null],[11,"from","","",184,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",188,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",184,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",184,null],[11,"extend","","",184,null],[11,"extend","","",184,null],[11,"drop","collections::btree::map","",189,null],[11,"clone","","",189,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",189,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",189,null],[11,"get","","Returns a reference to the value corresponding to the key.",189,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",189,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",189,null],[11,"insert","","Inserts a key-value pair into the map.",189,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",189,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",189,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",189,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",189,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",189,null],[11,"next","","",190,null],[11,"size_hint","","",190,null],[11,"next_back","","",190,null],[11,"len","","",190,null],[11,"clone","","",190,null],[11,"next","","",191,null],[11,"size_hint","","",191,null],[11,"next_back","","",191,null],[11,"len","","",191,null],[11,"into_iter","","",189,null],[11,"drop","","",192,null],[11,"next","","",192,null],[11,"size_hint","","",192,null],[11,"next_back","","",192,null],[11,"len","","",192,null],[11,"next","","",193,null],[11,"size_hint","","",193,null],[11,"next_back","","",193,null],[11,"len","","",193,null],[11,"clone","","",193,null],[11,"next","","",194,null],[11,"size_hint","","",194,null],[11,"next_back","","",194,null],[11,"len","","",194,null],[11,"clone","","",194,null],[11,"next","","",195,null],[11,"next","","",196,null],[11,"size_hint","","",196,null],[11,"next_back","","",196,null],[11,"len","","",196,null],[11,"next_back","","",195,null],[11,"clone","","",195,null],[11,"next","","",197,null],[11,"next_back","","",197,null],[11,"from_iter","","",189,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",189,null],[11,"extend","","",189,null],[11,"hash","","",189,null],[11,"default","","",189,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",189,null],[11,"partial_cmp","","",189,null],[11,"cmp","","",189,null],[11,"fmt","","",189,null],[11,"index","","",189,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",189,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",189,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",189,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",189,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",189,null],[11,"len","","Returns the number of elements in the map.",189,null],[11,"is_empty","","Returns true if the map contains no elements.",189,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",198,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",198,null],[11,"key","","Returns a reference to this entry&#39;s key.",198,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",199,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",199,null],[11,"key","","Gets a reference to the key in the entry.",200,null],[11,"get","","Gets a reference to the value in the entry.",200,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",200,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",200,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",200,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",200,null],[11,"partial_cmp","collections::btree::set","",201,null],[11,"lt","","",201,null],[11,"le","","",201,null],[11,"gt","","",201,null],[11,"ge","","",201,null],[11,"cmp","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"hash","","",201,null],[11,"clone","","",201,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",201,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",201,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",201,null],[11,"difference","","Visits the values representing the difference, in ascending order.",201,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",201,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",201,null],[11,"union","","Visits the values representing the union, in ascending order.",201,null],[11,"len","","Returns the number of elements in the set.",201,null],[11,"is_empty","","Returns true if the set contains no elements.",201,null],[11,"clear","","Clears the set, removing all values.",201,null],[11,"contains","","Returns `true` if the set contains a value.",201,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",201,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",201,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",201,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",201,null],[11,"insert","","Adds a value to the set.",201,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",201,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",201,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",201,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",201,null],[11,"from_iter","","",201,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",201,null],[11,"extend","","",201,null],[11,"extend","","",201,null],[11,"default","","",201,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",201,null],[11,"clone","","",202,null],[11,"next","","",202,null],[11,"size_hint","","",202,null],[11,"next_back","","",202,null],[11,"len","","",202,null],[11,"next","","",203,null],[11,"size_hint","","",203,null],[11,"next_back","","",203,null],[11,"len","","",203,null],[11,"clone","","",204,null],[11,"next","","",204,null],[11,"next_back","","",204,null],[11,"clone","","",205,null],[11,"next","","",205,null],[11,"size_hint","","",205,null],[11,"clone","","",206,null],[11,"next","","",206,null],[11,"size_hint","","",206,null],[11,"clone","","",207,null],[11,"next","","",207,null],[11,"size_hint","","",207,null],[11,"clone","","",208,null],[11,"next","","",208,null],[11,"size_hint","","",208,null],[11,"borrow","collections::borrow","",209,null],[11,"clone","","",209,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",209,null],[11,"into_owned","","Extracts the owned data.",209,null],[11,"deref","","",209,null],[11,"cmp","","",209,null],[11,"eq","","",209,null],[11,"partial_cmp","","",209,null],[11,"fmt","","",209,null],[11,"fmt","","",209,null],[11,"hash","","",209,null],[11,"as_ref","","",209,null],[11,"hash","collections::enum_set","",210,null],[11,"cmp","","",210,null],[11,"partial_cmp","","",210,null],[11,"lt","","",210,null],[11,"le","","",210,null],[11,"gt","","",210,null],[11,"ge","","",210,null],[11,"eq","","",210,null],[11,"ne","","",210,null],[11,"clone","","",210,null],[11,"fmt","","",210,null],[11,"new","","Returns an empty `EnumSet`.",210,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",210,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",210,null],[11,"clear","","",210,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",210,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",210,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",210,null],[11,"union","","Returns the union of both `EnumSets`.",210,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",210,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",210,null],[11,"remove","","Removes an enum from the EnumSet",210,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",210,null],[11,"iter","","Returns an iterator over an `EnumSet`.",210,null],[11,"sub","","",210,null],[11,"bitor","","",210,null],[11,"bitand","","",210,null],[11,"bitxor","","",210,null],[11,"clone","","",211,null],[11,"next","","",211,null],[11,"size_hint","","",211,null],[11,"from_iter","","",210,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",210,null],[11,"extend","","",210,null],[11,"clone","collections::linked_list","",212,null],[11,"clone","","",213,null],[11,"default","","",214,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",214,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",214,null],[11,"iter","","Provides a forward iterator.",214,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",214,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",214,null],[11,"len","","Returns the length of the `LinkedList`.",214,null],[11,"clear","","Removes all elements from the `LinkedList`.",214,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",214,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",214,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",214,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",214,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",214,null],[11,"push_front","","Adds an element first in the list.",214,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",214,null],[11,"push_back","","Appends an element to the back of a list",214,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",214,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",214,null],[11,"front_place","","Returns a place for insertion at the front of the list.",214,null],[11,"back_place","","Returns a place for insertion at the back of the list.",214,null],[11,"drop","","",214,null],[11,"next","","",212,null],[11,"size_hint","","",212,null],[11,"next_back","","",212,null],[11,"next","","",215,null],[11,"size_hint","","",215,null],[11,"next_back","","",215,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",215,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",215,null],[11,"next","","",213,null],[11,"size_hint","","",213,null],[11,"next_back","","",213,null],[11,"from_iter","","",214,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",214,null],[11,"extend","","",214,null],[11,"extend","","",214,null],[11,"eq","","",214,null],[11,"ne","","",214,null],[11,"partial_cmp","","",214,null],[11,"cmp","","",214,null],[11,"clone","","",214,null],[11,"fmt","","",214,null],[11,"hash","","",214,null],[11,"make_place","","",216,null],[11,"pointer","","",216,null],[11,"finalize","","",216,null],[11,"make_place","","",217,null],[11,"pointer","","",217,null],[11,"finalize","","",217,null],[11,"start","std::ops","",12,null],[11,"end","","",13,null],[11,"start","","",11,null],[11,"end","","",11,null],[11,"borrow","collections::vec","",188,null],[11,"borrow_mut","","",188,null],[11,"clone","collections::str","",218,null],[11,"next","","",218,null],[11,"size_hint","","",218,null],[11,"borrow","collections::string","",219,null],[11,"cmp","","",219,null],[11,"partial_cmp","","",219,null],[11,"lt","","",219,null],[11,"le","","",219,null],[11,"gt","","",219,null],[11,"ge","","",219,null],[11,"fmt","","",220,null],[11,"fmt","","",221,null],[11,"new","","Creates a new empty `String`.",219,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",219,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",219,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",219,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",219,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",219,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",219,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",219,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",219,null],[11,"as_str","","Extracts a string slice containing the entire string.",219,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",219,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",219,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",219,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",219,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",219,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",219,null],[11,"push","","Appends the given `char` to the end of this `String`.",219,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",219,null],[11,"truncate","","Shortens this `String` to the specified length.",219,null],[11,"pop","","Removes the last character from the string buffer and returns it.",219,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",219,null],[11,"insert","","Inserts a character into this `String` at a byte position.",219,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",219,null],[11,"len","","Returns the length of this `String`, in bytes.",219,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",219,null],[11,"clear","","Truncates this `String`, removing all contents.",219,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",219,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",219,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",220,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",220,null],[11,"fmt","","",220,null],[11,"fmt","","",221,null],[11,"clone","","",219,null],[11,"clone_from","","",219,null],[11,"from_iter","","",219,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",219,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",219,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",219,null],[11,"extend","","",219,null],[11,"extend","","",219,null],[11,"extend","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","","",219,null],[11,"ne","","",219,null],[11,"eq","collections::borrow","",209,null],[11,"ne","","",209,null],[11,"eq","","",209,null],[11,"ne","","",209,null],[11,"eq","","",209,null],[11,"ne","","",209,null],[11,"eq","collections::string","",219,null],[11,"ne","","",219,null],[11,"default","","",219,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",219,null],[11,"fmt","","",219,null],[11,"hash","","",219,null],[11,"add","","",219,null],[11,"index","","",219,null],[11,"index","","",219,null],[11,"index","","",219,null],[11,"index","","",219,null],[11,"index","","",219,null],[11,"index","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"index_mut","","",219,null],[11,"deref","","",219,null],[11,"deref_mut","","",219,null],[11,"from_str","","",219,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",222,null],[11,"fmt","","",222,null],[11,"fmt","","",222,null],[11,"eq","","",222,null],[11,"as_ref","","",219,null],[11,"as_ref","","",219,null],[11,"from","","",219,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",209,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",209,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",219,null],[11,"write_str","","",219,null],[11,"write_char","","",219,null],[11,"drop","","",223,null],[11,"next","","",223,null],[11,"size_hint","","",223,null],[11,"next_back","","",223,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",188,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",188,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",188,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",188,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",188,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",188,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",188,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",188,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",188,null],[11,"as_slice","","Extracts a slice containing the entire vector.",188,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",188,null],[11,"set_len","","Sets the length of a vector.",188,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",188,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",188,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",188,null],[11,"retain","","Retains only the elements specified by the predicate.",188,null],[11,"push","","Appends an element to the back of a collection.",188,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",188,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",188,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",188,null],[11,"clear","","Clears the vector, removing all values.",188,null],[11,"len","","Returns the number of elements in the vector.",188,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",188,null],[11,"split_off","","Splits the collection into two at the given index.",188,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",188,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",188,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",188,null],[11,"clone","","",188,null],[11,"clone_from","","",188,null],[11,"hash","","",188,null],[11,"index","","",188,null],[11,"index_mut","","",188,null],[11,"index","","",188,null],[11,"index","","",188,null],[11,"index","","",188,null],[11,"index","","",188,null],[11,"index","","",188,null],[11,"index","","",188,null],[11,"index_mut","","",188,null],[11,"index_mut","","",188,null],[11,"index_mut","","",188,null],[11,"index_mut","","",188,null],[11,"index_mut","","",188,null],[11,"index_mut","","",188,null],[11,"deref","","",188,null],[11,"deref_mut","","",188,null],[11,"from_iter","","",188,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",188,null],[11,"extend","","",188,null],[11,"extend","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","collections::borrow","",209,null],[11,"ne","","",209,null],[11,"eq","","",209,null],[11,"ne","","",209,null],[11,"eq","","",209,null],[11,"ne","","",209,null],[11,"eq","collections::vec","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"eq","","",188,null],[11,"ne","","",188,null],[11,"partial_cmp","","",188,null],[11,"cmp","","",188,null],[11,"drop","","",188,null],[11,"default","","",188,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",188,null],[11,"as_ref","","",188,null],[11,"as_mut","","",188,null],[11,"as_ref","","",188,null],[11,"as_mut","","",188,null],[11,"from","","",188,null],[11,"from","","",188,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",209,null],[11,"from","","",209,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",209,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",224,null],[11,"size_hint","","",224,null],[11,"count","","",224,null],[11,"next_back","","",224,null],[11,"clone","","",224,null],[11,"drop","","",224,null],[11,"next","","",225,null],[11,"size_hint","","",225,null],[11,"next_back","","",225,null],[11,"drop","","",225,null],[11,"clone","collections::vec_deque","",226,null],[11,"drop","","",226,null],[11,"default","","",226,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",226,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",226,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",226,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",226,null],[11,"swap","","Swaps elements at indices `i` and `j`.",226,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",226,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",226,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",226,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",226,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",226,null],[11,"iter","","Returns a front-to-back iterator.",226,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",226,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",226,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",226,null],[11,"len","","Returns the number of elements in the `VecDeque`.",226,null],[11,"is_empty","","Returns true if the buffer contains no elements",226,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",226,null],[11,"clear","","Clears the buffer, removing all values.",226,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",226,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",226,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",226,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",226,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",226,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",226,null],[11,"push_front","","Inserts an element first in the sequence.",226,null],[11,"push_back","","Appends an element to the back of a buffer",226,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",226,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",226,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",226,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",226,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",226,null],[11,"split_off","","Splits the collection into two at the given index.",226,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",226,null],[11,"retain","","Retains only the elements specified by the predicate.",226,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",226,null],[11,"clone","","",227,null],[11,"next","","",227,null],[11,"size_hint","","",227,null],[11,"next_back","","",227,null],[11,"next","","",228,null],[11,"size_hint","","",228,null],[11,"next_back","","",228,null],[11,"clone","","",229,null],[11,"next","","",229,null],[11,"size_hint","","",229,null],[11,"next_back","","",229,null],[11,"drop","","",230,null],[11,"next","","",230,null],[11,"size_hint","","",230,null],[11,"next_back","","",230,null],[11,"eq","","",226,null],[11,"partial_cmp","","",226,null],[11,"cmp","","",226,null],[11,"hash","","",226,null],[11,"index","","",226,null],[11,"index_mut","","",226,null],[11,"from_iter","","",226,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",226,null],[11,"extend","","",226,null],[11,"extend","","",226,null],[11,"fmt","","",226,null],[11,"from","","",226,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",188,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",231,null],[11,"ne","","",231,null],[11,"hash","","",231,null],[11,"fmt","","",231,null],[11,"clone","","",231,null],[8,"ToOwned","std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",232,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",232,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",209,null],[13,"Owned","","Owned data.",209,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",233,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",234,null],[0,"fmt","std","Utilities for formatting and printing strings",null,null],[5,"format","std::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[6,"Result","","",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",235,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",236,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",237,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",238,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",239,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",240,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",241,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",242,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",243,null],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",243,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",243,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",244,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[0,"slice","std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","std::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",245,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",245,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",245,null],[10,"connect","","",245,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"str","std","Unicode string slices.",null,null],[6,"Utf16Units","std::str","",null,null],[3,"EncodeUtf16","","External iterator for a string&#39;s UTF-16 code units.",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",246,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",246,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",246,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",246,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",246,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",84,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",84,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",84,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",247,null],[10,"next","","Performs the next search step starting from the front.",247,null],[11,"next_match","","Find the next `Match` result. See `next()`",247,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",247,null],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",248,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",248,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",248,null],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"Bytes","std::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[11,"clone","rustc_unicode::u_str","",249,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",249,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",249,null],[11,"size_hint","","",249,null],[11,"next","","",250,null],[11,"next_back","","",250,null],[11,"next","rustc_unicode::char","",251,null],[11,"next","","",252,null],[11,"clone","","",253,null],[11,"eq","","",254,null],[11,"ne","","",254,null],[11,"clone","","",254,null],[11,"fmt","","",254,null],[11,"next","","",253,null],[11,"size_hint","","",253,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",254,null],[11,"fmt","","",254,null],[3,"SplitWhitespace","std::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",106,null],[12,"next","","Index of the first byte of the next `char`",106,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",255,null],[10,"from_str","","Parses a string `s` to return a value of this type.",255,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[0,"string","std","A UTF-8 encoded, growable string.",null,null],[3,"String","std::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",256,null],[3,"Drain","","A draining iterator for `String`.",null,null],[0,"vec","std","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","std::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"char","std","A character type.",null,null],[3,"ToLowercase","std::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[0,"isize","std","The pointer-sized signed integer type.",null,null],[17,"MIN","std::isize","",null,null],[17,"MAX","","",null,null],[0,"i8","std","The 8-bit signed integer type.",null,null],[17,"MIN","std::i8","",null,null],[17,"MAX","","",null,null],[0,"i16","std","The 16-bit signed integer type.",null,null],[17,"MIN","std::i16","",null,null],[17,"MAX","","",null,null],[0,"i32","std","The 32-bit signed integer type.",null,null],[17,"MIN","std::i32","",null,null],[17,"MAX","","",null,null],[0,"i64","std","The 64-bit signed integer type.",null,null],[17,"MIN","std::i64","",null,null],[17,"MAX","","",null,null],[0,"usize","std","The pointer-sized unsigned integer type.",null,null],[17,"MIN","std::usize","",null,null],[17,"MAX","","",null,null],[0,"u8","std","The 8-bit unsigned integer type.",null,null],[17,"MIN","std::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","std","The 16-bit unsigned integer type.",null,null],[17,"MIN","std::u16","",null,null],[17,"MAX","","",null,null],[0,"u32","std","The 32-bit unsigned integer type.",null,null],[17,"MIN","std::u32","",null,null],[17,"MAX","","",null,null],[0,"u64","std","The 64-bit unsigned integer type.",null,null],[17,"MIN","std::u64","",null,null],[17,"MAX","","",null,null],[0,"error","std","Traits for working with Errors.",null,null],[8,"Error","std::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",257,null],[11,"cause","","The lower-level cause of this error, if any.",257,null],[11,"from","std::boxed","",177,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",177,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","std::str","",89,null],[11,"description","","",90,null],[11,"description","core::num","",5,null],[11,"description","","",4,null],[11,"description","core::num::dec2flt","",2,null],[11,"description","std::string","",220,null],[11,"description","","",221,null],[11,"description","","",222,null],[11,"description","std::char","",254,null],[11,"description","std::boxed","",177,null],[11,"cause","","",177,null],[11,"is","std","Returns true if the boxed type is the same as `T`",257,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",257,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",257,null],[11,"is","","Forwards to the method defined on the type `Any`.",257,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",257,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",257,null],[11,"is","","Forwards to the method defined on the type `Any`.",257,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",257,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",257,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",257,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",257,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",257,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[0,"prelude","","The Rust Prelude.",null,null],[0,"v1","std::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[0,"f32","std","The 32-bit floating point type.",null,null],[17,"RADIX","std::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","std","The 64-bit floating point type.",null,null],[17,"RADIX","std::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","std::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"ascii","std","Operations on ASCII strings and characters.",null,null],[3,"EscapeDefault","std::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",258,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",258,null],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",258,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",258,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",258,null],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",258,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",258,null],[11,"next","","",259,null],[11,"size_hint","","",259,null],[11,"next_back","","",259,null],[0,"num","std","Additional functionality for numerics.",null,null],[8,"Zero","std::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",260,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",261,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",3,null],[13,"Infinite","","Positive or negative infinity",3,null],[13,"Zero","","Positive or negative zero",3,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",3,null],[13,"Normal","","A regular floating point number",3,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"Wrapping","","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",1,null],[0,"thread","std","Native threads.",null,null],[3,"LocalKey","std::thread","A thread local storage key which owns its contents.",null,null],[3,"ScopedKey","","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[3,"__ElfLocalKeyInner","","",null,null],[3,"__OsLocalKeyInner","","",null,null],[3,"__ScopedKeyInner","","",null,null],[3,"Builder","","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[3,"Thread","","A handle to a thread.",null,null],[3,"JoinHandle","","An owned permission to join on a thread (block on its termination).",null,null],[4,"LocalKeyState","","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",262,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",262,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",262,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,{"inputs":[],"output":null}],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,{"inputs":[{"name":"duration"}],"output":null}],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,{"inputs":[],"output":null}],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,{"inputs":[{"name":"u32"}],"output":null}],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,{"inputs":[{"name":"duration"}],"output":null}],[11,"new","","",263,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",263,null],[11,"register_dtor","","",263,null],[11,"new","","",264,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",264,null],[11,"clone","","",262,null],[11,"eq","","",262,null],[11,"with","","Acquires a reference to the value in this TLS key.",265,null],[11,"state","","Query the current state of this key.",265,null],[11,"new","","",266,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",266,null],[11,"get","","",266,null],[11,"set","","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",267,null],[11,"with","","Gets a value out of this scoped variable.",267,null],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",267,null],[6,"Result","","Indicates the manner in which a thread exited.",null,null],[11,"new","","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",268,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",268,null],[11,"stack_size","","Sets the size of the stack for the new thread.",268,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",268,null],[11,"clone","","",269,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",269,null],[11,"name","","Gets the thread&#39;s name.",269,null],[11,"fmt","","",269,null],[11,"thread","","Extracts a handle to the underlying thread",270,null],[11,"join","","Waits for the associated thread to finish.",270,null],[0,"collections","std","Collection types.",null,null],[4,"Bound","std::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",231,null],[13,"Excluded","","An exclusive bound.",231,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",231,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"LinkedList","","A doubly-linked list.",null,null],[3,"VecDeque","","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[0,"btree_map","std::collections","",null,null],[3,"IntoIter","std::collections::btree_map","An owning iterator over a BTreeMap&#39;s entries.",null,null],[3,"Values","","An iterator over a BTreeMap&#39;s values.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",198,null],[13,"Occupied","","An occupied Entry",198,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap&#39;s values.",null,null],[3,"IterMut","","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over a BTreeMap&#39;s entries.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"Keys","","An iterator over a BTreeMap&#39;s keys.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[0,"btree_set","std::collections","",null,null],[3,"SymmetricDifference","std::collections::btree_set","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"IntoIter","","An owning iterator over a BTreeSet&#39;s items.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"Iter","","An iterator over a BTreeSet&#39;s items.",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"Range","","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[0,"linked_list","std::collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","std::collections::linked_list","A doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the items of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[0,"vec_deque","std::collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","std::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[3,"HashMap","std::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[11,"clone","","",271,null],[11,"new","","Creates an empty HashMap.",271,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",271,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",271,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",271,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",271,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",271,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",271,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",271,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",271,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",271,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",271,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",271,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",271,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",271,null],[11,"len","","Returns the number of elements in the map.",271,null],[11,"is_empty","","Returns true if the map contains no elements.",271,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",271,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",271,null],[11,"get","","Returns a reference to the value corresponding to the key.",271,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",271,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",271,null],[11,"insert","","Inserts a key-value pair into the map.",271,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",271,null],[11,"eq","","",271,null],[11,"fmt","","",271,null],[11,"default","","",271,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",271,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",271,null],[11,"from_iter","","",271,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",271,null],[11,"extend","","",271,null],[11,"clone","","",272,null],[11,"new","","Creates an empty HashSet.",272,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",272,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",272,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",272,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",272,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",272,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",272,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",272,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",272,null],[11,"difference","","Visit the values representing the difference.",272,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",272,null],[11,"intersection","","Visit the values representing the intersection.",272,null],[11,"union","","Visit the values representing the union.",272,null],[11,"len","","Returns the number of elements in the set.",272,null],[11,"is_empty","","Returns true if the set contains no elements.",272,null],[11,"drain","","Clears the set, returning all elements in an iterator.",272,null],[11,"clear","","Clears the set, removing all values.",272,null],[11,"contains","","Returns `true` if the set contains a value.",272,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",272,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",272,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",272,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",272,null],[11,"insert","","Adds a value to the set.",272,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",272,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",272,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",272,null],[11,"eq","","",272,null],[11,"fmt","","",272,null],[11,"from_iter","","",272,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",272,null],[11,"extend","","",272,null],[11,"default","","",272,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",272,null],[0,"hash_map","","A hashmap",null,null],[3,"HashMap","std::collections::hash_map","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"IntoIter","","HashMap move iterator.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"Values","","HashMap values iterator.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[3,"ValuesMut","","Mutable HashMap values iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",273,null],[13,"Vacant","","A vacant Entry.",273,null],[0,"hash_set","std::collections","A hashset",null,null],[3,"HashSet","std::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[3,"Drain","","HashSet drain iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"Difference","","Difference iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"Union","","Set union iterator.",null,null],[0,"env","std","Inspection and manipulation of the process&#39;s environment.",null,null],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[3,"Args","","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[4,"VarError","","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",274,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",274,null],[5,"current_dir","","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\n`None` if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,{"inputs":[{"name":"k"},{"name":"v"}],"output":null}],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,{"inputs":[{"name":"k"}],"output":null}],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path of the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path of a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path of the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","std::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. Example value is `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use.\nExample value is `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform. Example value is `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform. Example value is `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot. Example value is `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform. Example value is `.exe`.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform. Example value is `exe`.",null,null],[11,"next","std::env","",275,null],[11,"size_hint","","",275,null],[11,"next","","",276,null],[11,"size_hint","","",276,null],[11,"clone","","",274,null],[11,"eq","","",274,null],[11,"ne","","",274,null],[11,"fmt","","",274,null],[11,"fmt","","",274,null],[11,"description","","",274,null],[11,"next","","",277,null],[11,"size_hint","","",277,null],[11,"fmt","","",278,null],[11,"fmt","","",278,null],[11,"description","","",278,null],[11,"next","","",279,null],[11,"size_hint","","",279,null],[11,"len","","",279,null],[11,"next","","",280,null],[11,"size_hint","","",280,null],[11,"len","","",280,null],[0,"ffi","std","Utilities related to FFI bindings.",null,null],[3,"CString","std::ffi","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"NulError","","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[11,"clone","","",281,null],[11,"hash","","",281,null],[11,"cmp","","",281,null],[11,"partial_cmp","","",281,null],[11,"lt","","",281,null],[11,"le","","",281,null],[11,"gt","","",281,null],[11,"ge","","",281,null],[11,"eq","","",281,null],[11,"ne","","",281,null],[11,"hash","","",282,null],[11,"fmt","","",283,null],[11,"eq","","",283,null],[11,"ne","","",283,null],[11,"clone","","",283,null],[11,"fmt","","",284,null],[11,"eq","","",284,null],[11,"ne","","",284,null],[11,"clone","","",284,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",281,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",281,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",281,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",281,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",281,null],[11,"into_bytes","","Returns the underlying byte buffer.",281,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",281,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",281,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",281,null],[11,"deref","","",281,null],[11,"fmt","","",281,null],[11,"from","std::vec","",188,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi","",282,null],[11,"default","","",281,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",281,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",283,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",283,null],[11,"description","","",283,null],[11,"fmt","","",283,null],[11,"into_cstring","","Consumes this error, returning original `CString` which generated the\nerror.",284,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",284,null],[11,"description","","",284,null],[11,"cause","","",284,null],[11,"fmt","","",284,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",282,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",282,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",282,null],[11,"as_ptr","","Returns the inner pointer to this C string.",282,null],[11,"to_bytes","","Converts this C string to a byte slice.",282,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",282,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",282,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",282,null],[11,"eq","","",282,null],[11,"partial_cmp","","",282,null],[11,"cmp","","",282,null],[11,"to_owned","","",282,null],[11,"from","","",281,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",281,null],[11,"as_ref","","",282,null],[11,"as_ref","","",281,null],[11,"clone","","",285,null],[11,"new","","Constructs a new empty `OsString`.",285,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",285,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",285,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",285,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",285,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",285,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",285,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",285,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",285,null],[11,"from","","",285,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",285,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",285,null],[11,"deref","","",285,null],[11,"default","","",285,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",285,null],[11,"eq","","",285,null],[11,"eq","","",285,null],[11,"partial_cmp","","",285,null],[11,"lt","","",285,null],[11,"le","","",285,null],[11,"gt","","",285,null],[11,"ge","","",285,null],[11,"partial_cmp","","",285,null],[11,"cmp","","",285,null],[11,"hash","","",285,null],[11,"new","","Coerces into an `OsStr` slice.",286,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",286,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",286,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",286,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",286,null],[11,"len","","Returns the length of this `OsStr`.",286,null],[11,"eq","","",286,null],[11,"eq","","",286,null],[11,"partial_cmp","","",286,null],[11,"lt","","",286,null],[11,"le","","",286,null],[11,"gt","","",286,null],[11,"ge","","",286,null],[11,"partial_cmp","","",286,null],[11,"cmp","","",286,null],[11,"eq","","",285,null],[11,"eq","","",286,null],[11,"partial_cmp","","",285,null],[11,"partial_cmp","","",286,null],[11,"eq","","",285,null],[11,"partial_cmp","","",285,null],[11,"eq","std::borrow","",209,null],[11,"eq","std::ffi","",286,null],[11,"partial_cmp","std::borrow","",209,null],[11,"partial_cmp","std::ffi","",286,null],[11,"eq","std::borrow","",209,null],[11,"partial_cmp","","",209,null],[11,"eq","","",209,null],[11,"eq","std::ffi","",285,null],[11,"partial_cmp","std::borrow","",209,null],[11,"partial_cmp","std::ffi","",285,null],[11,"hash","","",286,null],[11,"fmt","","",286,null],[11,"borrow","","",285,null],[11,"to_owned","","",286,null],[11,"as_ref","","",286,null],[11,"as_ref","","",285,null],[11,"as_ref","std::string","",219,null],[0,"fs","std","Filesystem manipulation operations.",null,null],[3,"File","std::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if\n`to` already exists.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[11,"clone","","",287,null],[11,"clone","","",288,null],[11,"fmt","","",289,null],[11,"eq","","",289,null],[11,"ne","","",289,null],[11,"clone","","",289,null],[11,"hash","","",290,null],[11,"eq","","",290,null],[11,"ne","","",290,null],[11,"clone","","",290,null],[11,"open","","Attempts to open a file in read-only mode.",291,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",291,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",291,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",291,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",291,null],[11,"metadata","","Queries metadata about the underlying file.",291,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",291,null],[11,"fmt","","",291,null],[11,"read","","",291,null],[11,"read_to_end","","",291,null],[11,"write","","",291,null],[11,"flush","","",291,null],[11,"seek","","",291,null],[11,"new","","Creates a blank new set of options ready for configuration.",288,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",288,null],[11,"write","","Sets the option for write access.",288,null],[11,"append","","Sets the option for the append mode.",288,null],[11,"truncate","","Sets the option for truncating a previous file.",288,null],[11,"create","","Sets the option for creating a new file.",288,null],[11,"create_new","","Sets the option to always create a new file.",288,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",288,null],[11,"file_type","","Returns the file type for this metadata.",287,null],[11,"is_dir","","Returns whether this metadata is for a directory.",287,null],[11,"is_file","","Returns whether this metadata is for a regular file.",287,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",287,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",287,null],[11,"modified","","Returns the last modification time listed in this metadata.",287,null],[11,"accessed","","Returns the last access time of this metadata.",287,null],[11,"created","","Returns the creation time listed in the this metadata.",287,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",289,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",289,null],[11,"is_dir","","Test whether this file type represents a directory.",290,null],[11,"is_file","","Test whether this file type represents a regular file.",290,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",290,null],[11,"next","","",292,null],[11,"path","","Returns the full path to the file that this entry represents.",293,null],[11,"metadata","","Return the metadata for the file that this entry points at.",293,null],[11,"file_type","","Return the file type for the file that this entry points at.",293,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",293,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",294,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",294,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",294,null],[0,"io","std","Traits, helpers, and type definitions for core I/O functionality.",null,null],[3,"BufReader","std::io","The `BufReader` struct adds buffering to any reader.",null,null],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",295,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",295,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",295,null],[13,"ConnectionReset","","The connection was reset by the remote server.",295,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",295,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",295,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",295,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",295,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",295,null],[13,"AlreadyExists","","An entity already exists, often a file.",295,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",295,null],[13,"InvalidInput","","A parameter was incorrect.",295,null],[13,"InvalidData","","Data not valid for the operation were encountered.",295,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",295,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",295,null],[13,"Interrupted","","This operation was interrupted.",295,null],[13,"Other","","Any I/O error not part of this list.",295,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",295,null],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",296,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",296,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",296,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",297,null],[13,"Other","","Variant representing that an I/O error occurred.",297,null],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"prelude","","The I/O Prelude",null,null],[11,"new","","Creates a new `BufReader` with a default buffer capacity.",298,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",298,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",298,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",298,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",298,null],[11,"read","","",298,null],[11,"fill_buf","","",298,null],[11,"consume","","",298,null],[11,"fmt","","",298,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",298,null],[11,"fmt","","",299,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",300,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",300,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",300,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",300,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",300,null],[11,"write","","",300,null],[11,"flush","","",300,null],[11,"fmt","","",300,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",300,null],[11,"drop","","",300,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",299,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",299,null],[11,"from","","",301,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","","",299,null],[11,"fmt","","",299,null],[11,"new","","Creates a new `LineWriter`.",302,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",302,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",302,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",302,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",302,null],[11,"write","","",302,null],[11,"flush","","",302,null],[11,"fmt","","",302,null],[11,"fmt","","",303,null],[11,"clone","","",303,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",303,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",303,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",303,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",303,null],[11,"position","","Returns the current position of this cursor.",303,null],[11,"set_position","","Sets the position of this cursor.",303,null],[11,"seek","","",303,null],[11,"read","","",303,null],[11,"fill_buf","","",303,null],[11,"consume","","",303,null],[11,"write","","",303,null],[11,"flush","","",303,null],[11,"write","","",303,null],[11,"flush","","",303,null],[11,"write","","",303,null],[11,"flush","","",303,null],[11,"fmt","","",301,null],[11,"fmt","","",295,null],[11,"clone","","",295,null],[11,"eq","","",295,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",301,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",301,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",301,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",301,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",301,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",301,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",301,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",301,null],[11,"fmt","","",301,null],[11,"description","","",301,null],[11,"cause","","",301,null],[11,"read","std::boxed","",177,null],[11,"read_to_end","","",177,null],[11,"read_to_string","","",177,null],[11,"read_exact","","",177,null],[11,"write","","",177,null],[11,"flush","","",177,null],[11,"write_all","","",177,null],[11,"write_fmt","","",177,null],[11,"seek","","",177,null],[11,"fill_buf","","",177,null],[11,"consume","","",177,null],[11,"read_until","","",177,null],[11,"read_line","","",177,null],[11,"write","std::vec","",188,null],[11,"write_all","","",188,null],[11,"flush","","",188,null],[11,"read","std::io","",304,null],[11,"fill_buf","","",304,null],[11,"consume","","",304,null],[11,"read","","",305,null],[11,"write","","",306,null],[11,"flush","","",306,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",307,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",307,null],[11,"read","","",307,null],[11,"read_to_end","","",307,null],[11,"read_to_string","","",307,null],[11,"read_exact","","",307,null],[11,"read","","",308,null],[11,"read_to_end","","",308,null],[11,"fill_buf","","",308,null],[11,"consume","","",308,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",309,null],[11,"write","","",309,null],[11,"flush","","",309,null],[11,"write_all","","",309,null],[11,"write_fmt","","",309,null],[11,"write","","",310,null],[11,"flush","","",310,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",311,null],[11,"write","","",311,null],[11,"flush","","",311,null],[11,"write_all","","",311,null],[11,"write_fmt","","",311,null],[11,"write","","",312,null],[11,"flush","","",312,null],[6,"Result","","A specialized [`Result`](../result/enum.Result.html) type for I/O\noperations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",313,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",313,null],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",313,null],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",313,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",313,null],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",313,null],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",313,null],[11,"chain","","Creates an adaptor which will chain this stream with another.",313,null],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",313,null],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",314,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",314,null],[11,"write_all","","Attempts to write an entire buffer into this write.",314,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",314,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",314,null],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",315,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",316,null],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",316,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",316,null],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",316,null],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",316,null],[11,"lines","","Returns an iterator over the lines of this reader.",316,null],[11,"fmt","","",296,null],[11,"clone","","",296,null],[11,"eq","","",296,null],[11,"ne","","",296,null],[11,"read","","",317,null],[11,"fill_buf","","",317,null],[11,"consume","","",317,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",318,null],[11,"read","","",318,null],[11,"fill_buf","","",318,null],[11,"consume","","",318,null],[11,"next","","",319,null],[11,"fmt","","",297,null],[11,"next","","",320,null],[11,"description","","",297,null],[11,"cause","","",297,null],[11,"fmt","","",297,null],[11,"next","","",321,null],[11,"next","","",322,null],[0,"net","std","Networking primitives for TCP/UDP communication.",null,null],[3,"Ipv4Addr","std::net","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",323,null],[13,"V6","","Representation of an IPv6 address.",323,null],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",324,null],[13,"LinkLocal","","",324,null],[13,"RealmLocal","","",324,null],[13,"AdminLocal","","",324,null],[13,"SiteLocal","","",324,null],[13,"OrganizationLocal","","",324,null],[13,"Global","","",324,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",325,null],[13,"V6","","An IPv6 socket address",325,null],[4,"Shutdown","","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",326,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",326,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",326,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",323,null],[11,"partial_cmp","","",323,null],[11,"lt","","",323,null],[11,"le","","",323,null],[11,"gt","","",323,null],[11,"ge","","",323,null],[11,"hash","","",323,null],[11,"fmt","","",323,null],[11,"eq","","",323,null],[11,"ne","","",323,null],[11,"clone","","",323,null],[11,"fmt","","",324,null],[11,"hash","","",324,null],[11,"clone","","",324,null],[11,"eq","","",324,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",327,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",327,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",327,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",327,null],[11,"is_private","","Returns true if this is a private address.",327,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",327,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",327,null],[11,"is_multicast","","Returns true if this is a multicast address.",327,null],[11,"is_broadcast","","Returns true if this is a broadcast address.",327,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",327,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",327,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",327,null],[11,"fmt","","",323,null],[11,"fmt","","",327,null],[11,"fmt","","",327,null],[11,"clone","","",327,null],[11,"eq","","",327,null],[11,"hash","","",327,null],[11,"partial_cmp","","",327,null],[11,"cmp","","",327,null],[11,"from","","",327,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",327,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",328,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",328,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",328,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",328,null],[11,"is_global","","Returns true if the address appears to be globally routable.",328,null],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",328,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",328,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",328,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\nThis is defined to be 2001:db8::/32 in RFC 3849.",328,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",328,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",328,null],[11,"is_multicast","","Returns true if this is a multicast address.",328,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",328,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",328,null],[11,"fmt","","",328,null],[11,"fmt","","",328,null],[11,"clone","","",328,null],[11,"eq","","",328,null],[11,"hash","","",328,null],[11,"partial_cmp","","",328,null],[11,"cmp","","",328,null],[11,"from","","",328,null],[11,"fmt","","",325,null],[11,"hash","","",325,null],[11,"eq","","",325,null],[11,"ne","","",325,null],[11,"clone","","",325,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",325,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",325,null],[11,"set_ip","","Change the IP address associated with this socket address.",325,null],[11,"port","","Returns the port number associated with this socket address.",325,null],[11,"set_port","","Change the port number associated with this socket address.",325,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",329,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",329,null],[11,"set_ip","","Change the IP address associated with this socket address.",329,null],[11,"port","","Returns the port number associated with this socket address.",329,null],[11,"set_port","","Change the port number associated with this socket address.",329,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",330,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",330,null],[11,"set_ip","","Change the IP address associated with this socket address.",330,null],[11,"port","","Returns the port number associated with this socket address.",330,null],[11,"set_port","","Change the port number associated with this socket address.",330,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",330,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",330,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",330,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",330,null],[11,"fmt","","",325,null],[11,"fmt","","",329,null],[11,"fmt","","",329,null],[11,"fmt","","",330,null],[11,"fmt","","",330,null],[11,"clone","","",329,null],[11,"clone","","",330,null],[11,"eq","","",329,null],[11,"eq","","",330,null],[11,"hash","","",329,null],[11,"hash","","",330,null],[11,"to_socket_addrs","","",325,null],[11,"to_socket_addrs","","",329,null],[11,"to_socket_addrs","","",330,null],[11,"connect","","Opens a TCP connection to a remote host.",331,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",331,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",331,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",331,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",331,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",331,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",331,null],[11,"read_timeout","","Returns the read timeout of this socket.",331,null],[11,"write_timeout","","Returns the write timeout of this socket.",331,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",331,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",331,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",331,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",331,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",331,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",331,null],[11,"read","","",331,null],[11,"read_to_end","","",331,null],[11,"write","","",331,null],[11,"flush","","",331,null],[11,"fmt","","",331,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",332,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",332,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",332,null],[11,"accept","","Accept a new incoming connection from this listener.",332,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",332,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",332,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",332,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",332,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",332,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",332,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",332,null],[11,"next","","",333,null],[11,"fmt","","",332,null],[11,"bind","","Creates a UDP socket from the given address.",334,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",334,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",334,null],[11,"local_addr","","Returns the socket address that this socket was created from.",334,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",334,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",334,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",334,null],[11,"read_timeout","","Returns the read timeout of this socket.",334,null],[11,"write_timeout","","Returns the write timeout of this socket.",334,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",334,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",334,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",334,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",334,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",334,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",334,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",334,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",334,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",334,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",334,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",334,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",334,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",334,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",334,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",334,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",334,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",334,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",334,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",334,null],[11,"fmt","","",334,null],[11,"from_str","","",323,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",327,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",328,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",329,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",330,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",325,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",335,null],[11,"ne","","",335,null],[11,"clone","","",335,null],[11,"fmt","","",335,null],[11,"fmt","","",335,null],[11,"description","","",335,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",336,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",336,null],[11,"fmt","","",326,null],[11,"eq","","",326,null],[11,"clone","","",326,null],[11,"next","","",337,null],[0,"os","std","OS-specific functionality.",null,null],[0,"unix","std::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","std::os::unix","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","std::os::unix::io","Raw file descriptors.",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",338,null],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",339,{"inputs":[{"name":"rawfd"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",340,null],[11,"as_raw_fd","std::fs","",291,null],[11,"from_raw_fd","","",291,{"inputs":[{"name":"rawfd"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",291,null],[11,"as_raw_fd","std::net","",331,null],[11,"as_raw_fd","","",332,null],[11,"as_raw_fd","","",334,null],[11,"from_raw_fd","","",331,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",332,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","","",334,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","","",331,null],[11,"into_raw_fd","","",332,null],[11,"into_raw_fd","","",334,null],[0,"ffi","std::os::unix","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","std::os::unix::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",341,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",341,null],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",342,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",342,null],[11,"from_vec","std::ffi","",285,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",285,null],[11,"from_bytes","","",286,null],[11,"as_bytes","","",286,null],[0,"fs","std::os::unix","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[5,"symlink","std::os::unix::fs","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",343,null],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",343,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",343,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",344,null],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",344,null],[8,"MetadataExt","","",null,null],[10,"dev","","",345,null],[10,"ino","","",345,null],[10,"mode","","",345,null],[10,"nlink","","",345,null],[10,"uid","","",345,null],[10,"gid","","",345,null],[10,"rdev","","",345,null],[10,"size","","",345,null],[10,"atime","","",345,null],[10,"atime_nsec","","",345,null],[10,"mtime","","",345,null],[10,"mtime_nsec","","",345,null],[10,"ctime","","",345,null],[10,"ctime_nsec","","",345,null],[10,"blksize","","",345,null],[10,"blocks","","",345,null],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",346,null],[10,"is_char_device","","Returns whether this file type is a char device.",346,null],[10,"is_fifo","","Returns whether this file type is a fifo.",346,null],[10,"is_socket","","Returns whether this file type is a socket.",346,null],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",347,null],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",348,null],[11,"mode","std::fs","",289,null],[11,"set_mode","","",289,null],[11,"from_mode","","",289,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",288,null],[11,"custom_flags","","",288,null],[11,"dev","","",287,null],[11,"ino","","",287,null],[11,"mode","","",287,null],[11,"nlink","","",287,null],[11,"uid","","",287,null],[11,"gid","","",287,null],[11,"rdev","","",287,null],[11,"size","","",287,null],[11,"atime","","",287,null],[11,"atime_nsec","","",287,null],[11,"mtime","","",287,null],[11,"mtime_nsec","","",287,null],[11,"ctime","","",287,null],[11,"ctime_nsec","","",287,null],[11,"blksize","","",287,null],[11,"blocks","","",287,null],[11,"is_block_device","","",290,null],[11,"is_char_device","","",290,null],[11,"is_fifo","","",290,null],[11,"is_socket","","",290,null],[11,"ino","","",293,null],[11,"mode","","",294,null],[0,"process","std::os::unix","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","std::os::unix::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",349,null],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",349,null],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",349,null],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",349,null],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",349,null],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"from_raw","","Creates a new `ExitStatus` from the raw underlying `i32` return value of\na process.",350,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[10,"signal","","If the process was terminated by a signal, returns that signal.",350,null],[0,"raw","std::os::unix","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","std::os::unix::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"pthread_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"off_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"thread","std::os::unix","Unix-specific extensions to primitives in the `std::thread` module.",null,null],[6,"RawPthread","std::os::unix::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",351,null],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",351,null],[11,"as_pthread_t","std::thread","",270,null],[11,"into_pthread_t","","",270,null],[0,"net","std::os::unix","Unix-specific networking functionality",null,null],[3,"SocketAddr","std::os::unix::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[11,"clone","","",352,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",352,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",352,null],[11,"fmt","","",352,null],[11,"fmt","","",353,null],[11,"connect","","Connects to the socket named by `path`.",353,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",353,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",353,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",353,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",353,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",353,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",353,null],[11,"read_timeout","","Returns the read timeout of this socket.",353,null],[11,"write_timeout","","Returns the write timeout of this socket.",353,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",353,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",353,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",353,null],[11,"read","","",353,null],[11,"read_to_end","","",353,null],[11,"write","","",353,null],[11,"flush","","",353,null],[11,"as_raw_fd","","",353,null],[11,"from_raw_fd","","",353,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",353,null],[11,"fmt","","",354,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",354,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",354,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",354,null],[11,"local_addr","","Returns the local socket address of this listener.",354,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",354,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",354,null],[11,"incoming","","Returns an iterator over incoming connections.",354,null],[11,"as_raw_fd","","",354,null],[11,"from_raw_fd","","",354,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",354,null],[11,"fmt","","",355,null],[11,"next","","",355,null],[11,"size_hint","","",355,null],[11,"fmt","","",356,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",356,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",356,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",356,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",356,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",356,null],[11,"local_addr","","Returns the address of this socket.",356,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",356,null],[11,"recv_from","","Receives data from the socket.",356,null],[11,"recv","","Receives data from the socket.",356,null],[11,"send_to","","Sends data on the socket to the specified address.",356,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",356,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",356,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",356,null],[11,"read_timeout","","Returns the read timeout of this socket.",356,null],[11,"write_timeout","","Returns the write timeout of this socket.",356,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",356,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",356,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",356,null],[11,"as_raw_fd","","",356,null],[11,"from_raw_fd","","",356,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",356,null],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code.",null,null],[0,"linux","std::os","Linux-specific definitions",null,null],[0,"raw","std::os::linux","Linux-specific raw type definitions",null,null],[3,"stat","std::os::linux::raw","",null,null],[12,"st_dev","","",357,null],[12,"st_ino","","",357,null],[12,"st_nlink","","",357,null],[12,"st_mode","","",357,null],[12,"st_uid","","",357,null],[12,"st_gid","","",357,null],[12,"__pad0","","",357,null],[12,"st_rdev","","",357,null],[12,"st_size","","",357,null],[12,"st_blksize","","",357,null],[12,"st_blocks","","",357,null],[12,"st_atime","","",357,null],[12,"st_atime_nsec","","",357,null],[12,"st_mtime","","",357,null],[12,"st_mtime_nsec","","",357,null],[12,"st_ctime","","",357,null],[12,"st_ctime_nsec","","",357,null],[12,"__unused","","",357,null],[11,"clone","","",357,null],[6,"dev_t","","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"off_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"time_t","","",null,null],[0,"fs","std::os::linux","",null,null],[8,"MetadataExt","std::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",358,null],[10,"st_dev","","",358,null],[10,"st_ino","","",358,null],[10,"st_mode","","",358,null],[10,"st_nlink","","",358,null],[10,"st_uid","","",358,null],[10,"st_gid","","",358,null],[10,"st_rdev","","",358,null],[10,"st_size","","",358,null],[10,"st_atime","","",358,null],[10,"st_atime_nsec","","",358,null],[10,"st_mtime","","",358,null],[10,"st_mtime_nsec","","",358,null],[10,"st_ctime","","",358,null],[10,"st_ctime_nsec","","",358,null],[10,"st_blksize","","",358,null],[10,"st_blocks","","",358,null],[11,"as_raw_stat","std::fs","",287,null],[11,"st_dev","","",287,null],[11,"st_ino","","",287,null],[11,"st_mode","","",287,null],[11,"st_nlink","","",287,null],[11,"st_uid","","",287,null],[11,"st_gid","","",287,null],[11,"st_rdev","","",287,null],[11,"st_size","","",287,null],[11,"st_atime","","",287,null],[11,"st_atime_nsec","","",287,null],[11,"st_mtime","","",287,null],[11,"st_mtime_nsec","","",287,null],[11,"st_ctime","","",287,null],[11,"st_ctime_nsec","","",287,null],[11,"st_blksize","","",287,null],[11,"st_blocks","","",287,null],[0,"raw","std::os","Raw OS-specific types for the current platform/architecture",null,null],[4,"c_void","std::os::raw","Type used to construct void pointers for use with C.",null,null],[6,"c_char","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[0,"panic","std","Panic support in the standard library",null,null],[3,"PanicInfo","std::panic","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[3,"AssertUnwindSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",359,null],[3,"AssertRecoverSafe","","Deprecated, renamed to `AssertUnwindSafe`",null,null],[12,"0","","",360,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,{"inputs":[{"name":"box"}],"output":null}],[5,"set_handler","","",null,{"inputs":[{"name":"f"}],"output":null}],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[5,"catch_unwind","","Invokes a closure, capturing the cause of an unwinding panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"recover","","Deprecated, renamed to `catch_unwind`",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"resume_unwind","","Triggers a panic without invoking the panic handler.",null,{"inputs":[{"name":"box"}],"output":null}],[5,"propagate","","Deprecated, use resume_unwind instead",null,{"inputs":[{"name":"box"}],"output":null}],[8,"UnwindSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RecoverSafe","","Deprecated, renamed to UnwindSafe",null,null],[8,"RefUnwindSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[11,"deref","","",359,null],[11,"deref_mut","","",359,null],[11,"call_once","","",359,null],[11,"new","","Creates a new `AssertRecoverSafe` wrapper around the provided type.",360,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",360,null],[11,"deref","","",360,null],[11,"deref_mut","","",360,null],[11,"call_once","","",360,null],[0,"path","std","Cross-platform path manipulation.",null,null],[3,"PrefixComponent","std::path","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",null,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[4,"Prefix","","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",361,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",361,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",361,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",361,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",361,null],[13,"Disk","","Prefix `C:` for the given disk drive.",361,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\\\server\\share`.",362,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",362,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",362,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",362,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",362,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"cmp","","",361,null],[11,"partial_cmp","","",361,null],[11,"lt","","",361,null],[11,"le","","",361,null],[11,"gt","","",361,null],[11,"ge","","",361,null],[11,"hash","","",361,null],[11,"fmt","","",361,null],[11,"clone","","",361,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",361,null],[11,"fmt","","",363,null],[11,"clone","","",363,null],[11,"kind","","The parsed prefix data.",363,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",363,null],[11,"eq","","",363,null],[11,"partial_cmp","","",363,null],[11,"cmp","","",363,null],[11,"hash","","",363,null],[11,"fmt","","",362,null],[11,"hash","","",362,null],[11,"cmp","","",362,null],[11,"partial_cmp","","",362,null],[11,"lt","","",362,null],[11,"le","","",362,null],[11,"gt","","",362,null],[11,"ge","","",362,null],[11,"eq","","",362,null],[11,"ne","","",362,null],[11,"clone","","",362,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",362,null],[11,"as_ref","","",362,null],[11,"clone","","",364,null],[11,"clone","","",365,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",364,null],[11,"as_ref","","",364,null],[11,"as_ref","","",364,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",365,null],[11,"as_ref","","",365,null],[11,"as_ref","","",365,null],[11,"next","","",365,null],[11,"next_back","","",365,null],[11,"next","","",364,null],[11,"next_back","","",364,null],[11,"eq","","",364,null],[11,"partial_cmp","","",364,null],[11,"cmp","","",364,null],[11,"clone","","",366,null],[11,"new","","Allocates an empty `PathBuf`.",366,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",366,null],[11,"push","","Extends `self` with `path`.",366,null],[11,"pop","","Truncate `self` to `self.parent()`.",366,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",366,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",366,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",366,null],[11,"from","","",366,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",366,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",366,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",366,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",366,null],[11,"fmt","","",366,null],[11,"deref","","",366,null],[11,"borrow","","",366,null],[11,"from","std::borrow","",209,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",209,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",367,null],[11,"eq","","",366,null],[11,"hash","","",366,null],[11,"partial_cmp","","",366,null],[11,"cmp","","",366,null],[11,"as_ref","","",366,null],[11,"into","","",366,null],[11,"eq","","",368,null],[11,"ne","","",368,null],[11,"clone","","",368,null],[11,"fmt","","",368,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",367,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",367,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",367,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",367,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",367,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",367,null],[11,"is_relative","","A path is *relative* if it is not absolute.",367,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",367,null],[11,"parent","","The path without its final component, if any.",367,null],[11,"file_name","","The final component of the path, if it is a normal file.",367,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",367,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",367,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",367,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",367,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",367,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",367,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",367,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",367,null],[11,"components","","Produce an iterator over the components of the path.",367,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",367,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",367,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",367,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",367,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",367,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",367,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",367,null],[11,"exists","","Returns whether the path points at an existing entity.",367,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",367,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",367,null],[11,"as_ref","","",367,null],[11,"fmt","","",367,null],[11,"fmt","","",369,null],[11,"fmt","","",369,null],[11,"eq","","",367,null],[11,"hash","","",367,null],[11,"partial_cmp","","",367,null],[11,"cmp","","",367,null],[11,"as_ref","","",367,null],[11,"as_ref","std::ffi","",286,null],[11,"as_ref","std::borrow","",209,null],[11,"as_ref","std::ffi","",285,null],[11,"as_ref","std::string","",219,null],[11,"as_ref","std::path","",366,null],[11,"eq","","",366,null],[11,"eq","","",367,null],[11,"partial_cmp","","",366,null],[11,"partial_cmp","","",367,null],[11,"eq","","",366,null],[11,"partial_cmp","","",366,null],[11,"eq","std::borrow","",209,null],[11,"eq","std::path","",367,null],[11,"partial_cmp","std::borrow","",209,null],[11,"partial_cmp","std::path","",367,null],[11,"eq","std::borrow","",209,null],[11,"partial_cmp","","",209,null],[11,"eq","","",209,null],[11,"eq","std::path","",366,null],[11,"partial_cmp","std::borrow","",209,null],[11,"partial_cmp","std::path","",366,null],[11,"eq","","",366,null],[11,"eq","std::ffi","",286,null],[11,"partial_cmp","std::path","",366,null],[11,"partial_cmp","std::ffi","",286,null],[11,"eq","std::path","",366,null],[11,"partial_cmp","","",366,null],[11,"eq","","",366,null],[11,"eq","std::borrow","",209,null],[11,"partial_cmp","std::path","",366,null],[11,"partial_cmp","std::borrow","",209,null],[11,"eq","std::path","",366,null],[11,"eq","std::ffi","",285,null],[11,"partial_cmp","std::path","",366,null],[11,"partial_cmp","std::ffi","",285,null],[11,"eq","std::path","",367,null],[11,"eq","std::ffi","",286,null],[11,"partial_cmp","std::path","",367,null],[11,"partial_cmp","std::ffi","",286,null],[11,"eq","std::path","",367,null],[11,"partial_cmp","","",367,null],[11,"eq","","",367,null],[11,"eq","std::borrow","",209,null],[11,"partial_cmp","std::path","",367,null],[11,"partial_cmp","std::borrow","",209,null],[11,"eq","std::path","",367,null],[11,"eq","std::ffi","",285,null],[11,"partial_cmp","std::path","",367,null],[11,"partial_cmp","std::ffi","",285,null],[11,"eq","","",286,null],[11,"partial_cmp","","",286,null],[11,"eq","std::borrow","",209,null],[11,"partial_cmp","","",209,null],[11,"eq","std::ffi","",285,null],[11,"partial_cmp","","",285,null],[11,"eq","std::borrow","",209,null],[11,"eq","std::ffi","",286,null],[11,"partial_cmp","std::borrow","",209,null],[11,"partial_cmp","std::ffi","",286,null],[11,"eq","std::borrow","",209,null],[11,"partial_cmp","","",209,null],[11,"eq","","",209,null],[11,"eq","std::ffi","",285,null],[11,"partial_cmp","std::borrow","",209,null],[11,"partial_cmp","std::ffi","",285,null],[11,"fmt","std::path","",368,null],[11,"description","","",368,null],[0,"process","std","Working with processes.",null,null],[3,"Child","std::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",370,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",370,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",370,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",371,null],[12,"stdout","","The data that the process wrote to stdout.",371,null],[12,"stderr","","The data that the process wrote to stderr.",371,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,{"inputs":[{"name":"i32"}],"output":null}],[11,"write","","",372,null],[11,"flush","","",372,null],[11,"read","","",373,null],[11,"read_to_end","","",373,null],[11,"read","","",374,null],[11,"read_to_end","","",374,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",375,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",375,null],[11,"args","","Add multiple arguments to pass to the program.",375,null],[11,"env","","Inserts or updates an environment variable mapping.",375,null],[11,"env_remove","","Removes an environment variable mapping.",375,null],[11,"env_clear","","Clears the entire environment map for the child process.",375,null],[11,"current_dir","","Sets the working directory for the child process.",375,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",375,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",375,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",375,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",375,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",375,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",375,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",375,null],[11,"clone","","",371,null],[11,"eq","","",371,null],[11,"ne","","",371,null],[11,"fmt","","",371,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",376,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",376,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",376,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",377,null],[11,"clone","","",377,null],[11,"eq","","",377,null],[11,"ne","","",377,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",377,null],[11,"code","","Returns the exit code of the process, if any.",377,null],[11,"fmt","","",377,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",370,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",370,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",370,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",370,null],[0,"sync","std","Useful synchronization primitives.",null,null],[3,"Arc","std::sync","An atomically reference counted wrapper for shared state.",null,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[0,"atomic","","Atomic types",null,null],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",20,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto the other threads that perform a load with `Acquire` ordering\non the same value.",20,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin other threads.",20,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",20,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",20,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"Barrier","std::sync","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"StaticCondvar","","Statically allocated condition variables.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[3,"OnceState","","State yielded to the `call_once_force` method which can be used to query\nwhether the `Once` was previously poisoned or not.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",378,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",378,null],[0,"mpsc","","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Select","std::sync::mpsc","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[3,"Receiver","","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",379,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",380,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",380,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",381,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",381,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[11,"new","","Creates a new selection structure. This set is initially empty.",382,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",382,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",382,null],[11,"id","","Retrieves the id of this handle.",383,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",383,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",383,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",383,null],[11,"drop","","",382,null],[11,"drop","","",383,null],[11,"fmt","","",382,null],[11,"fmt","","",383,null],[11,"clone","","",379,null],[11,"eq","","",379,null],[11,"ne","","",379,null],[11,"fmt","","",384,null],[11,"clone","","",384,null],[11,"eq","","",384,null],[11,"fmt","","",380,null],[11,"clone","","",380,null],[11,"eq","","",380,null],[11,"clone","","",381,null],[11,"eq","","",381,null],[11,"ne","","",381,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",385,null],[11,"clone","","",385,null],[11,"drop","","",385,null],[11,"fmt","","",385,null],[11,"send","","Sends a value on this synchronous channel.",386,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",386,null],[11,"clone","","",386,null],[11,"drop","","",386,null],[11,"fmt","","",386,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",387,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",387,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",387,null],[11,"next","","",388,null],[11,"next","","",389,null],[11,"into_iter","","",387,null],[11,"drop","","",387,null],[11,"fmt","","",387,null],[11,"fmt","","",379,null],[11,"fmt","","",379,null],[11,"description","","",379,null],[11,"cause","","",379,null],[11,"fmt","","",381,null],[11,"fmt","","",381,null],[11,"description","","",381,null],[11,"cause","","",381,null],[11,"fmt","","",384,null],[11,"description","","",384,null],[11,"cause","","",384,null],[11,"fmt","","",380,null],[11,"description","","",380,null],[11,"cause","","",380,null],[11,"new","std::sync","Creates a new barrier that can block a given number of threads.",390,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",390,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",391,null],[11,"clone","","",392,null],[11,"eq","","",392,null],[11,"ne","","",392,null],[11,"fmt","","",392,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",392,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",393,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",393,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",393,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",393,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",393,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",393,null],[11,"default","","",393,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",393,null],[11,"new","","Creates a new condition variable",394,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",394,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",394,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",394,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",394,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",394,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",394,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",395,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",395,null],[11,"try_lock","","Attempts to acquire this lock.",395,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",395,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",395,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",395,null],[11,"drop","","",395,null],[11,"default","","",395,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",395,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",396,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",396,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",396,null],[11,"destroy","","Deallocates resources associated with this static mutex.",396,null],[11,"deref","","",397,null],[11,"deref_mut","","",397,null],[11,"drop","","",397,null],[11,"new","","Creates a new `Once` value.",398,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",398,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",398,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",399,null],[11,"new","","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",400,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",400,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",400,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",400,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",400,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",400,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",400,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",400,null],[11,"drop","","",400,null],[11,"fmt","","",400,null],[11,"default","","",400,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",401,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",401,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",401,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",401,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",401,null],[11,"destroy","","Deallocates all resources associated with this static lock.",401,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",402,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",403,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",402,null],[11,"deref","","",403,null],[11,"deref_mut","","",403,null],[11,"drop","","",402,null],[11,"drop","","",403,null],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method.",null,null],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned.",null,null],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable.",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[0,"time","std","Temporal quantification.",null,null],[3,"Duration","std::time","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[3,"Instant","","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[11,"hash","","",404,null],[11,"fmt","","",404,null],[11,"cmp","","",404,null],[11,"partial_cmp","","",404,null],[11,"lt","","",404,null],[11,"le","","",404,null],[11,"gt","","",404,null],[11,"ge","","",404,null],[11,"eq","","",404,null],[11,"ne","","",404,null],[11,"clone","","",404,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",404,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",404,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",404,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",404,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",404,null],[11,"add","","",404,null],[11,"add_assign","","",404,null],[11,"sub","","",404,null],[11,"sub_assign","","",404,null],[11,"mul","","",404,null],[11,"mul_assign","","",404,null],[11,"div","","",404,null],[11,"div_assign","","",404,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[11,"cmp","","",405,null],[11,"partial_cmp","","",405,null],[11,"lt","","",405,null],[11,"le","","",405,null],[11,"gt","","",405,null],[11,"ge","","",405,null],[11,"eq","","",405,null],[11,"ne","","",405,null],[11,"clone","","",405,null],[11,"cmp","","",406,null],[11,"partial_cmp","","",406,null],[11,"lt","","",406,null],[11,"le","","",406,null],[11,"gt","","",406,null],[11,"ge","","",406,null],[11,"eq","","",406,null],[11,"ne","","",406,null],[11,"clone","","",406,null],[11,"fmt","","",407,null],[11,"clone","","",407,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",405,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",405,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",405,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",405,null],[11,"add","","",405,null],[11,"add_assign","","",405,null],[11,"sub","","",405,null],[11,"sub_assign","","",405,null],[11,"sub","","",405,null],[11,"fmt","","",405,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",406,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",406,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",406,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",406,null],[11,"add","","",406,null],[11,"add_assign","","",406,null],[11,"sub","","",406,null],[11,"sub_assign","","",406,null],[11,"fmt","","",406,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",407,null],[11,"description","","",407,null],[11,"fmt","","",407,null],[11,"fmt","std::sync","",408,null],[11,"fmt","","",408,null],[11,"description","","",408,null],[11,"new","","Creates a `PoisonError`.",408,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",408,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",408,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",408,null],[11,"from","","",378,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",378,null],[11,"fmt","","",378,null],[11,"description","","",378,null],[11,"cause","","",378,null],[11,"as_raw_fd","std::fs","",291,null],[11,"from_raw_fd","","",291,{"inputs":[{"name":"rawfd"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",291,null],[11,"as_raw_fd","std::net","",331,null],[11,"as_raw_fd","","",332,null],[11,"as_raw_fd","","",334,null],[11,"from_raw_fd","","",331,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",332,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","","",334,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","","",331,null],[11,"into_raw_fd","","",332,null],[11,"into_raw_fd","","",334,null],[11,"from_vec","std::ffi","",285,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",285,null],[11,"from_bytes","","",286,null],[11,"as_bytes","","",286,null],[11,"mode","std::fs","",289,null],[11,"set_mode","","",289,null],[11,"from_mode","","",289,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",288,null],[11,"custom_flags","","",288,null],[11,"dev","","",287,null],[11,"ino","","",287,null],[11,"mode","","",287,null],[11,"nlink","","",287,null],[11,"uid","","",287,null],[11,"gid","","",287,null],[11,"rdev","","",287,null],[11,"size","","",287,null],[11,"atime","","",287,null],[11,"atime_nsec","","",287,null],[11,"mtime","","",287,null],[11,"mtime_nsec","","",287,null],[11,"ctime","","",287,null],[11,"ctime_nsec","","",287,null],[11,"blksize","","",287,null],[11,"blocks","","",287,null],[11,"is_block_device","","",290,null],[11,"is_char_device","","",290,null],[11,"is_fifo","","",290,null],[11,"is_socket","","",290,null],[11,"ino","","",293,null],[11,"mode","","",294,null],[11,"uid","std::process","",375,null],[11,"gid","","",375,null],[11,"session_leader","","",375,null],[11,"before_exec","","",375,null],[11,"exec","","",375,null],[11,"from_raw","","",377,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"signal","","",377,null],[11,"from_raw_fd","","",376,{"inputs":[{"name":"rawfd"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",372,null],[11,"as_raw_fd","","",373,null],[11,"as_raw_fd","","",374,null],[11,"into_raw_fd","","",372,null],[11,"into_raw_fd","","",373,null],[11,"into_raw_fd","","",374,null],[11,"as_pthread_t","std::thread","",270,null],[11,"into_pthread_t","","",270,null],[11,"clone","std::os::unix::net","",352,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",352,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",352,null],[11,"fmt","","",352,null],[11,"fmt","","",353,null],[11,"connect","","Connects to the socket named by `path`.",353,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",353,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",353,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",353,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",353,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",353,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",353,null],[11,"read_timeout","","Returns the read timeout of this socket.",353,null],[11,"write_timeout","","Returns the write timeout of this socket.",353,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",353,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",353,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",353,null],[11,"read","","",353,null],[11,"read_to_end","","",353,null],[11,"write","","",353,null],[11,"flush","","",353,null],[11,"as_raw_fd","","",353,null],[11,"from_raw_fd","","",353,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",353,null],[11,"fmt","","",354,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",354,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",354,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",354,null],[11,"local_addr","","Returns the local socket address of this listener.",354,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",354,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",354,null],[11,"incoming","","Returns an iterator over incoming connections.",354,null],[11,"as_raw_fd","","",354,null],[11,"from_raw_fd","","",354,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",354,null],[11,"fmt","","",355,null],[11,"next","","",355,null],[11,"size_hint","","",355,null],[11,"fmt","","",356,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",356,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",356,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",356,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",356,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",356,null],[11,"local_addr","","Returns the address of this socket.",356,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",356,null],[11,"recv_from","","Receives data from the socket.",356,null],[11,"recv","","Receives data from the socket.",356,null],[11,"send_to","","Sends data on the socket to the specified address.",356,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",356,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",356,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",356,null],[11,"read_timeout","","Returns the read timeout of this socket.",356,null],[11,"write_timeout","","Returns the write timeout of this socket.",356,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",356,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",356,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",356,null],[11,"as_raw_fd","","",356,null],[11,"from_raw_fd","","",356,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",356,null],[11,"payload","std::panic","Returns the payload associated with the panic.",409,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",409,null],[11,"file","","Returns the name of the source file from which the panic originated.",410,null],[11,"line","","Returns the line number from which the panic originated.",410,null],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",411,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",411,null],[11,"ind_sample","","",411,null],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",412,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",412,null],[11,"ind_sample","","",412,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",413,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",413,null],[11,"ind_sample","","",413,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",414,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",414,null],[11,"ind_sample","","",414,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",415,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",415,null],[11,"ind_sample","","",415,null],[11,"clone","rand::distributions::normal","",416,null],[11,"clone","","",417,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",417,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",417,null],[11,"ind_sample","","",417,null],[11,"clone","","",418,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",418,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",418,null],[11,"ind_sample","","",418,null],[11,"clone","rand::distributions::exponential","",419,null],[11,"clone","","",420,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",420,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",420,null],[11,"ind_sample","","",420,null],[11,"new","rand::distributions","",421,{"inputs":[],"output":{"name":"randsample"}}],[11,"sample","","",421,null],[11,"ind_sample","","",421,null],[11,"new","","Create a new `WeightedChoice`.",422,null],[11,"sample","","",422,null],[11,"ind_sample","","",422,null],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",423,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",423,null],[11,"next_u32","","",423,null],[11,"reseed","","",423,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",423,null],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",424,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",424,null],[11,"next_u32","","",424,null],[11,"next_u64","","",424,null],[11,"reseed","","",424,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",424,null],[11,"clone","rand::chacha","",425,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",425,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",425,null],[11,"next_u32","","",425,null],[11,"reseed","","",425,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",425,null],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",426,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",426,null],[11,"next_u32","","",426,null],[11,"next_u64","","",426,null],[11,"fill_bytes","","",426,null],[11,"reseed","","",426,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",426,null],[11,"clone","","",427,null],[11,"reseed","","",427,null],[11,"default","","",427,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"next","rand","",428,null],[11,"next","","",429,null],[11,"clone","","",430,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",430,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",430,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",430,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",430,null],[11,"next_u64","std::rand","Return the next random u64.",431,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",431,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",431,null],[11,"fill_bytes","","Fill `dest` with random data.",431,null],[11,"gen","","Return a random value of a `Rand` type.",431,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",431,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",431,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",431,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",431,null],[11,"choose","","Return a random element from `values`.",431,null],[11,"shuffle","","Shuffle a mutable slice in place.",431,null],[11,"next_u64","std::__rand","Return the next random u64.",431,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",431,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",431,null],[11,"fill_bytes","","Fill `dest` with random data.",431,null],[11,"gen","","Return a random value of a `Rand` type.",431,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",431,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",431,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",431,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",431,null],[11,"choose","","Return a random element from `values`.",431,null],[11,"shuffle","","Shuffle a mutable slice in place.",431,null],[14,"assert!","std","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. Can only be used in\nfunctions that return `Result` because of the early return of `Err` that\nit provides.",null,null],[14,"write!","","Use the `format!` syntax to write data into a buffer.",null,null],[14,"writeln!","","Use the `format!` syntax to write data into a buffer, appending a newline.",null,null],[14,"unreachable!","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented!","","A standardized placeholder for marking unfinished code. It panics with the\nmessage `&quot;not yet implemented&quot;` when executed.",null,null],[14,"vec!","","Creates a `Vec` containing the arguments.",null,null],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information.",null,null],[14,"panic!","","The entry point for panic of Rust threads.",null,null],[14,"print!","","Macro for printing to the standard output.",null,null],[14,"println!","","Macro for printing to the standard output, with a newline.",null,null],[14,"select!","","A macro to select an event from a number of receivers.",null,null],[14,"format_args!","","The core macro for formatted string creation &amp; output.",null,null],[14,"env!","","Inspect an environment variable at compile time.",null,null],[14,"option_env!","","Optionally inspect an environment variable at compile time.",null,null],[14,"concat_idents!","","Concatenate identifiers into one identifier.",null,null],[14,"concat!","","Concatenates literals into a static string slice.",null,null],[14,"line!","","A macro which expands to the line number on which it was invoked.",null,null],[14,"column!","","A macro which expands to the column number on which it was invoked.",null,null],[14,"file!","","A macro which expands to the file name from which it was invoked.",null,null],[14,"stringify!","","A macro which stringifies its argument.",null,null],[14,"include_str!","","Includes a utf8-encoded file as a string.",null,null],[14,"include_bytes!","","Includes a file as a reference to a byte array.",null,null],[14,"module_path!","","Expands to a string that represents the current module path.",null,null],[14,"cfg!","","Boolean evaluation of configuration flags.",null,null],[14,"include!","","Parse the current given file as an expression.",null,null],[14,"thread_local!","","Declare a new thread local storage key of type `std::thread::LocalKey`.",null,null],[14,"scoped_thread_local!","","Declare a new scoped thread local storage key.",null,null],[15,"bool","","The boolean type.",null,null],[15,"char","","A character type.",null,null],[15,"pointer","","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[15,"array","","A fixed-size array, denoted `[T; N]`, for the element type, `T`, and the\nnon-negative compile time constant size, `N`.",null,null],[15,"slice","","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[15,"str","","String slices.",null,null],[15,"tuple","","A finite heterogeneous sequence, `(T, U, ..)`.",null,null],[15,"f32","","The 32-bit floating point type.",null,null],[15,"f64","","The 64-bit floating point type.",null,null],[15,"i8","","The 8-bit signed integer type.",null,null],[15,"i16","","The 16-bit signed integer type.",null,null],[15,"i32","","The 32-bit signed integer type.",null,null],[15,"i64","","The 64-bit signed integer type.",null,null],[15,"u8","","The 8-bit unsigned integer type.",null,null],[15,"u16","","The 16-bit unsigned integer type.",null,null],[15,"u32","","The 32-bit unsigned integer type.",null,null],[15,"u64","","The 64-bit unsigned integer type.",null,null],[15,"isize","","The pointer-sized signed integer type.",null,null],[15,"usize","","The pointer-sized unsigned integer type.",null,null],[11,"from_str","","Converts a string in base 10 to a float.\nAccepts an optional decimal exponent.",432,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","Converts a string in base 10 to a float.\nAccepts an optional decimal exponent.",433,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"zero","","",434,{"inputs":[],"output":{"name":"u8"}}],[11,"one","","",434,{"inputs":[],"output":{"name":"u8"}}],[11,"zero","","",435,{"inputs":[],"output":{"name":"u16"}}],[11,"one","","",435,{"inputs":[],"output":{"name":"u16"}}],[11,"zero","","",436,{"inputs":[],"output":{"name":"u32"}}],[11,"one","","",436,{"inputs":[],"output":{"name":"u32"}}],[11,"zero","","",437,{"inputs":[],"output":{"name":"u64"}}],[11,"one","","",437,{"inputs":[],"output":{"name":"u64"}}],[11,"zero","","",438,{"inputs":[],"output":{"name":"usize"}}],[11,"one","","",438,{"inputs":[],"output":{"name":"usize"}}],[11,"zero","","",439,{"inputs":[],"output":{"name":"i8"}}],[11,"one","","",439,{"inputs":[],"output":{"name":"i8"}}],[11,"zero","","",440,{"inputs":[],"output":{"name":"i16"}}],[11,"one","","",440,{"inputs":[],"output":{"name":"i16"}}],[11,"zero","","",441,{"inputs":[],"output":{"name":"i32"}}],[11,"one","","",441,{"inputs":[],"output":{"name":"i32"}}],[11,"zero","","",442,{"inputs":[],"output":{"name":"i64"}}],[11,"one","","",442,{"inputs":[],"output":{"name":"i64"}}],[11,"zero","","",443,{"inputs":[],"output":{"name":"isize"}}],[11,"one","","",443,{"inputs":[],"output":{"name":"isize"}}],[11,"zero","","",432,{"inputs":[],"output":{"name":"f32"}}],[11,"one","","",432,{"inputs":[],"output":{"name":"f32"}}],[11,"zero","","",433,{"inputs":[],"output":{"name":"f64"}}],[11,"one","","",433,{"inputs":[],"output":{"name":"f64"}}],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",439,{"inputs":[],"output":{"name":"i8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",439,{"inputs":[],"output":{"name":"i8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",439,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",439,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",439,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",439,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",439,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",439,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",439,null],[11,"swap_bytes","","Reverses the byte order of the integer.",439,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",439,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",439,{"inputs":[{"name":"i8"}],"output":{"name":"i8"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",439,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",439,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",439,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",439,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",439,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",439,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",439,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self ==\nMIN`.",439,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",439,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",439,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",439,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",439,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",439,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",439,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",439,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",439,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`,\nwrapping around at the boundary of the type.",439,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`,\nwrapping around at the boundary of the type.",439,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",439,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",439,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",439,null],[11,"overflowing_add","","Calculates `self` + `rhs`",439,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",439,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",439,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",439,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",439,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",439,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",439,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",439,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",439,null],[11,"abs","","Computes the absolute value of `self`.",439,null],[11,"signum","","Returns a number representing sign of `self`.",439,null],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",439,null],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",439,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",440,{"inputs":[],"output":{"name":"i16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",440,{"inputs":[],"output":{"name":"i16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",440,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",440,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",440,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",440,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",440,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",440,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",440,null],[11,"swap_bytes","","Reverses the byte order of the integer.",440,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",440,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",440,{"inputs":[{"name":"i16"}],"output":{"name":"i16"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",440,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",440,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",440,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",440,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",440,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",440,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",440,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self ==\nMIN`.",440,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",440,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",440,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",440,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",440,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",440,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",440,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",440,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",440,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`,\nwrapping around at the boundary of the type.",440,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`,\nwrapping around at the boundary of the type.",440,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",440,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",440,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",440,null],[11,"overflowing_add","","Calculates `self` + `rhs`",440,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",440,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",440,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",440,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",440,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",440,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",440,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",440,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",440,null],[11,"abs","","Computes the absolute value of `self`.",440,null],[11,"signum","","Returns a number representing sign of `self`.",440,null],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",440,null],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",440,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",441,{"inputs":[],"output":{"name":"i32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",441,{"inputs":[],"output":{"name":"i32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",441,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",441,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",441,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",441,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",441,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",441,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",441,null],[11,"swap_bytes","","Reverses the byte order of the integer.",441,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",441,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",441,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",441,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",441,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",441,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",441,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",441,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",441,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",441,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self ==\nMIN`.",441,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",441,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",441,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",441,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",441,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",441,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",441,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",441,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",441,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`,\nwrapping around at the boundary of the type.",441,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`,\nwrapping around at the boundary of the type.",441,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",441,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",441,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",441,null],[11,"overflowing_add","","Calculates `self` + `rhs`",441,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",441,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",441,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",441,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",441,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",441,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",441,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",441,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",441,null],[11,"abs","","Computes the absolute value of `self`.",441,null],[11,"signum","","Returns a number representing sign of `self`.",441,null],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",441,null],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",441,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",442,{"inputs":[],"output":{"name":"i64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",442,{"inputs":[],"output":{"name":"i64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",442,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",442,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",442,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",442,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",442,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",442,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",442,null],[11,"swap_bytes","","Reverses the byte order of the integer.",442,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",442,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",442,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",442,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",442,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",442,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",442,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",442,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",442,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",442,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self ==\nMIN`.",442,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",442,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",442,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",442,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",442,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",442,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",442,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",442,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",442,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`,\nwrapping around at the boundary of the type.",442,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`,\nwrapping around at the boundary of the type.",442,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",442,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",442,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",442,null],[11,"overflowing_add","","Calculates `self` + `rhs`",442,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",442,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",442,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",442,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",442,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",442,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",442,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",442,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",442,null],[11,"abs","","Computes the absolute value of `self`.",442,null],[11,"signum","","Returns a number representing sign of `self`.",442,null],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",442,null],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",442,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",443,{"inputs":[],"output":{"name":"isize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",443,{"inputs":[],"output":{"name":"isize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",443,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",443,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",443,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",443,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",443,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",443,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",443,null],[11,"swap_bytes","","Reverses the byte order of the integer.",443,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",443,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",443,{"inputs":[{"name":"isize"}],"output":{"name":"isize"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",443,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",443,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",443,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",443,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",443,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",443,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",443,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self ==\nMIN`.",443,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",443,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",443,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",443,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",443,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",443,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",443,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",443,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",443,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`,\nwrapping around at the boundary of the type.",443,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`,\nwrapping around at the boundary of the type.",443,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",443,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",443,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",443,null],[11,"overflowing_add","","Calculates `self` + `rhs`",443,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",443,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",443,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",443,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",443,null],[11,"overflowing_neg","","Negates self, overflowing if this is equal to the minimum value.",443,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",443,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",443,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",443,null],[11,"abs","","Computes the absolute value of `self`.",443,null],[11,"signum","","Returns a number representing sign of `self`.",443,null],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",443,null],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",443,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",434,{"inputs":[],"output":{"name":"u8"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",434,{"inputs":[],"output":{"name":"u8"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",434,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",434,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",434,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",434,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",434,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",434,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",434,null],[11,"swap_bytes","","Reverses the byte order of the integer.",434,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",434,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",434,{"inputs":[{"name":"u8"}],"output":{"name":"u8"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",434,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",434,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",434,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",434,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",434,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",434,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",434,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.",434,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",434,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",434,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",434,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",434,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",434,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",434,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",434,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",434,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`.\nWrapped division on unsigned types is just normal division.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",434,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",434,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",434,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",434,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",434,null],[11,"overflowing_add","","Calculates `self` + `rhs`",434,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",434,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",434,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",434,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",434,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",434,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",434,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",434,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",434,null],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",434,null],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",434,null],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type&#39;s maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.",434,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",435,{"inputs":[],"output":{"name":"u16"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",435,{"inputs":[],"output":{"name":"u16"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",435,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",435,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",435,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",435,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",435,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",435,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",435,null],[11,"swap_bytes","","Reverses the byte order of the integer.",435,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",435,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",435,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",435,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",435,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",435,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",435,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",435,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",435,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",435,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.",435,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",435,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",435,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",435,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",435,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",435,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",435,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",435,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",435,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`.\nWrapped division on unsigned types is just normal division.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",435,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",435,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",435,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",435,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",435,null],[11,"overflowing_add","","Calculates `self` + `rhs`",435,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",435,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",435,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",435,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",435,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",435,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",435,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",435,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",435,null],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",435,null],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",435,null],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type&#39;s maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.",435,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",436,{"inputs":[],"output":{"name":"u32"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",436,{"inputs":[],"output":{"name":"u32"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",436,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",436,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",436,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",436,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",436,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",436,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",436,null],[11,"swap_bytes","","Reverses the byte order of the integer.",436,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",436,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",436,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",436,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",436,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",436,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",436,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",436,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",436,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",436,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.",436,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",436,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",436,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",436,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",436,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",436,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",436,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",436,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",436,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`.\nWrapped division on unsigned types is just normal division.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",436,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",436,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",436,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",436,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",436,null],[11,"overflowing_add","","Calculates `self` + `rhs`",436,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",436,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",436,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",436,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",436,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",436,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",436,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",436,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",436,null],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",436,null],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",436,null],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type&#39;s maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.",436,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",437,{"inputs":[],"output":{"name":"u64"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",437,{"inputs":[],"output":{"name":"u64"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",437,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",437,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",437,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",437,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",437,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",437,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",437,null],[11,"swap_bytes","","Reverses the byte order of the integer.",437,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",437,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",437,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",437,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",437,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",437,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",437,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",437,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",437,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",437,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.",437,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",437,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",437,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",437,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",437,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",437,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",437,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",437,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",437,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`.\nWrapped division on unsigned types is just normal division.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",437,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",437,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",437,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",437,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",437,null],[11,"overflowing_add","","Calculates `self` + `rhs`",437,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",437,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",437,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",437,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",437,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",437,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",437,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",437,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",437,null],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",437,null],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",437,null],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type&#39;s maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.",437,null],[11,"min_value","","Returns the smallest value that can be represented by this integer type.",438,{"inputs":[],"output":{"name":"usize"}}],[11,"max_value","","Returns the largest value that can be represented by this integer type.",438,{"inputs":[],"output":{"name":"usize"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",438,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",438,null],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",438,null],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",438,null],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",438,null],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,\nwrapping the truncated bits to the end of the resulting integer.",438,null],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,\nwrapping the truncated bits to the beginning of the resulting\ninteger.",438,null],[11,"swap_bytes","","Reverses the byte order of the integer.",438,null],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",438,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",438,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",438,null],[11,"to_le","","Converts `self` to little endian from the target&#39;s endianness.",438,null],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None`\nif overflow occurred.",438,null],[11,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning\n`None` if underflow occurred.",438,null],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",438,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",438,null],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None`\nif `other == 0` or the operation results in underflow or overflow.",438,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` unless `self ==\n0`.",438,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",438,null],[11,"checked_shr","","Checked shift right. Computes `self &gt;&gt; rhs`, returning `None`\nif `rhs` is larger than or equal to the number of bits in `self`.",438,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",438,null],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating\nat the numeric bounds instead of overflowing.",438,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`,\nsaturating at the numeric bounds instead of overflowing.",438,null],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,\nwrapping around at the boundary of the type.",438,null],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,\nwrapping around at the boundary of the type.",438,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *\nother`, wrapping around at the boundary of the type.",438,null],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`.\nWrapped division on unsigned types is just normal division.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",438,null],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`.\nWrapped remainder calculation on unsigned types is\njust the regular remainder calculation.\nThere&#39;s no way wrapping could ever happen.\nThis function exists, so that all operations\nare accounted for in the wrapping operations.",438,null],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`,\nwrapping around at the boundary of the type.",438,null],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",438,null],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; mask(rhs)`,\nwhere `mask` removes any high-order bits of `rhs` that\nwould cause the shift to exceed the bitwidth of the type.",438,null],[11,"overflowing_add","","Calculates `self` + `rhs`",438,null],[11,"overflowing_sub","","Calculates `self` - `rhs`",438,null],[11,"overflowing_mul","","Calculates the multiplication of `self` and `rhs`.",438,null],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `rhs`.",438,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `rhs`.",438,null],[11,"overflowing_neg","","Negates self in an overflowing fashion.",438,null],[11,"overflowing_shl","","Shifts self left by `rhs` bits.",438,null],[11,"overflowing_shr","","Shifts self right by `rhs` bits.",438,null],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",438,null],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",438,null],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",438,null],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If\nthe next power of two is greater than the type&#39;s maximum value,\n`None` is returned, otherwise the power of two is wrapped in `Some`.",438,null],[11,"from_str","","",443,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",439,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",440,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",441,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",442,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",438,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",434,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",435,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",436,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",437,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"u8"}],"output":{"name":"result"}}],[11,"try_from","","",434,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"u16"}],"output":{"name":"result"}}],[11,"try_from","","",435,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"try_from","","",436,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"try_from","","",437,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"try_from","","",439,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"i8"}],"output":{"name":"result"}}],[11,"try_from","","",440,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"i16"}],"output":{"name":"result"}}],[11,"try_from","","",441,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"i32"}],"output":{"name":"result"}}],[11,"try_from","","",442,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"i64"}],"output":{"name":"result"}}],[11,"try_from","","",443,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"try_from","","",438,{"inputs":[{"name":"isize"}],"output":{"name":"result"}}],[11,"from","","",435,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[11,"from","","",436,{"inputs":[{"name":"u8"}],"output":{"name":"u32"}}],[11,"from","","",437,{"inputs":[{"name":"u8"}],"output":{"name":"u64"}}],[11,"from","","",438,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[11,"from","","",436,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[11,"from","","",437,{"inputs":[{"name":"u16"}],"output":{"name":"u64"}}],[11,"from","","",437,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[11,"from","","",440,{"inputs":[{"name":"i8"}],"output":{"name":"i16"}}],[11,"from","","",441,{"inputs":[{"name":"i8"}],"output":{"name":"i32"}}],[11,"from","","",442,{"inputs":[{"name":"i8"}],"output":{"name":"i64"}}],[11,"from","","",443,{"inputs":[{"name":"i8"}],"output":{"name":"isize"}}],[11,"from","","",441,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[11,"from","","",442,{"inputs":[{"name":"i16"}],"output":{"name":"i64"}}],[11,"from","","",442,{"inputs":[{"name":"i32"}],"output":{"name":"i64"}}],[11,"from","","",440,{"inputs":[{"name":"u8"}],"output":{"name":"i16"}}],[11,"from","","",441,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[11,"from","","",442,{"inputs":[{"name":"u8"}],"output":{"name":"i64"}}],[11,"from","","",441,{"inputs":[{"name":"u16"}],"output":{"name":"i32"}}],[11,"from","","",442,{"inputs":[{"name":"u16"}],"output":{"name":"i64"}}],[11,"from","","",442,{"inputs":[{"name":"u32"}],"output":{"name":"i64"}}],[11,"from","","",432,{"inputs":[{"name":"i8"}],"output":{"name":"f32"}}],[11,"from","","",433,{"inputs":[{"name":"i8"}],"output":{"name":"f64"}}],[11,"from","","",432,{"inputs":[{"name":"i16"}],"output":{"name":"f32"}}],[11,"from","","",433,{"inputs":[{"name":"i16"}],"output":{"name":"f64"}}],[11,"from","","",433,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[11,"from","","",432,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[11,"from","","",433,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[11,"from","","",432,{"inputs":[{"name":"u16"}],"output":{"name":"f32"}}],[11,"from","","",433,{"inputs":[{"name":"u16"}],"output":{"name":"f64"}}],[11,"from","","",433,{"inputs":[{"name":"u32"}],"output":{"name":"f64"}}],[11,"from","","",433,{"inputs":[{"name":"f32"}],"output":{"name":"f64"}}],[11,"is_null","","Returns true if the pointer is null.",444,null],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",444,null],[11,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::&lt;T&gt;()` bytes.",444,null],[11,"is_null","","Returns true if the pointer is null.",444,null],[11,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",444,null],[11,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::&lt;T&gt;()` bytes.",444,null],[11,"as_mut","","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",444,null],[11,"eq","","",444,null],[11,"eq","","",444,null],[11,"clone","","",444,null],[11,"clone","","",444,null],[11,"cmp","","",444,null],[11,"partial_cmp","","",444,null],[11,"lt","","",444,null],[11,"le","","",444,null],[11,"gt","","",444,null],[11,"ge","","",444,null],[11,"cmp","","",444,null],[11,"partial_cmp","","",444,null],[11,"lt","","",444,null],[11,"le","","",444,null],[11,"gt","","",444,null],[11,"ge","","",444,null],[11,"add","","",438,null],[11,"add","","",438,null],[11,"add","","",438,null],[11,"add","","",438,null],[11,"add","","",434,null],[11,"add","","",434,null],[11,"add","","",434,null],[11,"add","","",434,null],[11,"add","","",435,null],[11,"add","","",435,null],[11,"add","","",435,null],[11,"add","","",435,null],[11,"add","","",436,null],[11,"add","","",436,null],[11,"add","","",436,null],[11,"add","","",436,null],[11,"add","","",437,null],[11,"add","","",437,null],[11,"add","","",437,null],[11,"add","","",437,null],[11,"add","","",443,null],[11,"add","","",443,null],[11,"add","","",443,null],[11,"add","","",443,null],[11,"add","","",439,null],[11,"add","","",439,null],[11,"add","","",439,null],[11,"add","","",439,null],[11,"add","","",440,null],[11,"add","","",440,null],[11,"add","","",440,null],[11,"add","","",440,null],[11,"add","","",441,null],[11,"add","","",441,null],[11,"add","","",441,null],[11,"add","","",441,null],[11,"add","","",442,null],[11,"add","","",442,null],[11,"add","","",442,null],[11,"add","","",442,null],[11,"add","","",432,null],[11,"add","","",432,null],[11,"add","","",432,null],[11,"add","","",432,null],[11,"add","","",433,null],[11,"add","","",433,null],[11,"add","","",433,null],[11,"add","","",433,null],[11,"sub","","",438,null],[11,"sub","","",438,null],[11,"sub","","",438,null],[11,"sub","","",438,null],[11,"sub","","",434,null],[11,"sub","","",434,null],[11,"sub","","",434,null],[11,"sub","","",434,null],[11,"sub","","",435,null],[11,"sub","","",435,null],[11,"sub","","",435,null],[11,"sub","","",435,null],[11,"sub","","",436,null],[11,"sub","","",436,null],[11,"sub","","",436,null],[11,"sub","","",436,null],[11,"sub","","",437,null],[11,"sub","","",437,null],[11,"sub","","",437,null],[11,"sub","","",437,null],[11,"sub","","",443,null],[11,"sub","","",443,null],[11,"sub","","",443,null],[11,"sub","","",443,null],[11,"sub","","",439,null],[11,"sub","","",439,null],[11,"sub","","",439,null],[11,"sub","","",439,null],[11,"sub","","",440,null],[11,"sub","","",440,null],[11,"sub","","",440,null],[11,"sub","","",440,null],[11,"sub","","",441,null],[11,"sub","","",441,null],[11,"sub","","",441,null],[11,"sub","","",441,null],[11,"sub","","",442,null],[11,"sub","","",442,null],[11,"sub","","",442,null],[11,"sub","","",442,null],[11,"sub","","",432,null],[11,"sub","","",432,null],[11,"sub","","",432,null],[11,"sub","","",432,null],[11,"sub","","",433,null],[11,"sub","","",433,null],[11,"sub","","",433,null],[11,"sub","","",433,null],[11,"mul","","",438,null],[11,"mul","","",438,null],[11,"mul","","",438,null],[11,"mul","","",438,null],[11,"mul","","",434,null],[11,"mul","","",434,null],[11,"mul","","",434,null],[11,"mul","","",434,null],[11,"mul","","",435,null],[11,"mul","","",435,null],[11,"mul","","",435,null],[11,"mul","","",435,null],[11,"mul","","",436,null],[11,"mul","","",436,null],[11,"mul","","",436,null],[11,"mul","","",436,null],[11,"mul","","",437,null],[11,"mul","","",437,null],[11,"mul","","",437,null],[11,"mul","","",437,null],[11,"mul","","",443,null],[11,"mul","","",443,null],[11,"mul","","",443,null],[11,"mul","","",443,null],[11,"mul","","",439,null],[11,"mul","","",439,null],[11,"mul","","",439,null],[11,"mul","","",439,null],[11,"mul","","",440,null],[11,"mul","","",440,null],[11,"mul","","",440,null],[11,"mul","","",440,null],[11,"mul","","",441,null],[11,"mul","","",441,null],[11,"mul","","",441,null],[11,"mul","","",441,null],[11,"mul","","",442,null],[11,"mul","","",442,null],[11,"mul","","",442,null],[11,"mul","","",442,null],[11,"mul","","",432,null],[11,"mul","","",432,null],[11,"mul","","",432,null],[11,"mul","","",432,null],[11,"mul","","",433,null],[11,"mul","","",433,null],[11,"mul","","",433,null],[11,"mul","","",433,null],[11,"div","","",438,null],[11,"div","","",438,null],[11,"div","","",438,null],[11,"div","","",438,null],[11,"div","","",434,null],[11,"div","","",434,null],[11,"div","","",434,null],[11,"div","","",434,null],[11,"div","","",435,null],[11,"div","","",435,null],[11,"div","","",435,null],[11,"div","","",435,null],[11,"div","","",436,null],[11,"div","","",436,null],[11,"div","","",436,null],[11,"div","","",436,null],[11,"div","","",437,null],[11,"div","","",437,null],[11,"div","","",437,null],[11,"div","","",437,null],[11,"div","","",443,null],[11,"div","","",443,null],[11,"div","","",443,null],[11,"div","","",443,null],[11,"div","","",439,null],[11,"div","","",439,null],[11,"div","","",439,null],[11,"div","","",439,null],[11,"div","","",440,null],[11,"div","","",440,null],[11,"div","","",440,null],[11,"div","","",440,null],[11,"div","","",441,null],[11,"div","","",441,null],[11,"div","","",441,null],[11,"div","","",441,null],[11,"div","","",442,null],[11,"div","","",442,null],[11,"div","","",442,null],[11,"div","","",442,null],[11,"div","","",432,null],[11,"div","","",432,null],[11,"div","","",432,null],[11,"div","","",432,null],[11,"div","","",433,null],[11,"div","","",433,null],[11,"div","","",433,null],[11,"div","","",433,null],[11,"rem","","",438,null],[11,"rem","","",438,null],[11,"rem","","",438,null],[11,"rem","","",438,null],[11,"rem","","",434,null],[11,"rem","","",434,null],[11,"rem","","",434,null],[11,"rem","","",434,null],[11,"rem","","",435,null],[11,"rem","","",435,null],[11,"rem","","",435,null],[11,"rem","","",435,null],[11,"rem","","",436,null],[11,"rem","","",436,null],[11,"rem","","",436,null],[11,"rem","","",436,null],[11,"rem","","",437,null],[11,"rem","","",437,null],[11,"rem","","",437,null],[11,"rem","","",437,null],[11,"rem","","",443,null],[11,"rem","","",443,null],[11,"rem","","",443,null],[11,"rem","","",443,null],[11,"rem","","",439,null],[11,"rem","","",439,null],[11,"rem","","",439,null],[11,"rem","","",439,null],[11,"rem","","",440,null],[11,"rem","","",440,null],[11,"rem","","",440,null],[11,"rem","","",440,null],[11,"rem","","",441,null],[11,"rem","","",441,null],[11,"rem","","",441,null],[11,"rem","","",441,null],[11,"rem","","",442,null],[11,"rem","","",442,null],[11,"rem","","",442,null],[11,"rem","","",442,null],[11,"rem","","",432,null],[11,"rem","","",432,null],[11,"rem","","",432,null],[11,"rem","","",432,null],[11,"rem","","",433,null],[11,"rem","","",433,null],[11,"rem","","",433,null],[11,"rem","","",433,null],[11,"neg","","",443,null],[11,"neg","","",443,null],[11,"neg","","",439,null],[11,"neg","","",439,null],[11,"neg","","",440,null],[11,"neg","","",440,null],[11,"neg","","",441,null],[11,"neg","","",441,null],[11,"neg","","",442,null],[11,"neg","","",442,null],[11,"neg","","",432,null],[11,"neg","","",432,null],[11,"neg","","",433,null],[11,"neg","","",433,null],[11,"not","","",445,null],[11,"not","","",445,null],[11,"not","","",438,null],[11,"not","","",438,null],[11,"not","","",434,null],[11,"not","","",434,null],[11,"not","","",435,null],[11,"not","","",435,null],[11,"not","","",436,null],[11,"not","","",436,null],[11,"not","","",437,null],[11,"not","","",437,null],[11,"not","","",443,null],[11,"not","","",443,null],[11,"not","","",439,null],[11,"not","","",439,null],[11,"not","","",440,null],[11,"not","","",440,null],[11,"not","","",441,null],[11,"not","","",441,null],[11,"not","","",442,null],[11,"not","","",442,null],[11,"bitand","","",445,null],[11,"bitand","","",445,null],[11,"bitand","","",445,null],[11,"bitand","","",445,null],[11,"bitand","","",438,null],[11,"bitand","","",438,null],[11,"bitand","","",438,null],[11,"bitand","","",438,null],[11,"bitand","","",434,null],[11,"bitand","","",434,null],[11,"bitand","","",434,null],[11,"bitand","","",434,null],[11,"bitand","","",435,null],[11,"bitand","","",435,null],[11,"bitand","","",435,null],[11,"bitand","","",435,null],[11,"bitand","","",436,null],[11,"bitand","","",436,null],[11,"bitand","","",436,null],[11,"bitand","","",436,null],[11,"bitand","","",437,null],[11,"bitand","","",437,null],[11,"bitand","","",437,null],[11,"bitand","","",437,null],[11,"bitand","","",443,null],[11,"bitand","","",443,null],[11,"bitand","","",443,null],[11,"bitand","","",443,null],[11,"bitand","","",439,null],[11,"bitand","","",439,null],[11,"bitand","","",439,null],[11,"bitand","","",439,null],[11,"bitand","","",440,null],[11,"bitand","","",440,null],[11,"bitand","","",440,null],[11,"bitand","","",440,null],[11,"bitand","","",441,null],[11,"bitand","","",441,null],[11,"bitand","","",441,null],[11,"bitand","","",441,null],[11,"bitand","","",442,null],[11,"bitand","","",442,null],[11,"bitand","","",442,null],[11,"bitand","","",442,null],[11,"bitor","","",445,null],[11,"bitor","","",445,null],[11,"bitor","","",445,null],[11,"bitor","","",445,null],[11,"bitor","","",438,null],[11,"bitor","","",438,null],[11,"bitor","","",438,null],[11,"bitor","","",438,null],[11,"bitor","","",434,null],[11,"bitor","","",434,null],[11,"bitor","","",434,null],[11,"bitor","","",434,null],[11,"bitor","","",435,null],[11,"bitor","","",435,null],[11,"bitor","","",435,null],[11,"bitor","","",435,null],[11,"bitor","","",436,null],[11,"bitor","","",436,null],[11,"bitor","","",436,null],[11,"bitor","","",436,null],[11,"bitor","","",437,null],[11,"bitor","","",437,null],[11,"bitor","","",437,null],[11,"bitor","","",437,null],[11,"bitor","","",443,null],[11,"bitor","","",443,null],[11,"bitor","","",443,null],[11,"bitor","","",443,null],[11,"bitor","","",439,null],[11,"bitor","","",439,null],[11,"bitor","","",439,null],[11,"bitor","","",439,null],[11,"bitor","","",440,null],[11,"bitor","","",440,null],[11,"bitor","","",440,null],[11,"bitor","","",440,null],[11,"bitor","","",441,null],[11,"bitor","","",441,null],[11,"bitor","","",441,null],[11,"bitor","","",441,null],[11,"bitor","","",442,null],[11,"bitor","","",442,null],[11,"bitor","","",442,null],[11,"bitor","","",442,null],[11,"bitxor","","",445,null],[11,"bitxor","","",445,null],[11,"bitxor","","",445,null],[11,"bitxor","","",445,null],[11,"bitxor","","",438,null],[11,"bitxor","","",438,null],[11,"bitxor","","",438,null],[11,"bitxor","","",438,null],[11,"bitxor","","",434,null],[11,"bitxor","","",434,null],[11,"bitxor","","",434,null],[11,"bitxor","","",434,null],[11,"bitxor","","",435,null],[11,"bitxor","","",435,null],[11,"bitxor","","",435,null],[11,"bitxor","","",435,null],[11,"bitxor","","",436,null],[11,"bitxor","","",436,null],[11,"bitxor","","",436,null],[11,"bitxor","","",436,null],[11,"bitxor","","",437,null],[11,"bitxor","","",437,null],[11,"bitxor","","",437,null],[11,"bitxor","","",437,null],[11,"bitxor","","",443,null],[11,"bitxor","","",443,null],[11,"bitxor","","",443,null],[11,"bitxor","","",443,null],[11,"bitxor","","",439,null],[11,"bitxor","","",439,null],[11,"bitxor","","",439,null],[11,"bitxor","","",439,null],[11,"bitxor","","",440,null],[11,"bitxor","","",440,null],[11,"bitxor","","",440,null],[11,"bitxor","","",440,null],[11,"bitxor","","",441,null],[11,"bitxor","","",441,null],[11,"bitxor","","",441,null],[11,"bitxor","","",441,null],[11,"bitxor","","",442,null],[11,"bitxor","","",442,null],[11,"bitxor","","",442,null],[11,"bitxor","","",442,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",434,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",435,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",436,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",437,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",438,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",439,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",440,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",441,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",442,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shl","","",443,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",434,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",435,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",436,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",437,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",438,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",439,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",440,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",441,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",442,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"shr","","",443,null],[11,"add_assign","","",438,null],[11,"add_assign","","",434,null],[11,"add_assign","","",435,null],[11,"add_assign","","",436,null],[11,"add_assign","","",437,null],[11,"add_assign","","",443,null],[11,"add_assign","","",439,null],[11,"add_assign","","",440,null],[11,"add_assign","","",441,null],[11,"add_assign","","",442,null],[11,"add_assign","","",432,null],[11,"add_assign","","",433,null],[11,"sub_assign","","",438,null],[11,"sub_assign","","",434,null],[11,"sub_assign","","",435,null],[11,"sub_assign","","",436,null],[11,"sub_assign","","",437,null],[11,"sub_assign","","",443,null],[11,"sub_assign","","",439,null],[11,"sub_assign","","",440,null],[11,"sub_assign","","",441,null],[11,"sub_assign","","",442,null],[11,"sub_assign","","",432,null],[11,"sub_assign","","",433,null],[11,"mul_assign","","",438,null],[11,"mul_assign","","",434,null],[11,"mul_assign","","",435,null],[11,"mul_assign","","",436,null],[11,"mul_assign","","",437,null],[11,"mul_assign","","",443,null],[11,"mul_assign","","",439,null],[11,"mul_assign","","",440,null],[11,"mul_assign","","",441,null],[11,"mul_assign","","",442,null],[11,"mul_assign","","",432,null],[11,"mul_assign","","",433,null],[11,"div_assign","","",438,null],[11,"div_assign","","",434,null],[11,"div_assign","","",435,null],[11,"div_assign","","",436,null],[11,"div_assign","","",437,null],[11,"div_assign","","",443,null],[11,"div_assign","","",439,null],[11,"div_assign","","",440,null],[11,"div_assign","","",441,null],[11,"div_assign","","",442,null],[11,"div_assign","","",432,null],[11,"div_assign","","",433,null],[11,"rem_assign","","",438,null],[11,"rem_assign","","",434,null],[11,"rem_assign","","",435,null],[11,"rem_assign","","",436,null],[11,"rem_assign","","",437,null],[11,"rem_assign","","",443,null],[11,"rem_assign","","",439,null],[11,"rem_assign","","",440,null],[11,"rem_assign","","",441,null],[11,"rem_assign","","",442,null],[11,"rem_assign","","",432,null],[11,"rem_assign","","",433,null],[11,"bitand_assign","","",445,null],[11,"bitand_assign","","",438,null],[11,"bitand_assign","","",434,null],[11,"bitand_assign","","",435,null],[11,"bitand_assign","","",436,null],[11,"bitand_assign","","",437,null],[11,"bitand_assign","","",443,null],[11,"bitand_assign","","",439,null],[11,"bitand_assign","","",440,null],[11,"bitand_assign","","",441,null],[11,"bitand_assign","","",442,null],[11,"bitor_assign","","",445,null],[11,"bitor_assign","","",438,null],[11,"bitor_assign","","",434,null],[11,"bitor_assign","","",435,null],[11,"bitor_assign","","",436,null],[11,"bitor_assign","","",437,null],[11,"bitor_assign","","",443,null],[11,"bitor_assign","","",439,null],[11,"bitor_assign","","",440,null],[11,"bitor_assign","","",441,null],[11,"bitor_assign","","",442,null],[11,"bitxor_assign","","",445,null],[11,"bitxor_assign","","",438,null],[11,"bitxor_assign","","",434,null],[11,"bitxor_assign","","",435,null],[11,"bitxor_assign","","",436,null],[11,"bitxor_assign","","",437,null],[11,"bitxor_assign","","",443,null],[11,"bitxor_assign","","",439,null],[11,"bitxor_assign","","",440,null],[11,"bitxor_assign","","",441,null],[11,"bitxor_assign","","",442,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",434,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",435,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",436,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",437,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",438,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",439,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",440,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",441,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",442,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shl_assign","","",443,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",434,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",435,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",436,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",437,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",438,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",439,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",440,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",441,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",442,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"shr_assign","","",443,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"eq","","",445,null],[11,"ne","","",445,null],[11,"eq","","",447,null],[11,"ne","","",447,null],[11,"eq","","",438,null],[11,"ne","","",438,null],[11,"eq","","",434,null],[11,"ne","","",434,null],[11,"eq","","",435,null],[11,"ne","","",435,null],[11,"eq","","",436,null],[11,"ne","","",436,null],[11,"eq","","",437,null],[11,"ne","","",437,null],[11,"eq","","",443,null],[11,"ne","","",443,null],[11,"eq","","",439,null],[11,"ne","","",439,null],[11,"eq","","",440,null],[11,"ne","","",440,null],[11,"eq","","",441,null],[11,"ne","","",441,null],[11,"eq","","",442,null],[11,"ne","","",442,null],[11,"eq","","",432,null],[11,"ne","","",432,null],[11,"eq","","",433,null],[11,"ne","","",433,null],[11,"partial_cmp","","",446,null],[11,"partial_cmp","","",445,null],[11,"partial_cmp","","",432,null],[11,"lt","","",432,null],[11,"le","","",432,null],[11,"ge","","",432,null],[11,"gt","","",432,null],[11,"partial_cmp","","",433,null],[11,"lt","","",433,null],[11,"le","","",433,null],[11,"ge","","",433,null],[11,"gt","","",433,null],[11,"cmp","","",446,null],[11,"cmp","","",445,null],[11,"partial_cmp","","",447,null],[11,"lt","","",447,null],[11,"le","","",447,null],[11,"ge","","",447,null],[11,"gt","","",447,null],[11,"cmp","","",447,null],[11,"partial_cmp","","",438,null],[11,"lt","","",438,null],[11,"le","","",438,null],[11,"ge","","",438,null],[11,"gt","","",438,null],[11,"cmp","","",438,null],[11,"partial_cmp","","",434,null],[11,"lt","","",434,null],[11,"le","","",434,null],[11,"ge","","",434,null],[11,"gt","","",434,null],[11,"cmp","","",434,null],[11,"partial_cmp","","",435,null],[11,"lt","","",435,null],[11,"le","","",435,null],[11,"ge","","",435,null],[11,"gt","","",435,null],[11,"cmp","","",435,null],[11,"partial_cmp","","",436,null],[11,"lt","","",436,null],[11,"le","","",436,null],[11,"ge","","",436,null],[11,"gt","","",436,null],[11,"cmp","","",436,null],[11,"partial_cmp","","",437,null],[11,"lt","","",437,null],[11,"le","","",437,null],[11,"ge","","",437,null],[11,"gt","","",437,null],[11,"cmp","","",437,null],[11,"partial_cmp","","",443,null],[11,"lt","","",443,null],[11,"le","","",443,null],[11,"ge","","",443,null],[11,"gt","","",443,null],[11,"cmp","","",443,null],[11,"partial_cmp","","",439,null],[11,"lt","","",439,null],[11,"le","","",439,null],[11,"ge","","",439,null],[11,"gt","","",439,null],[11,"cmp","","",439,null],[11,"partial_cmp","","",440,null],[11,"lt","","",440,null],[11,"le","","",440,null],[11,"ge","","",440,null],[11,"gt","","",440,null],[11,"cmp","","",440,null],[11,"partial_cmp","","",441,null],[11,"lt","","",441,null],[11,"le","","",441,null],[11,"ge","","",441,null],[11,"gt","","",441,null],[11,"cmp","","",441,null],[11,"partial_cmp","","",442,null],[11,"lt","","",442,null],[11,"le","","",442,null],[11,"ge","","",442,null],[11,"gt","","",442,null],[11,"cmp","","",442,null],[11,"clone","","Returns a deep copy of the value.",443,null],[11,"clone","","Returns a deep copy of the value.",439,null],[11,"clone","","Returns a deep copy of the value.",440,null],[11,"clone","","Returns a deep copy of the value.",441,null],[11,"clone","","Returns a deep copy of the value.",442,null],[11,"clone","","Returns a deep copy of the value.",438,null],[11,"clone","","Returns a deep copy of the value.",434,null],[11,"clone","","Returns a deep copy of the value.",435,null],[11,"clone","","Returns a deep copy of the value.",436,null],[11,"clone","","Returns a deep copy of the value.",437,null],[11,"clone","","Returns a deep copy of the value.",432,null],[11,"clone","","Returns a deep copy of the value.",433,null],[11,"clone","","Returns a deep copy of the value.",446,null],[11,"clone","","Returns a deep copy of the value.",445,null],[11,"clone","","Returns a deep copy of the value.",447,null],[11,"default","","",446,null],[11,"default","","",445,{"inputs":[],"output":{"name":"bool"}}],[11,"default","","",447,{"inputs":[],"output":{"name":"char"}}],[11,"default","","",438,{"inputs":[],"output":{"name":"usize"}}],[11,"default","","",434,{"inputs":[],"output":{"name":"u8"}}],[11,"default","","",435,{"inputs":[],"output":{"name":"u16"}}],[11,"default","","",436,{"inputs":[],"output":{"name":"u32"}}],[11,"default","","",437,{"inputs":[],"output":{"name":"u64"}}],[11,"default","","",443,{"inputs":[],"output":{"name":"isize"}}],[11,"default","","",439,{"inputs":[],"output":{"name":"i8"}}],[11,"default","","",440,{"inputs":[],"output":{"name":"i16"}}],[11,"default","","",441,{"inputs":[],"output":{"name":"i32"}}],[11,"default","","",442,{"inputs":[],"output":{"name":"i64"}}],[11,"default","","",432,{"inputs":[],"output":{"name":"f32"}}],[11,"default","","",433,{"inputs":[],"output":{"name":"f64"}}],[11,"as_ref","","",448,null],[11,"as_mut","","",448,null],[11,"as_ref","","",449,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"as_ref","","",450,null],[11,"as_mut","","",450,null],[11,"borrow","","",450,null],[11,"borrow_mut","","",450,null],[11,"clone","","",450,null],[11,"hash","","",450,null],[11,"fmt","","",450,null],[11,"into_iter","","",450,null],[11,"into_iter","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"eq","","",450,null],[11,"ne","","",450,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"partial_cmp","","",450,null],[11,"lt","","",450,null],[11,"le","","",450,null],[11,"ge","","",450,null],[11,"gt","","",450,null],[11,"cmp","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"default","","",450,null],[11,"step","","",438,null],[11,"steps_between","","",438,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"step","","",434,null],[11,"steps_between","","",434,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"option"}}],[11,"step","","",435,null],[11,"steps_between","","",435,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"option"}}],[11,"step","","",436,null],[11,"steps_between","","",436,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"step","","",443,null],[11,"steps_between","","",443,{"inputs":[{"name":"isize"},{"name":"isize"},{"name":"isize"}],"output":{"name":"option"}}],[11,"step","","",439,null],[11,"steps_between","","",439,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"option"}}],[11,"step","","",440,null],[11,"steps_between","","",440,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"option"}}],[11,"step","","",441,null],[11,"steps_between","","",441,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[11,"step","","",437,null],[11,"steps_between","","",437,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"option"}}],[11,"step","","",442,null],[11,"steps_between","","",442,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"option"}}],[11,"split_at","","",448,null],[11,"iter","","",448,null],[11,"split","","",448,null],[11,"splitn","","",448,null],[11,"rsplitn","","",448,null],[11,"windows","","",448,null],[11,"chunks","","",448,null],[11,"get","","",448,null],[11,"first","","",448,null],[11,"split_first","","",448,null],[11,"split_last","","",448,null],[11,"last","","",448,null],[11,"get_unchecked","","",448,null],[11,"as_ptr","","",448,null],[11,"binary_search_by","","",448,null],[11,"len","","",448,null],[11,"get_mut","","",448,null],[11,"split_at_mut","","",448,null],[11,"iter_mut","","",448,null],[11,"last_mut","","",448,null],[11,"first_mut","","",448,null],[11,"split_first_mut","","",448,null],[11,"split_last_mut","","",448,null],[11,"split_mut","","",448,null],[11,"splitn_mut","","",448,null],[11,"rsplitn_mut","","",448,null],[11,"chunks_mut","","",448,null],[11,"swap","","",448,null],[11,"reverse","","",448,null],[11,"get_unchecked_mut","","",448,null],[11,"as_mut_ptr","","",448,null],[11,"contains","","",448,null],[11,"starts_with","","",448,null],[11,"ends_with","","",448,null],[11,"binary_search","","",448,null],[11,"clone_from_slice","","",448,null],[11,"copy_from_slice","","",448,null],[11,"binary_search_by_key","","",448,null],[11,"index","","",448,null],[11,"index_mut","","",448,null],[11,"index","","",448,null],[11,"index","","",448,null],[11,"index","","",448,null],[11,"index","","",448,null],[11,"index","","",448,null],[11,"index","","",448,null],[11,"index_mut","","",448,null],[11,"index_mut","","",448,null],[11,"index_mut","","",448,null],[11,"index_mut","","",448,null],[11,"index_mut","","",448,null],[11,"index_mut","","",448,null],[11,"default","","",448,null],[11,"default","","",448,null],[11,"into_iter","","",448,null],[11,"into_iter","","",448,null],[11,"eq","","",448,null],[11,"ne","","",448,null],[11,"cmp","","",448,null],[11,"partial_cmp","","",448,null],[11,"into_searcher","","",447,null],[11,"is_contained_in","","",447,null],[11,"is_prefix_of","","",447,null],[11,"is_suffix_of","","",447,null],[11,"into_searcher","","",448,null],[11,"is_contained_in","","",448,null],[11,"is_prefix_of","","",448,null],[11,"is_suffix_of","","",448,null],[11,"into_searcher","","",449,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",449,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",449,null],[11,"from_str","","Parse a `bool` from a string.",445,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"partial_cmp","","",449,null],[11,"index","","",449,null],[11,"index_mut","","",449,null],[11,"index","","",449,null],[11,"index_mut","","",449,null],[11,"index","","",449,null],[11,"index_mut","","",449,null],[11,"index","","",449,null],[11,"index_mut","","",449,null],[11,"index","","",449,null],[11,"index","","",449,null],[11,"index_mut","","",449,null],[11,"index_mut","","",449,null],[11,"as_ref","","",449,null],[11,"default","","",449,{"inputs":[],"output":{"name":"str"}}],[11,"hash","","",434,null],[11,"hash_slice","","",434,null],[11,"hash","","",435,null],[11,"hash_slice","","",435,null],[11,"hash","","",436,null],[11,"hash_slice","","",436,null],[11,"hash","","",437,null],[11,"hash_slice","","",437,null],[11,"hash","","",438,null],[11,"hash_slice","","",438,null],[11,"hash","","",439,null],[11,"hash_slice","","",439,null],[11,"hash","","",440,null],[11,"hash_slice","","",440,null],[11,"hash","","",441,null],[11,"hash_slice","","",441,null],[11,"hash","","",442,null],[11,"hash_slice","","",442,null],[11,"hash","","",443,null],[11,"hash_slice","","",443,null],[11,"hash","","",445,null],[11,"hash","","",447,null],[11,"hash","","",449,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",446,null],[11,"hash","","",448,null],[11,"hash","","",444,null],[11,"hash","","",444,null],[11,"fmt","","",443,null],[11,"fmt","","",443,null],[11,"fmt","","",443,null],[11,"fmt","","",443,null],[11,"fmt","","",443,null],[11,"fmt","","",438,null],[11,"fmt","","",438,null],[11,"fmt","","",438,null],[11,"fmt","","",438,null],[11,"fmt","","",438,null],[11,"fmt","","",439,null],[11,"fmt","","",439,null],[11,"fmt","","",439,null],[11,"fmt","","",439,null],[11,"fmt","","",439,null],[11,"fmt","","",434,null],[11,"fmt","","",434,null],[11,"fmt","","",434,null],[11,"fmt","","",434,null],[11,"fmt","","",434,null],[11,"fmt","","",440,null],[11,"fmt","","",440,null],[11,"fmt","","",440,null],[11,"fmt","","",440,null],[11,"fmt","","",440,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",435,null],[11,"fmt","","",441,null],[11,"fmt","","",441,null],[11,"fmt","","",441,null],[11,"fmt","","",441,null],[11,"fmt","","",441,null],[11,"fmt","","",436,null],[11,"fmt","","",436,null],[11,"fmt","","",436,null],[11,"fmt","","",436,null],[11,"fmt","","",436,null],[11,"fmt","","",442,null],[11,"fmt","","",442,null],[11,"fmt","","",442,null],[11,"fmt","","",442,null],[11,"fmt","","",442,null],[11,"fmt","","",437,null],[11,"fmt","","",437,null],[11,"fmt","","",437,null],[11,"fmt","","",437,null],[11,"fmt","","",437,null],[11,"fmt","","",439,null],[11,"fmt","","",434,null],[11,"fmt","","",440,null],[11,"fmt","","",435,null],[11,"fmt","","",441,null],[11,"fmt","","",436,null],[11,"fmt","","",442,null],[11,"fmt","","",437,null],[11,"fmt","","",443,null],[11,"fmt","","",438,null],[11,"fmt","","",445,null],[11,"fmt","","",445,null],[11,"fmt","","",449,null],[11,"fmt","","",449,null],[11,"fmt","","",447,null],[11,"fmt","","",447,null],[11,"fmt","","",444,null],[11,"fmt","","",444,null],[11,"fmt","","",432,null],[11,"fmt","","",432,null],[11,"fmt","","",432,null],[11,"fmt","","",432,null],[11,"fmt","","",433,null],[11,"fmt","","",433,null],[11,"fmt","","",433,null],[11,"fmt","","",433,null],[11,"fmt","","",444,null],[11,"fmt","","",444,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",446,null],[11,"fmt","","",448,null],[11,"fmt","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"clone","","",446,null],[11,"eq","","",446,null],[11,"ne","","",446,null],[11,"partial_cmp","","",446,null],[11,"lt","","",446,null],[11,"le","","",446,null],[11,"ge","","",446,null],[11,"gt","","",446,null],[11,"cmp","","",446,null],[11,"default","","",446,null],[11,"len","","Returns the number of elements in the slice.",448,null],[11,"is_empty","","Returns true if the slice has a length of 0",448,null],[11,"first","","Returns the first element of a slice, or `None` if it is empty.",448,null],[11,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",448,null],[11,"split_first","","Returns the first and all the rest of the elements of a slice.",448,null],[11,"split_first_mut","","Returns the first and all the rest of the elements of a slice.",448,null],[11,"split_last","","Returns the last and all the rest of the elements of a slice.",448,null],[11,"split_last_mut","","Returns the last and all the rest of the elements of a slice.",448,null],[11,"last","","Returns the last element of a slice, or `None` if it is empty.",448,null],[11,"last_mut","","Returns a mutable pointer to the last item in the slice.",448,null],[11,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",448,null],[11,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",448,null],[11,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",448,null],[11,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",448,null],[11,"as_ptr","","Returns an raw pointer to the slice&#39;s buffer",448,null],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the slice&#39;s buffer.",448,null],[11,"swap","","Swaps two elements in a slice.",448,null],[11,"reverse","","Reverse the order of elements in a slice, in place.",448,null],[11,"iter","","Returns an iterator over the slice.",448,null],[11,"iter_mut","","Returns an iterator that allows modifying each value",448,null],[11,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",448,null],[11,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks are slices and do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",448,null],[11,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable slices, and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",448,null],[11,"split_at","","Divides one slice into two at an index.",448,null],[11,"split_at_mut","","Divides one `&amp;mut` into two at an index.",448,null],[11,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",448,null],[11,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",448,null],[11,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to returning at most `n` items.  The matched element is\nnot contained in the subslices.",448,null],[11,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to returning at most `n` items.  The matched element is\nnot contained in the subslices.",448,null],[11,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to returning at most `n` items. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",448,null],[11,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to returning at most `n` items. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",448,null],[11,"contains","","Returns true if the slice contains an element with the given value.",448,null],[11,"starts_with","","Returns true if `needle` is a prefix of the slice.",448,null],[11,"ends_with","","Returns true if `needle` is a suffix of the slice.",448,null],[11,"binary_search","","Binary search a sorted slice for a given element.",448,null],[11,"binary_search_by","","Binary search a sorted slice with a comparator function.",448,null],[11,"binary_search_by_key","","Binary search a sorted slice with a key extraction function.",448,null],[11,"sort","","Sorts the slice, in place.",448,null],[11,"sort_by_key","","Sorts the slice, in place, using `key` to extract a key by which to\norder the sort by.",448,null],[11,"sort_by","","Sorts the slice, in place, using `compare` to compare\nelements.",448,null],[11,"clone_from_slice","","Copies the elements from `src` into `self`.",448,null],[11,"copy_from_slice","","Copies all elements from `src` into `self`, using a memcpy.",448,null],[11,"to_vec","","Copies `self` into a new `Vec`.",448,null],[11,"into_vec","","Converts `self` into a vector without clones or allocation.",448,{"inputs":[{"name":"box"}],"output":{"name":"vec"}}],[11,"concat","","",448,null],[11,"join","","",448,null],[11,"connect","","",448,null],[11,"to_owned","","",448,null],[11,"concat","","",448,null],[11,"join","","",448,null],[11,"connect","","",448,null],[11,"to_owned","","",449,null],[11,"len","","Returns the length of `self`.",449,null],[11,"is_empty","","Returns true if this slice has a length of zero bytes.",449,null],[11,"is_char_boundary","","Checks that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",449,null],[11,"as_bytes","","Converts a string slice to a byte slice.",449,null],[11,"as_ptr","","Converts a string slice to a raw pointer.",449,null],[11,"slice_unchecked","","Creates a string slice from another string slice, bypassing safety\nchecks.",449,null],[11,"slice_mut_unchecked","","Creates a string slice from another string slice, bypassing safety\nchecks.",449,null],[11,"char_range_at","","Given a byte position, returns the next `char` and its index.",449,null],[11,"char_range_at_reverse","","Given a byte position, returns the previous `char` and its position.",449,null],[11,"char_at","","Given a byte position, returns the `char` at that position.",449,null],[11,"char_at_reverse","","Given a byte position, returns the `char` at that position, counting\nfrom the end.",449,null],[11,"slice_shift_char","","Retrieves the first `char` from a `&amp;str` and returns it.",449,null],[11,"split_at","","Divide one string slice into two at an index.",449,null],[11,"split_at_mut","","Divide one mutable string slice into two at an index.",449,null],[11,"chars","","Returns an iterator over the `char`s of a string slice.",449,null],[11,"char_indices","","Returns an iterator over the [`char`]s of a string slice, and their\npositions.",449,null],[11,"bytes","","An iterator over the bytes of a string slice.",449,null],[11,"split_whitespace","","Split a string slice by whitespace.",449,null],[11,"lines","","An iterator over the lines of a string, as string slices.",449,null],[11,"lines_any","","An iterator over the lines of a string.",449,null],[11,"utf16_units","","Returns an iterator of `u16` over the string encoded as UTF-16.",449,null],[11,"encode_utf16","","Returns an iterator of `u16` over the string encoded as UTF-16.",449,null],[11,"contains","","Returns `true` if the given pattern matches a sub-slice of\nthis string slice.",449,null],[11,"starts_with","","Returns `true` if the given pattern matches a prefix of this\nstring slice.",449,null],[11,"ends_with","","Returns `true` if the given pattern matches a suffix of this\nstring slice.",449,null],[11,"find","","Returns the byte index of the first character of this string slice that\nmatches the pattern.",449,null],[11,"rfind","","Returns the byte index of the last character of this string slice that\nmatches the pattern.",449,null],[11,"split","","An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.",449,null],[11,"rsplit","","An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.",449,null],[11,"split_terminator","","An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.",449,null],[11,"rsplit_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.",449,null],[11,"splitn","","An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `count` items.",449,null],[11,"rsplitn","","An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `count` items.",449,null],[11,"matches","","An iterator over the matches of a pattern within the given string\nslice.",449,null],[11,"rmatches","","An iterator over the matches of a pattern within this string slice,\nyielded in reverse order.",449,null],[11,"match_indices","","An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.",449,null],[11,"rmatch_indices","","An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.",449,null],[11,"trim","","Returns a string slice with leading and trailing whitespace removed.",449,null],[11,"trim_left","","Returns a string slice with leading whitespace removed.",449,null],[11,"trim_right","","Returns a string slice with trailing whitespace removed.",449,null],[11,"trim_matches","","Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.",449,null],[11,"trim_left_matches","","Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.",449,null],[11,"trim_right_matches","","Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.",449,null],[11,"parse","","Parses this string slice into another type.",449,null],[11,"replace","","Replaces all matches of a pattern with another string.",449,null],[11,"to_lowercase","","Returns the lowercase equivalent of this string slice, as a new [`String`].",449,null],[11,"to_uppercase","","Returns the uppercase equivalent of this string slice, as a new [`String`].",449,null],[11,"escape_default","","Escapes each char in `s` with `char::escape_default`.",449,null],[11,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",449,null],[11,"into_string","","Converts a `Box&lt;str&gt;` into a [`String`] without copying or allocating.",449,{"inputs":[{"name":"box"}],"output":{"name":"string"}}],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"eq","","",449,null],[11,"ne","","",449,null],[11,"to_string","","",449,null],[11,"split_whitespace","","",449,null],[11,"is_whitespace","","",449,null],[11,"is_alphanumeric","","",449,null],[11,"trim","","",449,null],[11,"trim_left","","",449,null],[11,"trim_right","","",449,null],[11,"is_digit","","Checks if a `char` is a digit in the given radix.",447,null],[11,"to_digit","","Converts a `char` to a digit in the given radix.",447,null],[11,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",447,null],[11,"escape_default","","Returns an iterator that yields the literal escape code of a `char`.",447,null],[11,"len_utf8","","Returns the number of bytes this `char` would need if encoded in UTF-8.",447,null],[11,"len_utf16","","Returns the number of 16-bit code units this `char` would need if\nencoded in UTF-16.",447,null],[11,"encode_utf8","","Returns an interator over the bytes of this character as UTF-8.",447,null],[11,"encode_utf16","","Returns an interator over the `u16` entries of this character as UTF-16.",447,null],[11,"is_alphabetic","","Returns true if this `char` is an alphabetic code point, and false if not.",447,null],[11,"is_xid_start","","Returns true if this `char` satisfies the &#39;XID_Start&#39; Unicode property, and false\notherwise.",447,null],[11,"is_xid_continue","","Returns true if this `char` satisfies the &#39;XID_Continue&#39; Unicode property, and false\notherwise.",447,null],[11,"is_lowercase","","Returns true if this `char` is lowercase, and false otherwise.",447,null],[11,"is_uppercase","","Returns true if this `char` is uppercase, and false otherwise.",447,null],[11,"is_whitespace","","Returns true if this `char` is whitespace, and false otherwise.",447,null],[11,"is_alphanumeric","","Returns true if this `char` is alphanumeric, and false otherwise.",447,null],[11,"is_control","","Returns true if this `char` is a control code point, and false otherwise.",447,null],[11,"is_numeric","","Returns true if this `char` is numeric, and false otherwise.",447,null],[11,"to_lowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",447,null],[11,"to_uppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",447,null],[11,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",432,null],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",432,null],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",432,null],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",432,null],[11,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",432,null],[11,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",432,null],[11,"floor","","Returns the largest integer less than or equal to a number.",432,null],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",432,null],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",432,null],[11,"trunc","","Returns the integer part of a number.",432,null],[11,"fract","","Returns the fractional part of a number.",432,null],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the\nnumber is `NAN`.",432,null],[11,"signum","","Returns a number that represents the sign of `self`.",432,null],[11,"is_sign_positive","","Returns `true` if `self`&#39;s sign bit is positive, including\n`+0.0` and `INFINITY`.",432,null],[11,"is_sign_negative","","Returns `true` if `self`&#39;s sign is negative, including `-0.0`\nand `NEG_INFINITY`.",432,null],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",432,null],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",432,null],[11,"powi","","Raises a number to an integer power.",432,null],[11,"powf","","Raises a number to a floating point power.",432,null],[11,"sqrt","","Takes the square root of a number.",432,null],[11,"exp","","Returns `e^(self)`, (the exponential function).",432,null],[11,"exp2","","Returns `2^(self)`.",432,null],[11,"ln","","Returns the natural logarithm of the number.",432,null],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",432,null],[11,"log2","","Returns the base 2 logarithm of the number.",432,null],[11,"log10","","Returns the base 10 logarithm of the number.",432,null],[11,"to_degrees","","Converts radians to degrees.",432,null],[11,"to_radians","","Converts degrees to radians.",432,null],[11,"ldexp","","Constructs a floating point number of `x*2^exp`.",432,{"inputs":[{"name":"f32"},{"name":"isize"}],"output":{"name":"f32"}}],[11,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent,\nsatisfying:",432,null],[11,"next_after","","Returns the next representable floating-point value in the direction of\n`other`.",432,null],[11,"max","","Returns the maximum of the two numbers.",432,null],[11,"min","","Returns the minimum of the two numbers.",432,null],[11,"abs_sub","","The positive difference of two numbers.",432,null],[11,"cbrt","","Takes the cubic root of a number.",432,null],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",432,null],[11,"sin","","Computes the sine of a number (in radians).",432,null],[11,"cos","","Computes the cosine of a number (in radians).",432,null],[11,"tan","","Computes the tangent of a number (in radians).",432,null],[11,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",432,null],[11,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",432,null],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",432,null],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",432,null],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",432,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",432,null],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",432,null],[11,"sinh","","Hyperbolic sine function.",432,null],[11,"cosh","","Hyperbolic cosine function.",432,null],[11,"tanh","","Hyperbolic tangent function.",432,null],[11,"asinh","","Inverse hyperbolic sine function.",432,null],[11,"acosh","","Inverse hyperbolic cosine function.",432,null],[11,"atanh","","Inverse hyperbolic tangent function.",432,null],[11,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",433,null],[11,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",433,null],[11,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",433,null],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",433,null],[11,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",433,null],[11,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",433,null],[11,"floor","","Returns the largest integer less than or equal to a number.",433,null],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",433,null],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",433,null],[11,"trunc","","Returns the integer part of a number.",433,null],[11,"fract","","Returns the fractional part of a number.",433,null],[11,"abs","","Computes the absolute value of `self`. Returns `NAN` if the\nnumber is `NAN`.",433,null],[11,"signum","","Returns a number that represents the sign of `self`.",433,null],[11,"is_sign_positive","","Returns `true` if `self`&#39;s sign bit is positive, including\n`+0.0` and `INFINITY`.",433,null],[11,"is_positive","","",433,null],[11,"is_sign_negative","","Returns `true` if `self`&#39;s sign is negative, including `-0.0`\nand `NEG_INFINITY`.",433,null],[11,"is_negative","","",433,null],[11,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",433,null],[11,"recip","","Takes the reciprocal (inverse) of a number, `1/x`.",433,null],[11,"powi","","Raises a number to an integer power.",433,null],[11,"powf","","Raises a number to a floating point power.",433,null],[11,"sqrt","","Takes the square root of a number.",433,null],[11,"exp","","Returns `e^(self)`, (the exponential function).",433,null],[11,"exp2","","Returns `2^(self)`.",433,null],[11,"ln","","Returns the natural logarithm of the number.",433,null],[11,"log","","Returns the logarithm of the number with respect to an arbitrary base.",433,null],[11,"log2","","Returns the base 2 logarithm of the number.",433,null],[11,"log10","","Returns the base 10 logarithm of the number.",433,null],[11,"to_degrees","","Converts radians to degrees.",433,null],[11,"to_radians","","Converts degrees to radians.",433,null],[11,"ldexp","","Constructs a floating point number of `x*2^exp`.",433,{"inputs":[{"name":"f64"},{"name":"isize"}],"output":{"name":"f64"}}],[11,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent,\nsatisfying:",433,null],[11,"next_after","","Returns the next representable floating-point value in the direction of\n`other`.",433,null],[11,"max","","Returns the maximum of the two numbers.",433,null],[11,"min","","Returns the minimum of the two numbers.",433,null],[11,"abs_sub","","The positive difference of two numbers.",433,null],[11,"cbrt","","Takes the cubic root of a number.",433,null],[11,"hypot","","Calculates the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",433,null],[11,"sin","","Computes the sine of a number (in radians).",433,null],[11,"cos","","Computes the cosine of a number (in radians).",433,null],[11,"tan","","Computes the tangent of a number (in radians).",433,null],[11,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",433,null],[11,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",433,null],[11,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",433,null],[11,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",433,null],[11,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",433,null],[11,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",433,null],[11,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",433,null],[11,"sinh","","Hyperbolic sine function.",433,null],[11,"cosh","","Hyperbolic cosine function.",433,null],[11,"tanh","","Hyperbolic tangent function.",433,null],[11,"asinh","","Inverse hyperbolic sine function.",433,null],[11,"acosh","","Inverse hyperbolic cosine function.",433,null],[11,"atanh","","Inverse hyperbolic tangent function.",433,null],[11,"is_ascii","","",449,null],[11,"to_ascii_uppercase","","",449,null],[11,"to_ascii_lowercase","","",449,null],[11,"eq_ignore_ascii_case","","",449,null],[11,"make_ascii_uppercase","","",449,null],[11,"make_ascii_lowercase","","",449,null],[11,"is_ascii","","",448,null],[11,"to_ascii_uppercase","","",448,null],[11,"to_ascii_lowercase","","",448,null],[11,"eq_ignore_ascii_case","","",448,null],[11,"make_ascii_uppercase","","",448,null],[11,"make_ascii_lowercase","","",448,null],[11,"is_ascii","","",434,null],[11,"to_ascii_uppercase","","",434,null],[11,"to_ascii_lowercase","","",434,null],[11,"eq_ignore_ascii_case","","",434,null],[11,"make_ascii_uppercase","","",434,null],[11,"make_ascii_lowercase","","",434,null],[11,"is_ascii","","",447,null],[11,"to_ascii_uppercase","","",447,null],[11,"to_ascii_lowercase","","",447,null],[11,"eq_ignore_ascii_case","","",447,null],[11,"make_ascii_uppercase","","",447,null],[11,"make_ascii_lowercase","","",447,null],[11,"clone","std::collections::hash_map","",451,null],[11,"clone","","",452,null],[11,"clone","","",453,null],[11,"next","","",451,null],[11,"size_hint","","",451,null],[11,"len","","",451,null],[11,"next","","",454,null],[11,"size_hint","","",454,null],[11,"len","","",454,null],[11,"next","","",455,null],[11,"size_hint","","",455,null],[11,"len","","",455,null],[11,"next","","",452,null],[11,"size_hint","","",452,null],[11,"len","","",452,null],[11,"next","","",453,null],[11,"size_hint","","",453,null],[11,"len","","",453,null],[11,"next","","",456,null],[11,"size_hint","","",456,null],[11,"len","","",456,null],[11,"next","","",457,null],[11,"size_hint","","",457,null],[11,"len","","",457,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",273,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",273,null],[11,"key","","Returns a reference to this entry&#39;s key.",273,null],[11,"key","","Gets a reference to the key in the entry.",458,null],[11,"get","","Gets a reference to the value in the entry.",458,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",458,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",458,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",458,null],[11,"remove","","Takes the value out of the entry, and returns it",458,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",459,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",459,null],[11,"clone","","",460,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",460,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",460,null],[11,"default","","",460,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash_set","",461,null],[11,"next","","",461,null],[11,"size_hint","","",461,null],[11,"len","","",461,null],[11,"next","","",462,null],[11,"size_hint","","",462,null],[11,"len","","",462,null],[11,"next","","",463,null],[11,"size_hint","","",463,null],[11,"len","","",463,null],[11,"clone","","",464,null],[11,"next","","",464,null],[11,"size_hint","","",464,null],[11,"clone","","",465,null],[11,"next","","",465,null],[11,"size_hint","","",465,null],[11,"clone","","",466,null],[11,"next","","",466,null],[11,"size_hint","","",466,null],[11,"clone","","",467,null],[11,"next","","",467,null],[11,"size_hint","","",467,null],[11,"from","std::io","",301,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"eq","std","",449,null],[11,"eq","","",449,null],[11,"as_ref","","",449,null],[11,"read","","",448,null],[11,"read_exact","","",448,null],[11,"fill_buf","","",448,null],[11,"consume","","",448,null],[11,"write","","",448,null],[11,"write_all","","",448,null],[11,"flush","","",448,null],[11,"from","","",436,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"u32"}}],[11,"to_socket_addrs","","",446,null],[11,"to_socket_addrs","","",446,null],[11,"to_socket_addrs","","",446,null],[11,"to_socket_addrs","","",446,null],[11,"to_socket_addrs","","",449,null],[11,"to_socket_addrs","","",448,null],[11,"uid","std::process","",375,null],[11,"gid","","",375,null],[11,"session_leader","","",375,null],[11,"before_exec","","",375,null],[11,"exec","","",375,null],[11,"from_raw","","",377,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"signal","","",377,null],[11,"from_raw_fd","","",376,{"inputs":[{"name":"rawfd"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",372,null],[11,"as_raw_fd","","",373,null],[11,"as_raw_fd","","",374,null],[11,"into_raw_fd","","",372,null],[11,"into_raw_fd","","",373,null],[11,"into_raw_fd","","",374,null],[11,"as_ref","std","",449,null]],"paths":[[8,"Any"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"Step"],[8,"FromIterator"],[8,"Extend"],[8,"IntoIterator"],[8,"Iterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Repr"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[8,"FnBox"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[8,"ToOwned"],[8,"Borrow"],[8,"BorrowMut"],[8,"Octal"],[8,"Pointer"],[8,"LowerExp"],[8,"Debug"],[8,"UpperHex"],[8,"Display"],[8,"LowerHex"],[8,"UpperExp"],[8,"Write"],[8,"Binary"],[8,"SliceConcatExt"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[8,"FromStr"],[8,"ToString"],[8,"Error"],[8,"AsciiExt"],[3,"EscapeDefault"],[8,"Zero"],[8,"One"],[4,"LocalKeyState"],[3,"__ElfLocalKeyInner"],[3,"__OsLocalKeyInner"],[3,"LocalKey"],[3,"__ScopedKeyInner"],[3,"ScopedKey"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[4,"VarError"],[3,"Vars"],[3,"VarsOs"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"OsString"],[3,"OsStr"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[4,"ErrorKind"],[4,"SeekFrom"],[4,"CharsError"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"Error"],[3,"LineWriter"],[3,"Cursor"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[8,"Read"],[8,"Write"],[8,"Seek"],[8,"BufRead"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[4,"SocketAddr"],[4,"Shutdown"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[8,"ToSocketAddrs"],[3,"LookupHost"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"stat"],[8,"MetadataExt"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"Component"],[3,"PrefixComponent"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Child"],[3,"Output"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"Command"],[3,"Stdio"],[3,"ExitStatus"],[4,"TryLockError"],[3,"SendError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[3,"PanicInfo"],[3,"Location"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"Rng"],[15,"f32"],[15,"f64"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"usize"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"isize"],[15,"pointer"],[15,"bool"],[15,"tuple"],[15,"char"],[15,"slice"],[15,"str"],[15,"array"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]};
searchIndex["collections"] = {"doc":"Collection types.","items":[[0,"boxed","collections","A pointer type for heap allocation.",null,null],[17,"HEAP","collections::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[11,"clone","alloc::boxed","",0,null],[11,"pointer","","",1,null],[11,"make_place","","",1,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",1,null],[11,"finalize","","",2,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",0,null],[11,"drop","","",1,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",2,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",2,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",2,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"ge","","",2,null],[11,"gt","","",2,null],[11,"cmp","","",2,null],[11,"hash","","",2,null],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next_back","","",2,null],[11,"call_once","","",2,null],[11,"call_once","","",2,null],[11,"clone","","",2,null],[11,"borrow","","",2,null],[11,"borrow_mut","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"fmt","alloc::arc","",3,null],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",4,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",4,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",4,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",4,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",4,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",4,null],[11,"deref","","",4,null],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",4,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",4,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",4,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",3,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",3,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",3,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",4,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",4,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",4,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",4,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",4,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",4,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",4,null],[11,"cmp","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",3,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",4,null],[11,"as_ref","","",4,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",5,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",5,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",5,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",5,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",5,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",5,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",5,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",5,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",5,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",5,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",5,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",5,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",5,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",5,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",5,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",5,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",5,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",5,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",5,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",5,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",5,null],[11,"hash","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",6,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",6,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",6,null],[11,"fmt","","",6,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",6,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",5,null],[11,"as_ref","","",5,null],[11,"new","alloc::raw_vec","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",7,{"inputs":[],"output":{"name":"rawvec"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",7,{"inputs":[{"name":"usize"}],"output":{"name":"rawvec"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",7,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",7,{"inputs":[{"name":"box"}],"output":{"name":"rawvec"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",7,null],[11,"cap","","Gets the capacity of the allocation.",7,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",7,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",7,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",7,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",7,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",7,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",7,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",7,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",7,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",7,null],[3,"ExchangeHeapSingleton","collections::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",8,null],[10,"call_box","","",8,null],[4,"Bound","collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",9,null],[13,"Excluded","","An exclusive bound.",9,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",9,null],[0,"binary_heap","","A priority queue implemented with a binary heap.",null,null],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[3,"Iter","","`BinaryHeap` iterator.",null,null],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`.",null,null],[3,"Drain","","An iterator that drains a `BinaryHeap`.",null,null],[11,"clone","","",10,null],[11,"clone_from","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",10,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",10,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",10,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",10,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",10,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",10,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",10,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",10,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",10,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",10,null],[11,"push","","Pushes an item onto the binary heap.",10,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",10,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",10,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",10,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",10,null],[11,"len","","Returns the length of the binary heap.",10,null],[11,"is_empty","","Checks if the binary heap is empty.",10,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",10,null],[11,"clear","","Drops all items from the binary heap.",10,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",10,null],[11,"clone","","",11,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"clone","","",12,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",10,null],[11,"extend","","",10,null],[11,"extend","","",10,null],[0,"borrow","collections","A module for working with borrowed data.",null,null],[11,"hash","core::num","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",14,null],[11,"cmp","","",14,null],[11,"partial_cmp","","",14,null],[11,"lt","","",14,null],[11,"le","","",14,null],[11,"gt","","",14,null],[11,"ge","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"fmt","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"shl","","",14,null],[11,"shl_assign","","",14,null],[11,"shr","","",14,null],[11,"shr_assign","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"add","","",14,null],[11,"add_assign","","",14,null],[11,"sub","","",14,null],[11,"sub_assign","","",14,null],[11,"mul","","",14,null],[11,"mul_assign","","",14,null],[11,"div","","",14,null],[11,"div_assign","","",14,null],[11,"rem","","",14,null],[11,"rem_assign","","",14,null],[11,"not","","",14,null],[11,"bitxor","","",14,null],[11,"bitxor_assign","","",14,null],[11,"bitor","","",14,null],[11,"bitor_assign","","",14,null],[11,"bitand","","",14,null],[11,"bitand_assign","","",14,null],[11,"neg","","",14,null],[11,"eq","core::num::dec2flt","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",15,null],[11,"fmt","core::num","",16,null],[11,"eq","","",16,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"hash","core::nonzero","",19,null],[11,"fmt","","",19,null],[11,"partial_cmp","","",19,null],[11,"lt","","",19,null],[11,"le","","",19,null],[11,"gt","","",19,null],[11,"ge","","",19,null],[11,"cmp","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"clone","","",19,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",19,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",19,null],[11,"new","core::ptr","Creates a new `Unique`.",20,null],[11,"get","","Dereferences the content.",20,null],[11,"get_mut","","Mutably dereferences the content.",20,null],[11,"deref","","",20,null],[11,"fmt","","",20,null],[11,"new","","Creates a new `Shared`.",21,null],[11,"clone","","",21,null],[11,"deref","","",21,null],[11,"fmt","","",21,null],[11,"hash","core::marker","",22,null],[11,"eq","","",22,null],[11,"partial_cmp","","",22,null],[11,"cmp","","",22,null],[11,"clone","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",23,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"contains","","# Examples",24,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"contains","","# Examples",25,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"contains","","# Examples",26,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"from","","",27,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",27,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"contains","","# Examples",28,null],[11,"hash","core::cmp","",29,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"clone","","",29,null],[11,"reverse","","Reverse the `Ordering`.",29,null],[11,"cmp","","",29,null],[11,"partial_cmp","","",29,null],[11,"fmt","collections","",30,null],[11,"fmt","","",30,null],[11,"is","","Returns true if the boxed type is the same as `T`",30,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",30,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",30,null],[11,"is","","Forwards to the method defined on the type `Any`.",30,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",30,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",30,null],[11,"hash","core::any","",31,null],[11,"fmt","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",31,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",31,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",32,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",34,null],[11,"clone","","",34,null],[11,"new","","Creates a new `AtomicBool`.",32,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",32,null],[11,"store","","Stores a value into the bool.",32,null],[11,"swap","","Stores a value into the bool, returning the old value.",32,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",32,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",32,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",32,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",32,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",32,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",32,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",32,null],[11,"new","","Creates a new `AtomicPtr`.",33,null],[11,"load","","Loads a value from the pointer.",33,null],[11,"store","","Stores a value into the pointer.",33,null],[11,"swap","","Stores a value into the pointer, returning the old value.",33,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",33,null],[11,"default","","",35,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",35,null],[11,"new","","Creates a new atomic integer.",35,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",35,null],[11,"store","","Stores a value into the atomic integer.",35,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",35,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",35,null],[11,"fetch_add","","Add to the current value, returning the previous value.",35,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",35,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",35,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",35,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",35,null],[11,"default","","",36,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",36,null],[11,"new","","Creates a new atomic integer.",36,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",36,null],[11,"store","","Stores a value into the atomic integer.",36,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",36,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",36,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",36,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",36,null],[11,"fetch_add","","Add to the current value, returning the previous value.",36,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",36,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",36,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",36,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",36,null],[11,"default","","",37,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",37,null],[11,"new","","Creates a new atomic integer.",37,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",37,null],[11,"store","","Stores a value into the atomic integer.",37,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",37,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",37,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",37,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",37,null],[11,"fetch_add","","Add to the current value, returning the previous value.",37,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",37,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",37,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",37,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",37,null],[11,"default","","",38,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",38,null],[11,"new","","Creates a new atomic integer.",38,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",38,null],[11,"store","","Stores a value into the atomic integer.",38,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",38,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",38,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",38,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",38,null],[11,"fetch_add","","Add to the current value, returning the previous value.",38,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",38,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",38,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",38,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",38,null],[11,"default","","",39,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",39,null],[11,"new","","Creates a new atomic integer.",39,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",39,null],[11,"store","","Stores a value into the atomic integer.",39,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",39,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",39,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",39,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",39,null],[11,"fetch_add","","Add to the current value, returning the previous value.",39,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",39,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",39,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",39,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",39,null],[11,"default","","",40,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",40,null],[11,"new","","Creates a new atomic integer.",40,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",40,null],[11,"store","","Stores a value into the atomic integer.",40,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",40,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",40,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",40,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",40,null],[11,"fetch_add","","Add to the current value, returning the previous value.",40,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",40,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",40,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",40,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",40,null],[11,"default","","",41,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",41,null],[11,"new","","Creates a new atomic integer.",41,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",41,null],[11,"store","","Stores a value into the atomic integer.",41,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",41,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",41,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",41,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",41,null],[11,"fetch_add","","Add to the current value, returning the previous value.",41,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",41,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",41,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",41,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",41,null],[11,"default","","",42,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",42,null],[11,"new","","Creates a new atomic integer.",42,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",42,null],[11,"store","","Stores a value into the atomic integer.",42,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",42,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",42,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",42,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",42,null],[11,"fetch_add","","Add to the current value, returning the previous value.",42,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",42,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",42,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",42,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",42,null],[11,"default","","",43,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",43,null],[11,"new","","Creates a new atomic integer.",43,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",43,null],[11,"store","","Stores a value into the atomic integer.",43,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",43,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",43,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",43,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",43,null],[11,"fetch_add","","Add to the current value, returning the previous value.",43,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",43,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",43,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",43,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",43,null],[11,"default","","",44,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",44,null],[11,"new","","Creates a new atomic integer.",44,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",44,null],[11,"store","","Stores a value into the atomic integer.",44,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",44,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",44,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",44,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",44,null],[11,"fetch_add","","Add to the current value, returning the previous value.",44,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",44,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",44,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",44,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",44,null],[11,"fmt","","",32,null],[11,"fmt","","",33,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",45,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",45,null],[11,"set","","Sets the contained value.",45,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",45,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",45,null],[11,"clone","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"cmp","","",45,null],[11,"fmt","","",46,null],[11,"eq","","",46,null],[11,"clone","","",46,null],[11,"new","","Creates a new `RefCell` containing `value`.",47,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",47,null],[11,"borrow_state","","Query the current state of this `RefCell`",47,null],[11,"borrow","","Immutably borrows the wrapped value.",47,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",47,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",47,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",47,null],[11,"clone","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",47,null],[11,"partial_cmp","","",47,null],[11,"lt","","",47,null],[11,"le","","",47,null],[11,"gt","","",47,null],[11,"ge","","",47,null],[11,"cmp","","",47,null],[11,"deref","","",48,null],[11,"clone","","Copies a `Ref`.",48,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",48,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",48,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",49,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",49,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",49,null],[11,"deref_mut","","",49,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",50,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",50,null],[11,"get","","Gets a mutable pointer to the wrapped value.",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",51,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"count","","",52,null],[11,"nth","","",52,null],[11,"last","","",52,null],[11,"fmt","","",53,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"fmt","","",54,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",54,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"fmt","core::iter::range","",55,null],[11,"clone","","",55,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",25,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",24,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",27,null],[11,"next","core::iter::range","",55,null],[11,"size_hint","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"next","core::ops","",24,null],[11,"size_hint","","",24,null],[11,"next_back","","",24,null],[11,"next","","",25,null],[11,"next","","",27,null],[11,"size_hint","","",27,null],[11,"next_back","","",27,null],[11,"fmt","core::iter::sources","",56,null],[11,"clone","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"fmt","","",57,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"len","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"next_back","","",58,null],[11,"len","","",58,null],[11,"fmt","core::iter","",59,null],[11,"clone","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"fmt","","",60,null],[11,"clone","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"next","","",62,null],[11,"count","","",62,null],[11,"nth","","",62,null],[11,"find","","",62,null],[11,"last","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"fmt","","",63,null],[11,"clone","","",63,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"next_back","","",63,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"next","","# Overflow Behavior",67,null],[11,"size_hint","","",67,null],[11,"nth","","",67,null],[11,"count","","",67,null],[11,"next_back","","",67,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"next","","",68,null],[11,"count","","",68,null],[11,"nth","","",68,null],[11,"last","","",68,null],[11,"size_hint","","",68,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",68,null],[11,"is_empty","","Checks if the iterator has finished iterating.",68,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"fmt","","",71,null],[11,"clone","","",71,null],[11,"next","","",71,null],[11,"nth","","",71,null],[11,"count","","",71,null],[11,"last","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"clone","","",72,null],[11,"next","","",72,null],[11,"nth","","",72,null],[11,"size_hint","","",72,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"nth","","",75,null],[11,"last","","",75,null],[11,"count","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"clone","","",76,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"hash","core::option","",77,null],[11,"fmt","","",77,null],[11,"cmp","","",77,null],[11,"partial_cmp","","",77,null],[11,"lt","","",77,null],[11,"le","","",77,null],[11,"gt","","",77,null],[11,"ge","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"is_some","","Returns `true` if the option is a `Some` value",77,null],[11,"is_none","","Returns `true` if the option is a `None` value",77,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",77,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",77,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",77,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",77,null],[11,"unwrap_or","","Returns the contained value or a default.",77,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",77,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",77,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",77,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",77,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",77,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",77,null],[11,"iter","","Returns an iterator over the possibly contained value.",77,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",77,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",77,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",77,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",77,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",77,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",77,null],[11,"unwrap_or_default","","Returns the contained value or a default",77,null],[11,"default","","",77,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77,null],[11,"fmt","","",78,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next_back","","",78,null],[11,"clone","","",78,null],[11,"fmt","","",79,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next_back","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"next_back","","",80,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",77,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",81,null],[11,"clone","","",82,null],[11,"hash","core::result","",83,null],[11,"fmt","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"is_ok","","Returns true if the result is `Ok`",83,null],[11,"is_err","","Returns true if the result is `Err`",83,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",83,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",83,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",83,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",83,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",83,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",83,null],[11,"iter","","Returns an iterator over the possibly contained value.",83,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",83,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",83,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",83,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",83,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",83,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",83,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",83,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",83,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",83,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",83,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",83,null],[11,"fmt","","",84,null],[11,"next","","",84,null],[11,"size_hint","","",84,null],[11,"next_back","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"next","","",85,null],[11,"size_hint","","",85,null],[11,"next_back","","",85,null],[11,"fmt","","",86,null],[11,"next","","",86,null],[11,"size_hint","","",86,null],[11,"next_back","","",86,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",83,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",87,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",87,null],[11,"next","","",87,null],[11,"size_hint","","",87,null],[11,"count","","",87,null],[11,"nth","","",87,null],[11,"last","","",87,null],[11,"next_back","","",87,null],[11,"clone","","",87,null],[11,"fmt","","",88,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",88,null],[11,"next","","",88,null],[11,"size_hint","","",88,null],[11,"count","","",88,null],[11,"nth","","",88,null],[11,"last","","",88,null],[11,"next_back","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"next","","",89,null],[11,"size_hint","","",89,null],[11,"next_back","","",89,null],[11,"fmt","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"next","","",94,null],[11,"size_hint","","",94,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"count","","",95,null],[11,"nth","","",95,null],[11,"last","","",95,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"count","","",97,null],[11,"nth","","",97,null],[11,"last","","",97,null],[11,"next_back","","",97,null],[11,"fmt","core::str::pattern","",98,null],[11,"eq","","",98,null],[11,"ne","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"clone","","",99,null],[11,"haystack","","",99,null],[11,"next","","",99,null],[11,"next_match","","",99,null],[11,"next_reject","","",99,null],[11,"next_back","","",99,null],[11,"next_match_back","","",99,null],[11,"next_reject_back","","",99,null],[11,"fmt","","",100,null],[11,"clone","","",100,null],[11,"haystack","","",100,null],[11,"next","","",100,null],[11,"next_match","","",100,null],[11,"next_reject","","",100,null],[11,"next_back","","",100,null],[11,"next_match_back","","",100,null],[11,"next_reject_back","","",100,null],[11,"clone","","",101,null],[11,"fmt","","",101,null],[11,"haystack","","",101,null],[11,"next","","",101,null],[11,"next_match","","",101,null],[11,"next_reject","","",101,null],[11,"next_back","","",101,null],[11,"next_match_back","","",101,null],[11,"next_reject_back","","",101,null],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"haystack","","",102,null],[11,"next","","",102,null],[11,"next_match","","",102,null],[11,"next_back","","",102,null],[11,"next_match_back","","",102,null],[11,"eq","core::str","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",103,null],[11,"fmt","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",104,null],[11,"fmt","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"as_str","","View the underlying data as a subslice of the original data.",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"as_str","","View the underlying data as a subslice of the original data.",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"count","","",107,null],[11,"last","","",107,null],[11,"nth","","",107,null],[11,"next_back","","",107,null],[11,"len","","",107,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"clone","","",109,null],[11,"next_back","","",108,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",111,null],[11,"next","","",111,null],[11,"clone","","",111,null],[11,"next_back","","",110,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"next","","",112,null],[11,"clone","","",112,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"clone","","",113,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"clone","","",114,null],[11,"fmt","","",115,null],[11,"next","","",115,null],[11,"clone","","",115,null],[11,"next_back","","",114,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"next","","",116,null],[11,"clone","","",116,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"clone","","",117,null],[11,"next_back","","",116,null],[11,"next_back","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"fmt","core::hash::sip","",121,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",121,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",121,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",121,null],[11,"finish","","",121,null],[11,"clone","","",121,null],[11,"default","","",121,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",122,null],[11,"build_hasher","","",122,null],[11,"clone","","",122,null],[11,"default","","",122,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",123,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",124,null],[11,"finish","","Finishes output and returns any error encountered.",124,null],[11,"field","","Adds a new field to the generated tuple struct output.",125,null],[11,"finish","","Finishes output and returns any error encountered.",125,null],[11,"entry","","Adds a new entry to the set output.",126,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",126,null],[11,"finish","","Finishes output and returns any error encountered.",126,null],[11,"entry","","Adds a new entry to the list output.",127,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",127,null],[11,"finish","","Finishes output and returns any error encountered.",127,null],[11,"entry","","Adds a new entry to the map output.",128,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",128,null],[11,"finish","","Finishes output and returns any error encountered.",128,null],[11,"partial_cmp","core::fmt","",129,null],[11,"eq","","",129,null],[11,"cmp","","",129,null],[11,"hash","","",129,null],[11,"default","","",129,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",129,null],[11,"clone","","",129,null],[11,"clone","","",130,null],[11,"fmt","","",130,null],[11,"fmt","","",130,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",131,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",131,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",131,null],[11,"write_fmt","","Writes some formatted information into this instance",131,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",131,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",131,null],[11,"align","","Flag indicating what form of alignment was requested",131,null],[11,"width","","Optionally specified integer width that the output should be",131,null],[11,"precision","","Optionally specified precision for numeric types",131,null],[11,"sign_plus","","Determines if the `+` flag was specified.",131,null],[11,"sign_minus","","Determines if the `-` flag was specified.",131,null],[11,"alternate","","Determines if the `#` flag was specified.",131,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",131,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",131,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",131,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",131,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",131,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",131,null],[11,"write_str","","",131,null],[11,"write_char","","",131,null],[11,"write_fmt","","",131,null],[11,"fmt","","",129,null],[11,"fmt","core::marker","",22,null],[11,"fmt","core::cell","",45,null],[11,"fmt","","",47,null],[11,"fmt","","",48,null],[11,"fmt","","",49,null],[11,"fmt","","",50,null],[8,"Borrow","collections::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",132,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",133,null],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",134,null],[13,"Owned","","Owned data.",134,null],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",135,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",135,null],[11,"borrow","","",134,null],[11,"clone","","",134,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",134,null],[11,"into_owned","","Extracts the owned data.",134,null],[11,"deref","","",134,null],[11,"cmp","","",134,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"fmt","","",134,null],[11,"fmt","","",134,null],[11,"hash","","",134,null],[11,"as_ref","","",134,null],[0,"enum_set","collections","A structure for holding a set of enum variants.",null,null],[3,"EnumSet","collections::enum_set","A specialized set implementation to use enum types.",null,null],[3,"Iter","","An iterator over an EnumSet",null,null],[8,"CLike","","An interface for casting C-like enum to usize and back.\nA typically implementation is as below.",null,null],[10,"to_usize","","Converts a C-like enum to a `usize`.",136,null],[10,"from_usize","","Converts a `usize` to a C-like enum.",136,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"hash","","",137,null],[11,"cmp","","",137,null],[11,"partial_cmp","","",137,null],[11,"lt","","",137,null],[11,"le","","",137,null],[11,"gt","","",137,null],[11,"ge","","",137,null],[11,"eq","","",137,null],[11,"ne","","",137,null],[11,"clone","","",137,null],[11,"fmt","","",137,null],[11,"new","","Returns an empty `EnumSet`.",137,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",137,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",137,null],[11,"clear","","",137,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",137,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",137,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",137,null],[11,"union","","Returns the union of both `EnumSets`.",137,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",137,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",137,null],[11,"remove","","Removes an enum from the EnumSet",137,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",137,null],[11,"iter","","Returns an iterator over an `EnumSet`.",137,null],[11,"sub","","",137,null],[11,"bitor","","",137,null],[11,"bitand","","",137,null],[11,"bitxor","","",137,null],[11,"clone","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"from_iter","","",137,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",137,null],[11,"extend","","",137,null],[0,"fmt","collections","Utilities for formatting and printing strings",null,null],[3,"Formatter","collections::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[6,"Result","","",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",139,null],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",139,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",139,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",140,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",141,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",142,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",143,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",144,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",145,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",146,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",147,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",148,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[5,"format","","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[0,"linked_list","collections","A doubly-linked list with owned nodes.",null,null],[3,"LinkedList","collections::linked_list","A doubly-linked list.",null,null],[3,"Iter","","An iterator over references to the items of a `LinkedList`.",null,null],[3,"IterMut","","An iterator over mutable references to the items of a `LinkedList`.",null,null],[3,"IntoIter","","An iterator over the items of a `LinkedList`.",null,null],[3,"FrontPlace","","A place for insertion at the front of a `LinkedList`.",null,null],[3,"BackPlace","","A place for insertion at the back of a `LinkedList`.",null,null],[11,"clone","","",149,null],[11,"clone","","",150,null],[11,"default","","",151,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",151,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",151,null],[11,"iter","","Provides a forward iterator.",151,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",151,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",151,null],[11,"len","","Returns the length of the `LinkedList`.",151,null],[11,"clear","","Removes all elements from the `LinkedList`.",151,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",151,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",151,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",151,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",151,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",151,null],[11,"push_front","","Adds an element first in the list.",151,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",151,null],[11,"push_back","","Appends an element to the back of a list",151,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",151,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",151,null],[11,"front_place","","Returns a place for insertion at the front of the list.",151,null],[11,"back_place","","Returns a place for insertion at the back of the list.",151,null],[11,"drop","","",151,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"next_back","","",152,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",152,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",152,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"next_back","","",150,null],[11,"from_iter","","",151,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",151,null],[11,"extend","","",151,null],[11,"extend","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"partial_cmp","","",151,null],[11,"cmp","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",151,null],[11,"hash","","",151,null],[11,"make_place","","",153,null],[11,"pointer","","",153,null],[11,"finalize","","",153,null],[11,"make_place","","",154,null],[11,"pointer","","",154,null],[11,"finalize","","",154,null],[0,"range","collections","Range syntax.",null,null],[8,"RangeArgument","collections::range","**RangeArgument** is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",155,null],[11,"end","","End index (exclusive)",155,null],[11,"start","core::ops","",25,null],[11,"end","","",26,null],[11,"start","","",24,null],[11,"end","","",24,null],[0,"slice","collections","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[3,"Chunks","collections::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",156,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",156,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",156,null],[10,"connect","","",156,null],[0,"str","collections","Unicode string slices.",null,null],[8,"FromStr","collections::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",157,null],[10,"from_str","","Parses a string `s` to return a value of this type.",157,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",120,null],[12,"next","","Index of the first byte of the next `char`",120,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[11,"clone","rustc_unicode::u_str","",158,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",158,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"next","","",159,null],[11,"next_back","","",159,null],[11,"next","rustc_unicode::char","",160,null],[11,"next","","",161,null],[11,"clone","","",162,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"clone","","",163,null],[11,"fmt","","",163,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",163,null],[11,"fmt","","",163,null],[3,"SplitWhitespace","collections::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","collections::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",164,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",164,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",164,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",164,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",164,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",98,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",98,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",98,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",165,null],[10,"next","","Performs the next search step starting from the front.",165,null],[11,"next_match","","Find the next `Match` result. See `next()`",165,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",165,null],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",166,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",166,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",166,null],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"EncodeUtf16","collections::str","External iterator for a string&#39;s UTF-16 code units.",null,null],[6,"Utf16Units","","Deprecated, renamed to EncodeUtf16",null,null],[11,"clone","","",167,null],[11,"next","","",167,null],[11,"size_hint","","",167,null],[0,"string","collections","A UTF-8 encoded, growable string.",null,null],[3,"String","collections::string","A UTF-8 encoded, growable string.",null,null],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[3,"Drain","","A draining iterator for `String`.",null,null],[4,"ParseError","","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",168,null],[11,"cmp","","",169,null],[11,"partial_cmp","","",169,null],[11,"lt","","",169,null],[11,"le","","",169,null],[11,"gt","","",169,null],[11,"ge","","",169,null],[11,"fmt","","",170,null],[11,"fmt","","",171,null],[11,"new","","Creates a new empty `String`.",169,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",169,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",169,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",169,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",169,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",169,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",169,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",169,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",169,null],[11,"as_str","","Extracts a string slice containing the entire string.",169,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",169,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",169,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",169,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",169,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",169,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",169,null],[11,"push","","Appends the given `char` to the end of this `String`.",169,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",169,null],[11,"truncate","","Shortens this `String` to the specified length.",169,null],[11,"pop","","Removes the last character from the string buffer and returns it.",169,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",169,null],[11,"insert","","Inserts a character into this `String` at a byte position.",169,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",169,null],[11,"len","","Returns the length of this `String`, in bytes.",169,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",169,null],[11,"clear","","Truncates this `String`, removing all contents.",169,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",169,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",169,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",170,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",170,null],[11,"fmt","","",170,null],[11,"fmt","","",171,null],[11,"clone","","",169,null],[11,"clone_from","","",169,null],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",169,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",169,null],[11,"extend","","",169,null],[11,"extend","","",169,null],[11,"extend","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"eq","","",169,null],[11,"ne","","",169,null],[11,"eq","collections::borrow","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::string","",169,null],[11,"ne","","",169,null],[11,"default","","",169,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"hash","","",169,null],[11,"add","","",169,null],[11,"index","","",169,null],[11,"index","","",169,null],[11,"index","","",169,null],[11,"index","","",169,null],[11,"index","","",169,null],[11,"index","","",169,null],[11,"index_mut","","",169,null],[11,"index_mut","","",169,null],[11,"index_mut","","",169,null],[11,"index_mut","","",169,null],[11,"index_mut","","",169,null],[11,"index_mut","","",169,null],[11,"deref","","",169,null],[11,"deref_mut","","",169,null],[11,"from_str","","",169,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",172,null],[11,"fmt","","",172,null],[11,"fmt","","",172,null],[11,"eq","","",172,null],[11,"as_ref","","",169,null],[11,"as_ref","","",169,null],[11,"from","","",169,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",134,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",134,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",169,null],[11,"write_str","","",169,null],[11,"write_char","","",169,null],[11,"drop","","",173,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[0,"vec","collections","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","collections::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec&lt;T&gt;`.",null,null],[11,"new","","Constructs a new, empty `Vec&lt;T&gt;`.",174,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",174,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",174,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",174,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",174,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",174,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",174,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",174,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",174,null],[11,"as_slice","","Extracts a slice containing the entire vector.",174,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",174,null],[11,"set_len","","Sets the length of a vector.",174,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",174,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",174,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",174,null],[11,"retain","","Retains only the elements specified by the predicate.",174,null],[11,"push","","Appends an element to the back of a collection.",174,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",174,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",174,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",174,null],[11,"clear","","Clears the vector, removing all values.",174,null],[11,"len","","Returns the number of elements in the vector.",174,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",174,null],[11,"split_off","","Splits the collection into two at the given index.",174,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",174,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",174,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",174,null],[11,"clone","","",174,null],[11,"clone_from","","",174,null],[11,"hash","","",174,null],[11,"index","","",174,null],[11,"index_mut","","",174,null],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"index_mut","","",174,null],[11,"deref","","",174,null],[11,"deref_mut","","",174,null],[11,"from_iter","","",174,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",174,null],[11,"extend","","",174,null],[11,"extend","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","collections::borrow","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","","",134,null],[11,"ne","","",134,null],[11,"eq","collections::vec","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"eq","","",174,null],[11,"ne","","",174,null],[11,"partial_cmp","","",174,null],[11,"cmp","","",174,null],[11,"drop","","",174,null],[11,"default","","",174,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",174,null],[11,"as_ref","","",174,null],[11,"as_mut","","",174,null],[11,"as_ref","","",174,null],[11,"as_mut","","",174,null],[11,"from","","",174,null],[11,"from","","",174,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",134,null],[11,"from","","",134,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",134,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",175,null],[11,"size_hint","","",175,null],[11,"count","","",175,null],[11,"next_back","","",175,null],[11,"clone","","",175,null],[11,"drop","","",175,null],[11,"next","","",176,null],[11,"size_hint","","",176,null],[11,"next_back","","",176,null],[11,"drop","","",176,null],[0,"vec_deque","collections","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[3,"VecDeque","collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[3,"Iter","","`VecDeque` iterator.",null,null],[3,"IterMut","","`VecDeque` mutable iterator.",null,null],[3,"IntoIter","","A by-value VecDeque iterator",null,null],[3,"Drain","","A draining VecDeque iterator",null,null],[11,"clone","","",177,null],[11,"drop","","",177,null],[11,"default","","",177,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",177,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",177,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",177,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",177,null],[11,"swap","","Swaps elements at indices `i` and `j`.",177,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",177,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",177,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",177,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",177,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",177,null],[11,"iter","","Returns a front-to-back iterator.",177,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",177,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",177,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",177,null],[11,"len","","Returns the number of elements in the `VecDeque`.",177,null],[11,"is_empty","","Returns true if the buffer contains no elements",177,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",177,null],[11,"clear","","Clears the buffer, removing all values.",177,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",177,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",177,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",177,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",177,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",177,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",177,null],[11,"push_front","","Inserts an element first in the sequence.",177,null],[11,"push_back","","Appends an element to the back of a buffer",177,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",177,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",177,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",177,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",177,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",177,null],[11,"split_off","","Splits the collection into two at the given index.",177,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",177,null],[11,"retain","","Retains only the elements specified by the predicate.",177,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",177,null],[11,"clone","","",178,null],[11,"next","","",178,null],[11,"size_hint","","",178,null],[11,"next_back","","",178,null],[11,"next","","",179,null],[11,"size_hint","","",179,null],[11,"next_back","","",179,null],[11,"clone","","",180,null],[11,"next","","",180,null],[11,"size_hint","","",180,null],[11,"next_back","","",180,null],[11,"drop","","",181,null],[11,"next","","",181,null],[11,"size_hint","","",181,null],[11,"next_back","","",181,null],[11,"eq","","",177,null],[11,"partial_cmp","","",177,null],[11,"cmp","","",177,null],[11,"hash","","",177,null],[11,"index","","",177,null],[11,"index_mut","","",177,null],[11,"from_iter","","",177,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",177,null],[11,"extend","","",177,null],[11,"extend","","",177,null],[11,"fmt","","",177,null],[11,"from","","",177,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","collections::vec","",174,{"inputs":[{"name":"vecdeque"}],"output":{"name":"self"}}],[0,"btree_map","collections","",null,null],[3,"BTreeMap","collections::btree_map","A map based on a B-Tree.",null,null],[3,"Iter","","An iterator over a BTreeMap&#39;s entries.",null,null],[3,"IterMut","","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[3,"IntoIter","","An owning iterator over a BTreeMap&#39;s entries.",null,null],[3,"Keys","","An iterator over a BTreeMap&#39;s keys.",null,null],[3,"Values","","An iterator over a BTreeMap&#39;s values.",null,null],[3,"ValuesMut","","A mutable iterator over a BTreeMap&#39;s values.",null,null],[3,"Range","","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",182,null],[13,"Occupied","","An occupied Entry",182,null],[0,"btree_set","collections","",null,null],[3,"BTreeSet","collections::btree_set","A set based on a B-Tree.",null,null],[3,"Iter","","An iterator over a BTreeSet&#39;s items.",null,null],[3,"IntoIter","","An owning iterator over a BTreeSet&#39;s items.",null,null],[3,"Range","","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order).",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order).",null,null],[3,"Union","","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"eq","collections","",9,null],[11,"ne","","",9,null],[11,"hash","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[14,"vec!","","Creates a `Vec` containing the arguments.",null,null],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information.",null,null],[11,"from","collections::vec","",174,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"drop","collections::btree_map","",183,null],[11,"clone","","",183,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",183,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",183,null],[11,"get","","Returns a reference to the value corresponding to the key.",183,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",183,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",183,null],[11,"insert","","Inserts a key-value pair into the map.",183,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",183,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",183,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",183,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",183,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",183,null],[11,"next","","",184,null],[11,"size_hint","","",184,null],[11,"next_back","","",184,null],[11,"len","","",184,null],[11,"clone","","",184,null],[11,"next","","",185,null],[11,"size_hint","","",185,null],[11,"next_back","","",185,null],[11,"len","","",185,null],[11,"into_iter","","",183,null],[11,"drop","","",186,null],[11,"next","","",186,null],[11,"size_hint","","",186,null],[11,"next_back","","",186,null],[11,"len","","",186,null],[11,"next","","",187,null],[11,"size_hint","","",187,null],[11,"next_back","","",187,null],[11,"len","","",187,null],[11,"clone","","",187,null],[11,"next","","",188,null],[11,"size_hint","","",188,null],[11,"next_back","","",188,null],[11,"len","","",188,null],[11,"clone","","",188,null],[11,"next","","",189,null],[11,"next","","",190,null],[11,"size_hint","","",190,null],[11,"next_back","","",190,null],[11,"len","","",190,null],[11,"next_back","","",189,null],[11,"clone","","",189,null],[11,"next","","",191,null],[11,"next_back","","",191,null],[11,"from_iter","","",183,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",183,null],[11,"extend","","",183,null],[11,"hash","","",183,null],[11,"default","","",183,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",183,null],[11,"partial_cmp","","",183,null],[11,"cmp","","",183,null],[11,"fmt","","",183,null],[11,"index","","",183,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",183,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",183,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",183,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",183,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",183,null],[11,"len","","Returns the number of elements in the map.",183,null],[11,"is_empty","","Returns true if the map contains no elements.",183,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",182,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",182,null],[11,"key","","Returns a reference to this entry&#39;s key.",182,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",192,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",192,null],[11,"key","","Gets a reference to the key in the entry.",193,null],[11,"get","","Gets a reference to the value in the entry.",193,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",193,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",193,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",193,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",193,null],[11,"partial_cmp","collections::btree_set","",194,null],[11,"lt","","",194,null],[11,"le","","",194,null],[11,"gt","","",194,null],[11,"ge","","",194,null],[11,"cmp","","",194,null],[11,"eq","","",194,null],[11,"ne","","",194,null],[11,"hash","","",194,null],[11,"clone","","",194,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",194,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",194,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",194,null],[11,"difference","","Visits the values representing the difference, in ascending order.",194,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",194,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",194,null],[11,"union","","Visits the values representing the union, in ascending order.",194,null],[11,"len","","Returns the number of elements in the set.",194,null],[11,"is_empty","","Returns true if the set contains no elements.",194,null],[11,"clear","","Clears the set, removing all values.",194,null],[11,"contains","","Returns `true` if the set contains a value.",194,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",194,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",194,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",194,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",194,null],[11,"insert","","Adds a value to the set.",194,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",194,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",194,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",194,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",194,null],[11,"from_iter","","",194,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",194,null],[11,"extend","","",194,null],[11,"extend","","",194,null],[11,"default","","",194,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",194,null],[11,"clone","","",195,null],[11,"next","","",195,null],[11,"size_hint","","",195,null],[11,"next_back","","",195,null],[11,"len","","",195,null],[11,"next","","",196,null],[11,"size_hint","","",196,null],[11,"next_back","","",196,null],[11,"len","","",196,null],[11,"clone","","",197,null],[11,"next","","",197,null],[11,"next_back","","",197,null],[11,"clone","","",198,null],[11,"next","","",198,null],[11,"size_hint","","",198,null],[11,"clone","","",199,null],[11,"next","","",199,null],[11,"size_hint","","",199,null],[11,"clone","","",200,null],[11,"next","","",200,null],[11,"size_hint","","",200,null],[11,"clone","","",201,null],[11,"next","","",201,null],[11,"size_hint","","",201,null],[11,"borrow","collections::vec","",174,null],[11,"borrow_mut","","",174,null],[11,"borrow","collections::string","",169,null]],"paths":[[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"],[8,"FnBox"],[4,"Bound"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Borrow"],[8,"BorrowMut"],[4,"Cow"],[8,"ToOwned"],[8,"CLike"],[3,"EnumSet"],[3,"Iter"],[8,"Write"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[8,"RangeArgument"],[8,"SliceConcatExt"],[8,"FromStr"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"EncodeUtf16"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"]]};
searchIndex["panic_unwind"] = {"doc":"Implementation of panics via stack unwinding","items":[[5,"__rust_maybe_catch_panic","panic_unwind","",null,null],[5,"__rust_start_panic","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex["panic_abort"] = {"doc":"Implementation of Rust panics via process aborts","items":[[5,"__rust_maybe_catch_panic","panic_abort","",null,null],[5,"__rust_start_panic","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"u32"}}],[0,"personalities","","",null,null],[5,"rust_eh_personality","panic_abort::personalities","",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["alloc"] = {"doc":"# The Rust core allocation library","items":[[0,"heap","alloc","",null,null],[5,"allocate","alloc::heap","Return a pointer to `size` bytes of memory aligned to `align`.",null,null],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes.",null,null],[5,"deallocate","","Deallocates the memory referenced by `ptr`.",null,null],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`.",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations.",null,null],[0,"boxed","alloc","A pointer type for heap allocation.",null,null],[3,"ExchangeHeapSingleton","alloc::boxed","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[17,"HEAP","","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",0,null],[10,"call_box","","",0,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"output"}}],[11,"clone","","",1,null],[11,"pointer","","",2,null],[11,"make_place","","",2,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",2,null],[11,"finalize","","",3,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",1,null],[11,"drop","","",2,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",3,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"ge","","",3,null],[11,"gt","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next_back","","",3,null],[11,"call_once","","",3,null],[11,"call_once","","",3,null],[11,"clone","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[0,"arc","alloc","Threadsafe reference-counted boxes (the `Arc&lt;T&gt;` type).",null,null],[3,"Arc","alloc::arc","An atomically reference counted wrapper for shared state.",null,null],[3,"Weak","","A weak pointer to an `Arc`.",null,null],[11,"fmt","","",4,null],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",5,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",5,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",5,null],[11,"deref","","",5,null],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",5,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",4,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",4,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",4,null],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",5,null],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",5,null],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",5,null],[11,"cmp","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"arc"}}],[11,"hash","","",5,null],[11,"from","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",4,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",5,null],[11,"as_ref","","",5,null],[0,"rc","alloc","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[3,"Rc","alloc::rc","A reference-counted pointer type over an immutable value.",null,null],[3,"Weak","","A weak version of `Rc&lt;T&gt;`.",null,null],[11,"new","","Constructs a new `Rc&lt;T&gt;`.",6,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",6,{"inputs":[{"name":"self"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",6,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",6,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",6,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",6,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",6,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",7,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",7,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",7,null],[11,"fmt","","",7,null],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",7,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",6,null],[11,"as_ref","","",6,null],[0,"raw_vec","alloc","",null,null],[3,"RawVec","alloc::raw_vec","A low-level utility for more ergonomically allocating, reallocating, and deallocating a\na buffer of memory on the heap without having to worry about all the corner cases\ninvolved. This type is excellent for building your own data structures like Vec and VecDeque.\nIn particular:",null,null],[11,"new","","Creates the biggest possible RawVec without allocating. If T has positive\nsize, then this makes a RawVec with capacity 0. If T has 0 size, then it\nit makes a RawVec with capacity `usize::MAX`. Useful for implementing\ndelayed allocation.",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a RawVec with exactly the capacity and alignment requirements\nfor a `[T; cap]`. This is equivalent to calling RawVec::new when `cap` is 0\nor T is zero-sized. Note that if `T` is zero-sized this means you will *not*\nget a RawVec with the requested capacity!",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Reconstitutes a RawVec from a pointer and capacity.",8,null],[11,"from_box","","Converts a `Box&lt;[T]&gt;` into a `RawVec&lt;T&gt;`.",8,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"ptr","","Gets a raw pointer to the start of the allocation. Note that this is\nheap::EMPTY if `cap = 0` or T is zero-sized. In the former case, you must\nbe careful.",8,null],[11,"cap","","Gets the capacity of the allocation.",8,null],[11,"double","","Doubles the size of the type&#39;s backing allocation. This is common enough\nto want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",8,null],[11,"double_in_place","","Attempts to double the size of the type&#39;s backing allocation in place. This is common\nenough to want to do that it&#39;s easiest to just have a dedicated method. Slightly\nmore efficient logic can be provided for this than the general case.",8,null],[11,"reserve_exact","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already,\nwill reallocate the minimum possible amount of memory necessary.\nGenerally this will be exactly the amount of memory necessary,\nbut in principle the allocator is free to give back more than\nwe asked for.",8,null],[11,"reserve","","Ensures that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate enough space plus comfortable slack\nspace to get amortized `O(1)` behavior. Will limit this behavior\nif it would needlessly cause itself to panic.",8,null],[11,"reserve_in_place","","Attempts to ensure that the buffer contains at least enough space to hold\n`used_cap + needed_extra_cap` elements. If it doesn&#39;t already have\nenough capacity, will reallocate in place enough space plus comfortable slack\nspace to get amortized `O(1)` behaviour. Will limit this behaviour\nif it would needlessly cause itself to panic.",8,null],[11,"shrink_to_fit","","Shrinks the allocation down to the specified amount. If the given amount\nis 0, actually completely deallocates.",8,null],[11,"into_box","","Converts the entire buffer into `Box&lt;[T]&gt;`.",8,null],[11,"unsafe_no_drop_flag_needs_drop","","This is a stupid name in the hopes that someone will find this in the\nnot too distant future and remove it with the rest of\n#[unsafe_no_drop_flag]",8,null],[11,"drop","","Frees the memory owned by the RawVec *without* trying to Drop its contents.",8,null],[0,"oom","alloc","",null,null],[5,"oom","alloc::oom","Common out-of-memory routine",null,{"inputs":[],"output":null}],[5,"set_oom_handler","","Set a custom handler for out-of-memory conditions",null,null]],"paths":[[8,"FnBox"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"],[3,"RawVec"]]};
searchIndex["rustc_unicode"] = {"doc":"# The Unicode Library","items":[[0,"char","rustc_unicode","A character type.",null,null],[17,"MAX","rustc_unicode::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","rustc_unicode","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[3,"EscapeUnicode","rustc_unicode::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[3,"ToLowercase","","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[3,"DecodeUtf16Error","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iter`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a\ndecoding error.",null,null],[11,"next","","",118,null],[11,"next","","",119,null],[11,"clone","","",120,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",121,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",121,null],[11,"fmt","","",121,null],[0,"str","rustc_unicode","",null,null],[3,"SplitWhitespace","rustc_unicode::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16.",null,null],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character",null,{"inputs":[{"name":"u8"}],"output":{"name":"usize"}}],[5,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16",null,null],[8,"UnicodeStr","","Methods for Unicode string slices",null,null],[10,"split_whitespace","","",122,null],[10,"is_whitespace","","",122,null],[10,"is_alphanumeric","","",122,null],[10,"trim","","",122,null],[10,"trim_left","","",122,null],[10,"trim_right","","",122,null],[0,"derived_property","rustc_unicode","",null,null],[5,"Cased","rustc_unicode::derived_property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"Case_Ignorable","","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[0,"property","rustc_unicode","",null,null],[5,"Pattern_White_Space","rustc_unicode::property","",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[11,"clone","rustc_unicode::str","",123,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",123,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next","","",124,null],[11,"next_back","","",124,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[8,"UnicodeStr"],[3,"Utf16Encoder"],[3,"SplitWhitespace"]]};
searchIndex["unwind"] = {"doc":"","items":[[3,"_Unwind_Exception","unwind","",null,null],[12,"exception_class","","",0,null],[12,"exception_cleanup","","",0,null],[12,"private","","",0,null],[4,"_Unwind_Action","","",null,null],[13,"_UA_SEARCH_PHASE","","",1,null],[13,"_UA_CLEANUP_PHASE","","",1,null],[13,"_UA_HANDLER_FRAME","","",1,null],[13,"_UA_FORCE_UNWIND","","",1,null],[13,"_UA_END_OF_STACK","","",1,null],[4,"_Unwind_Reason_Code","","",null,null],[13,"_URC_NO_REASON","","",2,null],[13,"_URC_FOREIGN_EXCEPTION_CAUGHT","","",2,null],[13,"_URC_FATAL_PHASE2_ERROR","","",2,null],[13,"_URC_FATAL_PHASE1_ERROR","","",2,null],[13,"_URC_NORMAL_STOP","","",2,null],[13,"_URC_END_OF_STACK","","",2,null],[13,"_URC_HANDLER_FOUND","","",2,null],[13,"_URC_INSTALL_CONTEXT","","",2,null],[13,"_URC_CONTINUE_UNWIND","","",2,null],[13,"_URC_FAILURE","","",2,null],[4,"_Unwind_Context","","",null,null],[5,"_Unwind_RaiseException","","",null,null],[5,"_Unwind_DeleteException","","",null,null],[5,"_Unwind_Resume","","",null,null],[5,"_Unwind_Backtrace","","",null,null],[5,"_Unwind_GetIPInfo","","",null,null],[5,"_Unwind_FindEnclosingFunction","","",null,null],[11,"clone","","",1,null],[6,"_Unwind_Exception_Class","","",null,null],[6,"_Unwind_Word","","",null,null],[6,"_Unwind_Trace_Fn","","",null,null],[6,"_Unwind_Exception_Cleanup_Fn","","",null,null],[17,"unwinder_private_data_size","","",null,null]],"paths":[[3,"_Unwind_Exception"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"]]};
searchIndex["rand"] = {"doc":"Interface to random number generators in Rust.","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",3,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",3,null],[11,"ind_sample","","",3,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",4,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",5,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",6,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",7,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",8,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",9,null],[11,"ind_sample","","",9,null],[11,"clone","","",10,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",11,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",12,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",12,null],[11,"ind_sample","","",12,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",13,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",14,null],[11,"new","","",15,{"inputs":[],"output":{"name":"randsample"}}],[11,"sample","","",15,null],[11,"ind_sample","","",15,null],[11,"new","","Create a new `WeightedChoice`.",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",17,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",17,null],[11,"next_u32","","",17,null],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",18,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"next_u64","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",19,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",19,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",19,null],[11,"next_u32","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",19,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",20,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",21,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",20,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",20,null],[11,"next_u32","","",20,null],[11,"next_u64","","",20,null],[11,"fill_bytes","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",20,null],[11,"clone","","",22,null],[11,"reseed","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[8,"Rng","rand","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",23,null],[11,"next_u64","","Return the next random u64.",23,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",23,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",23,null],[11,"fill_bytes","","Fill `dest` with random data.",23,null],[11,"gen","","Return a random value of a `Rand` type.",23,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",23,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",23,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",23,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",23,null],[11,"choose","","Return a random element from `values`.",23,null],[11,"shuffle","","Shuffle a mutable slice in place.",23,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",24,null],[10,"from_seed","","Create a new RNG with the given seed.",24,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",25,null],[11,"next","","",26,null],[11,"clone","","",27,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",27,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",27,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",27,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",27,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"]]};
searchIndex["alloc_jemalloc"] = {"doc":"","items":[[5,"__rust_allocate","alloc_jemalloc","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_usable_size","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["alloc_system"] = {"doc":"","items":[[5,"__rust_allocate","alloc_system","",null,null],[5,"__rust_deallocate","","",null,null],[5,"__rust_reallocate","","",null,null],[5,"__rust_reallocate_inplace","","",null,null],[5,"__rust_usable_size","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["rustc_bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","rustc_bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",48,null],[12,"st_ino","","",48,null],[12,"st_nlink","","",48,null],[12,"st_mode","","",48,null],[12,"st_uid","","",48,null],[12,"st_gid","","",48,null],[12,"st_rdev","","",48,null],[12,"st_size","","",48,null],[12,"st_blksize","","",48,null],[12,"st_blocks","","",48,null],[12,"st_atime","","",48,null],[12,"st_atime_nsec","","",48,null],[12,"st_mtime","","",48,null],[12,"st_mtime_nsec","","",48,null],[12,"st_ctime","","",48,null],[12,"st_ctime_nsec","","",48,null],[3,"stat64","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",50,null],[12,"exponent","","",50,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",51,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",52,null],[12,"swd","","",52,null],[12,"ftw","","",52,null],[12,"fop","","",52,null],[12,"rip","","",52,null],[12,"rdp","","",52,null],[12,"mxcsr","","",52,null],[12,"mxcr_mask","","",52,null],[12,"_st","","",52,null],[12,"_xmm","","",52,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",53,null],[12,"fpregs","","",53,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",54,null],[12,"uc_link","","",54,null],[12,"uc_stack","","",54,null],[12,"uc_mcontext","","",54,null],[12,"uc_sigmask","","",54,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"]]};
searchIndex["core"] = {"doc":"# The Rust Core Library","items":[[0,"isize","core","The pointer-sized signed integer type.",null,null],[17,"MIN","core::isize","",null,null],[17,"MAX","","",null,null],[0,"i8","core","The 8-bit signed integer type.",null,null],[17,"MIN","core::i8","",null,null],[17,"MAX","","",null,null],[0,"i16","core","The 16-bit signed integer type.",null,null],[17,"MIN","core::i16","",null,null],[17,"MAX","","",null,null],[0,"i32","core","The 32-bit signed integer type.",null,null],[17,"MIN","core::i32","",null,null],[17,"MAX","","",null,null],[0,"i64","core","The 64-bit signed integer type.",null,null],[17,"MIN","core::i64","",null,null],[17,"MAX","","",null,null],[0,"usize","core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","core::usize","",null,null],[17,"MAX","","",null,null],[0,"u8","core","The 8-bit unsigned integer type.",null,null],[17,"MIN","core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","core","The 16-bit unsigned integer type.",null,null],[17,"MIN","core::u16","",null,null],[17,"MAX","","",null,null],[0,"u32","core","The 32-bit unsigned integer type.",null,null],[17,"MIN","core::u32","",null,null],[17,"MAX","","",null,null],[0,"u64","core","The 64-bit unsigned integer type.",null,null],[17,"MIN","core::u64","",null,null],[17,"MAX","","",null,null],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)",null,null],[0,"consts","core::f32","Basic mathematical constants.",null,null],[17,"PI","core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"RADIX","core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)",null,null],[0,"consts","core::f64","Basic mathematical constants.",null,null],[17,"PI","core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"RADIX","core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"num","core","Numeric traits and functions for the built-in numeric types.",null,null],[3,"Wrapping","core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",1,null],[13,"Infinite","","Positive or negative infinity",1,null],[13,"Zero","","Positive or negative zero",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",1,null],[13,"Normal","","A regular floating point number",1,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"__description","","",2,null],[11,"fmt","","",2,null],[8,"Zero","","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",3,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",4,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[0,"prelude","core","The libcore prelude",null,null],[0,"v1","core::prelude","The core prelude",null,null],[0,"intrinsics","core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,null],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,null],[5,"pref_align_of","","",null,null],[5,"size_of_val","","",null,null],[5,"min_align_of_val","","",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,null],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,null],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,null],[5,"init","","Creates a value initialized to zero.",null,null],[5,"uninit","","Creates an uninitialized value.",null,null],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,null],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,null],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,null],[5,"sqrtf64","","Returns the square root of an `f64`",null,null],[5,"powif32","","Raises an `f32` to an integer power.",null,null],[5,"powif64","","Raises an `f64` to an integer power.",null,null],[5,"sinf32","","Returns the sine of an `f32`.",null,null],[5,"sinf64","","Returns the sine of an `f64`.",null,null],[5,"cosf32","","Returns the cosine of an `f32`.",null,null],[5,"cosf64","","Returns the cosine of an `f64`.",null,null],[5,"powf32","","Raises an `f32` to an `f32` power.",null,null],[5,"powf64","","Raises an `f64` to an `f64` power.",null,null],[5,"expf32","","Returns the exponential of an `f32`.",null,null],[5,"expf64","","Returns the exponential of an `f64`.",null,null],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,null],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,null],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,null],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,null],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,null],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,null],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,null],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,null],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,null],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,null],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,null],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,null],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,null],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,null],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,null],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,null],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,null],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,null],[5,"truncf32","","Returns the integer part of an `f32`.",null,null],[5,"truncf64","","Returns the integer part of an `f64`.",null,null],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,null],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,null],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,null],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,null],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,null],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,null],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,null],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,null],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,null],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,null],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,null],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,null],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,null],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,null],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,null],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,null],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,null],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,null],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,null],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,null],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","core","Basic functions for dealing with memory.",null,null],[5,"forget","core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":null}],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints.",null,null],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[11,"hash","","",7,null],[11,"fmt","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"cmp","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",7,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",7,null],[0,"ptr","core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[3,"Unique","core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"null","","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[11,"new","","Creates a new `Unique`.",8,null],[11,"get","","Dereferences the content.",8,null],[11,"get_mut","","Mutably dereferences the content.",8,null],[11,"deref","","",8,null],[11,"fmt","","",8,null],[11,"new","","Creates a new `Shared`.",9,null],[11,"clone","","",9,null],[11,"deref","","",9,null],[11,"fmt","","",9,null],[0,"marker","core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[3,"PhantomData","core::marker","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"cmp","","",10,null],[11,"clone","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"phantomdata"}}],[0,"ops","core","Overloadable operators.",null,null],[3,"RangeFull","core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",11,null],[12,"end","","The upper bound of the range (exclusive).",11,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",12,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",13,null],[3,"RangeToInclusive","","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",14,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",15,null],[12,"at","core::ops::RangeInclusive","The point at which iteration finished",15,null],[13,"NonEmpty","core::ops","Non-empty range (iteration will yield value(s))",15,null],[12,"start","core::ops::RangeInclusive","The lower bound of the range (inclusive).",15,null],[12,"end","","The upper bound of the range (inclusive).",15,null],[8,"Drop","core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",16,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",17,null],[10,"add","","The method for the `+` operator",17,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",18,null],[10,"sub","","The method for the `-` operator",18,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",19,null],[10,"mul","","The method for the `*` operator",19,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",20,null],[10,"div","","The method for the `/` operator",20,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",21,null],[10,"rem","","The method for the `%` operator",21,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",22,null],[10,"neg","","The method for the unary `-` operator",22,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",23,null],[10,"not","","The method for the unary `!` operator",23,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",24,null],[10,"bitand","","The method for the `&amp;` operator",24,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",25,null],[10,"bitor","","The method for the `|` operator",25,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",26,null],[10,"bitxor","","The method for the `^` operator",26,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",27,null],[10,"shl","","The method for the `&lt;&lt;` operator",27,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",28,null],[10,"shr","","The method for the `&gt;&gt;` operator",28,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",29,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",30,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",31,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",32,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",33,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",34,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",35,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",36,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",37,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",38,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",39,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",39,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",40,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",41,null],[10,"deref","","The method called to dereference a value",41,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",42,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",43,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",44,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",45,null],[10,"call_once","","This is called when the call operator is used.",45,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",46,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",47,null],[10,"make_place","","Creates a fresh place from `self`.",47,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",48,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",48,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",49,null],[16,"Place","","The place that will negotiate the storage of the data.",49,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",49,{"inputs":[{"name":"place"}],"output":{"name":"self"}}],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",50,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"contains","","# Examples",13,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"from","","",15,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",15,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[0,"cmp","core","Functionality for ordering and comparison.",null,null],[4,"Ordering","core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",52,null],[13,"Equal","","An ordering where a compared value is equal [to another].",52,null],[13,"Greater","","An ordering where a compared value is greater [than another].",52,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",53,null],[11,"ne","","This method tests for `!=`.",53,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",54,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",55,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",55,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",55,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",55,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",55,null],[11,"hash","","",52,null],[11,"fmt","","",52,null],[11,"eq","","",52,null],[11,"clone","","",52,null],[11,"reverse","","Reverse the `Ordering`.",52,null],[11,"cmp","","",52,null],[11,"partial_cmp","","",52,null],[0,"clone","core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",56,null],[11,"clone_from","","Performs copy-assignment from `source`.",56,null],[0,"default","core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",57,{"inputs":[],"output":{"name":"self"}}],[0,"convert","core","Traits for conversions between types.",null,null],[8,"AsRef","core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",58,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",59,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",60,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",61,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",62,null],[10,"try_into","","Performs the conversion.",62,null],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",63,null],[10,"try_from","","Performs the conversion.",63,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"borrow","core","A module for working with borrowed data.",null,null],[8,"Borrow","core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",64,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",65,null],[0,"any","core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[8,"Any","","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",66,null],[11,"fmt","core","",66,null],[11,"fmt","","",66,null],[11,"is","","Returns true if the boxed type is the same as `T`",66,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",66,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",66,null],[11,"is","","Forwards to the method defined on the type `Any`.",66,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",66,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",66,null],[11,"hash","core::any","",67,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",67,{"inputs":[],"output":{"name":"typeid"}}],[0,"array","core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",68,null],[10,"as_mut_slice","","Converts the array to mutable slice",68,null],[0,"sync","core","Synchronization primitives",null,null],[0,"atomic","core::sync","Atomic types",null,null],[3,"AtomicBool","core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",69,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto the other threads that perform a load with `Acquire` ordering\non the same value.",69,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin other threads.",69,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",69,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",69,null],[5,"fence","","An atomic fence.",null,{"inputs":[{"name":"ordering"}],"output":null}],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[11,"default","","",70,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"new","","Creates a new `AtomicBool`.",70,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",70,null],[11,"store","","Stores a value into the bool.",70,null],[11,"swap","","Stores a value into the bool, returning the old value.",70,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",70,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",70,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",70,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",70,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",70,null],[11,"new","","Creates a new `AtomicPtr`.",71,null],[11,"load","","Loads a value from the pointer.",71,null],[11,"store","","Stores a value into the pointer.",71,null],[11,"swap","","Stores a value into the pointer, returning the old value.",71,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",71,null],[11,"default","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",72,null],[11,"new","","Creates a new atomic integer.",72,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",72,null],[11,"store","","Stores a value into the atomic integer.",72,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",72,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",72,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",72,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",72,null],[11,"fetch_add","","Add to the current value, returning the previous value.",72,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",72,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",72,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",72,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",72,null],[11,"default","","",73,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",73,null],[11,"new","","Creates a new atomic integer.",73,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",73,null],[11,"store","","Stores a value into the atomic integer.",73,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",73,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",73,null],[11,"fetch_add","","Add to the current value, returning the previous value.",73,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",73,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",73,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",73,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",73,null],[11,"default","","",74,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",74,null],[11,"new","","Creates a new atomic integer.",74,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",74,null],[11,"store","","Stores a value into the atomic integer.",74,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",74,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",74,null],[11,"fetch_add","","Add to the current value, returning the previous value.",74,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",74,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",74,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",74,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",74,null],[11,"default","","",75,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",75,null],[11,"new","","Creates a new atomic integer.",75,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",75,null],[11,"store","","Stores a value into the atomic integer.",75,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",75,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",75,null],[11,"fetch_add","","Add to the current value, returning the previous value.",75,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",75,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",75,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",75,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",75,null],[11,"default","","",76,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",76,null],[11,"new","","Creates a new atomic integer.",76,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",76,null],[11,"store","","Stores a value into the atomic integer.",76,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",76,null],[11,"fetch_add","","Add to the current value, returning the previous value.",76,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",76,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",76,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",76,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",76,null],[11,"default","","",77,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",77,null],[11,"new","","Creates a new atomic integer.",77,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",77,null],[11,"store","","Stores a value into the atomic integer.",77,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",77,null],[11,"fetch_add","","Add to the current value, returning the previous value.",77,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",77,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",77,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",77,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",77,null],[11,"default","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",78,null],[11,"new","","Creates a new atomic integer.",78,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",78,null],[11,"store","","Stores a value into the atomic integer.",78,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",78,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"fetch_add","","Add to the current value, returning the previous value.",78,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",78,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",78,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",78,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",78,null],[11,"default","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"fmt","","",70,null],[11,"fmt","","",71,null],[0,"cell","core","Shareable mutable containers.",null,null],[3,"Cell","core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",82,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",82,null],[13,"Unused","","There are no outstanding borrows on this cell.",82,null],[11,"new","","Creates a new `Cell` containing the given value.",83,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",83,null],[11,"set","","Sets the contained value.",83,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",83,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",83,null],[11,"clone","","",83,null],[11,"default","","",83,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"cmp","","",83,null],[11,"fmt","","",82,null],[11,"eq","","",82,null],[11,"clone","","",82,null],[11,"new","","Creates a new `RefCell` containing `value`.",84,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",84,null],[11,"borrow_state","","Query the current state of this `RefCell`",84,null],[11,"borrow","","Immutably borrows the wrapped value.",84,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",84,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",84,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",84,null],[11,"clone","","",84,null],[11,"default","","",84,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"cmp","","",84,null],[11,"deref","","",85,null],[11,"clone","","Copies a `Ref`.",85,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",85,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",85,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",86,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",86,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",86,null],[11,"deref_mut","","",86,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",87,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",87,null],[11,"get","","Gets a mutable pointer to the wrapped value.",87,null],[11,"default","","",87,{"inputs":[],"output":{"name":"unsafecell"}}],[0,"char","core","Character manipulation.",null,null],[3,"EscapeUnicode","core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"next","","",88,null],[11,"size_hint","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"next","","",89,null],[11,"size_hint","","",89,null],[11,"count","","",89,null],[11,"nth","","",89,null],[11,"last","","",89,null],[11,"fmt","","",90,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"fmt","","",91,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[0,"panicking","core","Panic support for libcore",null,null],[5,"panic","core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","core","Composable external iteration.",null,null],[3,"StepBy","core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"Once","","An iterator that yields an element exactly once.",null,null],[3,"Rev","","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",12,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",15,null],[11,"next","core::iter","",92,null],[11,"size_hint","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next","core::ops","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"next","","",12,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"fmt","core::iter","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"next_back","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"size_hint","","",94,null],[11,"next_back","","",94,null],[11,"len","","",94,null],[11,"clone","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"next_back","","",95,null],[11,"len","","",95,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",96,null],[10,"next","","Advances the iterator and returns the next value.",96,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",96,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",96,null],[11,"last","","Consumes the iterator, returning the last element.",96,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",96,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",96,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",96,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",96,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",96,null],[11,"filter_map","","Creates an iterator that both filters and maps.",96,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",96,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",96,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",96,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",96,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",96,null],[11,"take","","Creates an iterator that yields its first `n` elements.",96,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",96,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",96,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",96,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",96,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",96,null],[11,"collect","","Transforms an iterator into a collection.",96,null],[11,"partition","","Consumes an iterator, creating two collections from it.",96,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",96,null],[11,"all","","Tests if every element of the iterator matches a predicate.",96,null],[11,"any","","Tests if any element of the iterator matches a predicate.",96,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",96,null],[11,"position","","Searches for an element in an iterator, returning its index.",96,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",96,null],[11,"max","","Returns the maximum element of an iterator.",96,null],[11,"min","","Returns the minimum element of an iterator.",96,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",96,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",96,null],[11,"rev","","Reverses an iterator&#39;s direction.",96,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",96,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",96,null],[11,"cycle","","Repeats an iterator endlessly.",96,null],[11,"sum","","Sums the elements of an iterator.",96,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",96,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",96,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",96,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",96,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",96,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",96,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",96,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",96,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",96,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",97,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",97,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",98,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",99,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",99,null],[10,"into_iter","","Creates an iterator from a value.",99,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",100,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",101,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"find","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","# Overflow Behavior",111,null],[11,"size_hint","","",111,null],[11,"nth","","",111,null],[11,"count","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"count","","",112,null],[11,"nth","","",112,null],[11,"last","","",112,null],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,null],[11,"is_empty","","Checks if the iterator has finished iterating.",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"count","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"nth","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"last","","",119,null],[11,"count","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[0,"option","core","Optional values.",null,null],[3,"Iter","core::option","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",121,null],[13,"Some","","Some value `T`",121,null],[11,"hash","","",121,null],[11,"fmt","","",121,null],[11,"cmp","","",121,null],[11,"partial_cmp","","",121,null],[11,"lt","","",121,null],[11,"le","","",121,null],[11,"gt","","",121,null],[11,"ge","","",121,null],[11,"eq","","",121,null],[11,"ne","","",121,null],[11,"clone","","",121,null],[11,"is_some","","Returns `true` if the option is a `Some` value",121,null],[11,"is_none","","Returns `true` if the option is a `None` value",121,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",121,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",121,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",121,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",121,null],[11,"unwrap_or","","Returns the contained value or a default.",121,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",121,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",121,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",121,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",121,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",121,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",121,null],[11,"iter","","Returns an iterator over the possibly contained value.",121,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",121,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",121,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",121,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",121,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",121,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",121,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",121,null],[11,"unwrap_or_default","","Returns the contained value or a default",121,null],[11,"default","","",121,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"clone","","",122,null],[11,"fmt","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"fmt","","",124,null],[11,"clone","","",124,null],[11,"next","","",124,null],[11,"size_hint","","",124,null],[11,"next_back","","",124,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",121,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",125,null],[12,"len","","",125,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",126,null],[12,"vtable","","",126,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",127,null],[11,"clone","","",125,null],[11,"clone","","",126,null],[0,"result","core","Error handling with the `Result` type.",null,null],[3,"Iter","core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",128,null],[13,"Err","","Contains the error value",128,null],[11,"hash","","",128,null],[11,"fmt","","",128,null],[11,"cmp","","",128,null],[11,"partial_cmp","","",128,null],[11,"lt","","",128,null],[11,"le","","",128,null],[11,"gt","","",128,null],[11,"ge","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"is_ok","","Returns true if the result is `Ok`",128,null],[11,"is_err","","Returns true if the result is `Err`",128,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",128,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",128,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",128,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",128,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",128,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",128,null],[11,"iter","","Returns an iterator over the possibly contained value.",128,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",128,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",128,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",128,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",128,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",128,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",128,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",128,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",128,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",128,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",128,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"clone","","",129,null],[11,"fmt","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"fmt","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",128,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[0,"slice","core","Slice management and manipulation",null,null],[3,"Iter","core::slice","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",132,null],[10,"split_at","","",132,null],[10,"iter","","",132,null],[10,"split","","",132,null],[10,"splitn","","",132,null],[10,"rsplitn","","",132,null],[10,"windows","","",132,null],[10,"chunks","","",132,null],[10,"get","","",132,null],[10,"first","","",132,null],[10,"split_first","","",132,null],[10,"split_last","","",132,null],[10,"last","","",132,null],[10,"get_unchecked","","",132,null],[10,"as_ptr","","",132,null],[10,"binary_search","","",132,null],[10,"binary_search_by","","",132,null],[10,"len","","",132,null],[11,"is_empty","","",132,null],[10,"get_mut","","",132,null],[10,"iter_mut","","",132,null],[10,"first_mut","","",132,null],[10,"split_first_mut","","",132,null],[10,"split_last_mut","","",132,null],[10,"last_mut","","",132,null],[10,"split_mut","","",132,null],[10,"splitn_mut","","",132,null],[10,"rsplitn_mut","","",132,null],[10,"chunks_mut","","",132,null],[10,"swap","","",132,null],[10,"split_at_mut","","",132,null],[10,"reverse","","",132,null],[10,"get_unchecked_mut","","",132,null],[10,"as_mut_ptr","","",132,null],[10,"contains","","",132,null],[10,"starts_with","","",132,null],[10,"ends_with","","",132,null],[10,"clone_from_slice","","",132,null],[10,"copy_from_slice","","",132,null],[10,"binary_search_by_key","","",132,null],[11,"fmt","","",133,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"count","","",133,null],[11,"nth","","",133,null],[11,"last","","",133,null],[11,"next_back","","",133,null],[11,"clone","","",133,null],[11,"fmt","","",134,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",134,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"count","","",134,null],[11,"nth","","",134,null],[11,"last","","",134,null],[11,"next_back","","",134,null],[11,"fmt","","",135,null],[11,"clone","","",135,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next_back","","",135,null],[11,"fmt","","",136,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"fmt","","",137,null],[11,"fmt","","",138,null],[11,"fmt","","",139,null],[11,"fmt","","",140,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"next","","",141,null],[11,"size_hint","","",141,null],[11,"count","","",141,null],[11,"nth","","",141,null],[11,"last","","",141,null],[11,"next_back","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"next","","",142,null],[11,"size_hint","","",142,null],[11,"count","","",142,null],[11,"nth","","",142,null],[11,"last","","",142,null],[11,"next_back","","",142,null],[11,"fmt","","",143,null],[11,"next","","",143,null],[11,"size_hint","","",143,null],[11,"count","","",143,null],[11,"nth","","",143,null],[11,"last","","",143,null],[11,"next_back","","",143,null],[0,"str","core","String manipulation",null,null],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",144,null],[12,"next","","Index of the first byte of the next `char`",144,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"pattern","","The string Pattern API.",null,null],[3,"CharSearcher","core::str::pattern","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",145,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",145,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",145,null],[8,"Pattern","","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",146,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",146,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",146,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",146,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",146,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",147,null],[10,"next","","Performs the next search step starting from the front.",147,null],[11,"next_match","","Find the next `Match` result. See `next()`",147,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",147,null],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",148,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",148,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",148,null],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[11,"fmt","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"clone","","",145,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"haystack","","",149,null],[11,"next","","",149,null],[11,"next_match","","",149,null],[11,"next_reject","","",149,null],[11,"next_back","","",149,null],[11,"next_match_back","","",149,null],[11,"next_reject_back","","",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"haystack","","",150,null],[11,"next","","",150,null],[11,"next_match","","",150,null],[11,"next_reject","","",150,null],[11,"next_back","","",150,null],[11,"next_match_back","","",150,null],[11,"next_reject_back","","",150,null],[11,"clone","","",151,null],[11,"fmt","","",151,null],[11,"haystack","","",151,null],[11,"next","","",151,null],[11,"next_match","","",151,null],[11,"next_reject","","",151,null],[11,"next_back","","",151,null],[11,"next_match_back","","",151,null],[11,"next_reject_back","","",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"haystack","","",152,null],[11,"next","","",152,null],[11,"next_match","","",152,null],[11,"next_back","","",152,null],[11,"next_match_back","","",152,null],[8,"FromStr","core::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",153,null],[10,"from_str","","Parses a string `s` to return a value of this type.",153,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",154,null],[11,"fmt","","",154,null],[11,"fmt","","",155,null],[11,"clone","","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",155,null],[11,"fmt","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"next","","",156,null],[11,"size_hint","","",156,null],[11,"next_back","","",156,null],[11,"as_str","","View the underlying data as a subslice of the original data.",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"next_back","","",157,null],[11,"as_str","","View the underlying data as a subslice of the original data.",157,null],[11,"fmt","","",158,null],[11,"clone","","",158,null],[11,"next","","",158,null],[11,"size_hint","","",158,null],[11,"count","","",158,null],[11,"last","","",158,null],[11,"nth","","",158,null],[11,"next_back","","",158,null],[11,"len","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"next_back","","",159,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"next","","",161,null],[11,"clone","","",161,null],[11,"fmt","","",162,null],[11,"next","","",162,null],[11,"clone","","",162,null],[11,"next_back","","",161,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"next","","",163,null],[11,"clone","","",163,null],[11,"fmt","","",164,null],[11,"next","","",164,null],[11,"clone","","",164,null],[11,"fmt","","",165,null],[11,"next","","",165,null],[11,"clone","","",165,null],[11,"fmt","","",166,null],[11,"next","","",166,null],[11,"clone","","",166,null],[11,"next_back","","",165,null],[11,"next_back","","",166,null],[11,"fmt","","",167,null],[11,"next","","",167,null],[11,"clone","","",167,null],[11,"fmt","","",168,null],[11,"next","","",168,null],[11,"clone","","",168,null],[11,"next_back","","",167,null],[11,"next_back","","",168,null],[11,"fmt","","",169,null],[11,"clone","","",169,null],[11,"next","","",169,null],[11,"size_hint","","",169,null],[11,"next_back","","",169,null],[11,"fmt","","",170,null],[11,"clone","","",170,null],[11,"next","","",170,null],[11,"size_hint","","",170,null],[11,"next_back","","",170,null],[11,"fmt","","",144,null],[11,"clone","","",144,null],[0,"hash","core","Generic hashing support.",null,null],[3,"SipHasher","core::hash","An implementation of SipHash 2-4.",null,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[11,"fmt","","",171,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",171,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",171,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",171,null],[11,"finish","","",171,null],[11,"clone","","",171,null],[11,"default","","",171,{"inputs":[],"output":{"name":"siphasher"}}],[8,"Hash","","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",172,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",172,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",173,null],[10,"write","","Writes some data into this `Hasher`",173,null],[11,"write_u8","","Write a single `u8` into this hasher",173,null],[11,"write_u16","","Write a single `u16` into this hasher.",173,null],[11,"write_u32","","Write a single `u32` into this hasher.",173,null],[11,"write_u64","","Write a single `u64` into this hasher.",173,null],[11,"write_usize","","Write a single `usize` into this hasher.",173,null],[11,"write_i8","","Write a single `i8` into this hasher.",173,null],[11,"write_i16","","Write a single `i16` into this hasher.",173,null],[11,"write_i32","","Write a single `i32` into this hasher.",173,null],[11,"write_i64","","Write a single `i64` into this hasher.",173,null],[11,"write_isize","","Write a single `isize` into this hasher.",173,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",174,null],[10,"build_hasher","","Creates a new hasher.",174,null],[11,"fmt","","",175,null],[11,"build_hasher","","",175,null],[11,"clone","","",175,null],[11,"default","","",175,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[0,"fmt","core","Utilities for formatting and printing strings.",null,null],[3,"DebugStruct","core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",176,null],[13,"Right","","Indication that contents should be right-aligned.",176,null],[13,"Center","","Indication that contents should be center-aligned.",176,null],[13,"Unknown","","No alignment was requested.",176,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",177,null],[11,"finish","","Finishes output and returns any error encountered.",177,null],[11,"field","","Adds a new field to the generated tuple struct output.",178,null],[11,"finish","","Finishes output and returns any error encountered.",178,null],[11,"entry","","Adds a new entry to the set output.",179,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",179,null],[11,"finish","","Finishes output and returns any error encountered.",179,null],[11,"entry","","Adds a new entry to the list output.",180,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",180,null],[11,"finish","","Finishes output and returns any error encountered.",180,null],[11,"entry","","Adds a new entry to the map output.",181,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",181,null],[11,"finish","","Finishes output and returns any error encountered.",181,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",182,null],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",182,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",182,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",183,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",184,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",185,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",186,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",187,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",188,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",189,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",190,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",191,null],[11,"fmt","","",176,null],[11,"partial_cmp","","",192,null],[11,"eq","","",192,null],[11,"cmp","","",192,null],[11,"hash","","",192,null],[11,"default","","",192,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",192,null],[11,"clone","","",192,null],[11,"clone","","",193,null],[11,"fmt","","",193,null],[11,"fmt","","",193,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",194,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",194,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",194,null],[11,"write_fmt","","Writes some formatted information into this instance",194,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",194,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",194,null],[11,"align","","Flag indicating what form of alignment was requested",194,null],[11,"width","","Optionally specified integer width that the output should be",194,null],[11,"precision","","Optionally specified precision for numeric types",194,null],[11,"sign_plus","","Determines if the `+` flag was specified.",194,null],[11,"sign_minus","","Determines if the `-` flag was specified.",194,null],[11,"alternate","","Determines if the `#` flag was specified.",194,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",194,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",194,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",194,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",194,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",194,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",194,null],[11,"write_str","","",194,null],[11,"write_char","","",194,null],[11,"write_fmt","","",194,null],[11,"fmt","","",192,null],[11,"fmt","core::marker","",10,null],[11,"fmt","core::cell","",83,null],[11,"fmt","","",84,null],[11,"fmt","","",85,null],[11,"fmt","","",86,null],[11,"fmt","","",87,null],[14,"panic!","core","Entry point of thread panic, for details, see std::macros",null,null],[14,"assert!","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime.",null,null],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other.",null,null],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. Can only be used in\nfunctions that return `Result` because of the early return of `Err` that\nit provides.",null,null],[14,"write!","","Use the `format!` syntax to write data into a buffer.",null,null],[14,"writeln!","","Use the `format!` syntax to write data into a buffer, appending a newline.",null,null],[14,"unreachable!","","A utility macro for indicating unreachable code.",null,null],[14,"unimplemented!","","A standardized placeholder for marking unfinished code. It panics with the\nmessage `&quot;not yet implemented&quot;` when executed.",null,null],[11,"size_hint","core::iter","Returns the bounds on the remaining length of the iterator.",96,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",96,null],[11,"last","","Consumes the iterator, returning the last element.",96,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",96,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",96,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",96,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",96,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",96,null],[11,"filter_map","","Creates an iterator that both filters and maps.",96,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",96,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",96,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",96,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",96,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",96,null],[11,"take","","Creates an iterator that yields its first `n` elements.",96,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",96,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",96,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",96,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",96,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",96,null],[11,"collect","","Transforms an iterator into a collection.",96,null],[11,"partition","","Consumes an iterator, creating two collections from it.",96,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",96,null],[11,"all","","Tests if every element of the iterator matches a predicate.",96,null],[11,"any","","Tests if any element of the iterator matches a predicate.",96,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",96,null],[11,"position","","Searches for an element in an iterator, returning its index.",96,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",96,null],[11,"max","","Returns the maximum element of an iterator.",96,null],[11,"min","","Returns the minimum element of an iterator.",96,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",96,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",96,null],[11,"rev","","Reverses an iterator&#39;s direction.",96,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",96,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",96,null],[11,"cycle","","Repeats an iterator endlessly.",96,null],[11,"sum","","Sums the elements of an iterator.",96,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",96,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",96,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",96,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",96,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",96,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",96,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",96,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",96,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",96,null],[11,"len","","Returns the exact number of times the iterator will iterate.",102,null]],"paths":[[3,"Wrapping"],[4,"FpCategory"],[3,"ParseFloatError"],[8,"Zero"],[8,"One"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeToInclusive"],[4,"RangeInclusive"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"RangeFull"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"Any"],[3,"TypeId"],[8,"FixedSizeArray"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicPtr"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[4,"BorrowState"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[8,"Iterator"],[8,"Step"],[8,"FromIterator"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"ExactSizeIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"SliceExt"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"CharRange"],[4,"SearchStep"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[8,"FromStr"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"]]};
initSearch(searchIndex);
