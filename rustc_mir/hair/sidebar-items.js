initSidebarItems({"enum":[["BindingMode",""],["ExprKind",""],["ExprRef",""],["LogicalOp",""],["PatternKind",""],["PatternRef",""],["StmtKind",""],["StmtRef",""]],"struct":[["Arm",""],["Block",""],["Expr",""],["FieldExprRef",""],["FieldPatternRef",""],["ItemRef",""],["Pattern",""],["Stmt",""]],"trait":[["Hair",""],["Mirror","\"Mirroring\" is the process of converting from a Hair type into one of the types in this file. For example, the mirror of a `H::Expr` is an `Expr<H>`. Mirroring is the point at which the actual IR is converting into the more idealized representation described in this file. Mirroring is gradual: when you mirror an outer expression like `e1 + e2`, the references to the inner expressions `e1` and `e2` are `ExprRef<H>` instances, and they may or may not be eagerly mirrored.  This allows a single AST node from the compiler to expand into one or more Hair nodes, which lets the Hair nodes be simpler."]]});