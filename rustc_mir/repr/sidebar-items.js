initSidebarItems({"constant":[["DIVERGE_BLOCK","where execution ends, on panic"],["END_BLOCK","where execution ends, on normal return"],["START_BLOCK","where execution begins"]],"enum":[["AggregateKind",""],["BinOp",""],["BorrowKind",""],["CastKind",""],["DropKind",""],["GraphExtentExit",""],["Literal",""],["Lvalue","A path to a value; something that can be evaluated without changing or disturbing program state."],["Mutability",""],["Operand",""],["ProjectionElem",""],["Rvalue",""],["StatementKind",""],["Terminator",""],["UnOp",""]],"struct":[["ArgDecl",""],["BasicBlock","The index of a particular basic block. The index is into the `basic_blocks` list of the `Mir`."],["BasicBlockData",""],["CallData",""],["Constant",""],["ExecutionPoint","A moment in the flow of execution. It corresponds to a point in between two statements:"],["Field","Index into the list of fields found in a `VariantDef`"],["GraphExtent","A single-entry-multiple-exit region in the graph. We build one of these for every node-id during MIR construction. By construction we are assured that the entry dominates all points within, and that, for every interior point X, it is postdominated by some exit."],["Mir","Lowered representation of a single function."],["Projection","The `Projection` data structure defines things of the form `B.x` or `*B` or `B[index]`. Note that it is parameterized because it is shared between `Constant` and `Lvalue`. See the aliases `LvalueProjection` etc below."],["Statement",""],["TempDecl",""],["VarDecl",""]],"type":[["LvalueElem","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is an operand."],["LvalueProjection","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is an operand."]]});