initSidebarItems({"fn":[["binop_to_string",""],["compute_id_range_for_fn_body","Computes the id range for a single fn body, ignoring nested items."],["empty_generics",""],["float_ty_to_string",""],["ident_to_path",""],["int_ty_to_string","Get a string representation of a signed int type, with its value. We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\""],["is_by_value_binop","Returns `true` if the binary operator takes its arguments by value"],["is_by_value_unop","Returns `true` if the unary operator takes its argument by value"],["is_comparison_binop",""],["is_path",""],["is_shift_binop",""],["lazy_binop",""],["lit_is_str","Returns true if this literal is a string and false otherwise."],["stmt_id",""],["struct_def_is_tuple_like","Returns true if the given struct def is tuple-like; i.e. that its fields are unnamed."],["uint_ty_to_string","Get a string representation of an unsigned int type, with its value. We want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out."],["unop_to_string",""],["walk_pat",""]],"struct":[["IdVisitor",""]]});