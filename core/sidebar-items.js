initSidebarItems({"macro":[["assert","Ensure that a boolean expression is `true` at runtime."],["assert_eq","Asserts that two expressions are equal to each other."],["assert_ne","Asserts that two expressions are not equal to each other."],["cfg","Boolean evaluation of configuration flags."],["column","A macro which expands to the column number on which it was invoked."],["concat","Concatenates literals into a static string slice."],["concat_idents","Concatenate identifiers into one identifier."],["debug_assert","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq","Asserts that two expressions are equal to each other."],["debug_assert_ne","Asserts that two expressions are not equal to each other."],["env","Inspect an environment variable at compile time."],["file","A macro which expands to the file name from which it was invoked."],["format_args","The core macro for formatted string creation & output."],["include","Parse a file as an expression or an item according to the context."],["include_bytes","Includes a file as a reference to a byte array."],["include_str","Includes a utf8-encoded file as a string."],["line","A macro which expands to the line number on which it was invoked."],["module_path","Expands to a string that represents the current module path."],["option_env","Optionally inspect an environment variable at compile time."],["panic","Entry point of thread panic, for details, see std::macros"],["stringify","A macro which stringifies its argument."],["try","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["unimplemented","A standardized placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed."],["unreachable","A utility macro for indicating unreachable code."],["write","Write formatted data into a buffer"],["writeln","Write formatted data into a buffer, with a newline appended."]],"mod":[["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["array","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["borrow","A module for working with borrowed data."],["cell","Shareable mutable containers."],["char","Character manipulation."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["f32","Operations and constants for 32-bits floats (`f32` type)"],["f64","Operations and constants for 64-bits floats (`f64` type)"],["fmt","Utilities for formatting and printing strings."],["hash","Generic hashing support."],["i128","The 128-bit signed integer type."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["intrinsics","rustc compiler intrinsics."],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and types representing basic properties of types."],["mem","Basic functions for dealing with memory."],["nonzero","Exposes the NonZero lang item which provides optimization hints."],["num","Numeric traits and functions for the built-in numeric types."],["ops","Overloadable operators."],["option","Optional values."],["panicking","Panic support for libcore"],["prelude","The libcore prelude"],["ptr","Raw, unsafe pointers, `*const T`, and `*mut T`."],["raw","Contains struct definitions for the layout of compiler built-in types."],["result","Error handling with the `Result` type."],["slice","Slice management and manipulation"],["str","String manipulation"],["sync","Synchronization primitives"],["u128","The 128-bit unsigned integer type."],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["usize","The pointer-sized unsigned integer type."]]});