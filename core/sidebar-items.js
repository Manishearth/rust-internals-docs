initSidebarItems({"macro":[["assert!","Ensure that a boolean expression is `true` at runtime."],["assert_eq!","Asserts that two expressions are equal to each other."],["debug_assert!","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq!","Asserts that two expressions are equal to each other."],["panic!","Entry point of thread panic, for details, see std::macros"],["try!","Helper macro for unwrapping `Result` values while returning early with an error if the value of the expression is `Err`. Can only be used in functions that return `Result` because of the early return of `Err` that it provides."],["unimplemented!","A standardized placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed."],["unreachable!","A utility macro for indicating unreachable code."],["write!","Write formatted data into a buffer"],["writeln!","Write formatted data into a buffer, with appending a newline."]],"mod":[["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["array","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["borrow","A module for working with borrowed data."],["cell","Shareable mutable containers."],["char","Character manipulation."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'."],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["f32","Operations and constants for 32-bits floats (`f32` type)"],["f64","Operations and constants for 64-bits floats (`f64` type)"],["fmt","Utilities for formatting and printing strings."],["hash","Generic hashing support."],["i16","The 16-bit signed integer type."],["i32","The 32-bit signed integer type."],["i64","The 64-bit signed integer type."],["i8","The 8-bit signed integer type."],["intrinsics","rustc compiler intrinsics."],["isize","The pointer-sized signed integer type."],["iter","Composable external iteration."],["marker","Primitive traits and marker types representing basic 'kinds' of types."],["mem","Basic functions for dealing with memory."],["nonzero","Exposes the NonZero lang item which provides optimization hints."],["num","Numeric traits and functions for the built-in numeric types."],["ops","Overloadable operators."],["option","Optional values."],["panicking","Panic support for libcore"],["prelude","The libcore prelude"],["ptr","Raw, unsafe pointers, `*const T`, and `*mut T`."],["raw","Contains struct definitions for the layout of compiler built-in types."],["result","Error handling with the `Result` type."],["slice","Slice management and manipulation"],["str","String manipulation"],["sync","Synchronization primitives"],["u16","The 16-bit unsigned integer type."],["u32","The 32-bit unsigned integer type."],["u64","The 64-bit unsigned integer type."],["u8","The 8-bit unsigned integer type."],["usize","The pointer-sized unsigned integer type."]]});