initSidebarItems({"macro":[["__impl_slice_eq1!",""],["__impl_slice_eq2!",""],["assert!","Ensure that a boolean expression is `true` at runtime."],["assert_eq!","Asserts that two expressions are equal to each other."],["debug_assert!","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq!","Asserts that two expressions are equal to each other, testing equality in both directions."],["panic!","Entry point of thread panic, for details, see std::macros"],["try!","Short circuiting evaluation on Err"],["unimplemented!","A standardised placeholder for marking unfinished code. It panics with the message `\"not yet implemented\"` when executed."],["unreachable!","A utility macro for indicating unreachable code."],["write!","Use the `format!` syntax to write data into a buffer of type `&mut Write`. See `std::fmt` for more information."],["writeln!","Equivalent to the `write!` macro, except that a newline is appended after the message is written."]],"mod":[["any","This module implements the `Any` trait, which enables dynamic typing of any `'static` type through runtime reflection."],["array","Implementations of things like `Eq` for fixed-length arrays up to a certain length. Eventually we should able to generalize to all lengths."],["atomic","Atomic types"],["cell","Shareable mutable containers."],["char","Character manipulation."],["clone","The `Clone` trait for types that cannot be 'implicitly copied'"],["cmp","Functionality for ordering and comparison."],["convert","Traits for conversions between types."],["default","The `Default` trait for types which may have meaningful default values."],["f32","Operations and constants for 32-bits floats (`f32` type)"],["f64","Operations and constants for 64-bits floats (`f64` type)"],["fmt","Utilities for formatting and printing strings"],["hash","Generic hashing support."],["i16","Operations and constants for signed 16-bits integers (`i16` type)"],["i32","Operations and constants for signed 32-bits integers (`i32` type)"],["i64","Operations and constants for signed 64-bits integers (`i64` type)"],["i8","Operations and constants for signed 8-bits integers (`i8` type)"],["intrinsics","rustc compiler intrinsics."],["isize","Operations and constants for pointer-sized signed integers (`isize` type)"],["iter","Composable external iterators"],["marker","Primitive traits and marker types representing basic 'kinds' of types."],["mem","Basic functions for dealing with memory"],["nonzero","Exposes the NonZero lang item which provides optimization hints."],["num","Numeric traits and functions for the built-in numeric types."],["ops","Overloadable operators"],["option","Optional values"],["panicking","Panic support for libcore"],["prelude","The libcore prelude"],["ptr","Raw, unsafe pointers, `*const T`, and `*mut T`"],["raw","Contains struct definitions for the layout of compiler built-in types."],["result","Error handling with the `Result` type"],["simd","SIMD vectors."],["slice","Slice management and manipulation"],["str","String manipulation"],["u16","Operations and constants for unsigned 16-bits integers (`u16` type)"],["u32","Operations and constants for unsigned 32-bits integers (`u32` type)"],["u64","Operations and constants for unsigned 64-bits integer (`u64` type)"],["u8","Operations and constants for unsigned 8-bits integers (`u8` type)"],["usize","Operations and constants for pointer-sized unsigned integers (`usize` type)"]]});