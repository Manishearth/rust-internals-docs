initSidebarItems({"constant":[["LOCAL_CRATE","Item definitions in the currently-compiled crate would have the CrateNum LOCAL_CRATE in their DefId."]],"enum":[["DefLike",""],["FoundAst",""],["InlinedItem","The data we save and restore about an inlined item or method.  This is not part of the AST that we parse from a file, but it becomes part of the tree that we trans."],["InlinedItemRef","A borrowed version of `hir::InlinedItem`."],["LinkagePreference",""],["NativeLibraryKind",""]],"fn":[["validate_crate_name",""]],"mod":[["tls","Metadata encoding and decoding can make use of thread-local encoding and decoding contexts. These allow implementers of serialize::Encodable and Decodable to access information and datastructures that would otherwise not be available to them. For example, we can automatically translate def-id and span information during decoding because the decoding context knows which crate the data is decoded from. Or it allows to make ty::Ty decodable because the context has access to the ty::ctxt that is needed for creating ty::Ty instances.Note, however, that this only works for RBML-based encoding and decoding at the moment."]],"struct":[["ChildItem",""],["CrateSource",""],["DummyCrateStore","A dummy crate store that does not support any non-local crates, for test purposes."],["LinkMeta",""]],"trait":[["CrateStore","A store of Rust crates, through with their metadata can be accessed.The `: Any` bound is a temporary measure that allows access to the backing `rustc_metadata::cstore::CStore` object. It will be removed in the near future - if you need to access internal APIs, please tell us."]]});