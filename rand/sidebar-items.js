initSidebarItems({"mod":[["chacha","The ChaCha random number generator."],["distributions","Sampling from random distributions.This is a generalization of `Rand` to allow parameters to control the exact properties of the generated values, e.g. the mean and standard deviation of a normal distribution. The `Sample` trait is the most general, and allows for generating values that change some state internally. The `IndependentSample` trait is for generating values that do not need to record state."],["isaac","The ISAAC random number generator."],["reseeding","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes."]],"struct":[["AsciiGenerator","Iterator which will continuously generate random ascii characters.This iterator is created via the `gen_ascii_chars` method on `Rng`."],["Closed01","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).Use `Open01` for the closed interval `(0,1)`, and the default `Rand` implementation of `f32` and `f64` for the half-open `[0,1)`."],["Generator","Iterator which will generate a stream of random items.This iterator is created via the `gen_iter` method on `Rng`."],["Open01","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).Use `Closed01` for the closed interval `[0,1]`, and the default `Rand` implementation for `f32` and `f64` for the half-open `[0,1)`."],["XorShiftRng","An Xorshift[1] random number generator.The Xorshift algorithm is not suitable for cryptographic purposes but is very fast. If you do not know for sure that it fits your requirements, use a more secure one such as `IsaacRng` or `OsRng`.[1]: Marsaglia, George (July 2003). \"Xorshift RNGs\". *Journal of Statistical Software*. Vol. 8 (Issue 14)."]],"trait":[["Rng","A random number generator."],["SeedableRng","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times."]]});