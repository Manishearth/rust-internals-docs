initSidebarItems({"fn":[["binop_to_string",""],["compute_id_range_for_fn_body","Computes the id range for a single fn body, ignoring nested items."],["empty_generics",""],["float_ty_to_string",""],["ident_to_pat",""],["ident_to_path",""],["impl_pretty_name","Generate a \"pretty\" name for an `impl` from its type and trait. This is designed so that symbols of `impl`'d methods give some hint of where they came from, (previously they would all just be listed as `__extensions__::method_name::hash`, with no indication of the type)."],["int_ty_max",""],["int_ty_to_string",""],["int_val_to_string",""],["is_by_value_binop","Returns `true` if the binary operator takes its arguments by value"],["is_by_value_unop","Returns `true` if the unary operator takes its argument by value"],["is_comparison_binop",""],["is_path",""],["is_shift_binop",""],["lazy_binop",""],["lit_is_str","Returns true if this literal is a string and false otherwise."],["pat_is_ident","Returns true if the given pattern consists solely of an identifier and false otherwise."],["path_name_eq",""],["path_name_i",""],["path_to_ident",""],["segments_name_eq",""],["stmt_id",""],["struct_field_visibility",""],["uint_ty_max",""],["uint_ty_to_string",""],["uint_val_to_string",""],["unop_to_string",""]],"struct":[["IdRange",""],["IdRangeComputingVisitor",""],["IdVisitor","A visitor that applies its operation to all of the node IDs in a visitable thing."]],"trait":[["IdVisitingOperation",""]]});