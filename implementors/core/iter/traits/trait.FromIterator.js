(function() {var implementors = {};
implementors["alloc"] = ["impl&lt;T:&nbsp;<a class=\"trait\" href=\"core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"alloc/binary_heap/struct.BinaryHeap.html\" title=\"struct alloc::binary_heap::BinaryHeap\">BinaryHeap</a>&lt;T&gt;","impl&lt;K:&nbsp;<a class=\"trait\" href=\"core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>, V&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;(K, V)&gt; for <a class=\"struct\" href=\"alloc/btree_map/struct.BTreeMap.html\" title=\"struct alloc::btree_map::BTreeMap\">BTreeMap</a>&lt;K, V&gt;","impl&lt;T:&nbsp;<a class=\"trait\" href=\"core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"alloc/btree_set/struct.BTreeSet.html\" title=\"struct alloc::btree_set::BTreeSet\">BTreeSet</a>&lt;T&gt;","impl&lt;T&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"alloc/linked_list/struct.LinkedList.html\" title=\"struct alloc::linked_list::LinkedList\">LinkedList</a>&lt;T&gt;","impl <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;char&gt; for <a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>","impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;&amp;'a char&gt; for <a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>","impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;&amp;'a str&gt; for <a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>","impl <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>","impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, str&gt;&gt; for <a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>","impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;char&gt; for <a class=\"enum\" href=\"alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, str&gt;","impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;&amp;'b str&gt; for <a class=\"enum\" href=\"alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, str&gt;","impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt; for <a class=\"enum\" href=\"alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, str&gt;","impl&lt;T&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;","impl&lt;'a, T&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"enum\" href=\"alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, [T]&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,&nbsp;</span>","impl&lt;A&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;A&gt; for <a class=\"struct\" href=\"alloc/vec_deque/struct.VecDeque.html\" title=\"struct alloc::vec_deque::VecDeque\">VecDeque</a>&lt;A&gt;",];
implementors["proc_macro"] = ["impl&lt;T:&nbsp;<a class=\"trait\" href=\"core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a>&gt;&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"proc_macro/struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a>",];
implementors["pulldown_cmark"] = ["impl <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"pulldown_cmark/struct.Options.html\" title=\"struct pulldown_cmark::Options\">Options</a>&gt; for <a class=\"struct\" href=\"pulldown_cmark/struct.Options.html\" title=\"struct pulldown_cmark::Options\">Options</a>",];
implementors["rustc"] = ["impl&lt;'tcx&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"rustc/ty/struct.DtorckConstraint.html\" title=\"struct rustc::ty::DtorckConstraint\">DtorckConstraint</a>&lt;'tcx&gt;&gt; for <a class=\"struct\" href=\"rustc/ty/struct.DtorckConstraint.html\" title=\"struct rustc::ty::DtorckConstraint\">DtorckConstraint</a>&lt;'tcx&gt;",];
implementors["rustc_data_structures"] = ["impl&lt;A:&nbsp;<a class=\"trait\" href=\"rustc_data_structures/array_vec/trait.Array.html\" title=\"trait rustc_data_structures::array_vec::Array\">Array</a>&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;A::<a class=\"type\" href=\"rustc_data_structures/array_vec/trait.Array.html#associatedtype.Element\" title=\"type rustc_data_structures::array_vec::Array::Element\">Element</a>&gt; for <a class=\"enum\" href=\"rustc_data_structures/accumulate_vec/enum.AccumulateVec.html\" title=\"enum rustc_data_structures::accumulate_vec::AccumulateVec\">AccumulateVec</a>&lt;A&gt;","impl&lt;A:&nbsp;<a class=\"trait\" href=\"rustc_data_structures/array_vec/trait.Array.html\" title=\"trait rustc_data_structures::array_vec::Array\">Array</a>&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;A::<a class=\"type\" href=\"rustc_data_structures/array_vec/trait.Array.html#associatedtype.Element\" title=\"type rustc_data_structures::array_vec::Array::Element\">Element</a>&gt; for <a class=\"struct\" href=\"rustc_data_structures/small_vec/struct.SmallVec.html\" title=\"struct rustc_data_structures::small_vec::SmallVec\">SmallVec</a>&lt;A&gt;","impl <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"std/primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"rustc_data_structures/bitvec/struct.BitVector.html\" title=\"struct rustc_data_structures::bitvec::BitVector\">BitVector</a>","impl&lt;I:&nbsp;<a class=\"trait\" href=\"rustc_data_structures/indexed_vec/trait.Idx.html\" title=\"trait rustc_data_structures::indexed_vec::Idx\">Idx</a>, T&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"rustc_data_structures/indexed_vec/struct.IndexVec.html\" title=\"struct rustc_data_structures::indexed_vec::IndexVec\">IndexVec</a>&lt;I, T&gt;",];
implementors["syntax"] = ["impl <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"syntax/parse/parser/struct.Restrictions.html\" title=\"struct syntax::parse::parser::Restrictions\">Restrictions</a>&gt; for <a class=\"struct\" href=\"syntax/parse/parser/struct.Restrictions.html\" title=\"struct syntax::parse::parser::Restrictions\">Restrictions</a>","impl&lt;T&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"syntax/ptr/struct.P.html\" title=\"struct syntax::ptr::P\">P</a>&lt;<a class=\"primitive\" href=\"std/primitive.slice.html\">[</a>T<a class=\"primitive\" href=\"std/primitive.slice.html\">]</a>&gt;","impl&lt;T:&nbsp;<a class=\"trait\" href=\"core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"syntax/tokenstream/struct.TokenStream.html\" title=\"struct syntax::tokenstream::TokenStream\">TokenStream</a>&gt;&gt; <a class=\"trait\" href=\"core/iter/traits/trait.FromIterator.html\" title=\"trait core::iter::traits::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"syntax/tokenstream/struct.TokenStream.html\" title=\"struct syntax::tokenstream::TokenStream\">TokenStream</a>",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
