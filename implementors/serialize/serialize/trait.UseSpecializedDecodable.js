(function() {var implementors = {};
implementors["rustc"] = ["impl <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"struct\" href=\"rustc/hir/def_id/struct.CrateNum.html\" title=\"struct rustc::hir::def_id::CrateNum\">CrateNum</a>","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"struct\" href=\"rustc/middle/const_val/struct.ByteArray.html\" title=\"struct rustc::middle::const_val::ByteArray\">ByteArray</a>&lt;'tcx&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for &amp;'tcx <a class=\"type\" href=\"rustc/ty/subst/type.Substs.html\" title=\"type rustc::ty::subst::Substs\">Substs</a>&lt;'tcx&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for &amp;'tcx <a class=\"struct\" href=\"rustc/ty/struct.Slice.html\" title=\"struct rustc::ty::Slice\">Slice</a>&lt;<a class=\"enum\" href=\"rustc/ty/enum.ExistentialPredicate.html\" title=\"enum rustc::ty::ExistentialPredicate\">ExistentialPredicate</a>&lt;'tcx&gt;&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"type\" href=\"rustc/ty/type.Region.html\" title=\"type rustc::ty::Region\">Region</a>&lt;'tcx&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for &amp;'tcx <a class=\"struct\" href=\"rustc/ty/struct.Const.html\" title=\"struct rustc::ty::Const\">Const</a>&lt;'tcx&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"type\" href=\"rustc/ty/type.Ty.html\" title=\"type rustc::ty::Ty\">Ty</a>&lt;'tcx&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for &amp;'tcx <a class=\"struct\" href=\"rustc/ty/struct.Slice.html\" title=\"struct rustc::ty::Slice\">Slice</a>&lt;<a class=\"type\" href=\"rustc/ty/type.Ty.html\" title=\"type rustc::ty::Ty\">Ty</a>&lt;'tcx&gt;&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"struct\" href=\"rustc/ty/struct.GenericPredicates.html\" title=\"struct rustc::ty::GenericPredicates\">GenericPredicates</a>&lt;'tcx&gt;","impl&lt;'tcx&gt; <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for &amp;'tcx <a class=\"struct\" href=\"rustc/ty/struct.AdtDef.html\" title=\"struct rustc::ty::AdtDef\">AdtDef</a>",];
implementors["syntax"] = ["impl <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"struct\" href=\"syntax/ast/struct.NodeId.html\" title=\"struct syntax::ast::NodeId\">NodeId</a>",];
implementors["syntax_pos"] = ["impl <a class=\"trait\" href=\"serialize/serialize/trait.UseSpecializedDecodable.html\" title=\"trait serialize::serialize::UseSpecializedDecodable\">UseSpecializedDecodable</a> for <a class=\"struct\" href=\"syntax_pos/struct.Span.html\" title=\"struct syntax_pos::Span\">Span</a>",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
