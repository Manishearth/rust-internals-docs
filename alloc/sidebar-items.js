initSidebarItems({"enum":[["Bound","An endpoint of a range of keys."]],"macro":[["format","Creates a `String` using interpolation of runtime expressions."],["vec","Creates a [`Vec`] containing the arguments."]],"mod":[["allocator",""],["arc","Thread-safe reference-counting pointers."],["binary_heap","A priority queue implemented with a binary heap."],["borrow","A module for working with borrowed data."],["boxed","A pointer type for heap allocation."],["btree_map","A map based on a B-Tree."],["btree_set","A set based on a B-Tree."],["fmt","Utilities for formatting and printing `String`s"],["heap",""],["linked_list","A doubly-linked list with owned nodes."],["range","Range syntax."],["raw_vec",""],["rc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["string","A UTF-8 encoded, growable string."],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."],["vec_deque","A double-ended queue implemented with a growable ring buffer."]]});