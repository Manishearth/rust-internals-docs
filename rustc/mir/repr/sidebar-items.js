initSidebarItems({"constant":[["END_BLOCK","where execution ends, on normal return"],["START_BLOCK","where execution begins"]],"enum":[["AggregateKind",""],["BinOp",""],["BorrowKind",""],["CastKind",""],["ItemKind",""],["Literal",""],["Lvalue","A path to a value; something that can be evaluated without changing or disturbing program state."],["Mutability",""],["Operand","These are values that can appear inside an rvalue (or an index lvalue). They are intentionally limited to prevent rvalues from being nested in one another."],["ProjectionElem",""],["Rvalue","Rvalues"],["StatementKind",""],["Terminator",""],["UnOp",""]],"struct":[["ArgDecl","A \"arg\" is one of the function's formal arguments. These are anonymous and distinct from the bindings that the user declares.For example, in this function:there is only one argument, of type `(i32, u32)`, but two bindings (`x` and `y`)."],["BasicBlock","The index of a particular basic block. The index is into the `basic_blocks` list of the `Mir`.(We use a `u32` internally just to save memory.)"],["BasicBlockData",""],["Constant","ConstantsTwo constants are equal if they are the same constant. Note that this does not necessarily mean that they are \"==\" in Rust -- in particular one must be wary of `NaN`!"],["Field","Index into the list of fields found in a `VariantDef`"],["Mir","Lowered representation of a single function."],["Projection","The `Projection` data structure defines things of the form `B.x` or `*B` or `B[index]`. Note that it is parameterized because it is shared between `Constant` and `Lvalue`. See the aliases `LvalueProjection` etc below."],["Statement",""],["TempDecl","A \"temp\" is a temporary that we place on the stack. They are anonymous, always mutable, and have only a type."],["TypedConstVal",""],["VarDecl","A \"variable\" is a binding declared by the user as part of the fn decl, a let, etc."]],"type":[["LvalueElem","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is an operand."],["LvalueProjection","Alias for projections as they appear in lvalues, where the base is an lvalue and the index is an operand."]]});