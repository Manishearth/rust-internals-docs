initSidebarItems({"enum":[["CombineMapType",""],["Constraint","A constraint that influences the inference process."],["GenericKind",""],["ProcessedErrorOrigin",""],["RegionResolutionError",""],["UndoLogEntry",""],["VarValue",""],["VerifyBound","When we introduce a verification step, we wish to test that a particular region (let's call it `'min`) meets some bound. The bound is described the by the following grammar:"]],"struct":[["RegionSnapshot",""],["RegionVarBindings",""],["TaintDirections","When working with skolemized regions, we often wish to find all of the regions that are either reachable from a skolemized region, or which can reach a skolemized region, or both. We call such regions tained regions.  This struct allows you to decide what set of tainted regions you want."],["TwoRegions",""],["Verify","VerifyGenericBound(T, _, R, RS): The parameter type `T` (or associated type) must outlive the region `R`. `T` is known to outlive `RS`. Therefore verify that `R <= RS[i]` for some `i`. Inference variables may be involved (but this verification step doesn't influence inference)."]],"type":[["CombineMap",""]]});