initSidebarItems({"macro":[["bitflags!","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.The flags should only be defined for integer types, otherwise unexpected type errors may occur at compile time.ExamplesThe generated `struct`s can also be extended with type and trait implementations:AttributesAttributes can be attached to the generated `struct` by placing them before the `flags` keyword.Derived traitsThe `PartialEq` and `Clone` traits are automatically derived for the `struct` using the `deriving` attribute. Additional traits can be derived by providing an explicit `deriving` attribute on `flags`.OperatorsThe following operator traits are implemented for the generated `struct`:`BitOr`: union `BitAnd`: intersection `BitXor`: toggle `Sub`: set difference `Not`: set complement MethodsThe following methods are defined for the generated `struct`:`empty`: an empty set of flags `all`: the set of all flags `bits`: the raw value of the flags currently stored `from_bits`: convert from underlying bit representation, unless that            representation contains bits that do not correspond to a flag `from_bits_truncate`: convert from underlying bit representation, dropping                     any bits that do not correspond to flags `is_empty`: `true` if no flags are currently stored `is_all`: `true` if all flags are currently set `intersects`: `true` if there are flags common to both `self` and `other` `contains`: `true` all of the flags in `other` are contained within `self` `insert`: inserts the specified flags in-place `remove`: removes the specified flags in-place `toggle`: the specified flags will be inserted if not present, and removed         if they are."]]});