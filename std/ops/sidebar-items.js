initSidebarItems({"enum":[["GeneratorState","The result of a generator resumption."]],"struct":[["Range","A (half-open) range bounded inclusively below and exclusively above (`start..end`)."],["RangeFrom","A range only bounded inclusively below (`start..`)."],["RangeFull","An unbounded range (`..`)."],["RangeInclusive","An range bounded inclusively below and above (`start..=end`)."],["RangeTo","A range only bounded exclusively above (`..end`)."],["RangeToInclusive","A range only bounded inclusively above (`..=end`)."]],"trait":[["Add","The addition operator `+`."],["AddAssign","The addition assignment operator `+=`."],["BitAnd","The bitwise AND operator `&`."],["BitAndAssign","The bitwise AND assignment operator `&=`."],["BitOr","The bitwise OR operator `|`."],["BitOrAssign","The bitwise OR assignment operator `|=`."],["BitXor","The bitwise XOR operator `^`."],["BitXorAssign","The bitwise XOR assignment operator `^=`."],["BoxPlace","Specialization of `Place` trait supporting `box EXPR`."],["Boxed","Core trait for the `box EXPR` form."],["CoerceUnsized","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee."],["Deref","Used for immutable dereferencing operations, like `*v`."],["DerefMut","Used for mutable dereferencing operations, like in `*v = 1;`."],["Div","The division operator `/`."],["DivAssign","The division assignment operator `/=`."],["Drop","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'."],["Fn","The version of the call operator that takes an immutable receiver."],["FnMut","The version of the call operator that takes a mutable receiver."],["FnOnce","The version of the call operator that takes a by-value receiver."],["Generator","The trait implemented by builtin generator types."],["InPlace","Specialization of `Place` trait supporting `PLACE <- EXPR`."],["Index","Used for indexing operations (`container[index]`) in immutable contexts."],["IndexMut","Used for indexing operations (`container[index]`) in mutable contexts."],["Mul","The multiplication operator `*`."],["MulAssign","The multiplication assignment operator `*=`."],["Neg","The unary negation operator `-`."],["Not","The unary logical negation operator `!`."],["Place","Both `PLACE <- EXPR` and `box EXPR` desugar into expressions that allocate an intermediate \"place\" that holds uninitialized state.  The desugaring evaluates EXPR, and writes the result at the address returned by the `pointer` method of this trait."],["Placer","Interface to implementations of  `PLACE <- EXPR`."],["Rem","The remainder operator `%`."],["RemAssign","The remainder assignment operator `%=`."],["Shl","The left shift operator `<<`."],["ShlAssign","The left shift assignment operator `<<=`."],["Shr","The right shift operator `>>`."],["ShrAssign","The right shift assignment operator `>>=`."],["Sub","The subtraction operator `-`."],["SubAssign","The subtraction assignment operator `-=`."],["Try","A trait for customizing the behavior of the `?` operator."]]});