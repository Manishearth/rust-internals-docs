initSidebarItems({"enum":[["LocalKeyState","Indicator of the state of a thread local storage key."]],"struct":[["LocalKey","A thread local storage key which owns its contents.This key uses the fastest possible implementation available to it for the target platform. It is instantiated with the `thread_local!` macro and the primary method is the `with` method.The `with` method yields a reference to the contained value which cannot be sent across threads or escape the given closure.Initialization and DestructionInitialization is dynamically performed on the first call to `with()` within a thread, and values support destructors which will be run when a thread exits.ExamplesPlatform-specific behaviorNote that a \"best effort\" is made to ensure that destructors for types stored in thread local storage are run, but not all platforms can gurantee that destructors will be run for all types in thread local storage. For example, there are a number of known caveats where destructors are not run:On Unix systems when pthread-based TLS is being used, destructors will not be run for TLS values on the main thread when it exits. Note that the application will exit immediately after the main thread exits as well. On all platforms it's possible for TLS to re-initialize other TLS slots during destruction. Some platforms ensure that this cannot happen infinitely by preventing re-initialization of any slot that has been destroyed, but not all platforms have this guard. Those platforms that do not guard typically have a synthetic limit after which point no more destructors are run. On OSX, initializing TLS during destruction of other TLS slots can sometimes cancel *all* destructors for the current thread, whether or not the slots have already had their destructors run or not."]]});