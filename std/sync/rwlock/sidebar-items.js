initSidebarItems({"constant":[["RW_LOCK_INIT","Constant initialization for a statically-initialized rwlock."]],"struct":[["RwLock","A reader-writer lockThis type of lock allows a number of readers or at most one writer at any point in time. The write portion of this lock typically allows modification of the underlying data (exclusive access) and the read portion of this lock typically allows for read-only access (shared access).The priority policy of the lock is dependent on the underlying operating system's implementation, and this type does not guarantee that any particular policy will be used.The type parameter `T` represents the data that this lock protects. It is required that `T` satisfies `Send` to be shared across threads and `Sync` to allow concurrent access through readers. The RAII guards returned from the locking methods implement `Deref` (and `DerefMut` for the `write` methods) to allow access to the contained of the lock.PoisoningRwLocks, like Mutexes, will become poisoned on panics. Note, however, that an RwLock may only be poisoned if a panic occurs while it is locked exclusively (write mode). If a panic occurs in any reader, then the lock will not be poisoned.Examples"],["RwLockReadGuard","RAII structure used to release the shared read access of a lock when dropped."],["RwLockWriteGuard","RAII structure used to release the exclusive write access of a lock when dropped."],["StaticRwLock","Structure representing a statically allocated RwLock.This structure is intended to be used inside of a `static` and will provide automatic global access as well as lazy initialization. The internal resources of this RwLock, however, must be manually deallocated.Examples"]]});