initSidebarItems({"enum":[["SocketAddr","Representation of a socket address for networking applications.A socket address can either represent the IPv4 or IPv6 protocol and is paired with at least a port number as well. Each protocol may have more specific information about the address available to it as well."]],"struct":[["SocketAddrV4","An IPv4 socket address which is a (ip, port) combination."],["SocketAddrV6","An IPv6 socket address."]],"trait":[["ToSocketAddrs","A trait for objects which can be converted or resolved to one or more `SocketAddr` values.This trait is used for generic address resolution when constructing network objects.  By default it is implemented for the following types:`SocketAddr`, `SocketAddrV4`, `SocketAddrV6` - `to_socket_addrs` is identity function.`(IpvNAddr, u16)` - `to_socket_addrs` constructs `SocketAddr` trivially.`(&str, u16)` - the string should be either a string representation of an IP address expected by `FromStr` implementation for `IpvNAddr` or a host name.`&str` - the string should be either a string representation of a `SocketAddr` as expected by its `FromStr` implementation or a string like `<host_name>:<port>` pair where `<port>` is a `u16` value.This trait allows constructing network objects like `TcpStream` or `UdpSocket` easily with values of various types for the bind/connection address. It is needed because sometimes one type is more appropriate than the other: for simple uses a string like `\"localhost:12345\"` is much nicer than manual construction of the corresponding `SocketAddr`, but sometimes `SocketAddr` value is *the* main source of the address, and converting it to some other type (e.g. a string) just for it to be converted back to `SocketAddr` in constructor methods is pointless.Some examples:"]]});