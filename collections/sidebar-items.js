initSidebarItems({"enum":[["Bound","An endpoint of a range of keys."]],"macro":[["format!","Use the syntax described in `std::fmt` to create a value of type `String`. See `std::fmt` for more information."],["vec!","Creates a `Vec` containing the arguments."]],"mod":[["binary_heap","A priority queue implemented with a binary heap."],["bit_set",""],["bit_vec",""],["borrow","A module for working with borrowed data."],["boxed","A pointer type for heap allocation."],["btree_map",""],["btree_set",""],["enum_set","A structure for holding a set of enum variants."],["fmt","Utilities for formatting and printing strings"],["linked_list","A doubly-linked list with owned nodes."],["range","Range syntax."],["slice","Utilities for slice manipulation"],["str","Unicode string manipulation (the `str` type)."],["string","An owned, growable string that enforces that its contents are valid UTF-8."],["vec","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],["vec_deque","VecDeque is a double-ended queue, which is implemented with the help of a growing ring buffer."],["vec_map","A simple map based on a vector for small integer keys. Space requirements are O(highest integer key)."]],"primitive":[["slice","Utilities for slice manipulation"],["str","Unicode string manipulation (the `str` type)."]],"struct":[["BTreeMap","A map based on a B-Tree."],["BTreeSet","A set based on a B-Tree."],["BitSet","An implementation of a set using a bit vector as an underlying representation for holding unsigned numerical elements."],["BitVec","The bitvector type."]]});